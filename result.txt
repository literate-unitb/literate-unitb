=== prop_brackets from ./Document/Tests/TrainStation.hs:60 ===

=== prop_open_brack from ./Document/Tests/TrainStation.hs:63 ===

=== prop_close_brack from ./Document/Tests/TrainStation.hs:66 ===

=== prop_open_close from ./Document/Tests/TrainStation.hs:69 ===

=== prop_close_open from ./Document/Tests/TrainStation.hs:72 ===

=== prop_close_close from ./Document/Tests/TrainStation.hs:75 ===

=== prop_open_open from ./Document/Tests/TrainStation.hs:78 ===

=== prop_parseOk from ./Document/MachineSpec.hs:40 ===
+++ OK, passed 100 tests.
+++ OK, passed 100 tests.
+++ OK, passed 100 tests.

=== prop_type_error from ./Document/MachineSpec.hs:47 ===
=== prop_c from ./Utilities/EditDistance.hs:132 ===

=== prop_expr_parser from ./Document/MachineSpec.hs:53 ===
=== prop_toList_fromList from ./Utilities/Relation.hs:194 ===

=== prop_b from ./Utilities/EditDistance.hs:138 ===
+++ OK, passed 100 tests.

=== prop_fromList_toList from ./Utilities/Relation.hs:198 ===
+++ OK, passed 100 tests.

=== prop_domain_def from ./Utilities/Relation.hs:202 ===
+++ OK, passed 100 tests.

=== prop_range_def from ./Utilities/Relation.hs:205 ===
+++ OK, passed 100 tests.

=== prop_empty_def from ./Utilities/Relation.hs:208 ===
+++ OK, passed 100 tests.

=== prop_apply_def from ./Utilities/Relation.hs:212 ===
+++ OK, passed 100 tests.

=== prop_compose_def from ./Utilities/Relation.hs:216 ===
+++ OK, passed 100 tests.

=== prop_all_valid from ./Utilities/Relation.hs:235 ===

=== prop_a from ./Utilities/EditDistance.hs:144 ===
+++ OK, passed 100 tests.

=== prop_union_def from ./Utilities/Relation.hs:255 ===
+++ OK, passed 100 tests.

=== prop_intersection_def from ./Utilities/Relation.hs:258 ===
+++ OK, passed 100 tests.

=== prop_difference_def from ./Utilities/Relation.hs:261 ===
+++ OK, passed 100 tests.

=== prop_identity_def from ./Utilities/Relation.hs:264 ===
+++ OK, passed 100 tests.

=== prop_ranSubt from ./Utilities/Relation.hs:267 ===
+++ OK, passed 100 tests.

=== prop_ranRestr from ./Utilities/Relation.hs:270 ===
+++ OK, passed 100 tests.

=== prop_domSubt from ./Utilities/Relation.hs:273 ===

=== prop_evalList_is_identity from ./Utilities/Permutation.hs:385 ===

=== prop_u_scc_complete from ./Utilities/Permutation.hs:389 ===
+++ OK, passed 100 tests.

=== prop_domRestr from ./Utilities/Relation.hs:276 ===
+++ OK, passed 100 tests.

=== prop_transpose_def from ./Utilities/Relation.hs:279 ===
+++ OK, passed 100 tests.

=== prop_subset_def from ./Utilities/Relation.hs:282 ===
+++ OK, passed 100 tests.

=== prop_irreflexive_def from ./Utilities/Relation.hs:285 ===
+++ OK, passed 100 tests.

=== prop_symmetric_def from ./Utilities/Relation.hs:288 ===
+++ OK, passed 100 tests.

=== prop_transitive_def from ./Utilities/Relation.hs:291 ===

=== prop_e from ./Utilities/EditDistance.hs:150 ===

=== prop_u_scc_disconnected from ./Utilities/Permutation.hs:394 ===
+++ OK, passed 100 tests.

=== prop_antisymmetric_def from ./Utilities/Relation.hs:294 ===
+++ OK, passed 100 tests.

=== prop_null_def from ./Utilities/Relation.hs:297 ===
+++ OK, passed 100 tests.

=== prop_image_def from ./Utilities/Relation.hs:300 ===
+++ OK, passed 100 tests.

=== prop_closure_is_transitive from ./Utilities/Relation.hs:303 ===

=== prop_u_scc_valid_components from ./Utilities/Permutation.hs:405 ===
+++ OK, passed 100 tests.

=== prop_mapDomain_def from ./Utilities/Relation.hs:308 ===
+- Literate Unit-B Test Suite
|  +- Unit-B Document
|  |  +- basic syntax and scopes
|  |  *** FAILED ***
|  |  +- Contextual predicate visibility rules
|  |  +- The king and his advisors puzzle
|  |  |  +- puzzle, m0
|  |  |  +- puzzle, m1
|  |  |  +- puzzle, proof obligation
ExprStore.to_latex: cannot convert expression to LaTeX: (union vs (mk-set p))
|  |  |  +- puzzle, visit enablement, PO
|  |  |  +- puzzle, visit negation, PO
|  |  |  +- puzzle, m2
|  |  |  +- puzzle, m3
|  |  |  *** FAILED ***
|  |  |  +- puzzle m3, wd of sums
|  |  |  +- puzzle m3, proofs with sums
|  |  |  +- puzzle, m4
|  |  |  +- puzzle, deleted variables, m3
|  |  |  +- puzzle, deleted variables, m4
|  |  |  +- puzzle, error: invariant referring to deleted variable
|  |  |  +- puzzle, error: assignment to deleted variable
|  |  |  +- test 16, puzzle, removing actions, m3
|  |  |  +- test 17, puzzle, removed actions, m4
|  |  |  +- test 18, simulation proof obligation
|  |  |  +- test 19, simulation proof obligation (init)
|  |  |  +- test 20, crashing proof obligation of invariant with witness
|  |  |  +- test 21, deleting non-existant action
|  |  |  +- test 22, error providing a witness for non-deleted variable
|  |  |  +- test 23, error deleting non-existant variable
|  |  |  +- test 24, inherited vs local invariants
|  |  |  +- test 25, error: schedules and guards refer to deleted variables
|  |  |  +- test 27, old guards / new guards
|  |  |  +- test 28, illegal type application
|  |  |  +- [ Success: 25 / 27 ]
|  |  +- Unless / except clause
|  |  |  +- test 0, unless/except without indices
|  |  |  +- test 1, unless/except with indices and free variables
|  |  |  +- [ Success: 2 / 2 ]
|  |  +- Specification and refinement of a lock-free algorithm
|  |  |  +- test 0, verification, specification with intervals
|  |  |  +- test 1, verification, failed proof with intervals
|  |  |  +- test 2, error message name clash in guards
|  |  |  +- test 3, verification, looking up function outside of domain
|  |  |  +- test 4, m1, liveness implemented with conditional behavior
|  |  |  +- test 5, transient, two branches, enablement of non-empty
|  |  |  +- test 6, transient, two branches, enablement of empty
|  |  |  +- test 7, transient, two branches, negation of empty
|  |  |  +- test 8, transient, two branches, negation of non-empty
|  |  |  +- test 9, transient, two branches, follow and disjunction
|  |  |  +- test 10, duplicate refinement of liveness properties
|  |  |  +- test 11, missing witness
|  |  |  +- [ Success: 12 / 12 ]
|  |  +- small machine example
|  |  |  +- test 0
|  |  |  +- test 1 (separate machine blocks)
|  |  |  +- test 2 (verification, one failure)
|  |  |  +- test 3 (verification)
|  |  |  +- test 4 (proof obligation, invariance)
|  |  |  +- test 5 (co, 'skip' proof obligation)
|  |  |  +- test 6 (verification, coarse schedule stronger than guard)
|  |  |  +- test 7 (schedulability proof obligation)
|  |  |  +- test 8 (schedulability without selecting schedules (trivially true))
|  |  |  +- test 9 (coarse schedule weakening, PO)
|  |  |  +- test 10 (transient PO, enablement)
|  |  |  +- test 11 (transient PO, negation)
|  |  |  +- test 12 name clash between coarse schedule and co properties
|  |  |  +- [ Success: 13 / 13 ]
|  |  +- table of cubes example
|  |  |  +- test 0 (syntax)
|  |  |  +- test 1 (verification)
|  |  |  *** FAILED ***
|  |  |  +- test 2 (init/fis po)
|  |  |  +- proof of inv0
|  |  |  +- empty proof
|  |  |  +- [ Success: 4 / 5 ]
|  |  +- train station example
|  |  |  +- part 0
|  |  |  |  +- test 0, syntax
|  |  |  |  +- test 21, multiple imports of sets
|  |  |  |  +- [ Success: 2 / 2 ]
|  |  |  +- part 1
|  |  |  |  +- test 1, verification
|  |  |  |  *** FAILED ***
|  |  |  |  +- test 2, proof obligation, INIT/fis, in
|  |  |  |  +- test 20, proof obligation, INIT/fis, loc
|  |  |  |  +- test 3, proof obligation, leave/fis, in'
|  |  |  |  +- test 19, proof obligation, leave/fis, loc'
|  |  |  |  +- test 4, proof obligation, leave/sch
|  |  |  |  +- test 19, quickcheck brackets
|  |  |  |  +- [ Success: 6 / 7 ]
|  |  |  +- part 2
|  |  |  |  +- test 5, proof obligation, leave/en/tr0/WFIS
|  |  |  |  +- test 23, proof obligation, leave/en/tr0/EN
|  |  |  |  +- test 24, proof obligation, leave/en/tr0/NEG
|  |  |  |  +- test 7, undeclared symbol
|  |  |  |  +- test 8, undeclared event (wrt transient)
|  |  |  |  +- test 9, undeclared event (wrt c sched)
|  |  |  |  +- [ Success: 6 / 6 ]
|  |  |  +- part 3
|  |  |  |  +- test 10, undeclared event (wrt indices)
|  |  |  |  +- test 11, undeclared event (wrt assignment)
|  |  |  |  +- test 12, proof obligation leave/INV/inv2
|  |  |  |  +- [ Success: 3 / 3 ]
|  |  |  +- part 4
|  |  |  |  +- test 13, verification, name clash between dummy and index
|  |  |  |  *** FAILED ***
|  |  |  |  +- test 14, verification, non-exhaustive case analysis
|  |  |  |  *** FAILED ***
|  |  |  |  +- test 15, verification, incorrect new assumption
|  |  |  |  *** FAILED ***
|  |  |  |  +- [ Success: 0 / 3 ]
|  |  |  +- part 5
|  |  |  |  +- test 16, verification, proof by parts
|  |  |  |  *** FAILED ***
|  |  |  |  +- test 17, ill-defined types
|  |  |  |  *** FAILED ***
|  |  |  |  +- test 18, assertions have type bool
|  |  |  |  *** FAILED ***
|  |  |  |  +- test 22, missing witness
|  |  |  |  +- [ Success: 1 / 4 ]
|  |  |  +- [ Success: 18 / 25 ]
|  |  +- lambda expressions in the cube example
|  |  |  +- part 0
|  |  |  |  +- test 0, verification, lambda vs empty-fun
|  |  |  |  *** FAILED ***
|  |  |  |  +- test 1, verification, lambda vs ovl, mk-fun
|  |  |  |  *** FAILED ***
|  |  |  |  +- test 2, verification, lambda vs apply
|  |  |  |  *** FAILED ***
|  |  |  |  +- [ Success: 0 / 3 ]
|  |  |  +- part 1
|  |  |  |  +- test 3, verification, set comprehension, failed proof
|  |  |  |  *** FAILED ***
|  |  |  |  +- test 4, adding a progress property
|  |  |  |  +- test 5, unless properties
|  |  |  |  +- [ Success: 2 / 3 ]
|  |  |  +- part 2
|  |  |  |  +- test 6, verify progress refinement
|  |  |  |  *** FAILED ***
|  |  |  |  +- test 7, verify refinement rules
|  |  |  |  *** FAILED ***
|  |  |  |  +- test 8, verify refinement rules
|  |  |  |  *** FAILED ***
|  |  |  |  +- [ Success: 0 / 3 ]
|  |  |  +- part 3
|  |  |  |  +- test 9, verify disjunction rule
|  |  |  |  *** FAILED ***
|  |  |  |  +- test 10, error: cyclic proof
|  |  |  |  +- test 11, intermediate goals of monotonic simplification
|  |  |  |  +- test 12, bound variable with ambiguous type
|  |  |  |  *** FAILED ***
|  |  |  |  +- [ Success: 2 / 4 ]
|  |  |  +- [ Success: 4 / 13 ]
|  |  +- refinement relations in the phase example
|  |  |  +- test 0, cyclic refinement relation between machines
|  |  |  +- test 1, valid references to variables and event declared in ancestor
|  |  |  +- [ Success: 2 / 2 ]
|  |  +- train station example, with refinement
|  |  |  +- verify machine m0 (ref)
|  |  |  +- verify machine m1 (ref)
|  |  |  +- verify machine m2 (ref)
|  |  |  *** FAILED ***
|  |  |  +- verify machine m2 (ref), in many files
|  |  |  *** FAILED ***
|  |  |  +- cyclic proof of liveness through 3 refinements
|  |  |  +- refinement of undefined machine
|  |  |  +- repeated imports
|  |  |  +- [ Success: 5 / 7 ]
|  |  +- train station example, with sets
|  |  |  +- verify machine m0 (sets)
|  |  |  +- verify machine m1 (sets)
|  |  |  +- verify machine m2 (sets)
|  |  |  *** FAILED ***
|  |  |  +- m2, enablement proof obligation
|  |  |  +- m2, transient proof obligation, feasibility
|  |  |  +- m2, transient proof obligation, enablement
|  |  |  +- m2, transient proof obligation, negation
|  |  |  +- m2, safety property of schedule replacement
|  |  |  +- verify machine m3 (sets)
|  |  |  +- type checking of boolean expressions
|  |  |  +- verify machine m3 error (wandering free variable)
|  |  |  +- witness well definedness PO
|  |  |  +- [ Success: 11 / 12 ]
|  |  +- QuickCheck spec of machine parser
|  |  +- the parser is exception free
|  |  +- [ Success: 99 / 122 ]
|  +- Unit-B
|  |  +- 'x eventually increases' verifies
|  |  +- train, model 0, verification
|  |  +- train, m0 transient / falsification PO
|  |  +- Feasibility and partitioning
|  |  +- Debugging the partitioning
|  |  +- genericity
|  |  |  +- unification, t0
|  |  |  +- unification, t1
|  |  |  +- unification, t2
|  |  |  +- unification, t3
|  |  |  +- unification, t4
|  |  |  +- unification, t5
|  |  |  +- unification, t6
|  |  |  +- type instantiation
|  |  |  +- type inference 1
|  |  |  +- type inference 3
|  |  |  +- type inference 4
|  |  |  +- type inference 5
|  |  |  +- instantiation of unified types is unique
|  |  |  +- common type is symmetric
|  |  |  +- common type is symmetric (counter-example)
|  |  |  +- common type is symmetric (counter-example 2)
|  |  |  +- instantiation of unified types is unique (counter examples)
|  |  |  +- type mapping are acyclic
|  |  |  +- one-point rule simplification on existentials
|  |  |  +- [ Success: 19 / 19 ]
|  |  +- [ Success: 24 / 24 ]
|  +- latex parser
|  |  +- sample.tex
|  |  +- sorted seq err.tex
|  |  +- reconstitute sample.tex
|  |  +- reconstitute integers.tex
|  |  +- reconstitute sorted seq.tex
|  |  +- [ Success: 5 / 5 ]
|  +- Z3 test
|  |  +- sample_quant
|  |  +- sample_quant2
|  |  +- sample_quant3
|  |  +- sample proof
|  |  +- check sample calc
|  |  +- canonical lambdas part a
|  |  +- canonical lambdas part b
|  |  +- canonical lambdas with quantifier part a
|  |  +- canonical lambdas with quantifier part b
|  |  +- conversion to first order typing (no type variables)
|  |  +- conversion to first order typing
|  |  +- instantiating type variables by matching some generic types
|  |  +- [ Success: 12 / 12 ]
|  +- Graphs and operator grammars
|  |  +- case 0 - complete domain of matrices
|  |  +- case 2 - new ambiguities
|  |  +- case 3 - transitive closures
|  |  +- case 4 - transitive closures in linear time
|  |  +- Formatting utilities
|  |  |  +- test 0
|  |  |  +- test 1
|  |  |  +- [ Success: 2 / 2 ]
|  |  +- case 5 - error monad
|  |  +- case 6 - union of a list of {sorted} list
|  |  +- case 7 - union of a list of {unsorted} list
+++ OK, passed 100 tests.

=== prop_mapRange_def from ./Utilities/Relation.hs:311 ===
+++ OK, passed 100 tests.

=== prop_cycles_all_valid from ./Utilities/Relation.hs:314 ===

=== prop_f from ./Utilities/EditDistance.hs:156 ===
+++ OK, passed 100 tests.

=== prop_cycles_maximal from ./Utilities/Relation.hs:319 ===

=== prop_g from ./Utilities/EditDistance.hs:162 ===
+++ OK, passed 100 tests.

=== prop_filterDom_def from ./Utilities/Relation.hs:330 ===
+++ OK, passed 100 tests.

=== prop_filterRan_def from ./Utilities/Relation.hs:333 ===
+++ OK, passed 100 tests.

=== prop_mapMaybeDom_def from ./Utilities/Relation.hs:336 ===
+++ OK, passed 100 tests.

=== prop_mapMaybeRan_def from ./Utilities/Relation.hs:341 ===
+++ OK, passed 100 tests.

=== prop_bimapMaybe_def from ./Utilities/Relation.hs:346 ===
+++ OK, passed 100 tests.


=== prop_top_sort_complete from ./Utilities/Permutation.hs:417 ===

|  |  +- case 8 - edit distance, random testing
|  |  +- case 9 - edit distance, regression test from random testing
|  |  +- QuickCheck of graphs
|  |  +- case 11 - Relations, quickcheck

=== prop_top_sort_cycles from ./Utilities/Permutation.hs:424 ===

=== prop_top_sort_singles from ./Utilities/Permutation.hs:430 ===

=== prop_top_sort_order from ./Utilities/Permutation.hs:435 ===

=== prop_closure_complete from ./Utilities/Permutation.hs:467 ===

=== prop_closure_contain_all_edges from ./Utilities/Permutation.hs:470 ===

=== prop_closure_closed from ./Utilities/Permutation.hs:475 ===

=== prop_closure_minimal from ./Utilities/Permutation.hs:481 ===

|  |  +- case 12 - New graphs, quickcheck
|  |  +- [ Success: 14 / 14 ]
|  +- code generation in the cube example
|  |  +- test0: code for the {state}
|  |  +- test1: code for the {event}
|  |  +- test2: code for the {initialization}
|  |  +- test3: code for the {procedure + loop}
|  |  +- test4: {whole source file}
|  |  +- test5: run {source file}
|  |  +- test6: verify {control flow graph}
|  |  +- test7: {concurrent} code
|  |  +- test8: {run concurrent} code
|  |  +- [ Success: 9 / 9 ]
|  +- Documentation generation
ExprStore.to_latex: cannot convert expression to LaTeX: (and (elem t in) (elem (apply loc t) plf))
ExprStore.to_latex: cannot convert expression to LaTeX: (and (elem t in) (elem (apply loc t) plf))
ExprStore.to_latex: cannot convert expression to LaTeX: (not (subset plf (ran loc)))
ExprStore.to_latex: cannot convert expression to LaTeX: true
|  |  +- [ Success: 0 / 4 ]
|  +- [ Success: 163 / 190 ]
+- [ Success: 163 / 190 ]

***************
*** FAILURE ***
***************
Lines of Haskell code:
   38213 total
    1749 Document/Machine.hs
     903 UnitB/PO.hs
     822 Document/Visitor.lhs
     817 Document/Proof.hs
     746 Document/phase.hs
Run time: 1m 24s
