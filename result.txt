+- Unit-B Document
|  +- basic syntax and scopes
|  +- Contextual predicate visibility rules
|  +- Unless / except clause
|  |  +- test 0, unless/except without indices
|  |  +- test 1, unless/except with indices and free variables
|  |  +- [ Success: 2 / 2 ]
|  +- Specification and refinement of a lock-free algorithm
|  |  +- test 0, verification, specification with intervals
|  |  +- test 1, verification, failed proof with intervals
|  |  +- test 2, error message name clash in guards
|  |  +- test 3, verification, looking up function outside of domain
|  |  +- test 4, m1, liveness implemented with conditional behavior
|  |  +- test 5, transient, two branches, enablement of non-empty
|  |  +- test 6, transient, two branches, enablement of empty
|  |  +- test 7, transient, two branches, negation of empty
|  |  +- test 8, transient, two branches, negation of non-empty
|  |  +- test 9, transient, two branches, follow and disjunction
|  |  +- test 10, duplicate refinement of liveness properties
|  |  +- [ Success: 11 / 11 ]
|  +- theories with new notation: comp calc
|  |  +- proving a theorem with the everywhere operator
|  |  +- [ Success: 1 / 1 ]
|  +- theories and proofs
|  |  +- verify proof with galois connections
|  |  +- verify theory 1: indirect (in)equality
|  |  +- verify theory 2: lattices
|  |  +- proofs by symmetry: PO
|  |  +- proofs by symmetry: hypotheses labels
|  |  +- cyclic references between proofs
|  |  +- referring to theorems in automatic proofs (failure)
|  |  +- partial instantiation of theorems in calc. hints
|  |  +- [ Success: 8 / 8 ]
|  +- small machine example
|  |  +- test 0
|  |  +- test 1 (separate machine blocks)
|  |  +- test 2 (verification, one failure)
|  |  +- test 3 (verification)
|  |  +- test 4 (proof obligation, invariance)
|  |  +- test 5 (co, 'skip' proof obligation)
|  |  +- test 6 (verification, coarse schedule stronger than guard)
|  |  +- test 7 (schedulability proof obligation)
|  |  +- test 8 (schedulability without selecting schedules (trivially true))
|  |  +- test 9 (coarse schedule weakening, PO)
|  |  +- test 10 (transient PO, enablement)
|  |  +- test 11 (transient PO, negation)
|  |  +- [ Success: 12 / 12 ]
|  +- table of cubes example
|  |  +- test 0 (syntax)
|  |  +- test 1 (verification)
|  |  +- test 2 (init/fis po)
|  |  +- proof of inv0
|  |  +- empty proof
|  |  +- [ Success: 5 / 5 ]
|  +- train station example
|  |  +- part 0
|  |  |  +- test 0, syntax
|  |  |  +- [ Success: 1 / 1 ]
|  |  +- part 1
|  |  |  +- test 1, verification
|  |  |  +- test 2, proof obligation, INIT/fis, in
|  |  |  +- test 20, proof obligation, INIT/fis, loc
|  |  |  +- test 3, proof obligation, leave/fis, in'
|  |  |  +- test 19, proof obligation, leave/fis, loc'
|  |  |  +- test 4, proof obligation, leave/sch
|  |  |  +- test 19, quickcheck brackets
=== prop_brackets from ./Document/Tests/TrainStation.hs:62 ===
+++ OK, passed 100 tests.

=== prop_open_brack from ./Document/Tests/TrainStation.hs:65 ===
+++ OK, passed 100 tests.

=== prop_close_brack from ./Document/Tests/TrainStation.hs:68 ===
+++ OK, passed 100 tests.

=== prop_open_close from ./Document/Tests/TrainStation.hs:71 ===
+++ OK, passed 100 tests.

=== prop_close_open from ./Document/Tests/TrainStation.hs:74 ===
+++ OK, passed 100 tests.

|  |  |  +- [ Success: 7 / 7 ]
|  |  +- part 2
|  |  |  +- test 5, proof obligation, leave/en/tr0
|  |  |  +- test 7, undeclared symbol
|  |  |  +- test 8, undeclared event (wrt transient)
|  |  |  +- test 9, undeclared event (wrt c sched)
|  |  |  +- [ Success: 4 / 4 ]
|  |  +- part 3
|  |  |  +- test 10, undeclared event (wrt indices)
|  |  |  +- test 11, undeclared event (wrt assignment)
|  |  |  +- test 12, proof obligation leave/INV/inv2
|  |  |  +- [ Success: 3 / 3 ]
|  |  +- part 4
|  |  |  +- test 13, verification, name clash between dummy and index
|  |  |  +- test 14, verification, non-exhaustive case analysis
|  |  |  +- test 15, verification, incorrect new assumption
|  |  |  +- [ Success: 3 / 3 ]
|  |  +- part 5
|  |  |  +- test 16, verification, proof by parts
|  |  |  +- test 17, ill-defined types
|  |  |  +- test 18, assertions have type bool
|  |  |  +- [ Success: 3 / 3 ]
|  |  +- [ Success: 6 / 6 ]
|  +- lambda expressions in the cube example
|  |  +- part 0
|  |  |  +- test 0, verification, lambda vs empty-fun
|  |  |  +- test 1, verification, lambda vs ovl, mk-fun
|  |  |  +- test 2, verification, lambda vs apply
|  |  |  +- [ Success: 3 / 3 ]
|  |  +- part 1
|  |  |  +- test 3, verification, set comprehension, failed proof
|  |  |  +- test 4, adding a progress property
|  |  |  +- test 5, unless properties
|  |  |  +- [ Success: 3 / 3 ]
|  |  +- part 2
|  |  |  +- test 6, verify progress refinement
|  |  |  +- test 7, verify refinement rules
|  |  |  +- test 8, verify refinement rules
|  |  |  +- [ Success: 3 / 3 ]
|  |  +- part 3
|  |  |  +- test 9, verify disjunction rule
|  |  |  +- test 10, error: cyclic proof
|  |  |  +- test 11, intermediate goals of monotonic simplification
|  |  |  +- test 12, bound variable with ambiguous type
|  |  |  +- [ Success: 4 / 4 ]
|  |  +- [ Success: 4 / 4 ]
|  +- refinement relations in the phase example
|  |  +- test 0, cyclic refinement relation between machines
|  |  +- test 1, valid references to variables and event declared in ancestor
|  |  +- [ Success: 2 / 2 ]
|  +- train station example, with refinement
|  |  +- verify machine m0 (ref)
|  |  +- verify machine m1 (ref)
|  |  +- verify machine m2 (ref)
|  |  +- verify machine m2 (ref), in many files
|  |  +- cyclic proof of liveness through 3 refinements
|  |  +- refinement of undefined machine
|  |  +- [ Success: 6 / 6 ]
|  +- train station example, with sets
|  |  +- verify machine m0 (sets)
|  |  +- verify machine m1 (sets)
|  |  +- verify machine m2 (sets)
|  |  +- verify machine m3 (sets)
|  |  +- type checking of boolean expressions
|  |  +- verify machine m3 error (wandering free variable)
|  |  +- [ Success: 6 / 6 ]
|  +- QuickCheck spec of machine parser
=== prop_parseOk from ./Document/MachineSpec.hs:39 ===
+++ OK, passed 100 tests.

=== prop_type_error from ./Document/MachineSpec.hs:46 ===
+++ OK, passed 100 tests.

=== prop_expr_parser from ./Document/MachineSpec.hs:52 ===
+++ OK, passed 100 tests.

|  +- the parser is exception free
|  +- [ Success: 15 / 15 ]
+- Unit-B
|  +- 'x eventually increases' verifies
|  +- train, model 0, verification
|  +- train, m0 transient / falsification PO
|  +- Feasibility and partitioning
|  +- Debugging the partitioning
|  +- genericity
|  |  +- unification, t0
|  |  +- unification, t1
|  |  +- unification, t2
|  |  +- unification, t3
|  |  +- unification, t4
|  |  +- unification, t5
|  |  +- unification, t6
|  |  +- type instantiation
|  |  +- type inference 1
|  |  +- type inference 3
|  |  +- type inference 4
|  |  +- type inference 5
|  |  +- instantiation of unified types is unique
+++ OK, passed 100 tests.
|  |  +- common type is symmetric
+++ OK, passed 100 tests.
|  |  +- instantiation of unified types is unique (counter examples)
|  |  +- type mapping are acyclic
+++ OK, passed 100 tests.
|  |  +- one-point rule simplification on existentials
|  |  +- [ Success: 17 / 17 ]
|  +- [ Success: 6 / 6 ]
+- latex parser
|  +- sample.tex
|  +- sorted seq err.tex
|  +- reconstitute sample.tex
|  +- reconstitute integers.tex
|  +- reconstitute sorted seq.tex
|  +- [ Success: 5 / 5 ]
+- Z3 test
|  +- sample_quant
|  +- sample_quant2
|  +- sample_quant3
|  +- sample proof
|  +- check sample calc
|  +- canonical lambdas
|  +- canonical lambdas with quantifier
|  +- conversion to first order typing (no type variables)
|  +- conversion to first order typing
|  +- instantiating type variables by matching some generic types
|  +- [ Success: 10 / 10 ]
+- Graphs and operator grammars
|  +- case 0 - complete domain of matrices
|  +- case 2 - new ambiguities
|  +- case 3 - transitive closures
|  +- case 4 - transitive closures in linear time
|  +- Formatting utilities
|  |  +- test 0
|  |  +- test 1
|  |  +- [ Success: 2 / 2 ]
|  +- case 5 - error monad
|  +- case 6 - union of a list of {sorted} list
+++ OK, passed 100 tests.
|  +- case 7 - union of a list of {unsorted} list
+++ OK, passed 100 tests.
|  +- case 8 - edit distance, random testing
=== prop_c from ./Utilities/EditDistance.hs:132 ===
+++ OK, passed 100 tests.

=== prop_b from ./Utilities/EditDistance.hs:138 ===
+++ OK, passed 100 tests.

=== prop_a from ./Utilities/EditDistance.hs:144 ===
+++ OK, passed 100 tests.

=== prop_e from ./Utilities/EditDistance.hs:150 ===
+++ OK, passed 100 tests.

=== prop_f from ./Utilities/EditDistance.hs:156 ===
+++ OK, passed 100 tests.

=== prop_g from ./Utilities/EditDistance.hs:162 ===
+++ OK, passed 100 tests.

|  +- case 9 - edit distance, regression test from random testing
|  +- QuickCheck spec of the graph library
|  +- QuickCheck of graphs
|  +- [ Success: 12 / 12 ]
+- code generation in the cube example
|  +- test0: code for the {state}
|  +- test1: code for the {event}
|  +- test2: code for the {initialization}
|  +- test3: code for the {procedure + loop}
|  +- test4: {whole source file}
|  +- test5: run {source file}
|  +- test6: verify {control flow graph}
|  +- test7: {concurrent} code
|  +- [ Success: 8 / 8 ]
+- [ Success: 6 / 6 ]

***************
*** SUCCESS ***
***************
Lines of Haskell code:
   30437 total
    1108 Document/Machine.hs
     867 UnitB/AST.hs
     809 Document/Proof.hs
     742 Utilities/permutation.hs
     712 Document/Expression.hs
Run time: 1m 48s
