+++ OK, passed 100 tests.
=== prop_brackets from ./Document/Tests/TrainStation.hs:63 ===

=== prop_open_brack from ./Document/Tests/TrainStation.hs:66 ===

=== prop_close_brack from ./Document/Tests/TrainStation.hs:69 ===

=== prop_open_close from ./Document/Tests/TrainStation.hs:72 ===

=== prop_close_open from ./Document/Tests/TrainStation.hs:75 ===

=== prop_close_close from ./Document/Tests/TrainStation.hs:78 ===

=== prop_open_open from ./Document/Tests/TrainStation.hs:81 ===

*** EXCEPTION ***
UnitB/PO.hs:914:21-26: Assertion failed "Sequent scopes: 
(pair x1 x2)
(forall ((r1 (\set (Pair _t0 _t1))) (x1 _t0) (x2 _t1)) (=> true (=> (elem (pair x1 x2) r1) (elem x1 (reldom r1)))))
(pair x1 x2)
(pair x1 x2)
(forall ((r1 (\set (Pair _t0 _t1))) (x1 _t0) (x2 _t1)) (=> true (= (elem (pair x1 x2) (seq (asrel (mk-set x1)) r1)) (elem (pair x1 x2) r1))))
(pair x1 x1)
(forall ((x1 _t0)) (=> true (= (asrel (mk-set x1)) (mk-set (pair x1 x1)))))
(pair x1 x3)
(forall ((x1 _t0) (x3 _t0)) (=> true (= (seq (mk-set (pair x1 x3)) all) (seq (asrel (mk-set x1)) all))))
(pair x1 x2)
(pair x4 x5)
(pair x1 x5)
(forall ((x1 _t0) (x2 _t1) (x4 _t2) (x5 _t3)) (=> true (= (seq (seq (mk-set (pair x1 x2)) all) (mk-set (pair x4 x5))) (mk-set (pair x1 x5)))))
(pair x1 x2)
(forall ((x1 _t0) (x2 _t1)) (=> true (= (seq (seq (asrel (mk-set x1)) all) (asrel (mk-set x2))) (mk-set (pair x1 x2)))))
(pair x1 x3)
(forall ((x1 _t0) (x3 _t0)) (=> true (= (elem (pair x1 x3) id) (= x1 x3))))
(pair x1 x3)
(pair x1 x3)
(forall ((rr (\set (Pair _t0 _t0))) (rr2 (\set (Pair _t0 _t0))) (x1 _t0) (x3 _t0)) (=> true (=> (elem (pair x1 x3) (star (intersect rr rr2))) (elem (pair x1 x3) (star rr)))))
(pair x1 x3)
(pair x1 x3)
(forall ((rr (\set (Pair _t0 _t0))) (rr2 (\set (Pair _t0 _t0))) (x1 _t0) (x3 _t0)) (=> true (=> (elem (pair x1 x3) (star rr)) (elem (pair x1 x3) (star (union rr rr2))))))
(pair x1 x2)
(forall ((r1 (\set (Pair _t0 _t1))) (s1 (\set _t0)) (x2 _t1)) (=> true (= (elem x2 (lookup r1 s1)) (exists ((x1 _t0)) (and (elem x1 s1) (elem (pair x1 x2) r1))))))
(pair x1 x2)
(forall ((r1 (\set (Pair _t0 _t1))) (s1 (\set _t0)) (x1 _t0) (x2 _t1)) (=> true (=> (elem x1 s1) (=> (elem (pair x1 x2) r1) (elem x2 (lookup r1 s1))))))
(pair r p_1)
(pair r q)
(pair p_0 p_1)
(pair r q)
(forall ((p_0 Node) (p_1 Node) (q Node)) (=> (elem (pair r p_1) (star ptr)) (=> (elem (pair r q) (star (union ptr (mk-set (pair p_0 p_1))))) (elem (pair r q) (star ptr)))))
",  sort: Node, Pair [a,b], pfun [a,b], set [a]
 apply[_t0,_t1]: (pfun t0 t1) x t0 -> t1
 asrel[_a]: (set a) -> (set (Pair a a))
 const[_a,_b]: b -> (Array a b)
 dom[_t0,_t1]: (pfun t0 t1) -> (set t0)
 dom-rest[_t0,_t1]: (set t0) x (pfun t0 t1) -> (pfun t0 t1)
 dom-subt[_t0,_t1]: (set t0) x (pfun t0 t1) -> (pfun t0 t1)
 empty-fun[_t0,_t1]: (pfun t0 t1)
 finite[_t]: (set t) -> Bool
 id[_a]: (set (Pair a a))
 ident[_a]: (Array a a)
 injective[_t0,_t1]: (pfun t0 t1) -> Bool
 lambda[_a,_b]: (set a) x (Array a b) -> (pfun a b)
 lookup[_a,_b]: (set (Pair a b)) x (set a) -> (set b)
 mk-fun[_t0,_t1]: t0 x t1 -> (pfun t0 t1)
 mk-set[_t]: t -> (set t)
 ovl[_t0,_t1]: (pfun t0 t1) x (pfun t0 t1) -> (pfun t0 t1)
 plus[_a]: (set (Pair a a)) -> (set (Pair a a))
 qsum[_a]: (set a) x (Array a Int) -> Int
 qunion[_a,_b]: (set a) x (Array a (set b)) -> (set b)
 ran[_t0,_t1]: (pfun t0 t1) -> (set t1)
 reldom[_a,_b]: (set (Pair a b)) -> (set a)
 seq[_a,_b,_c]: (set (Pair a b)) x (set (Pair b c)) -> (set (Pair a c))
 set[_a,_b]: (set a) x (Array a b) -> (set b)
 star[_a]: (set (Pair a a)) -> (set (Pair a a))
 tfun[_t0,_t1]: (set t0) x (set t1) -> (set (pfun t0 t1))
 Node: (set Node)  =  ((as const (set Node)) true)
 all[_t] : (set t)  =  ((as const (set t)) true)
 compl[_t] : (s1 (set _t)) -> (set t)  =  ((_ map not) s1)
 elem[_t] : (x _t) x (s1 (set _t)) -> Bool  =  (select s1 x)
 empty-set[_t] : (set t)  =  ((as const (set t)) false)
 set-diff[_t] : (s1 (set _t)) x (s2 (set _t)) -> (set t)  =  (intersect s1 ((_ map not) s2))
 st-subset[_t] : (s1 (set _t)) x (s2 (set _t)) -> Bool  =  (and (subset s1 s2) (not (= s1 s2)))
 free: (set Node)
 live: (set Node)
 ptr: (set (Pair Node Node))
 r: Node
 (elem@@Node r live)
 (= Node (union live free))
 (= (intersect live free) empty-set@@Node)
 (forall ( (term (Array _t Int)) )
         (=> true (= (qsum@@_t empty-set@@_t term) 0)))
 (forall ( (r (set _t))
           (term (Array _t Int))
           (x _t) )
         (=> true
             (=> (not (elem@@_t x r))
                 (= (qsum@@_t (union r (mk-set@@_t x)) term)
                    (+ (qsum@@_t r term) (select term x))))))
 (forall ( (r (set _t))
           (r0 (set _t))
           (term (Array _t Int)) )
         (=> true
             (=> (= (intersect r r0) empty-set@@_t)
                 (= (qsum@@_t (union r r0) term)
                    (+ (qsum@@_t r term) (qsum@@_t r0 term))))))
 (forall ( (r (set _t)) )
         (=> true
             (=> (finite@@_t r)
                 (<= 0 (qsum@@_t r (const@@_t@@Int 1))))))
 (forall ( (r (set _t)) )
         (=> true
             (= (= (qsum@@_t r (const@@_t@@Int 1)) 0)
                (= r empty-set@@_t))))
 (forall ( (x _t) )
         (=> true
             (= (qsum@@_t (mk-set@@_t x) (const@@_t@@Int 1)) 1)))
 (forall ( (r (set _t)) )
         (=> true
             (= (= (qsum@@_t r (const@@_t@@Int 1)) 1)
                (exists ( (x _t) ) (and true (= r (mk-set@@_t x)))))))
 (forall ( (r (set _t))
           (r0 (set _t)) )
         (=> true
             (=> (= (intersect r r0) empty-set@@_t)
                 (= (qsum@@_t (union r r0) (const@@_t@@Int 1))
                    (+ (qsum@@_t r (const@@_t@@Int 1))
                       (qsum@@_t r0 (const@@_t@@Int 1)))))))
 (forall ( (x _t0)
           (y _t1) )
         (=> true (= (select (const@@_t1@@_t0 x) y) x)))
 (forall ( (x _t0) ) (=> true (= (select ident@@_t0 x) x)))
 (= (dom@@_t0@@_t1 empty-fun@@_t0@@_t1)
    empty-set@@_t0)
 (forall ( (t (Array _t0 _t1)) )
         (=> true
             (= (lambda@@_t0@@_t1 empty-set@@_t0 t)
                empty-fun@@_t0@@_t1)))
 (forall ( (r (set _t0))
           (t (Array _t0 _t1)) )
         (=> true (= (dom@@_t0@@_t1 (lambda@@_t0@@_t1 r t)) r)))
 (forall ( (t (Array _t0 _t1))
           (x _t0) )
         (=> true
             (= (lambda@@_t0@@_t1 (mk-set@@_t0 x) t)
                (mk-fun@@_t0@@_t1 x (select t x)))))
 (forall ( (r (set _t0))
           (t (Array _t0 _t1))
           (x _t0) )
         (=> true
             (= (ovl@@_t0@@_t1 (lambda@@_t0@@_t1 r t)
                               (mk-fun@@_t0@@_t1 x (select t x)))
                (lambda@@_t0@@_t1 (union r (mk-set@@_t0 x)) t))))
 (forall ( (r (set _t0))
           (r0 (set _t0))
           (t (Array _t0 _t1)) )
         (=> true
             (= (ovl@@_t0@@_t1 (lambda@@_t0@@_t1 r t) (lambda@@_t0@@_t1 r0 t))
                (lambda@@_t0@@_t1 (union r r0) t))))
 (forall ( (f1 (pfun _t0 _t1)) )
         (=> true
             (= (ovl@@_t0@@_t1 f1 empty-fun@@_t0@@_t1) f1)))
 (forall ( (f1 (pfun _t0 _t1)) )
         (=> true
             (= (ovl@@_t0@@_t1 empty-fun@@_t0@@_t1 f1) f1)))
 (forall ( (x _t0)
           (y _t1) )
         (=> true
             (= (dom@@_t0@@_t1 (mk-fun@@_t0@@_t1 x y))
                (mk-set@@_t0 x))))
 (forall ( (f1 (pfun _t0 _t1))
           (f2 (pfun _t0 _t1))
           (x _t0) )
         (=> true
             (=> (elem@@_t0 x (dom@@_t0@@_t1 f2))
                 (= (apply@@_t0@@_t1 (ovl@@_t0@@_t1 f1 f2) x)
                    (apply@@_t0@@_t1 f2 x)))))
 (forall ( (f1 (pfun _t0 _t1))
           (f2 (pfun _t0 _t1))
           (x _t0) )
         (=> true
             (=> (and (elem@@_t0 x (dom@@_t0@@_t1 f1))
                      (not (elem@@_t0 x (dom@@_t0@@_t1 f2))))
                 (= (apply@@_t0@@_t1 (ovl@@_t0@@_t1 f1 f2) x)
                    (apply@@_t0@@_t1 f1 x)))))
 (forall ( (x _t0)
           (y _t1) )
         (=> true
             (= (apply@@_t0@@_t1 (mk-fun@@_t0@@_t1 x y) x) y)))
 (forall ( (f1 (pfun _t0 _t1))
           (s1 (set _t0))
           (x _t0) )
         (=> true
             (=> (and (elem@@_t0 x s1) (elem@@_t0 x (dom@@_t0@@_t1 f1)))
                 (= (apply@@_t0@@_t1 (dom-rest@@_t0@@_t1 s1 f1) x)
                    (apply@@_t0@@_t1 f1 x)))))
 (forall ( (f1 (pfun _t0 _t1))
           (s1 (set _t0))
           (x _t0) )
         (=> true
             (=> (elem@@_t0 x (set-diff@@_t0 (dom@@_t0@@_t1 f1) s1))
                 (= (apply@@_t0@@_t1 (dom-subt@@_t0@@_t1 s1 f1) x)
                    (apply@@_t0@@_t1 f1 x)))))
 (forall ( (s2 (set _t1)) )
         (=> true
             (elem@Open@@pfun@@_t0@@_t1@Close empty-fun@@_t0@@_t1
                                              (tfun@@_t0@@_t1 empty-set@@_t0 s2))))
 (forall ( (f1 (pfun _t0 _t1))
           (f2 (pfun _t0 _t1)) )
         (=> true
             (= (dom@@_t0@@_t1 (ovl@@_t0@@_t1 f1 f2))
                (union (dom@@_t0@@_t1 f1) (dom@@_t0@@_t1 f2)))))
 (forall ( (f1 (pfun _t0 _t1))
           (s1 (set _t0)) )
         (=> true
             (= (dom@@_t0@@_t1 (dom-rest@@_t0@@_t1 s1 f1))
                (intersect s1 (dom@@_t0@@_t1 f1)))))
 (forall ( (f1 (pfun _t0 _t1))
           (s1 (set _t0)) )
         (=> true
             (= (dom@@_t0@@_t1 (dom-subt@@_t0@@_t1 s1 f1))
                (set-diff@@_t0 (dom@@_t0@@_t1 f1) s1))))
 (forall ( (r (set _t0))
           (t (Array _t0 _t1))
           (x _t0) )
         (=> true
             (=> (elem@@_t0 x r)
                 (= (apply@@_t0@@_t1 (lambda@@_t0@@_t1 r t) x)
                    (select t x)))))
 (forall ( (f1 (pfun _t0 _t1))
           (x _t0)
           (y _t1) )
         (=> true
             (= (and (elem@@_t0 x (dom@@_t0@@_t1 f1))
                     (= (apply@@_t0@@_t1 f1 x) y))
                (= (select f1 x) (Just y)))))
 (forall ( (f1 (pfun _t0 _t1))
           (x _t0)
           (x2 _t0)
           (y _t1) )
         (=> true
             (=> (not (= x x2))
                 (= (apply@@_t0@@_t1 (ovl@@_t0@@_t1 f1 (mk-fun@@_t0@@_t1 x y)) x2)
                    (apply@@_t0@@_t1 f1 x2)))))
 (forall ( (f1 (pfun _t0 _t1))
           (x _t0)
           (y _t1) )
         (=> true
             (= (apply@@_t0@@_t1 (ovl@@_t0@@_t1 f1 (mk-fun@@_t0@@_t1 x y)) x)
                y)))
 (= (ran@@_t0@@_t1 empty-fun@@_t0@@_t1)
    empty-set@@_t1)
 (forall ( (f1 (pfun _t0 _t1))
           (y _t1) )
         (=> true
             (= (elem@@_t1 y (ran@@_t0@@_t1 f1))
                (exists ( (x _t0) )
                        (and true
                             (and (elem@@_t0 x (dom@@_t0@@_t1 f1))
                                  (= (apply@@_t0@@_t1 f1 x) y)))))))
 (forall ( (x _t0)
           (y _t1) )
         (=> true
             (= (ran@@_t0@@_t1 (mk-fun@@_t0@@_t1 x y))
                (mk-set@@_t1 y))))
 (forall ( (f1 (pfun _t0 _t1))
           (s1 (set _t0))
           (s2 (set _t1)) )
         (=> true
             (= (elem@Open@@pfun@@_t0@@_t1@Close f1 (tfun@@_t0@@_t1 s1 s2))
                (and (= s1 (dom@@_t0@@_t1 f1))
                     (subset (ran@@_t0@@_t1 f1) s2)))))
 (forall ( (f1 (pfun _t0 _t1)) )
         (=> true
             (= (injective@@_t0@@_t1 f1)
                (forall ( (x _t0)
                          (x2 _t0) )
                        (=> (and (elem@@_t0 x (dom@@_t0@@_t1 f1))
                                 (elem@@_t0 x2 (dom@@_t0@@_t1 f1)))
                            (=> (= (apply@@_t0@@_t1 f1 x) (apply@@_t0@@_t1 f1 x2))
                                (= x x2)))))))
 (injective@@_t0@@_t1 empty-fun@@_t0@@_t1)
 (forall ( (f1 (pfun _t0 _t1))
           (x _t0) )
         (=> true
             (=> (elem@@_t0 x (dom@@_t0@@_t1 f1))
                 (elem@@_t1 (apply@@_t0@@_t1 f1 x) (ran@@_t0@@_t1 f1)))))
 (forall ( (f1 (pfun _t0 _t1))
           (s1 (set _t0))
           (x _t0) )
         (=> true
             (=> (elem@@_t0 x (set-diff@@_t0 (dom@@_t0@@_t1 f1) s1))
                 (elem@@_t1 (apply@@_t0@@_t1 f1 x)
                            (ran@@_t0@@_t1 (dom-subt@@_t0@@_t1 s1 f1))))))
 (forall ( (f1 (pfun _t0 _t1))
           (s1 (set _t0))
           (x _t0) )
         (=> true
             (=> (elem@@_t0 x (intersect (dom@@_t0@@_t1 f1) s1))
                 (elem@@_t1 (apply@@_t0@@_t1 f1 x)
                            (ran@@_t0@@_t1 (dom-rest@@_t0@@_t1 s1 f1))))))
 (forall ( (f1 (pfun _t0 _t1))
           (x _t0)
           (y _t1) )
         (=> true
             (=> (and (elem@@_t0 x (dom@@_t0@@_t1 f1))
                      (injective@@_t0@@_t1 f1))
                 (= (ran@@_t0@@_t1 (ovl@@_t0@@_t1 f1 (mk-fun@@_t0@@_t1 x y)))
                    (union (set-diff@@_t1 (ran@@_t0@@_t1 f1)
                                          (mk-set@@_t1 (apply@@_t0@@_t1 f1 x)))
                           (mk-set@@_t1 y))))))
 (forall ( (f1 (pfun _t0 _t1))
           (x _t0)
           (y _t1) )
         (=> true
             (=> (not (elem@@_t0 x (dom@@_t0@@_t1 f1)))
                 (= (ran@@_t0@@_t1 (ovl@@_t0@@_t1 f1 (mk-fun@@_t0@@_t1 x y)))
                    (union (ran@@_t0@@_t1 f1) (mk-set@@_t1 y))))))
 (forall ( (x _t)
           (y _t) )
         (=> true (= (elem@@_t x (mk-set@@_t y)) (= x y))))
 (forall ( (r1 (set _t0))
           (term (Array _t0 _t))
           (y _t) )
         (=> true
             (= (elem@@_t y (set@@_t0@@_t r1 term))
                (exists ( (x _t0) )
                        (and (elem@@_t0 x r1) (= (select term x) y))))))
 (forall ( (r1 (set _t0))
           (term (Array _t0 _t))
           (y _t) )
         (=> true
             (= (= (set@@_t0@@_t r1 term) (mk-set@@_t y))
                (forall ( (x _t0) )
                        (=> (elem@@_t0 x r1) (= (select term x) y))))))
 (forall ( (s1 (set _t))
           (s2 (set _t)) )
         (=> true
             (=> (finite@@_t s1) (finite@@_t (set-diff@@_t s1 s2)))))
 (forall ( (s1 (set _t))
           (s2 (set _t)) )
         (=> true
             (=> (and (finite@@_t s1) (finite@@_t s2))
                 (finite@@_t (union s1 s2)))))
 (forall ( (x _t) ) (=> true (finite@@_t (mk-set@@_t x))))
 (finite@@_t empty-set@@_t)
 (forall ( (s1 (set _t))
           (s2 (set _t)) )
         (=> true
             (=> (subset s1 s2)
                 (=> (finite@@_t s2) (finite@@_t s1)))))
 (forall ( (r1 (set _t0)) )
         (=> true (= (set@@_t0@@_t0 r1 ident@@_t0) r1)))
 (forall ( (terms (Array _t0 (set _t))) )
         (=> true
             (= (qunion@@_t0@@_t empty-set@@_t0 terms)
                empty-set@@_t)))
 (forall ( (terms (Array _t0 (set _t)))
           (x _t0) )
         (=> true
             (= (qunion@@_t0@@_t (mk-set@@_t0 x) terms)
                (select terms x))))
 (forall ( (r1 (set _t0))
           (r2 (set _t0))
           (terms (Array _t0 (set _t))) )
         (=> true
             (= (qunion@@_t0@@_t (union r1 r2) terms)
                (union (qunion@@_t0@@_t r1 terms)
                       (qunion@@_t0@@_t r2 terms)))))
 (forall ( (r1 (set _t0))
           (terms (Array _t0 (set _t)))
           (terms0 (Array _t0 (set _t))) )
         (=> true
             (=> (forall ( (x _t0) )
                         (=> (elem@@_t0 x r1)
                             (= (select terms x) (select terms0 x))))
                 (= (qunion@@_t0@@_t r1 terms)
                    (qunion@@_t0@@_t r1 terms0)))))
 (forall ( (r1 (set (Pair _t0 _t1)))
           (x1 _t0)
           (x2 _t1) )
         (=> true
             (=> (elem@Open@@Pair@@_t0@@_t1@Close (pair x1 x2) r1)
                 (elem@@_t0 x1 (reldom@@_t0@@_t1 r1)))))
 (forall ( (r1 (set (Pair _t0 _t1)))
           (s1 (set _t0)) )
         (=> true
             (= (reldom@@_t0@@_t1 (seq@@_t0@@_t0@@_t1 (asrel@@_t0 s1) r1))
                (intersect s1 (reldom@@_t0@@_t1 r1)))))
 (forall ( (r1 (set (Pair _t0 _t1)))
           (x1 _t0)
           (x2 _t1) )
         (=> true
             (= (elem@Open@@Pair@@_t0@@_t1@Close (pair x1 x2)
                                                 (seq@@_t0@@_t0@@_t1 (asrel@@_t0 (mk-set@@_t0 x1)) r1))
                (elem@Open@@Pair@@_t0@@_t1@Close (pair x1 x2) r1))))
 (forall ( (x1 _t0) )
         (=> true
             (= (asrel@@_t0 (mk-set@@_t0 x1))
                (mk-set@Open@@Pair@@_t0@@_t0@Close (pair x1 x1)))))
 (forall ( (r1 (set (Pair _t0 _t1)))
           (r3 (set (Pair _t1 _t2)))
           (r5 (set (Pair _t2 _t3))) )
         (=> true
             (= (seq@@_t0@@_t2@@_t3 (seq@@_t0@@_t1@@_t2 r1 r3) r5)
                (seq@@_t0@@_t1@@_t3 r1 (seq@@_t1@@_t2@@_t3 r3 r5)))))
 (forall ( (r1 (set (Pair _t0 _t1)))
           (r2 (set (Pair _t0 _t1)))
           (r3 (set (Pair _t1 _t2))) )
         (=> true
             (=> (subset r1 r2)
                 (subset (seq@@_t0@@_t1@@_t2 r1 r3)
                         (seq@@_t0@@_t1@@_t2 r2 r3)))))
 (forall ( (r1 (set (Pair _t0 _t1)))
           (r2 (set (Pair _t0 _t1)))
           (r4 (set (Pair _t2 _t0))) )
         (=> true
             (=> (subset r1 r2)
                 (subset (seq@@_t2@@_t0@@_t1 r4 r1)
                         (seq@@_t2@@_t0@@_t1 r4 r2)))))
 (forall ( (rr (set (Pair _t0 _t0)))
           (rr2 (set (Pair _t0 _t0))) )
         (=> true
             (= (star@@_t0 (union rr rr2))
                (seq@@_t0@@_t0@@_t0 (star@@_t0 (seq@@_t0@@_t0@@_t0 (star@@_t0 rr) rr2))
                                    (star@@_t0 rr)))))
 (forall ( (rr (set (Pair _t0 _t0)))
           (rr2 (set (Pair _t0 _t0))) )
         (=> true
             (= (star@@_t0 (union rr rr2))
                (seq@@_t0@@_t0@@_t0 (star@@_t0 rr2)
                                    (star@@_t0 (seq@@_t0@@_t0@@_t0 rr (star@@_t0 rr2)))))))
 (forall ( (rr (set (Pair _t0 _t0))) )
         (=> true
             (= (union (seq@@_t0@@_t0@@_t0 (star@@_t0 rr) rr) id@@_t0)
                (star@@_t0 rr))))
 (forall ( (rr (set (Pair _t0 _t0))) )
         (=> true
             (= (union (seq@@_t0@@_t0@@_t0 rr (star@@_t0 rr)) id@@_t0)
                (star@@_t0 rr))))
 (forall ( (r1 (set (Pair _t0 _t1)))
           (r2 (set (Pair _t0 _t1)))
           (r3 (set (Pair _t1 _t2))) )
         (=> true
             (= (seq@@_t0@@_t1@@_t2 (union r1 r2) r3)
                (union (seq@@_t0@@_t1@@_t2 r1 r3)
                       (seq@@_t0@@_t1@@_t2 r2 r3)))))
 (forall ( (r1 (set (Pair _t0 _t1)))
           (r2 (set (Pair _t0 _t1)))
           (r4 (set (Pair _t2 _t0))) )
         (=> true
             (= (seq@@_t2@@_t0@@_t1 r4 (union r1 r2))
                (union (seq@@_t2@@_t0@@_t1 r4 r1)
                       (seq@@_t2@@_t0@@_t1 r4 r2)))))
 (forall ( (x1 _t0)
           (x3 _t0) )
         (=> true
             (= (seq@@_t0@@_t0@@_t1 (mk-set@Open@@Pair@@_t0@@_t0@Close (pair x1 x3))
                                    all@Open@@Pair@@_t0@@_t1@Close)
                (seq@@_t0@@_t0@@_t1 (asrel@@_t0 (mk-set@@_t0 x1))
                                    all@Open@@Pair@@_t0@@_t1@Close))))
 (forall ( (x1 _t0)
           (x2 _t1)
           (x4 _t2)
           (x5 _t3) )
         (=> true
             (= (seq@@_t0@@_t2@@_t3 (seq@@_t0@@_t1@@_t2 (mk-set@Open@@Pair@@_t0@@_t1@Close (pair x1 x2))
                                                        all@Open@@Pair@@_t1@@_t2@Close)
                                    (mk-set@Open@@Pair@@_t2@@_t3@Close (pair x4 x5)))
                (mk-set@Open@@Pair@@_t0@@_t3@Close (pair x1 x5)))))
 (forall ( (x1 _t0)
           (x2 _t1) )
         (=> true
             (= (seq@@_t0@@_t1@@_t1 (seq@@_t0@@_t0@@_t1 (asrel@@_t0 (mk-set@@_t0 x1))
                                                        all@Open@@Pair@@_t0@@_t1@Close)
                                    (asrel@@_t1 (mk-set@@_t1 x2)))
                (mk-set@Open@@Pair@@_t0@@_t1@Close (pair x1 x2)))))
 (forall ( (x1 _t0)
           (x3 _t0) )
         (=> true
             (= (elem@Open@@Pair@@_t0@@_t0@Close (pair x1 x3) id@@_t0)
                (= x1 x3))))
 (forall ( (r1 (set (Pair _t0 _t1))) )
         (=> true (= (seq@@_t0@@_t0@@_t1 id@@_t0 r1) r1)))
 (forall ( (r1 (set (Pair _t0 _t1))) )
         (=> true (= (seq@@_t0@@_t1@@_t1 r1 id@@_t1) r1)))
 (forall ( (rr (set (Pair _t0 _t0))) )
         (=> true (subset rr (star@@_t0 rr))))
 (forall ( (rr (set (Pair _t0 _t0)))
           (rr2 (set (Pair _t0 _t0))) )
         (=> true
             (=> (subset rr rr2)
                 (subset (star@@_t0 rr) (star@@_t0 rr2)))))
 (forall ( (rr (set (Pair _t0 _t0)))
           (rr2 (set (Pair _t0 _t0)))
           (x1 _t0)
           (x3 _t0) )
         (=> true
             (=> (elem@Open@@Pair@@_t0@@_t0@Close (pair x1 x3) (star@@_t0 (intersect rr rr2)))
                 (elem@Open@@Pair@@_t0@@_t0@Close (pair x1 x3) (star@@_t0 rr)))))
 (forall ( (rr (set (Pair _t0 _t0)))
           (rr2 (set (Pair _t0 _t0)))
           (x1 _t0)
           (x3 _t0) )
         (=> true
             (=> (elem@Open@@Pair@@_t0@@_t0@Close (pair x1 x3) (star@@_t0 rr))
                 (elem@Open@@Pair@@_t0@@_t0@Close (pair x1 x3) (star@@_t0 (union rr rr2))))))
 (forall ( (rr (set (Pair _t0 _t0))) )
         (=> true
             (= (seq@@_t0@@_t0@@_t0 (star@@_t0 rr) (star@@_t0 rr))
                (star@@_t0 rr))))
 (forall ( (r1 (set (Pair _t0 _t1)))
           (r2 (set (Pair _t0 _t1)))
           (r3 (set (Pair _t1 _t2))) )
         (=> true
             (=> (subset r1 r2)
                 (subset (seq@@_t0@@_t1@@_t2 r1 r3)
                         (seq@@_t0@@_t1@@_t2 r2 r3)))))
 (forall ( (r1 (set (Pair _t0 _t1)))
           (r2 (set (Pair _t0 _t1)))
           (r4 (set (Pair _t2 _t0))) )
         (=> true
             (=> (subset r1 r2)
                 (subset (seq@@_t2@@_t0@@_t1 r4 r1)
                         (seq@@_t2@@_t0@@_t1 r4 r2)))))
 (forall ( (rr (set (Pair _t0 _t0))) )
         (=> true
             (= (plus@@_t0 rr)
                (seq@@_t0@@_t0@@_t0 (star@@_t0 rr) rr))))
 (forall ( (rr (set (Pair _t0 _t0))) )
         (=> true
             (= (plus@@_t0 rr)
                (seq@@_t0@@_t0@@_t0 rr (star@@_t0 rr)))))
 (forall ( (r1 (set (Pair _t0 _t1)))
           (s1 (set _t0))
           (x2 _t1) )
         (=> true
             (= (elem@@_t1 x2 (lookup@@_t0@@_t1 r1 s1))
                (exists ( (x1 _t0) )
                        (and (elem@@_t0 x1 s1)
                             (elem@Open@@Pair@@_t0@@_t1@Close (pair x1 x2) r1))))))
 (forall ( (r1 (set (Pair _t0 _t1)))
           (s1 (set _t0))
           (x1 _t0)
           (x2 _t1) )
         (=> true
             (=> (elem@@_t0 x1 s1)
                 (=> (elem@Open@@Pair@@_t0@@_t1@Close (pair x1 x2) r1)
                     (elem@@_t1 x2 (lookup@@_t0@@_t1 r1 s1))))))
|----
 (forall ( (p_0 Node)
           (p_1 Node)
           (q Node) )
         (=> (elem@Open@@Pair@@Node@@Node@Close (pair r p_1) (star@@Node ptr))
             (=> (elem@Open@@Pair@@Node@@Node@Close (pair r q)
                                                    (star@@Node (union ptr
                                                                       (mk-set@Open@@Pair@@Node@@Node@Close (pair p_0 p_1)))))
                 (elem@Open@@Pair@@Node@@Node@Close (pair r q) (star@@Node ptr)))))

*** EXCEPTION ***
UnitB/PO.hs:914:21-26: Assertion failed "Sequent scopes: 
(pair x1 x2)
(forall ((r1 (\set (Pair _t0 _t1))) (x1 _t0) (x2 _t1)) (=> true (=> (elem (pair x1 x2) r1) (elem x1 (reldom r1)))))
(pair x1 x2)
(pair x1 x2)
(forall ((r1 (\set (Pair _t0 _t1))) (x1 _t0) (x2 _t1)) (=> true (= (elem (pair x1 x2) (seq (asrel (mk-set x1)) r1)) (elem (pair x1 x2) r1))))
(pair x1 x1)
(forall ((x1 _t0)) (=> true (= (asrel (mk-set x1)) (mk-set (pair x1 x1)))))
(pair x1 x3)
(forall ((x1 _t0) (x3 _t0)) (=> true (= (seq (mk-set (pair x1 x3)) all) (seq (asrel (mk-set x1)) all))))
(pair x1 x2)
(pair x4 x5)
(pair x1 x5)
(forall ((x1 _t0) (x2 _t1) (x4 _t2) (x5 _t3)) (=> true (= (seq (seq (mk-set (pair x1 x2)) all) (mk-set (pair x4 x5))) (mk-set (pair x1 x5)))))
(pair x1 x2)
(forall ((x1 _t0) (x2 _t1)) (=> true (= (seq (seq (asrel (mk-set x1)) all) (asrel (mk-set x2))) (mk-set (pair x1 x2)))))
(pair x1 x3)
(forall ((x1 _t0) (x3 _t0)) (=> true (= (elem (pair x1 x3) id) (= x1 x3))))
(pair x1 x3)
(pair x1 x3)
(forall ((rr (\set (Pair _t0 _t0))) (rr2 (\set (Pair _t0 _t0))) (x1 _t0) (x3 _t0)) (=> true (=> (elem (pair x1 x3) (star (intersect rr rr2))) (elem (pair x1 x3) (star rr)))))
(pair x1 x3)
(pair x1 x3)
(forall ((rr (\set (Pair _t0 _t0))) (rr2 (\set (Pair _t0 _t0))) (x1 _t0) (x3 _t0)) (=> true (=> (elem (pair x1 x3) (star rr)) (elem (pair x1 x3) (star (union rr rr2))))))
(pair x1 x2)
(forall ((r1 (\set (Pair _t0 _t1))) (s1 (\set _t0)) (x2 _t1)) (=> true (= (elem x2 (lookup r1 s1)) (exists ((x1 _t0)) (and (elem x1 s1) (elem (pair x1 x2) r1))))))
(pair x1 x2)
(forall ((r1 (\set (Pair _t0 _t1))) (s1 (\set _t0)) (x1 _t0) (x2 _t1)) (=> true (=> (elem x1 s1) (=> (elem (pair x1 x2) r1) (elem x2 (lookup r1 s1))))))
(pair r p_1)
(pair r q)
(pair p_0 p_1)
(pair r q)
(forall ((p_0 Node) (p_1 Node) (q Node)) (=> (elem (pair r p_1) (star ptr)) (=> (elem (pair r q) (star (union ptr (mk-set (pair p_0 p_1))))) (elem (pair r q) (star ptr)))))
",  sort: Node, Pair [a,b], pfun [a,b], set [a]
 apply[_t0,_t1]: (pfun t0 t1) x t0 -> t1
 asrel[_a]: (set a) -> (set (Pair a a))
 const[_a,_b]: b -> (Array a b)
 dom[_t0,_t1]: (pfun t0 t1) -> (set t0)
 dom-rest[_t0,_t1]: (set t0) x (pfun t0 t1) -> (pfun t0 t1)
 dom-subt[_t0,_t1]: (set t0) x (pfun t0 t1) -> (pfun t0 t1)
 empty-fun[_t0,_t1]: (pfun t0 t1)
 finite[_t]: (set t) -> Bool
 id[_a]: (set (Pair a a))
 ident[_a]: (Array a a)
 injective[_t0,_t1]: (pfun t0 t1) -> Bool
 lambda[_a,_b]: (set a) x (Array a b) -> (pfun a b)
 lookup[_a,_b]: (set (Pair a b)) x (set a) -> (set b)
 mk-fun[_t0,_t1]: t0 x t1 -> (pfun t0 t1)
 mk-set[_t]: t -> (set t)
 ovl[_t0,_t1]: (pfun t0 t1) x (pfun t0 t1) -> (pfun t0 t1)
 plus[_a]: (set (Pair a a)) -> (set (Pair a a))
 qsum[_a]: (set a) x (Array a Int) -> Int
 qunion[_a,_b]: (set a) x (Array a (set b)) -> (set b)
 ran[_t0,_t1]: (pfun t0 t1) -> (set t1)
 reldom[_a,_b]: (set (Pair a b)) -> (set a)
 seq[_a,_b,_c]: (set (Pair a b)) x (set (Pair b c)) -> (set (Pair a c))
 set[_a,_b]: (set a) x (Array a b) -> (set b)
 star[_a]: (set (Pair a a)) -> (set (Pair a a))
 tfun[_t0,_t1]: (set t0) x (set t1) -> (set (pfun t0 t1))
 Node: (set Node)  =  ((as const (set Node)) true)
 all[_t] : (set t)  =  ((as const (set t)) true)
 compl[_t] : (s1 (set _t)) -> (set t)  =  ((_ map not) s1)
 elem[_t] : (x _t) x (s1 (set _t)) -> Bool  =  (select s1 x)
 empty-set[_t] : (set t)  =  ((as const (set t)) false)
 set-diff[_t] : (s1 (set _t)) x (s2 (set _t)) -> (set t)  =  (intersect s1 ((_ map not) s2))
 st-subset[_t] : (s1 (set _t)) x (s2 (set _t)) -> Bool  =  (and (subset s1 s2) (not (= s1 s2)))
 free: (set Node)
 live: (set Node)
 ptr: (set (Pair Node Node))
 r: Node
 (elem@@Node r live)
 (= Node (union live free))
 (= (intersect live free) empty-set@@Node)
 (forall ( (term (Array _t Int)) )
         (=> true (= (qsum@@_t empty-set@@_t term) 0)))
 (forall ( (r (set _t))
           (term (Array _t Int))
           (x _t) )
         (=> true
             (=> (not (elem@@_t x r))
                 (= (qsum@@_t (union r (mk-set@@_t x)) term)
                    (+ (qsum@@_t r term) (select term x))))))
 (forall ( (r (set _t))
           (r0 (set _t))
           (term (Array _t Int)) )
         (=> true
             (=> (= (intersect r r0) empty-set@@_t)
                 (= (qsum@@_t (union r r0) term)
                    (+ (qsum@@_t r term) (qsum@@_t r0 term))))))
 (forall ( (r (set _t)) )
         (=> true
             (=> (finite@@_t r)
                 (<= 0 (qsum@@_t r (const@@_t@@Int 1))))))
 (forall ( (r (set _t)) )
         (=> true
             (= (= (qsum@@_t r (const@@_t@@Int 1)) 0)
                (= r empty-set@@_t))))
 (forall ( (x _t) )
         (=> true
             (= (qsum@@_t (mk-set@@_t x) (const@@_t@@Int 1)) 1)))
 (forall ( (r (set _t)) )
         (=> true
             (= (= (qsum@@_t r (const@@_t@@Int 1)) 1)
                (exists ( (x _t) ) (and true (= r (mk-set@@_t x)))))))
 (forall ( (r (set _t))
           (r0 (set _t)) )
         (=> true
             (=> (= (intersect r r0) empty-set@@_t)
                 (= (qsum@@_t (union r r0) (const@@_t@@Int 1))
                    (+ (qsum@@_t r (const@@_t@@Int 1))
                       (qsum@@_t r0 (const@@_t@@Int 1)))))))
 (forall ( (x _t0)
           (y _t1) )
         (=> true (= (select (const@@_t1@@_t0 x) y) x)))
 (forall ( (x _t0) ) (=> true (= (select ident@@_t0 x) x)))
 (= (dom@@_t0@@_t1 empty-fun@@_t0@@_t1)
    empty-set@@_t0)
 (forall ( (t (Array _t0 _t1)) )
         (=> true
             (= (lambda@@_t0@@_t1 empty-set@@_t0 t)
                empty-fun@@_t0@@_t1)))
 (forall ( (r (set _t0))
           (t (Array _t0 _t1)) )
         (=> true (= (dom@@_t0@@_t1 (lambda@@_t0@@_t1 r t)) r)))
 (forall ( (t (Array _t0 _t1))
           (x _t0) )
         (=> true
             (= (lambda@@_t0@@_t1 (mk-set@@_t0 x) t)
                (mk-fun@@_t0@@_t1 x (select t x)))))
 (forall ( (r (set _t0))
           (t (Array _t0 _t1))
           (x _t0) )
         (=> true
             (= (ovl@@_t0@@_t1 (lambda@@_t0@@_t1 r t)
                               (mk-fun@@_t0@@_t1 x (select t x)))
                (lambda@@_t0@@_t1 (union r (mk-set@@_t0 x)) t))))
 (forall ( (r (set _t0))
           (r0 (set _t0))
           (t (Array _t0 _t1)) )
         (=> true
             (= (ovl@@_t0@@_t1 (lambda@@_t0@@_t1 r t) (lambda@@_t0@@_t1 r0 t))
                (lambda@@_t0@@_t1 (union r r0) t))))
 (forall ( (f1 (pfun _t0 _t1)) )
         (=> true
             (= (ovl@@_t0@@_t1 f1 empty-fun@@_t0@@_t1) f1)))
 (forall ( (f1 (pfun _t0 _t1)) )
         (=> true
             (= (ovl@@_t0@@_t1 empty-fun@@_t0@@_t1 f1) f1)))
 (forall ( (x _t0)
           (y _t1) )
         (=> true
             (= (dom@@_t0@@_t1 (mk-fun@@_t0@@_t1 x y))
                (mk-set@@_t0 x))))
 (forall ( (f1 (pfun _t0 _t1))
           (f2 (pfun _t0 _t1))
           (x _t0) )
         (=> true
             (=> (elem@@_t0 x (dom@@_t0@@_t1 f2))
                 (= (apply@@_t0@@_t1 (ovl@@_t0@@_t1 f1 f2) x)
                    (apply@@_t0@@_t1 f2 x)))))
 (forall ( (f1 (pfun _t0 _t1))
           (f2 (pfun _t0 _t1))
           (x _t0) )
         (=> true
             (=> (and (elem@@_t0 x (dom@@_t0@@_t1 f1))
                      (not (elem@@_t0 x (dom@@_t0@@_t1 f2))))
                 (= (apply@@_t0@@_t1 (ovl@@_t0@@_t1 f1 f2) x)
                    (apply@@_t0@@_t1 f1 x)))))
 (forall ( (x _t0)
           (y _t1) )
         (=> true
             (= (apply@@_t0@@_t1 (mk-fun@@_t0@@_t1 x y) x) y)))
 (forall ( (f1 (pfun _t0 _t1))
           (s1 (set _t0))
           (x _t0) )
         (=> true
             (=> (and (elem@@_t0 x s1) (elem@@_t0 x (dom@@_t0@@_t1 f1)))
                 (= (apply@@_t0@@_t1 (dom-rest@@_t0@@_t1 s1 f1) x)
                    (apply@@_t0@@_t1 f1 x)))))
 (forall ( (f1 (pfun _t0 _t1))
           (s1 (set _t0))
           (x _t0) )
         (=> true
             (=> (elem@@_t0 x (set-diff@@_t0 (dom@@_t0@@_t1 f1) s1))
                 (= (apply@@_t0@@_t1 (dom-subt@@_t0@@_t1 s1 f1) x)
                    (apply@@_t0@@_t1 f1 x)))))
 (forall ( (s2 (set _t1)) )
         (=> true
             (elem@Open@@pfun@@_t0@@_t1@Close empty-fun@@_t0@@_t1
                                              (tfun@@_t0@@_t1 empty-set@@_t0 s2))))
 (forall ( (f1 (pfun _t0 _t1))
           (f2 (pfun _t0 _t1)) )
         (=> true
             (= (dom@@_t0@@_t1 (ovl@@_t0@@_t1 f1 f2))
                (union (dom@@_t0@@_t1 f1) (dom@@_t0@@_t1 f2)))))
 (forall ( (f1 (pfun _t0 _t1))
           (s1 (set _t0)) )
         (=> true
             (= (dom@@_t0@@_t1 (dom-rest@@_t0@@_t1 s1 f1))
                (intersect s1 (dom@@_t0@@_t1 f1)))))
 (forall ( (f1 (pfun _t0 _t1))
           (s1 (set _t0)) )
         (=> true
             (= (dom@@_t0@@_t1 (dom-subt@@_t0@@_t1 s1 f1))
                (set-diff@@_t0 (dom@@_t0@@_t1 f1) s1))))
 (forall ( (r (set _t0))
           (t (Array _t0 _t1))
           (x _t0) )
         (=> true
             (=> (elem@@_t0 x r)
                 (= (apply@@_t0@@_t1 (lambda@@_t0@@_t1 r t) x)
                    (select t x)))))
 (forall ( (f1 (pfun _t0 _t1))
           (x _t0)
           (y _t1) )
         (=> true
             (= (and (elem@@_t0 x (dom@@_t0@@_t1 f1))
                     (= (apply@@_t0@@_t1 f1 x) y))
                (= (select f1 x) (Just y)))))
 (forall ( (f1 (pfun _t0 _t1))
           (x _t0)
           (x2 _t0)
           (y _t1) )
         (=> true
             (=> (not (= x x2))
                 (= (apply@@_t0@@_t1 (ovl@@_t0@@_t1 f1 (mk-fun@@_t0@@_t1 x y)) x2)
                    (apply@@_t0@@_t1 f1 x2)))))
 (forall ( (f1 (pfun _t0 _t1))
           (x _t0)
           (y _t1) )
         (=> true
             (= (apply@@_t0@@_t1 (ovl@@_t0@@_t1 f1 (mk-fun@@_t0@@_t1 x y)) x)
                y)))
 (= (ran@@_t0@@_t1 empty-fun@@_t0@@_t1)
    empty-set@@_t1)
 (forall ( (f1 (pfun _t0 _t1))
           (y _t1) )
         (=> true
             (= (elem@@_t1 y (ran@@_t0@@_t1 f1))
                (exists ( (x _t0) )
                        (and true
                             (and (elem@@_t0 x (dom@@_t0@@_t1 f1))
                                  (= (apply@@_t0@@_t1 f1 x) y)))))))
 (forall ( (x _t0)
           (y _t1) )
         (=> true
             (= (ran@@_t0@@_t1 (mk-fun@@_t0@@_t1 x y))
                (mk-set@@_t1 y))))
 (forall ( (f1 (pfun _t0 _t1))
           (s1 (set _t0))
           (s2 (set _t1)) )
         (=> true
             (= (elem@Open@@pfun@@_t0@@_t1@Close f1 (tfun@@_t0@@_t1 s1 s2))
                (and (= s1 (dom@@_t0@@_t1 f1))
                     (subset (ran@@_t0@@_t1 f1) s2)))))
 (forall ( (f1 (pfun _t0 _t1)) )
         (=> true
             (= (injective@@_t0@@_t1 f1)
                (forall ( (x _t0)
                          (x2 _t0) )
                        (=> (and (elem@@_t0 x (dom@@_t0@@_t1 f1))
                                 (elem@@_t0 x2 (dom@@_t0@@_t1 f1)))
                            (=> (= (apply@@_t0@@_t1 f1 x) (apply@@_t0@@_t1 f1 x2))
                                (= x x2)))))))
 (injective@@_t0@@_t1 empty-fun@@_t0@@_t1)
 (forall ( (f1 (pfun _t0 _t1))
           (x _t0) )
         (=> true
             (=> (elem@@_t0 x (dom@@_t0@@_t1 f1))
                 (elem@@_t1 (apply@@_t0@@_t1 f1 x) (ran@@_t0@@_t1 f1)))))
 (forall ( (f1 (pfun _t0 _t1))
           (s1 (set _t0))
           (x _t0) )
         (=> true
             (=> (elem@@_t0 x (set-diff@@_t0 (dom@@_t0@@_t1 f1) s1))
                 (elem@@_t1 (apply@@_t0@@_t1 f1 x)
                            (ran@@_t0@@_t1 (dom-subt@@_t0@@_t1 s1 f1))))))
 (forall ( (f1 (pfun _t0 _t1))
           (s1 (set _t0))
           (x _t0) )
         (=> true
             (=> (elem@@_t0 x (intersect (dom@@_t0@@_t1 f1) s1))
                 (elem@@_t1 (apply@@_t0@@_t1 f1 x)
                            (ran@@_t0@@_t1 (dom-rest@@_t0@@_t1 s1 f1))))))
 (forall ( (f1 (pfun _t0 _t1))
           (x _t0)
           (y _t1) )
         (=> true
             (=> (and (elem@@_t0 x (dom@@_t0@@_t1 f1))
                      (injective@@_t0@@_t1 f1))
                 (= (ran@@_t0@@_t1 (ovl@@_t0@@_t1 f1 (mk-fun@@_t0@@_t1 x y)))
                    (union (set-diff@@_t1 (ran@@_t0@@_t1 f1)
                                          (mk-set@@_t1 (apply@@_t0@@_t1 f1 x)))
                           (mk-set@@_t1 y))))))
 (forall ( (f1 (pfun _t0 _t1))
           (x _t0)
           (y _t1) )
         (=> true
             (=> (not (elem@@_t0 x (dom@@_t0@@_t1 f1)))
                 (= (ran@@_t0@@_t1 (ovl@@_t0@@_t1 f1 (mk-fun@@_t0@@_t1 x y)))
                    (union (ran@@_t0@@_t1 f1) (mk-set@@_t1 y))))))
 (forall ( (x _t)
           (y _t) )
         (=> true (= (elem@@_t x (mk-set@@_t y)) (= x y))))
 (forall ( (r1 (set _t0))
           (term (Array _t0 _t))
           (y _t) )
         (=> true
             (= (elem@@_t y (set@@_t0@@_t r1 term))
                (exists ( (x _t0) )
                        (and (elem@@_t0 x r1) (= (select term x) y))))))
 (forall ( (r1 (set _t0))
           (term (Array _t0 _t))
           (y _t) )
         (=> true
             (= (= (set@@_t0@@_t r1 term) (mk-set@@_t y))
                (forall ( (x _t0) )
                        (=> (elem@@_t0 x r1) (= (select term x) y))))))
 (forall ( (s1 (set _t))
           (s2 (set _t)) )
         (=> true
             (=> (finite@@_t s1) (finite@@_t (set-diff@@_t s1 s2)))))
 (forall ( (s1 (set _t))
           (s2 (set _t)) )
         (=> true
             (=> (and (finite@@_t s1) (finite@@_t s2))
                 (finite@@_t (union s1 s2)))))
 (forall ( (x _t) ) (=> true (finite@@_t (mk-set@@_t x))))
 (finite@@_t empty-set@@_t)
 (forall ( (s1 (set _t))
           (s2 (set _t)) )
         (=> true
             (=> (subset s1 s2)
                 (=> (finite@@_t s2) (finite@@_t s1)))))
 (forall ( (r1 (set _t0)) )
         (=> true (= (set@@_t0@@_t0 r1 ident@@_t0) r1)))
 (forall ( (terms (Array _t0 (set _t))) )
         (=> true
             (= (qunion@@_t0@@_t empty-set@@_t0 terms)
                empty-set@@_t)))
 (forall ( (terms (Array _t0 (set _t)))
           (x _t0) )
         (=> true
             (= (qunion@@_t0@@_t (mk-set@@_t0 x) terms)
                (select terms x))))
 (forall ( (r1 (set _t0))
           (r2 (set _t0))
           (terms (Array _t0 (set _t))) )
         (=> true
             (= (qunion@@_t0@@_t (union r1 r2) terms)
                (union (qunion@@_t0@@_t r1 terms)
                       (qunion@@_t0@@_t r2 terms)))))
 (forall ( (r1 (set _t0))
           (terms (Array _t0 (set _t)))
           (terms0 (Array _t0 (set _t))) )
         (=> true
             (=> (forall ( (x _t0) )
                         (=> (elem@@_t0 x r1)
                             (= (select terms x) (select terms0 x))))
                 (= (qunion@@_t0@@_t r1 terms)
                    (qunion@@_t0@@_t r1 terms0)))))
 (forall ( (r1 (set (Pair _t0 _t1)))
           (x1 _t0)
           (x2 _t1) )
         (=> true
             (=> (elem@Open@@Pair@@_t0@@_t1@Close (pair x1 x2) r1)
                 (elem@@_t0 x1 (reldom@@_t0@@_t1 r1)))))
 (forall ( (r1 (set (Pair _t0 _t1)))
           (s1 (set _t0)) )
         (=> true
             (= (reldom@@_t0@@_t1 (seq@@_t0@@_t0@@_t1 (asrel@@_t0 s1) r1))
                (intersect s1 (reldom@@_t0@@_t1 r1)))))
 (forall ( (r1 (set (Pair _t0 _t1)))
           (x1 _t0)
           (x2 _t1) )
         (=> true
             (= (elem@Open@@Pair@@_t0@@_t1@Close (pair x1 x2)
                                                 (seq@@_t0@@_t0@@_t1 (asrel@@_t0 (mk-set@@_t0 x1)) r1))
                (elem@Open@@Pair@@_t0@@_t1@Close (pair x1 x2) r1))))
 (forall ( (x1 _t0) )
         (=> true
             (= (asrel@@_t0 (mk-set@@_t0 x1))
                (mk-set@Open@@Pair@@_t0@@_t0@Close (pair x1 x1)))))
 (forall ( (r1 (set (Pair _t0 _t1)))
           (r3 (set (Pair _t1 _t2)))
           (r5 (set (Pair _t2 _t3))) )
         (=> true
             (= (seq@@_t0@@_t2@@_t3 (seq@@_t0@@_t1@@_t2 r1 r3) r5)
                (seq@@_t0@@_t1@@_t3 r1 (seq@@_t1@@_t2@@_t3 r3 r5)))))
 (forall ( (r1 (set (Pair _t0 _t1)))
           (r2 (set (Pair _t0 _t1)))
           (r3 (set (Pair _t1 _t2))) )
         (=> true
             (=> (subset r1 r2)
                 (subset (seq@@_t0@@_t1@@_t2 r1 r3)
                         (seq@@_t0@@_t1@@_t2 r2 r3)))))
 (forall ( (r1 (set (Pair _t0 _t1)))
           (r2 (set (Pair _t0 _t1)))
           (r4 (set (Pair _t2 _t0))) )
         (=> true
             (=> (subset r1 r2)
                 (subset (seq@@_t2@@_t0@@_t1 r4 r1)
                         (seq@@_t2@@_t0@@_t1 r4 r2)))))
 (forall ( (rr (set (Pair _t0 _t0)))
           (rr2 (set (Pair _t0 _t0))) )
         (=> true
             (= (star@@_t0 (union rr rr2))
                (seq@@_t0@@_t0@@_t0 (star@@_t0 (seq@@_t0@@_t0@@_t0 (star@@_t0 rr) rr2))
                                    (star@@_t0 rr)))))
 (forall ( (rr (set (Pair _t0 _t0)))
           (rr2 (set (Pair _t0 _t0))) )
         (=> true
             (= (star@@_t0 (union rr rr2))
                (seq@@_t0@@_t0@@_t0 (star@@_t0 rr2)
                                    (star@@_t0 (seq@@_t0@@_t0@@_t0 rr (star@@_t0 rr2)))))))
 (forall ( (rr (set (Pair _t0 _t0))) )
         (=> true
             (= (union (seq@@_t0@@_t0@@_t0 (star@@_t0 rr) rr) id@@_t0)
                (star@@_t0 rr))))
 (forall ( (rr (set (Pair _t0 _t0))) )
         (=> true
             (= (union (seq@@_t0@@_t0@@_t0 rr (star@@_t0 rr)) id@@_t0)
                (star@@_t0 rr))))
 (forall ( (r1 (set (Pair _t0 _t1)))
           (r2 (set (Pair _t0 _t1)))
           (r3 (set (Pair _t1 _t2))) )
         (=> true
             (= (seq@@_t0@@_t1@@_t2 (union r1 r2) r3)
                (union (seq@@_t0@@_t1@@_t2 r1 r3)
                       (seq@@_t0@@_t1@@_t2 r2 r3)))))
 (forall ( (r1 (set (Pair _t0 _t1)))
           (r2 (set (Pair _t0 _t1)))
           (r4 (set (Pair _t2 _t0))) )
         (=> true
             (= (seq@@_t2@@_t0@@_t1 r4 (union r1 r2))
                (union (seq@@_t2@@_t0@@_t1 r4 r1)
                       (seq@@_t2@@_t0@@_t1 r4 r2)))))
 (forall ( (x1 _t0)
           (x3 _t0) )
         (=> true
             (= (seq@@_t0@@_t0@@_t1 (mk-set@Open@@Pair@@_t0@@_t0@Close (pair x1 x3))
                                    all@Open@@Pair@@_t0@@_t1@Close)
                (seq@@_t0@@_t0@@_t1 (asrel@@_t0 (mk-set@@_t0 x1))
                                    all@Open@@Pair@@_t0@@_t1@Close))))
 (forall ( (x1 _t0)
           (x2 _t1)
           (x4 _t2)
           (x5 _t3) )
         (=> true
             (= (seq@@_t0@@_t2@@_t3 (seq@@_t0@@_t1@@_t2 (mk-set@Open@@Pair@@_t0@@_t1@Close (pair x1 x2))
                                                        all@Open@@Pair@@_t1@@_t2@Close)
                                    (mk-set@Open@@Pair@@_t2@@_t3@Close (pair x4 x5)))
                (mk-set@Open@@Pair@@_t0@@_t3@Close (pair x1 x5)))))
 (forall ( (x1 _t0)
           (x2 _t1) )
         (=> true
             (= (seq@@_t0@@_t1@@_t1 (seq@@_t0@@_t0@@_t1 (asrel@@_t0 (mk-set@@_t0 x1))
                                                        all@Open@@Pair@@_t0@@_t1@Close)
                                    (asrel@@_t1 (mk-set@@_t1 x2)))
                (mk-set@Open@@Pair@@_t0@@_t1@Close (pair x1 x2)))))
 (forall ( (x1 _t0)
           (x3 _t0) )
         (=> true
             (= (elem@Open@@Pair@@_t0@@_t0@Close (pair x1 x3) id@@_t0)
                (= x1 x3))))
 (forall ( (r1 (set (Pair _t0 _t1))) )
         (=> true (= (seq@@_t0@@_t0@@_t1 id@@_t0 r1) r1)))
 (forall ( (r1 (set (Pair _t0 _t1))) )
         (=> true (= (seq@@_t0@@_t1@@_t1 r1 id@@_t1) r1)))
 (forall ( (rr (set (Pair _t0 _t0))) )
         (=> true (subset rr (star@@_t0 rr))))
 (forall ( (rr (set (Pair _t0 _t0)))
           (rr2 (set (Pair _t0 _t0))) )
         (=> true
             (=> (subset rr rr2)
                 (subset (star@@_t0 rr) (star@@_t0 rr2)))))
 (forall ( (rr (set (Pair _t0 _t0)))
           (rr2 (set (Pair _t0 _t0)))
           (x1 _t0)
           (x3 _t0) )
         (=> true
             (=> (elem@Open@@Pair@@_t0@@_t0@Close (pair x1 x3) (star@@_t0 (intersect rr rr2)))
                 (elem@Open@@Pair@@_t0@@_t0@Close (pair x1 x3) (star@@_t0 rr)))))
 (forall ( (rr (set (Pair _t0 _t0)))
           (rr2 (set (Pair _t0 _t0)))
           (x1 _t0)
           (x3 _t0) )
         (=> true
             (=> (elem@Open@@Pair@@_t0@@_t0@Close (pair x1 x3) (star@@_t0 rr))
                 (elem@Open@@Pair@@_t0@@_t0@Close (pair x1 x3) (star@@_t0 (union rr rr2))))))
 (forall ( (rr (set (Pair _t0 _t0))) )
         (=> true
             (= (seq@@_t0@@_t0@@_t0 (star@@_t0 rr) (star@@_t0 rr))
                (star@@_t0 rr))))
 (forall ( (r1 (set (Pair _t0 _t1)))
           (r2 (set (Pair _t0 _t1)))
           (r3 (set (Pair _t1 _t2))) )
         (=> true
             (=> (subset r1 r2)
                 (subset (seq@@_t0@@_t1@@_t2 r1 r3)
                         (seq@@_t0@@_t1@@_t2 r2 r3)))))
 (forall ( (r1 (set (Pair _t0 _t1)))
           (r2 (set (Pair _t0 _t1)))
           (r4 (set (Pair _t2 _t0))) )
         (=> true
             (=> (subset r1 r2)
                 (subset (seq@@_t2@@_t0@@_t1 r4 r1)
                         (seq@@_t2@@_t0@@_t1 r4 r2)))))
 (forall ( (rr (set (Pair _t0 _t0))) )
         (=> true
             (= (plus@@_t0 rr)
                (seq@@_t0@@_t0@@_t0 (star@@_t0 rr) rr))))
 (forall ( (rr (set (Pair _t0 _t0))) )
         (=> true
             (= (plus@@_t0 rr)
                (seq@@_t0@@_t0@@_t0 rr (star@@_t0 rr)))))
 (forall ( (r1 (set (Pair _t0 _t1)))
           (s1 (set _t0))
           (x2 _t1) )
         (=> true
             (= (elem@@_t1 x2 (lookup@@_t0@@_t1 r1 s1))
                (exists ( (x1 _t0) )
                        (and (elem@@_t0 x1 s1)
                             (elem@Open@@Pair@@_t0@@_t1@Close (pair x1 x2) r1))))))
 (forall ( (r1 (set (Pair _t0 _t1)))
           (s1 (set _t0))
           (x1 _t0)
           (x2 _t1) )
         (=> true
             (=> (elem@@_t0 x1 s1)
                 (=> (elem@Open@@Pair@@_t0@@_t1@Close (pair x1 x2) r1)
                     (elem@@_t1 x2 (lookup@@_t0@@_t1 r1 s1))))))
|----
 (forall ( (p_0 Node)
           (p_1 Node)
           (q Node) )
         (=> (elem@Open@@Pair@@Node@@Node@Close (pair r p_1) (star@@Node ptr))
             (=> (elem@Open@@Pair@@Node@@Node@Close (pair r q)
                                                    (star@@Node (union ptr
                                                                       (mk-set@Open@@Pair@@Node@@Node@Close (pair p_0 p_1)))))
                 (elem@Open@@Pair@@Node@@Node@Close (pair r q) (star@@Node ptr)))))

*** EXCEPTION ***
UnitB/PO.hs:914:21-26: Assertion failed "Sequent scopes: 
(pair x1 x2)
(forall ((r1 (\set (Pair _t0 _t1))) (x1 _t0) (x2 _t1)) (=> true (=> (elem (pair x1 x2) r1) (elem x1 (reldom r1)))))
(pair x1 x2)
(pair x1 x2)
(forall ((r1 (\set (Pair _t0 _t1))) (x1 _t0) (x2 _t1)) (=> true (= (elem (pair x1 x2) (seq (asrel (mk-set x1)) r1)) (elem (pair x1 x2) r1))))
(pair x1 x1)
(forall ((x1 _t0)) (=> true (= (asrel (mk-set x1)) (mk-set (pair x1 x1)))))
(pair x1 x3)
(forall ((x1 _t0) (x3 _t0)) (=> true (= (seq (mk-set (pair x1 x3)) all) (seq (asrel (mk-set x1)) all))))
(pair x1 x2)
(pair x4 x5)
(pair x1 x5)
(forall ((x1 _t0) (x2 _t1) (x4 _t2) (x5 _t3)) (=> true (= (seq (seq (mk-set (pair x1 x2)) all) (mk-set (pair x4 x5))) (mk-set (pair x1 x5)))))
(pair x1 x2)
(forall ((x1 _t0) (x2 _t1)) (=> true (= (seq (seq (asrel (mk-set x1)) all) (asrel (mk-set x2))) (mk-set (pair x1 x2)))))
(pair x1 x3)
(forall ((x1 _t0) (x3 _t0)) (=> true (= (elem (pair x1 x3) id) (= x1 x3))))
(pair x1 x3)
(pair x1 x3)
(forall ((rr (\set (Pair _t0 _t0))) (rr2 (\set (Pair _t0 _t0))) (x1 _t0) (x3 _t0)) (=> true (=> (elem (pair x1 x3) (star (intersect rr rr2))) (elem (pair x1 x3) (star rr)))))
(pair x1 x3)
(pair x1 x3)
(forall ((rr (\set (Pair _t0 _t0))) (rr2 (\set (Pair _t0 _t0))) (x1 _t0) (x3 _t0)) (=> true (=> (elem (pair x1 x3) (star rr)) (elem (pair x1 x3) (star (union rr rr2))))))
(pair x1 x2)
(forall ((r1 (\set (Pair _t0 _t1))) (s1 (\set _t0)) (x2 _t1)) (=> true (= (elem x2 (lookup r1 s1)) (exists ((x1 _t0)) (and (elem x1 s1) (elem (pair x1 x2) r1))))))
(pair x1 x2)
(forall ((r1 (\set (Pair _t0 _t1))) (s1 (\set _t0)) (x1 _t0) (x2 _t1)) (=> true (=> (elem x1 s1) (=> (elem (pair x1 x2) r1) (elem x2 (lookup r1 s1))))))
(pair r p_1)
(pair r q)
(pair p_0 p_1)
(pair r q)
(forall ((p_0 Node) (p_1 Node) (q Node)) (=> (elem (pair r p_1) (star ptr)) (=> (elem (pair r q) (star (union ptr (mk-set (pair p_0 p_1))))) (elem (pair r q) (star ptr)))))
",  sort: Node, Pair [a,b], pfun [a,b], set [a]
 apply[_t0,_t1]: (pfun t0 t1) x t0 -> t1
 asrel[_a]: (set a) -> (set (Pair a a))
 const[_a,_b]: b -> (Array a b)
 dom[_t0,_t1]: (pfun t0 t1) -> (set t0)
 dom-rest[_t0,_t1]: (set t0) x (pfun t0 t1) -> (pfun t0 t1)
 dom-subt[_t0,_t1]: (set t0) x (pfun t0 t1) -> (pfun t0 t1)
 empty-fun[_t0,_t1]: (pfun t0 t1)
 finite[_t]: (set t) -> Bool
 id[_a]: (set (Pair a a))
 ident[_a]: (Array a a)
 injective[_t0,_t1]: (pfun t0 t1) -> Bool
 lambda[_a,_b]: (set a) x (Array a b) -> (pfun a b)
 lookup[_a,_b]: (set (Pair a b)) x (set a) -> (set b)
 mk-fun[_t0,_t1]: t0 x t1 -> (pfun t0 t1)
 mk-set[_t]: t -> (set t)
 ovl[_t0,_t1]: (pfun t0 t1) x (pfun t0 t1) -> (pfun t0 t1)
 plus[_a]: (set (Pair a a)) -> (set (Pair a a))
 qsum[_a]: (set a) x (Array a Int) -> Int
 qunion[_a,_b]: (set a) x (Array a (set b)) -> (set b)
 ran[_t0,_t1]: (pfun t0 t1) -> (set t1)
 reldom[_a,_b]: (set (Pair a b)) -> (set a)
 seq[_a,_b,_c]: (set (Pair a b)) x (set (Pair b c)) -> (set (Pair a c))
 set[_a,_b]: (set a) x (Array a b) -> (set b)
 star[_a]: (set (Pair a a)) -> (set (Pair a a))
 tfun[_t0,_t1]: (set t0) x (set t1) -> (set (pfun t0 t1))
 Node: (set Node)  =  ((as const (set Node)) true)
 all[_t] : (set t)  =  ((as const (set t)) true)
 compl[_t] : (s1 (set _t)) -> (set t)  =  ((_ map not) s1)
 elem[_t] : (x _t) x (s1 (set _t)) -> Bool  =  (select s1 x)
 empty-set[_t] : (set t)  =  ((as const (set t)) false)
 set-diff[_t] : (s1 (set _t)) x (s2 (set _t)) -> (set t)  =  (intersect s1 ((_ map not) s2))
 st-subset[_t] : (s1 (set _t)) x (s2 (set _t)) -> Bool  =  (and (subset s1 s2) (not (= s1 s2)))
 free: (set Node)
 live: (set Node)
 ptr: (set (Pair Node Node))
 r: Node
 (elem@@Node r live)
 (= Node (union live free))
 (= (intersect live free) empty-set@@Node)
 (forall ( (term (Array _t Int)) )
         (=> true (= (qsum@@_t empty-set@@_t term) 0)))
 (forall ( (r (set _t))
           (term (Array _t Int))
           (x _t) )
         (=> true
             (=> (not (elem@@_t x r))
                 (= (qsum@@_t (union r (mk-set@@_t x)) term)
                    (+ (qsum@@_t r term) (select term x))))))
 (forall ( (r (set _t))
           (r0 (set _t))
           (term (Array _t Int)) )
         (=> true
             (=> (= (intersect r r0) empty-set@@_t)
                 (= (qsum@@_t (union r r0) term)
                    (+ (qsum@@_t r term) (qsum@@_t r0 term))))))
 (forall ( (r (set _t)) )
         (=> true
             (=> (finite@@_t r)
                 (<= 0 (qsum@@_t r (const@@_t@@Int 1))))))
 (forall ( (r (set _t)) )
         (=> true
             (= (= (qsum@@_t r (const@@_t@@Int 1)) 0)
                (= r empty-set@@_t))))
 (forall ( (x _t) )
         (=> true
             (= (qsum@@_t (mk-set@@_t x) (const@@_t@@Int 1)) 1)))
 (forall ( (r (set _t)) )
         (=> true
             (= (= (qsum@@_t r (const@@_t@@Int 1)) 1)
                (exists ( (x _t) ) (and true (= r (mk-set@@_t x)))))))
 (forall ( (r (set _t))
           (r0 (set _t)) )
         (=> true
             (=> (= (intersect r r0) empty-set@@_t)
                 (= (qsum@@_t (union r r0) (const@@_t@@Int 1))
                    (+ (qsum@@_t r (const@@_t@@Int 1))
                       (qsum@@_t r0 (const@@_t@@Int 1)))))))
 (forall ( (x _t0)
           (y _t1) )
         (=> true (= (select (const@@_t1@@_t0 x) y) x)))
 (forall ( (x _t0) ) (=> true (= (select ident@@_t0 x) x)))
 (= (dom@@_t0@@_t1 empty-fun@@_t0@@_t1)
    empty-set@@_t0)
 (forall ( (t (Array _t0 _t1)) )
         (=> true
             (= (lambda@@_t0@@_t1 empty-set@@_t0 t)
                empty-fun@@_t0@@_t1)))
 (forall ( (r (set _t0))
           (t (Array _t0 _t1)) )
         (=> true (= (dom@@_t0@@_t1 (lambda@@_t0@@_t1 r t)) r)))
 (forall ( (t (Array _t0 _t1))
           (x _t0) )
         (=> true
             (= (lambda@@_t0@@_t1 (mk-set@@_t0 x) t)
                (mk-fun@@_t0@@_t1 x (select t x)))))
 (forall ( (r (set _t0))
           (t (Array _t0 _t1))
           (x _t0) )
         (=> true
             (= (ovl@@_t0@@_t1 (lambda@@_t0@@_t1 r t)
                               (mk-fun@@_t0@@_t1 x (select t x)))
                (lambda@@_t0@@_t1 (union r (mk-set@@_t0 x)) t))))
 (forall ( (r (set _t0))
           (r0 (set _t0))
           (t (Array _t0 _t1)) )
         (=> true
             (= (ovl@@_t0@@_t1 (lambda@@_t0@@_t1 r t) (lambda@@_t0@@_t1 r0 t))
                (lambda@@_t0@@_t1 (union r r0) t))))
 (forall ( (f1 (pfun _t0 _t1)) )
         (=> true
             (= (ovl@@_t0@@_t1 f1 empty-fun@@_t0@@_t1) f1)))
 (forall ( (f1 (pfun _t0 _t1)) )
         (=> true
             (= (ovl@@_t0@@_t1 empty-fun@@_t0@@_t1 f1) f1)))
 (forall ( (x _t0)
           (y _t1) )
         (=> true
             (= (dom@@_t0@@_t1 (mk-fun@@_t0@@_t1 x y))
                (mk-set@@_t0 x))))
 (forall ( (f1 (pfun _t0 _t1))
           (f2 (pfun _t0 _t1))
           (x _t0) )
         (=> true
             (=> (elem@@_t0 x (dom@@_t0@@_t1 f2))
                 (= (apply@@_t0@@_t1 (ovl@@_t0@@_t1 f1 f2) x)
                    (apply@@_t0@@_t1 f2 x)))))
 (forall ( (f1 (pfun _t0 _t1))
           (f2 (pfun _t0 _t1))
           (x _t0) )
         (=> true
             (=> (and (elem@@_t0 x (dom@@_t0@@_t1 f1))
                      (not (elem@@_t0 x (dom@@_t0@@_t1 f2))))
                 (= (apply@@_t0@@_t1 (ovl@@_t0@@_t1 f1 f2) x)
                    (apply@@_t0@@_t1 f1 x)))))
 (forall ( (x _t0)
           (y _t1) )
         (=> true
             (= (apply@@_t0@@_t1 (mk-fun@@_t0@@_t1 x y) x) y)))
 (forall ( (f1 (pfun _t0 _t1))
           (s1 (set _t0))
           (x _t0) )
         (=> true
             (=> (and (elem@@_t0 x s1) (elem@@_t0 x (dom@@_t0@@_t1 f1)))
                 (= (apply@@_t0@@_t1 (dom-rest@@_t0@@_t1 s1 f1) x)
                    (apply@@_t0@@_t1 f1 x)))))
 (forall ( (f1 (pfun _t0 _t1))
           (s1 (set _t0))
           (x _t0) )
         (=> true
             (=> (elem@@_t0 x (set-diff@@_t0 (dom@@_t0@@_t1 f1) s1))
                 (= (apply@@_t0@@_t1 (dom-subt@@_t0@@_t1 s1 f1) x)
                    (apply@@_t0@@_t1 f1 x)))))
 (forall ( (s2 (set _t1)) )
         (=> true
             (elem@Open@@pfun@@_t0@@_t1@Close empty-fun@@_t0@@_t1
                                              (tfun@@_t0@@_t1 empty-set@@_t0 s2))))
 (forall ( (f1 (pfun _t0 _t1))
           (f2 (pfun _t0 _t1)) )
         (=> true
             (= (dom@@_t0@@_t1 (ovl@@_t0@@_t1 f1 f2))
                (union (dom@@_t0@@_t1 f1) (dom@@_t0@@_t1 f2)))))
 (forall ( (f1 (pfun _t0 _t1))
           (s1 (set _t0)) )
         (=> true
             (= (dom@@_t0@@_t1 (dom-rest@@_t0@@_t1 s1 f1))
                (intersect s1 (dom@@_t0@@_t1 f1)))))
 (forall ( (f1 (pfun _t0 _t1))
           (s1 (set _t0)) )
         (=> true
             (= (dom@@_t0@@_t1 (dom-subt@@_t0@@_t1 s1 f1))
                (set-diff@@_t0 (dom@@_t0@@_t1 f1) s1))))
 (forall ( (r (set _t0))
           (t (Array _t0 _t1))
           (x _t0) )
         (=> true
             (=> (elem@@_t0 x r)
                 (= (apply@@_t0@@_t1 (lambda@@_t0@@_t1 r t) x)
                    (select t x)))))
 (forall ( (f1 (pfun _t0 _t1))
           (x _t0)
           (y _t1) )
         (=> true
             (= (and (elem@@_t0 x (dom@@_t0@@_t1 f1))
                     (= (apply@@_t0@@_t1 f1 x) y))
                (= (select f1 x) (Just y)))))
 (forall ( (f1 (pfun _t0 _t1))
           (x _t0)
           (x2 _t0)
           (y _t1) )
         (=> true
             (=> (not (= x x2))
                 (= (apply@@_t0@@_t1 (ovl@@_t0@@_t1 f1 (mk-fun@@_t0@@_t1 x y)) x2)
                    (apply@@_t0@@_t1 f1 x2)))))
 (forall ( (f1 (pfun _t0 _t1))
           (x _t0)
           (y _t1) )
         (=> true
             (= (apply@@_t0@@_t1 (ovl@@_t0@@_t1 f1 (mk-fun@@_t0@@_t1 x y)) x)
                y)))
 (= (ran@@_t0@@_t1 empty-fun@@_t0@@_t1)
    empty-set@@_t1)
 (forall ( (f1 (pfun _t0 _t1))
           (y _t1) )
         (=> true
             (= (elem@@_t1 y (ran@@_t0@@_t1 f1))
                (exists ( (x _t0) )
                        (and true
                             (and (elem@@_t0 x (dom@@_t0@@_t1 f1))
                                  (= (apply@@_t0@@_t1 f1 x) y)))))))
 (forall ( (x _t0)
           (y _t1) )
         (=> true
             (= (ran@@_t0@@_t1 (mk-fun@@_t0@@_t1 x y))
                (mk-set@@_t1 y))))
 (forall ( (f1 (pfun _t0 _t1))
           (s1 (set _t0))
           (s2 (set _t1)) )
         (=> true
             (= (elem@Open@@pfun@@_t0@@_t1@Close f1 (tfun@@_t0@@_t1 s1 s2))
                (and (= s1 (dom@@_t0@@_t1 f1))
                     (subset (ran@@_t0@@_t1 f1) s2)))))
 (forall ( (f1 (pfun _t0 _t1)) )
         (=> true
             (= (injective@@_t0@@_t1 f1)
                (forall ( (x _t0)
                          (x2 _t0) )
                        (=> (and (elem@@_t0 x (dom@@_t0@@_t1 f1))
                                 (elem@@_t0 x2 (dom@@_t0@@_t1 f1)))
                            (=> (= (apply@@_t0@@_t1 f1 x) (apply@@_t0@@_t1 f1 x2))
                                (= x x2)))))))
 (injective@@_t0@@_t1 empty-fun@@_t0@@_t1)
 (forall ( (f1 (pfun _t0 _t1))
           (x _t0) )
         (=> true
             (=> (elem@@_t0 x (dom@@_t0@@_t1 f1))
                 (elem@@_t1 (apply@@_t0@@_t1 f1 x) (ran@@_t0@@_t1 f1)))))
 (forall ( (f1 (pfun _t0 _t1))
           (s1 (set _t0))
           (x _t0) )
         (=> true
             (=> (elem@@_t0 x (set-diff@@_t0 (dom@@_t0@@_t1 f1) s1))
                 (elem@@_t1 (apply@@_t0@@_t1 f1 x)
                            (ran@@_t0@@_t1 (dom-subt@@_t0@@_t1 s1 f1))))))
 (forall ( (f1 (pfun _t0 _t1))
           (s1 (set _t0))
           (x _t0) )
         (=> true
             (=> (elem@@_t0 x (intersect (dom@@_t0@@_t1 f1) s1))
                 (elem@@_t1 (apply@@_t0@@_t1 f1 x)
                            (ran@@_t0@@_t1 (dom-rest@@_t0@@_t1 s1 f1))))))
 (forall ( (f1 (pfun _t0 _t1))
           (x _t0)
           (y _t1) )
         (=> true
             (=> (and (elem@@_t0 x (dom@@_t0@@_t1 f1))
                      (injective@@_t0@@_t1 f1))
                 (= (ran@@_t0@@_t1 (ovl@@_t0@@_t1 f1 (mk-fun@@_t0@@_t1 x y)))
                    (union (set-diff@@_t1 (ran@@_t0@@_t1 f1)
                                          (mk-set@@_t1 (apply@@_t0@@_t1 f1 x)))
                           (mk-set@@_t1 y))))))
 (forall ( (f1 (pfun _t0 _t1))
           (x _t0)
           (y _t1) )
         (=> true
             (=> (not (elem@@_t0 x (dom@@_t0@@_t1 f1)))
                 (= (ran@@_t0@@_t1 (ovl@@_t0@@_t1 f1 (mk-fun@@_t0@@_t1 x y)))
                    (union (ran@@_t0@@_t1 f1) (mk-set@@_t1 y))))))
 (forall ( (x _t)
           (y _t) )
         (=> true (= (elem@@_t x (mk-set@@_t y)) (= x y))))
 (forall ( (r1 (set _t0))
           (term (Array _t0 _t))
           (y _t) )
         (=> true
             (= (elem@@_t y (set@@_t0@@_t r1 term))
                (exists ( (x _t0) )
                        (and (elem@@_t0 x r1) (= (select term x) y))))))
 (forall ( (r1 (set _t0))
           (term (Array _t0 _t))
           (y _t) )
         (=> true
             (= (= (set@@_t0@@_t r1 term) (mk-set@@_t y))
                (forall ( (x _t0) )
                        (=> (elem@@_t0 x r1) (= (select term x) y))))))
 (forall ( (s1 (set _t))
           (s2 (set _t)) )
         (=> true
             (=> (finite@@_t s1) (finite@@_t (set-diff@@_t s1 s2)))))
 (forall ( (s1 (set _t))
           (s2 (set _t)) )
         (=> true
             (=> (and (finite@@_t s1) (finite@@_t s2))
                 (finite@@_t (union s1 s2)))))
 (forall ( (x _t) ) (=> true (finite@@_t (mk-set@@_t x))))
 (finite@@_t empty-set@@_t)
 (forall ( (s1 (set _t))
           (s2 (set _t)) )
         (=> true
             (=> (subset s1 s2)
                 (=> (finite@@_t s2) (finite@@_t s1)))))
 (forall ( (r1 (set _t0)) )
         (=> true (= (set@@_t0@@_t0 r1 ident@@_t0) r1)))
 (forall ( (terms (Array _t0 (set _t))) )
         (=> true
             (= (qunion@@_t0@@_t empty-set@@_t0 terms)
                empty-set@@_t)))
 (forall ( (terms (Array _t0 (set _t)))
           (x _t0) )
         (=> true
             (= (qunion@@_t0@@_t (mk-set@@_t0 x) terms)
                (select terms x))))
 (forall ( (r1 (set _t0))
           (r2 (set _t0))
           (terms (Array _t0 (set _t))) )
         (=> true
             (= (qunion@@_t0@@_t (union r1 r2) terms)
                (union (qunion@@_t0@@_t r1 terms)
                       (qunion@@_t0@@_t r2 terms)))))
 (forall ( (r1 (set _t0))
           (terms (Array _t0 (set _t)))
           (terms0 (Array _t0 (set _t))) )
         (=> true
             (=> (forall ( (x _t0) )
                         (=> (elem@@_t0 x r1)
                             (= (select terms x) (select terms0 x))))
                 (= (qunion@@_t0@@_t r1 terms)
                    (qunion@@_t0@@_t r1 terms0)))))
 (forall ( (r1 (set (Pair _t0 _t1)))
           (x1 _t0)
           (x2 _t1) )
         (=> true
             (=> (elem@Open@@Pair@@_t0@@_t1@Close (pair x1 x2) r1)
                 (elem@@_t0 x1 (reldom@@_t0@@_t1 r1)))))
 (forall ( (r1 (set (Pair _t0 _t1)))
           (s1 (set _t0)) )
         (=> true
             (= (reldom@@_t0@@_t1 (seq@@_t0@@_t0@@_t1 (asrel@@_t0 s1) r1))
                (intersect s1 (reldom@@_t0@@_t1 r1)))))
 (forall ( (r1 (set (Pair _t0 _t1)))
           (x1 _t0)
           (x2 _t1) )
         (=> true
             (= (elem@Open@@Pair@@_t0@@_t1@Close (pair x1 x2)
                                                 (seq@@_t0@@_t0@@_t1 (asrel@@_t0 (mk-set@@_t0 x1)) r1))
                (elem@Open@@Pair@@_t0@@_t1@Close (pair x1 x2) r1))))
 (forall ( (x1 _t0) )
         (=> true
             (= (asrel@@_t0 (mk-set@@_t0 x1))
                (mk-set@Open@@Pair@@_t0@@_t0@Close (pair x1 x1)))))
 (forall ( (r1 (set (Pair _t0 _t1)))
           (r3 (set (Pair _t1 _t2)))
           (r5 (set (Pair _t2 _t3))) )
         (=> true
             (= (seq@@_t0@@_t2@@_t3 (seq@@_t0@@_t1@@_t2 r1 r3) r5)
                (seq@@_t0@@_t1@@_t3 r1 (seq@@_t1@@_t2@@_t3 r3 r5)))))
 (forall ( (r1 (set (Pair _t0 _t1)))
           (r2 (set (Pair _t0 _t1)))
           (r3 (set (Pair _t1 _t2))) )
         (=> true
             (=> (subset r1 r2)
                 (subset (seq@@_t0@@_t1@@_t2 r1 r3)
                         (seq@@_t0@@_t1@@_t2 r2 r3)))))
 (forall ( (r1 (set (Pair _t0 _t1)))
           (r2 (set (Pair _t0 _t1)))
           (r4 (set (Pair _t2 _t0))) )
         (=> true
             (=> (subset r1 r2)
                 (subset (seq@@_t2@@_t0@@_t1 r4 r1)
                         (seq@@_t2@@_t0@@_t1 r4 r2)))))
 (forall ( (rr (set (Pair _t0 _t0)))
           (rr2 (set (Pair _t0 _t0))) )
         (=> true
             (= (star@@_t0 (union rr rr2))
                (seq@@_t0@@_t0@@_t0 (star@@_t0 (seq@@_t0@@_t0@@_t0 (star@@_t0 rr) rr2))
                                    (star@@_t0 rr)))))
 (forall ( (rr (set (Pair _t0 _t0)))
           (rr2 (set (Pair _t0 _t0))) )
         (=> true
             (= (star@@_t0 (union rr rr2))
                (seq@@_t0@@_t0@@_t0 (star@@_t0 rr2)
                                    (star@@_t0 (seq@@_t0@@_t0@@_t0 rr (star@@_t0 rr2)))))))
 (forall ( (rr (set (Pair _t0 _t0))) )
         (=> true
             (= (union (seq@@_t0@@_t0@@_t0 (star@@_t0 rr) rr) id@@_t0)
                (star@@_t0 rr))))
 (forall ( (rr (set (Pair _t0 _t0))) )
         (=> true
             (= (union (seq@@_t0@@_t0@@_t0 rr (star@@_t0 rr)) id@@_t0)
                (star@@_t0 rr))))
 (forall ( (r1 (set (Pair _t0 _t1)))
           (r2 (set (Pair _t0 _t1)))
           (r3 (set (Pair _t1 _t2))) )
         (=> true
             (= (seq@@_t0@@_t1@@_t2 (union r1 r2) r3)
                (union (seq@@_t0@@_t1@@_t2 r1 r3)
                       (seq@@_t0@@_t1@@_t2 r2 r3)))))
 (forall ( (r1 (set (Pair _t0 _t1)))
           (r2 (set (Pair _t0 _t1)))
           (r4 (set (Pair _t2 _t0))) )
         (=> true
             (= (seq@@_t2@@_t0@@_t1 r4 (union r1 r2))
                (union (seq@@_t2@@_t0@@_t1 r4 r1)
                       (seq@@_t2@@_t0@@_t1 r4 r2)))))
 (forall ( (x1 _t0)
           (x3 _t0) )
         (=> true
             (= (seq@@_t0@@_t0@@_t1 (mk-set@Open@@Pair@@_t0@@_t0@Close (pair x1 x3))
                                    all@Open@@Pair@@_t0@@_t1@Close)
                (seq@@_t0@@_t0@@_t1 (asrel@@_t0 (mk-set@@_t0 x1))
                                    all@Open@@Pair@@_t0@@_t1@Close))))
 (forall ( (x1 _t0)
           (x2 _t1)
           (x4 _t2)
           (x5 _t3) )
         (=> true
             (= (seq@@_t0@@_t2@@_t3 (seq@@_t0@@_t1@@_t2 (mk-set@Open@@Pair@@_t0@@_t1@Close (pair x1 x2))
                                                        all@Open@@Pair@@_t1@@_t2@Close)
                                    (mk-set@Open@@Pair@@_t2@@_t3@Close (pair x4 x5)))
                (mk-set@Open@@Pair@@_t0@@_t3@Close (pair x1 x5)))))
 (forall ( (x1 _t0)
           (x2 _t1) )
         (=> true
             (= (seq@@_t0@@_t1@@_t1 (seq@@_t0@@_t0@@_t1 (asrel@@_t0 (mk-set@@_t0 x1))
                                                        all@Open@@Pair@@_t0@@_t1@Close)
                                    (asrel@@_t1 (mk-set@@_t1 x2)))
                (mk-set@Open@@Pair@@_t0@@_t1@Close (pair x1 x2)))))
 (forall ( (x1 _t0)
           (x3 _t0) )
         (=> true
             (= (elem@Open@@Pair@@_t0@@_t0@Close (pair x1 x3) id@@_t0)
                (= x1 x3))))
 (forall ( (r1 (set (Pair _t0 _t1))) )
         (=> true (= (seq@@_t0@@_t0@@_t1 id@@_t0 r1) r1)))
 (forall ( (r1 (set (Pair _t0 _t1))) )
         (=> true (= (seq@@_t0@@_t1@@_t1 r1 id@@_t1) r1)))
 (forall ( (rr (set (Pair _t0 _t0))) )
         (=> true (subset rr (star@@_t0 rr))))
 (forall ( (rr (set (Pair _t0 _t0)))
           (rr2 (set (Pair _t0 _t0))) )
         (=> true
             (=> (subset rr rr2)
                 (subset (star@@_t0 rr) (star@@_t0 rr2)))))
 (forall ( (rr (set (Pair _t0 _t0)))
           (rr2 (set (Pair _t0 _t0)))
           (x1 _t0)
           (x3 _t0) )
         (=> true
             (=> (elem@Open@@Pair@@_t0@@_t0@Close (pair x1 x3) (star@@_t0 (intersect rr rr2)))
                 (elem@Open@@Pair@@_t0@@_t0@Close (pair x1 x3) (star@@_t0 rr)))))
 (forall ( (rr (set (Pair _t0 _t0)))
           (rr2 (set (Pair _t0 _t0)))
           (x1 _t0)
           (x3 _t0) )
         (=> true
             (=> (elem@Open@@Pair@@_t0@@_t0@Close (pair x1 x3) (star@@_t0 rr))
                 (elem@Open@@Pair@@_t0@@_t0@Close (pair x1 x3) (star@@_t0 (union rr rr2))))))
 (forall ( (rr (set (Pair _t0 _t0))) )
         (=> true
             (= (seq@@_t0@@_t0@@_t0 (star@@_t0 rr) (star@@_t0 rr))
                (star@@_t0 rr))))
 (forall ( (r1 (set (Pair _t0 _t1)))
           (r2 (set (Pair _t0 _t1)))
           (r3 (set (Pair _t1 _t2))) )
         (=> true
             (=> (subset r1 r2)
                 (subset (seq@@_t0@@_t1@@_t2 r1 r3)
                         (seq@@_t0@@_t1@@_t2 r2 r3)))))
 (forall ( (r1 (set (Pair _t0 _t1)))
           (r2 (set (Pair _t0 _t1)))
           (r4 (set (Pair _t2 _t0))) )
         (=> true
             (=> (subset r1 r2)
                 (subset (seq@@_t2@@_t0@@_t1 r4 r1)
                         (seq@@_t2@@_t0@@_t1 r4 r2)))))
 (forall ( (rr (set (Pair _t0 _t0))) )
         (=> true
             (= (plus@@_t0 rr)
                (seq@@_t0@@_t0@@_t0 (star@@_t0 rr) rr))))
 (forall ( (rr (set (Pair _t0 _t0))) )
         (=> true
             (= (plus@@_t0 rr)
                (seq@@_t0@@_t0@@_t0 rr (star@@_t0 rr)))))
 (forall ( (r1 (set (Pair _t0 _t1)))
           (s1 (set _t0))
           (x2 _t1) )
         (=> true
             (= (elem@@_t1 x2 (lookup@@_t0@@_t1 r1 s1))
                (exists ( (x1 _t0) )
                        (and (elem@@_t0 x1 s1)
                             (elem@Open@@Pair@@_t0@@_t1@Close (pair x1 x2) r1))))))
 (forall ( (r1 (set (Pair _t0 _t1)))
           (s1 (set _t0))
           (x1 _t0)
           (x2 _t1) )
         (=> true
             (=> (elem@@_t0 x1 s1)
                 (=> (elem@Open@@Pair@@_t0@@_t1@Close (pair x1 x2) r1)
                     (elem@@_t1 x2 (lookup@@_t0@@_t1 r1 s1))))))
|----
 (forall ( (p_0 Node)
           (p_1 Node)
           (q Node) )
         (=> (elem@Open@@Pair@@Node@@Node@Close (pair r p_1) (star@@Node ptr))
             (=> (elem@Open@@Pair@@Node@@Node@Close (pair r q)
                                                    (star@@Node (union ptr
                                                                       (mk-set@Open@@Pair@@Node@@Node@Close (pair p_0 p_1)))))
                 (elem@Open@@Pair@@Node@@Node@Close (pair r q) (star@@Node ptr)))))

=== prop_parseOk from ./Document/MachineSpec.hs:40 ===

=== prop_type_error from ./Document/MachineSpec.hs:47 ===
+++ OK, passed 100 tests.
+++ OK, passed 100 tests.
=== prop_flatten_parse_inv from ./Latex/Test_Latex_Parser.hs:173 ===
+++ OK, passed 100 tests.
=== prop_c from ./Utilities/EditDistance.hs:129 ===
=== prop_toList_fromList from ./Utilities/Relation.hs:192 ===
+++ OK, passed 100 tests.

=== prop_fromList_toList from ./Utilities/Relation.hs:196 ===
+++ OK, passed 100 tests.

=== prop_domain_def from ./Utilities/Relation.hs:200 ===
+++ OK, passed 100 tests.

=== prop_range_def from ./Utilities/Relation.hs:203 ===
+++ OK, passed 100 tests.

=== prop_empty_def from ./Utilities/Relation.hs:206 ===
+++ OK, passed 100 tests.

=== prop_apply_def from ./Utilities/Relation.hs:210 ===
+++ OK, passed 100 tests.

=== prop_compose_def from ./Utilities/Relation.hs:214 ===
=== prop_evalList_is_identity from ./Utilities/Permutation.hs:379 ===

=== prop_u_scc_complete from ./Utilities/Permutation.hs:383 ===
+++ OK, passed 100 tests.

=== prop_all_valid from ./Utilities/Relation.hs:233 ===
=== prop_lines_unlines_cancel from ./Utilities/Lines.hs:60 ===

=== prop_b from ./Utilities/EditDistance.hs:135 ===
+++ OK, passed 100 tests.

=== prop_unlines_lines_cancel from ./Utilities/Lines.hs:69 ===

=== prop_u_scc_disconnected from ./Utilities/Permutation.hs:388 ===
+++ OK, passed 100 tests.

=== prop_union_def from ./Utilities/Relation.hs:253 ===

=== prop_expr_parser from ./Document/MachineSpec.hs:53 ===
+++ OK, passed 100 tests.

=== prop_intersection_def from ./Utilities/Relation.hs:256 ===

=== prop_u_scc_valid_components from ./Utilities/Permutation.hs:399 ===
+++ OK, passed 100 tests.

=== prop_difference_def from ./Utilities/Relation.hs:259 ===
+++ OK, passed 100 tests.

=== prop_lines'_concat_cancel from ./Utilities/Lines.hs:75 ===

=== prop_a from ./Utilities/EditDistance.hs:141 ===
+- Literate Unit-B Test Suite
|  +- Unit-B Document
|  |  +- basic syntax and scopes
|  |  +- Contextual predicate visibility rules
|  |  *** FAILED ***
|  |  +- Unit tests for the parser
|  |  |  +- test 0, phase 1 (structure), create object
|  |  |  +- test 1, phase 1, parsing
|  |  |  +- test 2, phase 2 (variables), creating state
|  |  |  +- test 3, phase 2, parsing
|  |  |  +- test 4, phase 3 (expressions), create object
|  |  |  +- test 5, phase 3, parsing
|  |  |  +- test 6, phase 4 (proofs), create object
|  |  |  *** FAILED ***
|  |  |  +- test 7, phase 4, parsing
|  |  |  *** FAILED ***
|  |  |  +- test 8, make machine
|  |  |  +- QuickCheck inheritance
|  |  |  +- [ Success: 8 / 10 ]
|  |  +- The king and his advisors puzzle
|  |  |  +- puzzle, m0
|  |  |  +- puzzle, m1
|  |  |  +- puzzle, proof obligation
|  |  |  +- puzzle, event visit
|  |  |  *** FAILED ***
|  |  |  +- puzzle, visit enablement, PO
|  |  |  +- puzzle, visit negation, PO
|  |  |  +- puzzle, m2
|  |  |  +- puzzle, m3
|  |  |  +- puzzle m3, wd of sums
|  |  |  +- puzzle m3, proofs with sums
|  |  |  +- puzzle, m4
|  |  |  +- puzzle, deleted variables, m3
|  |  |  +- puzzle, deleted variables, m4
|  |  |  +- puzzle, error: invariant referring to deleted variable
|  |  |  +- puzzle, error: assignment to deleted variable
|  |  |  +- test 16, puzzle, removing actions, m3
|  |  |  +- test 17, puzzle, removed actions, m4
|  |  |  +- test 18, simulation proof obligation
|  |  |  +- test 19, simulation proof obligation (init)
|  |  |  +- test 20, crashing proof obligation of invariant with witness
|  |  |  +- test 21, deleting non-existant action
|  |  |  +- test 22, error providing a witness for non-deleted variable
|  |  |  +- test 23, error deleting non-existant variable
|  |  |  +- test 24, inherited vs local invariants
|  |  |  +- test 25, error: schedules and guards refer to deleted variables
|  |  |  +- test 27, old guards / new guards
|  |  |  +- test 28, illegal type application
|  |  |  +- [ Success: 26 / 27 ]
|  |  +- Unless / except clause
|  |  |  +- test 0, unless/except without indices
|  |  |  +- test 1, unless/except with indices and free variables
|  |  |  +- [ Success: 2 / 2 ]
|  |  +- Specification and refinement of a lock-free algorithm
|  |  |  +- test 0, verification, specification with intervals
|  |  |  +- test 1, verification, failed proof with intervals
|  |  |  +- test 2, error message name clash in guards
|  |  |  +- test 3, verification, looking up function outside of domain
|  |  |  +- test 4, m1, liveness implemented with conditional behavior
|  |  |  +- test 5, transient, two branches, enablement of non-empty
|  |  |  +- test 6, transient, two branches, enablement of empty
|  |  |  +- test 7, transient, two branches, negation of empty
|  |  |  +- test 8, transient, two branches, negation of non-empty
|  |  |  +- test 9, transient, two branches, follow and disjunction
|  |  |  +- test 10, duplicate refinement of liveness properties
|  |  |  +- test 11, missing witness
|  |  |  +- test 12, carrier sets without using sets
|  |  |  +- test 13, event splitting
|  |  |  +- test 14, event splitting, event sets
|  |  |  +- test 15, event splitting, expression sets
|  |  |  +- test 16, event splitting, index decl
|  |  |  +- test 17, empty parameter list
|  |  |  +- test 18, empty list in VarScope
|  |  |  +- test 19, splitting POs
|  |  |  +- [ Success: 20 / 20 ]
|  |  +- small machine example
|  |  |  +- test 0
|  |  |  +- test 1 (separate machine blocks)
|  |  |  +- test 2 (verification, one failure)
|  |  |  *** FAILED ***
|  |  |  +- test 3 (verification)
|  |  |  +- test 4 (proof obligation, invariance)
|  |  |  +- test 5 (co, 'skip' proof obligation)
|  |  |  +- test 6 (verification, coarse schedule stronger than guard)
|  |  |  +- test 7 (schedulability proof obligation)
|  |  |  +- test 8 (schedulability without selecting schedules (trivially true))
|  |  |  +- test 10 (transient PO, enablement)
|  |  |  +- test 11 (transient PO, negation)
|  |  |  +- test 12 name clash between coarse schedule and co properties
|  |  |  *** FAILED ***
|  |  |  +- [ Success: 10 / 12 ]
|  |  +- table of cubes example
|  |  |  +- test 0 (syntax)
|  |  |  +- test 1 (verification)
|  |  |  +- test 2 (init/fis po)
|  |  |  +- proof of inv0
|  |  |  +- empty proof
|  |  |  *** FAILED ***
|  |  |  +- [ Success: 4 / 5 ]
|  |  +- train station example
|  |  |  +- part 0
|  |  |  |  +- test 0, syntax
|  |  |  |  +- test 21, multiple imports of sets
|  |  |  |  +- [ Success: 2 / 2 ]
|  |  |  +- part 1
|  |  |  |  +- test 1, verification
|  |  |  |  +- test 2, proof obligation, INIT/fis, in
|  |  |  |  +- test 20, proof obligation, INIT/fis, loc
|  |  |  |  +- test 4, proof obligation, leave/sch
|  |  |  |  +- test 19, quickcheck brackets
|  |  |  |  +- [ Success: 5 / 5 ]
|  |  |  +- part 2
|  |  |  |  +- test 5, proof obligation, leave/en/tr0/WFIS
|  |  |  |  +- test 23, proof obligation, leave/en/tr0/EN
|  |  |  |  +- test 24, proof obligation, leave/en/tr0/NEG
|  |  |  |  +- test 7, undeclared symbol
|  |  |  |  +- test 8, undeclared event (wrt transient)
|  |  |  |  +- test 9, undeclared event (wrt c sched)
|  |  |  |  +- [ Success: 6 / 6 ]
|  |  |  +- part 3
|  |  |  |  +- test 10, undeclared event (wrt indices)
|  |  |  |  +- test 11, undeclared event (wrt assignment)
|  |  |  |  +- test 12, proof obligation leave/INV/inv2
|  |  |  |  +- [ Success: 3 / 3 ]
|  |  |  +- part 4
|  |  |  |  +- test 13, verification, name clash between dummy and index
|  |  |  |  +- test 14, verification, non-exhaustive case analysis
|  |  |  |  +- test 15, verification, incorrect new assumption
|  |  |  |  +- [ Success: 3 / 3 ]
|  |  |  +- part 5
|  |  |  |  +- test 16, verification, proof by parts
|  |  |  |  +- test 17, ill-defined types
|  |  |  |  +- test 18, assertions have type bool
|  |  |  |  +- test 22, missing witness
|  |  |  |  +- [ Success: 4 / 4 ]
|  |  |  +- [ Success: 23 / 23 ]
|  |  +- lambda expressions in the cube example
|  |  |  +- part 0
|  |  |  |  +- test 0, verification, lambda vs empty-fun
|  |  |  |  +- test 1, verification, lambda vs ovl, mk-fun
|  |  |  |  +- test 2, verification, lambda vs apply
|  |  |  |  +- [ Success: 3 / 3 ]
|  |  |  +- part 1
|  |  |  |  +- test 3, verification, set comprehension, failed proof
|  |  |  |  +- test 4, adding a progress property
|  |  |  |  +- test 5, unless properties
|  |  |  |  +- [ Success: 3 / 3 ]
|  |  |  +- part 2
|  |  |  |  +- test 6, verify progress refinement
|  |  |  |  +- test 7, verify refinement rules
|  |  |  |  +- test 8, verify refinement rules
|  |  |  |  +- [ Success: 3 / 3 ]
|  |  |  +- part 3
|  |  |  |  +- test 9, verify disjunction rule
|  |  |  |  +- test 10, error: cyclic proof
|  |  |  |  *** FAILED ***
|  |  |  |  +- test 11, intermediate goals of monotonic simplification
|  |  |  |  +- test 12, bound variable with ambiguous type
|  |  |  |  *** FAILED ***
|  |  |  |  +- test 13, inv6, PO
|  |  |  |  +- [ Success: 3 / 5 ]
|  |  |  +- [ Success: 12 / 14 ]
|  |  +- refinement relations in the phase example
|  |  |  +- test 0, cyclic refinement relation between machines
|  |  |  *** FAILED ***
|  |  |  +- test 1, valid references to variables and event declared in ancestor
|  |  |  *** FAILED ***
|  |  |  +- [ Success: 0 / 2 ]
|  |  +- train station example, with refinement
|  |  |  +- verify machine m0 (ref)
|  |  |  *** FAILED ***
|  |  |  +- verify machine m1 (ref)
|  |  |  *** FAILED ***
|  |  |  +- verify machine m2 (ref)
|  |  |  *** FAILED ***
|  |  |  +- verify machine m2 (ref), in many files
|  |  |  *** FAILED ***
|  |  |  +- cyclic proof of liveness through 3 refinements
|  |  |  *** FAILED ***
|  |  |  +- refinement of undefined machine
|  |  |  *** FAILED ***
|  |  |  +- repeated imports
|  |  |  *** FAILED ***
|  |  |  +- [ Success: 0 / 7 ]
|  |  +- train station example, with sets
|  |  |  +- verify machine m0 (sets)
|  |  |  *** FAILED ***
|  |  |  +- verify machine m1 (sets)
|  |  |  *** FAILED ***
|  |  |  +- verify machine m2 (sets)
|  |  |  *** FAILED ***
|  |  |  +- m2, enablement proof obligation
|  |  |  *** FAILED ***
|  |  |  +- m2, transient proof obligation, feasibility
|  |  |  *** FAILED ***
|  |  |  +- m2, transient proof obligation, enablement
|  |  |  *** FAILED ***
|  |  |  +- m2, transient proof obligation, negation
|  |  |  *** FAILED ***
|  |  |  +- m2, safety property of schedule replacement
|  |  |  *** FAILED ***
|  |  |  +- verify machine m3 (sets)
|  |  |  *** FAILED ***
|  |  |  +- type checking of boolean expressions
|  |  |  *** FAILED ***
|  |  |  +- verify machine m3 error (wandering free variable)
|  |  |  *** FAILED ***
|  |  |  +- witness well definedness PO
|  |  |  *** FAILED ***
|  |  |  +- [ Success: 0 / 12 ]
|  |  +- Garbage collector
|  |  |  +- test0: verify m0
|  |  |  *** FAILED ***
|  |  |  +- test1: verify m1
|  |  |  *** FAILED ***
|  |  |  +- test2: verify m2
|  |  |  *** FAILED ***
|  |  |  +- test3: monotonic simplification
|  |  |     Exception:  UnitB/PO.hs:914:21-26: Assertion failed "Sequent scopes: 
|  |  |  (pair x1 x2)
|  |  |  (forall ((r1 (\set (Pair _t0 _t1))) (x1 _t0) (x2 _t1)) (=> true (=> (elem (pair x1 x2) r1) (elem x1 (reldom r1)))))
|  |  |  (pair x1 x2)
|  |  |  (pair x1 x2)
|  |  |  (forall ((r1 (\set (Pair _t0 _t1))) (x1 _t0) (x2 _t1)) (=> true (= (elem (pair x1 x2) (seq (asrel (mk-set x1)) r1)) (elem (pair x1 x2) r1))))
|  |  |  (pair x1 x1)
|  |  |  (forall ((x1 _t0)) (=> true (= (asrel (mk-set x1)) (mk-set (pair x1 x1)))))
|  |  |  (pair x1 x3)
|  |  |  (forall ((x1 _t0) (x3 _t0)) (=> true (= (seq (mk-set (pair x1 x3)) all) (seq (asrel (mk-set x1)) all))))
|  |  |  (pair x1 x2)
|  |  |  (pair x4 x5)
|  |  |  (pair x1 x5)
|  |  |  (forall ((x1 _t0) (x2 _t1) (x4 _t2) (x5 _t3)) (=> true (= (seq (seq (mk-set (pair x1 x2)) all) (mk-set (pair x4 x5))) (mk-set (pair x1 x5)))))
|  |  |  (pair x1 x2)
|  |  |  (forall ((x1 _t0) (x2 _t1)) (=> true (= (seq (seq (asrel (mk-set x1)) all) (asrel (mk-set x2))) (mk-set (pair x1 x2)))))
|  |  |  (pair x1 x3)
|  |  |  (forall ((x1 _t0) (x3 _t0)) (=> true (= (elem (pair x1 x3) id) (= x1 x3))))
|  |  |  (pair x1 x3)
|  |  |  (pair x1 x3)
|  |  |  (forall ((rr (\set (Pair _t0 _t0))) (rr2 (\set (Pair _t0 _t0))) (x1 _t0) (x3 _t0)) (=> true (=> (elem (pair x1 x3) (star (intersect rr rr2))) (elem (pair x1 x3) (star rr)))))
|  |  |  (pair x1 x3)
|  |  |  (pair x1 x3)
|  |  |  (forall ((rr (\set (Pair _t0 _t0))) (rr2 (\set (Pair _t0 _t0))) (x1 _t0) (x3 _t0)) (=> true (=> (elem (pair x1 x3) (star rr)) (elem (pair x1 x3) (star (union rr rr2))))))
|  |  |  (pair x1 x2)
|  |  |  (forall ((r1 (\set (Pair _t0 _t1))) (s1 (\set _t0)) (x2 _t1)) (=> true (= (elem x2 (lookup r1 s1)) (exists ((x1 _t0)) (and (elem x1 s1) (elem (pair x1 x2) r1))))))
|  |  |  (pair x1 x2)
|  |  |  (forall ((r1 (\set (Pair _t0 _t1))) (s1 (\set _t0)) (x1 _t0) (x2 _t1)) (=> true (=> (elem x1 s1) (=> (elem (pair x1 x2) r1) (elem x2 (lookup r1 s1))))))
|  |  |  (pair r p_1)
|  |  |  (pair r q)
|  |  |  (pair p_0 p_1)
|  |  |  (pair r q)
|  |  |  (forall ((p_0 Node) (p_1 Node) (q Node)) (=> (elem (pair r p_1) (star ptr)) (=> (elem (pair r q) (star (union ptr (mk-set (pair p_0 p_1))))) (elem (pair r q) (star ptr)))))
|  |  |  ",  sort: Node, Pair [a,b], pfun [a,b], set [a]
|  |  |   apply[_t0,_t1]: (pfun t0 t1) x t0 -> t1
|  |  |   asrel[_a]: (set a) -> (set (Pair a a))
|  |  |   const[_a,_b]: b -> (Array a b)
|  |  |   dom[_t0,_t1]: (pfun t0 t1) -> (set t0)
|  |  |   dom-rest[_t0,_t1]: (set t0) x (pfun t0 t1) -> (pfun t0 t1)
|  |  |   dom-subt[_t0,_t1]: (set t0) x (pfun t0 t1) -> (pfun t0 t1)
|  |  |   empty-fun[_t0,_t1]: (pfun t0 t1)
|  |  |   finite[_t]: (set t) -> Bool
|  |  |   id[_a]: (set (Pair a a))
|  |  |   ident[_a]: (Array a a)
|  |  |   injective[_t0,_t1]: (pfun t0 t1) -> Bool
|  |  |   lambda[_a,_b]: (set a) x (Array a b) -> (pfun a b)
|  |  |   lookup[_a,_b]: (set (Pair a b)) x (set a) -> (set b)
|  |  |   mk-fun[_t0,_t1]: t0 x t1 -> (pfun t0 t1)
|  |  |   mk-set[_t]: t -> (set t)
|  |  |   ovl[_t0,_t1]: (pfun t0 t1) x (pfun t0 t1) -> (pfun t0 t1)
|  |  |   plus[_a]: (set (Pair a a)) -> (set (Pair a a))
|  |  |   qsum[_a]: (set a) x (Array a Int) -> Int
|  |  |   qunion[_a,_b]: (set a) x (Array a (set b)) -> (set b)
|  |  |   ran[_t0,_t1]: (pfun t0 t1) -> (set t1)
|  |  |   reldom[_a,_b]: (set (Pair a b)) -> (set a)
|  |  |   seq[_a,_b,_c]: (set (Pair a b)) x (set (Pair b c)) -> (set (Pair a c))
|  |  |   set[_a,_b]: (set a) x (Array a b) -> (set b)
|  |  |   star[_a]: (set (Pair a a)) -> (set (Pair a a))
|  |  |   tfun[_t0,_t1]: (set t0) x (set t1) -> (set (pfun t0 t1))
|  |  |   Node: (set Node)  =  ((as const (set Node)) true)
|  |  |   all[_t] : (set t)  =  ((as const (set t)) true)
|  |  |   compl[_t] : (s1 (set _t)) -> (set t)  =  ((_ map not) s1)
|  |  |   elem[_t] : (x _t) x (s1 (set _t)) -> Bool  =  (select s1 x)
|  |  |   empty-set[_t] : (set t)  =  ((as const (set t)) false)
|  |  |   set-diff[_t] : (s1 (set _t)) x (s2 (set _t)) -> (set t)  =  (intersect s1 ((_ map not) s2))
|  |  |   st-subset[_t] : (s1 (set _t)) x (s2 (set _t)) -> Bool  =  (and (subset s1 s2) (not (= s1 s2)))
|  |  |   free: (set Node)
|  |  |   live: (set Node)
|  |  |   ptr: (set (Pair Node Node))
|  |  |   r: Node
|  |  |   (elem@@Node r live)
|  |  |   (= Node (union live free))
|  |  |   (= (intersect live free) empty-set@@Node)
|  |  |   (forall ( (term (Array _t Int)) )
|  |  |           (=> true (= (qsum@@_t empty-set@@_t term) 0)))
|  |  |   (forall ( (r (set _t))
|  |  |             (term (Array _t Int))
|  |  |             (x _t) )
|  |  |           (=> true
|  |  |               (=> (not (elem@@_t x r))
|  |  |                   (= (qsum@@_t (union r (mk-set@@_t x)) term)
|  |  |                      (+ (qsum@@_t r term) (select term x))))))
|  |  |   (forall ( (r (set _t))
|  |  |             (r0 (set _t))
|  |  |             (term (Array _t Int)) )
|  |  |           (=> true
|  |  |               (=> (= (intersect r r0) empty-set@@_t)
|  |  |                   (= (qsum@@_t (union r r0) term)
|  |  |                      (+ (qsum@@_t r term) (qsum@@_t r0 term))))))
|  |  |   (forall ( (r (set _t)) )
|  |  |           (=> true
|  |  |               (=> (finite@@_t r)
|  |  |                   (<= 0 (qsum@@_t r (const@@_t@@Int 1))))))
|  |  |   (forall ( (r (set _t)) )
|  |  |           (=> true
|  |  |               (= (= (qsum@@_t r (const@@_t@@Int 1)) 0)
|  |  |                  (= r empty-set@@_t))))
|  |  |   (forall ( (x _t) )
|  |  |           (=> true
|  |  |               (= (qsum@@_t (mk-set@@_t x) (const@@_t@@Int 1)) 1)))
|  |  |   (forall ( (r (set _t)) )
|  |  |           (=> true
|  |  |               (= (= (qsum@@_t r (const@@_t@@Int 1)) 1)
|  |  |                  (exists ( (x _t) ) (and true (= r (mk-set@@_t x)))))))
|  |  |   (forall ( (r (set _t))
|  |  |             (r0 (set _t)) )
|  |  |           (=> true
|  |  |               (=> (= (intersect r r0) empty-set@@_t)
|  |  |                   (= (qsum@@_t (union r r0) (const@@_t@@Int 1))
|  |  |                      (+ (qsum@@_t r (const@@_t@@Int 1))
|  |  |                         (qsum@@_t r0 (const@@_t@@Int 1)))))))
|  |  |   (forall ( (x _t0)
|  |  |             (y _t1) )
|  |  |           (=> true (= (select (const@@_t1@@_t0 x) y) x)))
|  |  |   (forall ( (x _t0) ) (=> true (= (select ident@@_t0 x) x)))
|  |  |   (= (dom@@_t0@@_t1 empty-fun@@_t0@@_t1)
|  |  |      empty-set@@_t0)
|  |  |   (forall ( (t (Array _t0 _t1)) )
|  |  |           (=> true
|  |  |               (= (lambda@@_t0@@_t1 empty-set@@_t0 t)
|  |  |                  empty-fun@@_t0@@_t1)))
|  |  |   (forall ( (r (set _t0))
|  |  |             (t (Array _t0 _t1)) )
|  |  |           (=> true (= (dom@@_t0@@_t1 (lambda@@_t0@@_t1 r t)) r)))
|  |  |   (forall ( (t (Array _t0 _t1))
|  |  |             (x _t0) )
|  |  |           (=> true
|  |  |               (= (lambda@@_t0@@_t1 (mk-set@@_t0 x) t)
|  |  |                  (mk-fun@@_t0@@_t1 x (select t x)))))
|  |  |   (forall ( (r (set _t0))
|  |  |             (t (Array _t0 _t1))
|  |  |             (x _t0) )
|  |  |           (=> true
|  |  |               (= (ovl@@_t0@@_t1 (lambda@@_t0@@_t1 r t)
|  |  |                                 (mk-fun@@_t0@@_t1 x (select t x)))
|  |  |                  (lambda@@_t0@@_t1 (union r (mk-set@@_t0 x)) t))))
|  |  |   (forall ( (r (set _t0))
|  |  |             (r0 (set _t0))
|  |  |             (t (Array _t0 _t1)) )
|  |  |           (=> true
|  |  |               (= (ovl@@_t0@@_t1 (lambda@@_t0@@_t1 r t) (lambda@@_t0@@_t1 r0 t))
|  |  |                  (lambda@@_t0@@_t1 (union r r0) t))))
|  |  |   (forall ( (f1 (pfun _t0 _t1)) )
|  |  |           (=> true
|  |  |               (= (ovl@@_t0@@_t1 f1 empty-fun@@_t0@@_t1) f1)))
|  |  |   (forall ( (f1 (pfun _t0 _t1)) )
|  |  |           (=> true
|  |  |               (= (ovl@@_t0@@_t1 empty-fun@@_t0@@_t1 f1) f1)))
|  |  |   (forall ( (x _t0)
|  |  |             (y _t1) )
|  |  |           (=> true
|  |  |               (= (dom@@_t0@@_t1 (mk-fun@@_t0@@_t1 x y))
|  |  |                  (mk-set@@_t0 x))))
|  |  |   (forall ( (f1 (pfun _t0 _t1))
|  |  |             (f2 (pfun _t0 _t1))
|  |  |             (x _t0) )
|  |  |           (=> true
|  |  |               (=> (elem@@_t0 x (dom@@_t0@@_t1 f2))
|  |  |                   (= (apply@@_t0@@_t1 (ovl@@_t0@@_t1 f1 f2) x)
|  |  |                      (apply@@_t0@@_t1 f2 x)))))
|  |  |   (forall ( (f1 (pfun _t0 _t1))
|  |  |             (f2 (pfun _t0 _t1))
|  |  |             (x _t0) )
|  |  |           (=> true
|  |  |               (=> (and (elem@@_t0 x (dom@@_t0@@_t1 f1))
|  |  |                        (not (elem@@_t0 x (dom@@_t0@@_t1 f2))))
|  |  |                   (= (apply@@_t0@@_t1 (ovl@@_t0@@_t1 f1 f2) x)
|  |  |                      (apply@@_t0@@_t1 f1 x)))))
|  |  |   (forall ( (x _t0)
|  |  |             (y _t1) )
|  |  |           (=> true
|  |  |               (= (apply@@_t0@@_t1 (mk-fun@@_t0@@_t1 x y) x) y)))
|  |  |   (forall ( (f1 (pfun _t0 _t1))
|  |  |             (s1 (set _t0))
|  |  |             (x _t0) )
|  |  |           (=> true
|  |  |               (=> (and (elem@@_t0 x s1) (elem@@_t0 x (dom@@_t0@@_t1 f1)))
|  |  |                   (= (apply@@_t0@@_t1 (dom-rest@@_t0@@_t1 s1 f1) x)
|  |  |                      (apply@@_t0@@_t1 f1 x)))))
|  |  |   (forall ( (f1 (pfun _t0 _t1))
|  |  |             (s1 (set _t0))
|  |  |             (x _t0) )
|  |  |           (=> true
|  |  |               (=> (elem@@_t0 x (set-diff@@_t0 (dom@@_t0@@_t1 f1) s1))
|  |  |                   (= (apply@@_t0@@_t1 (dom-subt@@_t0@@_t1 s1 f1) x)
|  |  |                      (apply@@_t0@@_t1 f1 x)))))
|  |  |   (forall ( (s2 (set _t1)) )
|  |  |           (=> true
|  |  |               (elem@Open@@pfun@@_t0@@_t1@Close empty-fun@@_t0@@_t1
|  |  |                                                (tfun@@_t0@@_t1 empty-set@@_t0 s2))))
|  |  |   (forall ( (f1 (pfun _t0 _t1))
|  |  |             (f2 (pfun _t0 _t1)) )
|  |  |           (=> true
|  |  |               (= (dom@@_t0@@_t1 (ovl@@_t0@@_t1 f1 f2))
|  |  |                  (union (dom@@_t0@@_t1 f1) (dom@@_t0@@_t1 f2)))))
|  |  |   (forall ( (f1 (pfun _t0 _t1))
|  |  |             (s1 (set _t0)) )
|  |  |           (=> true
|  |  |               (= (dom@@_t0@@_t1 (dom-rest@@_t0@@_t1 s1 f1))
|  |  |                  (intersect s1 (dom@@_t0@@_t1 f1)))))
|  |  |   (forall ( (f1 (pfun _t0 _t1))
|  |  |             (s1 (set _t0)) )
|  |  |           (=> true
|  |  |               (= (dom@@_t0@@_t1 (dom-subt@@_t0@@_t1 s1 f1))
|  |  |                  (set-diff@@_t0 (dom@@_t0@@_t1 f1) s1))))
|  |  |   (forall ( (r (set _t0))
|  |  |             (t (Array _t0 _t1))
|  |  |             (x _t0) )
|  |  |           (=> true
|  |  |               (=> (elem@@_t0 x r)
|  |  |                   (= (apply@@_t0@@_t1 (lambda@@_t0@@_t1 r t) x)
|  |  |                      (select t x)))))
|  |  |   (forall ( (f1 (pfun _t0 _t1))
|  |  |             (x _t0)
|  |  |             (y _t1) )
|  |  |           (=> true
|  |  |               (= (and (elem@@_t0 x (dom@@_t0@@_t1 f1))
|  |  |                       (= (apply@@_t0@@_t1 f1 x) y))
|  |  |                  (= (select f1 x) (Just y)))))
|  |  |   (forall ( (f1 (pfun _t0 _t1))
|  |  |             (x _t0)
|  |  |             (x2 _t0)
|  |  |             (y _t1) )
|  |  |           (=> true
|  |  |               (=> (not (= x x2))
|  |  |                   (= (apply@@_t0@@_t1 (ovl@@_t0@@_t1 f1 (mk-fun@@_t0@@_t1 x y)) x2)
|  |  |                      (apply@@_t0@@_t1 f1 x2)))))
|  |  |   (forall ( (f1 (pfun _t0 _t1))
|  |  |             (x _t0)
|  |  |             (y _t1) )
|  |  |           (=> true
|  |  |               (= (apply@@_t0@@_t1 (ovl@@_t0@@_t1 f1 (mk-fun@@_t0@@_t1 x y)) x)
|  |  |                  y)))
|  |  |   (= (ran@@_t0@@_t1 empty-fun@@_t0@@_t1)
|  |  |      empty-set@@_t1)
|  |  |   (forall ( (f1 (pfun _t0 _t1))
|  |  |             (y _t1) )
|  |  |           (=> true
|  |  |               (= (elem@@_t1 y (ran@@_t0@@_t1 f1))
|  |  |                  (exists ( (x _t0) )
|  |  |                          (and true
|  |  |                               (and (elem@@_t0 x (dom@@_t0@@_t1 f1))
|  |  |                                    (= (apply@@_t0@@_t1 f1 x) y)))))))
|  |  |   (forall ( (x _t0)
|  |  |             (y _t1) )
|  |  |           (=> true
|  |  |               (= (ran@@_t0@@_t1 (mk-fun@@_t0@@_t1 x y))
|  |  |                  (mk-set@@_t1 y))))
|  |  |   (forall ( (f1 (pfun _t0 _t1))
|  |  |             (s1 (set _t0))
|  |  |             (s2 (set _t1)) )
|  |  |           (=> true
|  |  |               (= (elem@Open@@pfun@@_t0@@_t1@Close f1 (tfun@@_t0@@_t1 s1 s2))
|  |  |                  (and (= s1 (dom@@_t0@@_t1 f1))
|  |  |                       (subset (ran@@_t0@@_t1 f1) s2)))))
|  |  |   (forall ( (f1 (pfun _t0 _t1)) )
|  |  |           (=> true
|  |  |               (= (injective@@_t0@@_t1 f1)
|  |  |                  (forall ( (x _t0)
|  |  |                            (x2 _t0) )
|  |  |                          (=> (and (elem@@_t0 x (dom@@_t0@@_t1 f1))
|  |  |                                   (elem@@_t0 x2 (dom@@_t0@@_t1 f1)))
|  |  |                              (=> (= (apply@@_t0@@_t1 f1 x) (apply@@_t0@@_t1 f1 x2))
|  |  |                                  (= x x2)))))))
|  |  |   (injective@@_t0@@_t1 empty-fun@@_t0@@_t1)
|  |  |   (forall ( (f1 (pfun _t0 _t1))
|  |  |             (x _t0) )
|  |  |           (=> true
|  |  |               (=> (elem@@_t0 x (dom@@_t0@@_t1 f1))
|  |  |                   (elem@@_t1 (apply@@_t0@@_t1 f1 x) (ran@@_t0@@_t1 f1)))))
|  |  |   (forall ( (f1 (pfun _t0 _t1))
|  |  |             (s1 (set _t0))
|  |  |             (x _t0) )
|  |  |           (=> true
|  |  |               (=> (elem@@_t0 x (set-diff@@_t0 (dom@@_t0@@_t1 f1) s1))
|  |  |                   (elem@@_t1 (apply@@_t0@@_t1 f1 x)
|  |  |                              (ran@@_t0@@_t1 (dom-subt@@_t0@@_t1 s1 f1))))))
|  |  |   (forall ( (f1 (pfun _t0 _t1))
|  |  |             (s1 (set _t0))
|  |  |             (x _t0) )
|  |  |           (=> true
|  |  |               (=> (elem@@_t0 x (intersect (dom@@_t0@@_t1 f1) s1))
|  |  |                   (elem@@_t1 (apply@@_t0@@_t1 f1 x)
|  |  |                              (ran@@_t0@@_t1 (dom-rest@@_t0@@_t1 s1 f1))))))
|  |  |   (forall ( (f1 (pfun _t0 _t1))
|  |  |             (x _t0)
|  |  |             (y _t1) )
|  |  |           (=> true
|  |  |               (=> (and (elem@@_t0 x (dom@@_t0@@_t1 f1))
|  |  |                        (injective@@_t0@@_t1 f1))
|  |  |                   (= (ran@@_t0@@_t1 (ovl@@_t0@@_t1 f1 (mk-fun@@_t0@@_t1 x y)))
|  |  |                      (union (set-diff@@_t1 (ran@@_t0@@_t1 f1)
|  |  |                                            (mk-set@@_t1 (apply@@_t0@@_t1 f1 x)))
|  |  |                             (mk-set@@_t1 y))))))
|  |  |   (forall ( (f1 (pfun _t0 _t1))
|  |  |             (x _t0)
|  |  |             (y _t1) )
|  |  |           (=> true
|  |  |               (=> (not (elem@@_t0 x (dom@@_t0@@_t1 f1)))
|  |  |                   (= (ran@@_t0@@_t1 (ovl@@_t0@@_t1 f1 (mk-fun@@_t0@@_t1 x y)))
|  |  |                      (union (ran@@_t0@@_t1 f1) (mk-set@@_t1 y))))))
|  |  |   (forall ( (x _t)
|  |  |             (y _t) )
|  |  |           (=> true (= (elem@@_t x (mk-set@@_t y)) (= x y))))
|  |  |   (forall ( (r1 (set _t0))
|  |  |             (term (Array _t0 _t))
|  |  |             (y _t) )
|  |  |           (=> true
|  |  |               (= (elem@@_t y (set@@_t0@@_t r1 term))
|  |  |                  (exists ( (x _t0) )
|  |  |                          (and (elem@@_t0 x r1) (= (select term x) y))))))
|  |  |   (forall ( (r1 (set _t0))
|  |  |             (term (Array _t0 _t))
|  |  |             (y _t) )
|  |  |           (=> true
|  |  |               (= (= (set@@_t0@@_t r1 term) (mk-set@@_t y))
|  |  |                  (forall ( (x _t0) )
|  |  |                          (=> (elem@@_t0 x r1) (= (select term x) y))))))
|  |  |   (forall ( (s1 (set _t))
|  |  |             (s2 (set _t)) )
|  |  |           (=> true
|  |  |               (=> (finite@@_t s1) (finite@@_t (set-diff@@_t s1 s2)))))
|  |  |   (forall ( (s1 (set _t))
|  |  |             (s2 (set _t)) )
|  |  |           (=> true
|  |  |               (=> (and (finite@@_t s1) (finite@@_t s2))
|  |  |                   (finite@@_t (union s1 s2)))))
|  |  |   (forall ( (x _t) ) (=> true (finite@@_t (mk-set@@_t x))))
|  |  |   (finite@@_t empty-set@@_t)
|  |  |   (forall ( (s1 (set _t))
|  |  |             (s2 (set _t)) )
|  |  |           (=> true
|  |  |               (=> (subset s1 s2)
|  |  |                   (=> (finite@@_t s2) (finite@@_t s1)))))
|  |  |   (forall ( (r1 (set _t0)) )
|  |  |           (=> true (= (set@@_t0@@_t0 r1 ident@@_t0) r1)))
|  |  |   (forall ( (terms (Array _t0 (set _t))) )
|  |  |           (=> true
|  |  |               (= (qunion@@_t0@@_t empty-set@@_t0 terms)
|  |  |                  empty-set@@_t)))
|  |  |   (forall ( (terms (Array _t0 (set _t)))
|  |  |             (x _t0) )
|  |  |           (=> true
|  |  |               (= (qunion@@_t0@@_t (mk-set@@_t0 x) terms)
|  |  |                  (select terms x))))
|  |  |   (forall ( (r1 (set _t0))
|  |  |             (r2 (set _t0))
|  |  |             (terms (Array _t0 (set _t))) )
|  |  |           (=> true
|  |  |               (= (qunion@@_t0@@_t (union r1 r2) terms)
|  |  |                  (union (qunion@@_t0@@_t r1 terms)
|  |  |                         (qunion@@_t0@@_t r2 terms)))))
|  |  |   (forall ( (r1 (set _t0))
|  |  |             (terms (Array _t0 (set _t)))
|  |  |             (terms0 (Array _t0 (set _t))) )
|  |  |           (=> true
|  |  |               (=> (forall ( (x _t0) )
|  |  |                           (=> (elem@@_t0 x r1)
|  |  |                               (= (select terms x) (select terms0 x))))
|  |  |                   (= (qunion@@_t0@@_t r1 terms)
|  |  |                      (qunion@@_t0@@_t r1 terms0)))))
|  |  |   (forall ( (r1 (set (Pair _t0 _t1)))
|  |  |             (x1 _t0)
|  |  |             (x2 _t1) )
|  |  |           (=> true
|  |  |               (=> (elem@Open@@Pair@@_t0@@_t1@Close (pair x1 x2) r1)
|  |  |                   (elem@@_t0 x1 (reldom@@_t0@@_t1 r1)))))
|  |  |   (forall ( (r1 (set (Pair _t0 _t1)))
|  |  |             (s1 (set _t0)) )
|  |  |           (=> true
|  |  |               (= (reldom@@_t0@@_t1 (seq@@_t0@@_t0@@_t1 (asrel@@_t0 s1) r1))
|  |  |                  (intersect s1 (reldom@@_t0@@_t1 r1)))))
|  |  |   (forall ( (r1 (set (Pair _t0 _t1)))
|  |  |             (x1 _t0)
|  |  |             (x2 _t1) )
|  |  |           (=> true
|  |  |               (= (elem@Open@@Pair@@_t0@@_t1@Close (pair x1 x2)
|  |  |                                                   (seq@@_t0@@_t0@@_t1 (asrel@@_t0 (mk-set@@_t0 x1)) r1))
|  |  |                  (elem@Open@@Pair@@_t0@@_t1@Close (pair x1 x2) r1))))
|  |  |   (forall ( (x1 _t0) )
|  |  |           (=> true
|  |  |               (= (asrel@@_t0 (mk-set@@_t0 x1))
|  |  |                  (mk-set@Open@@Pair@@_t0@@_t0@Close (pair x1 x1)))))
|  |  |   (forall ( (r1 (set (Pair _t0 _t1)))
|  |  |             (r3 (set (Pair _t1 _t2)))
|  |  |             (r5 (set (Pair _t2 _t3))) )
|  |  |           (=> true
|  |  |               (= (seq@@_t0@@_t2@@_t3 (seq@@_t0@@_t1@@_t2 r1 r3) r5)
|  |  |                  (seq@@_t0@@_t1@@_t3 r1 (seq@@_t1@@_t2@@_t3 r3 r5)))))
|  |  |   (forall ( (r1 (set (Pair _t0 _t1)))
|  |  |             (r2 (set (Pair _t0 _t1)))
|  |  |             (r3 (set (Pair _t1 _t2))) )
|  |  |           (=> true
|  |  |               (=> (subset r1 r2)
|  |  |                   (subset (seq@@_t0@@_t1@@_t2 r1 r3)
|  |  |                           (seq@@_t0@@_t1@@_t2 r2 r3)))))
|  |  |   (forall ( (r1 (set (Pair _t0 _t1)))
|  |  |             (r2 (set (Pair _t0 _t1)))
|  |  |             (r4 (set (Pair _t2 _t0))) )
|  |  |           (=> true
|  |  |               (=> (subset r1 r2)
|  |  |                   (subset (seq@@_t2@@_t0@@_t1 r4 r1)
|  |  |                           (seq@@_t2@@_t0@@_t1 r4 r2)))))
|  |  |   (forall ( (rr (set (Pair _t0 _t0)))
|  |  |             (rr2 (set (Pair _t0 _t0))) )
|  |  |           (=> true
|  |  |               (= (star@@_t0 (union rr rr2))
|  |  |                  (seq@@_t0@@_t0@@_t0 (star@@_t0 (seq@@_t0@@_t0@@_t0 (star@@_t0 rr) rr2))
|  |  |                                      (star@@_t0 rr)))))
|  |  |   (forall ( (rr (set (Pair _t0 _t0)))
|  |  |             (rr2 (set (Pair _t0 _t0))) )
|  |  |           (=> true
|  |  |               (= (star@@_t0 (union rr rr2))
|  |  |                  (seq@@_t0@@_t0@@_t0 (star@@_t0 rr2)
|  |  |                                      (star@@_t0 (seq@@_t0@@_t0@@_t0 rr (star@@_t0 rr2)))))))
|  |  |   (forall ( (rr (set (Pair _t0 _t0))) )
|  |  |           (=> true
|  |  |               (= (union (seq@@_t0@@_t0@@_t0 (star@@_t0 rr) rr) id@@_t0)
|  |  |                  (star@@_t0 rr))))
|  |  |   (forall ( (rr (set (Pair _t0 _t0))) )
|  |  |           (=> true
|  |  |               (= (union (seq@@_t0@@_t0@@_t0 rr (star@@_t0 rr)) id@@_t0)
|  |  |                  (star@@_t0 rr))))
|  |  |   (forall ( (r1 (set (Pair _t0 _t1)))
|  |  |             (r2 (set (Pair _t0 _t1)))
|  |  |             (r3 (set (Pair _t1 _t2))) )
|  |  |           (=> true
|  |  |               (= (seq@@_t0@@_t1@@_t2 (union r1 r2) r3)
|  |  |                  (union (seq@@_t0@@_t1@@_t2 r1 r3)
|  |  |                         (seq@@_t0@@_t1@@_t2 r2 r3)))))
|  |  |   (forall ( (r1 (set (Pair _t0 _t1)))
|  |  |             (r2 (set (Pair _t0 _t1)))
|  |  |             (r4 (set (Pair _t2 _t0))) )
|  |  |           (=> true
|  |  |               (= (seq@@_t2@@_t0@@_t1 r4 (union r1 r2))
|  |  |                  (union (seq@@_t2@@_t0@@_t1 r4 r1)
|  |  |                         (seq@@_t2@@_t0@@_t1 r4 r2)))))
|  |  |   (forall ( (x1 _t0)
|  |  |             (x3 _t0) )
|  |  |           (=> true
|  |  |               (= (seq@@_t0@@_t0@@_t1 (mk-set@Open@@Pair@@_t0@@_t0@Close (pair x1 x3))
|  |  |                                      all@Open@@Pair@@_t0@@_t1@Close)
|  |  |                  (seq@@_t0@@_t0@@_t1 (asrel@@_t0 (mk-set@@_t0 x1))
|  |  |                                      all@Open@@Pair@@_t0@@_t1@Close))))
|  |  |   (forall ( (x1 _t0)
|  |  |             (x2 _t1)
|  |  |             (x4 _t2)
|  |  |             (x5 _t3) )
|  |  |           (=> true
|  |  |               (= (seq@@_t0@@_t2@@_t3 (seq@@_t0@@_t1@@_t2 (mk-set@Open@@Pair@@_t0@@_t1@Close (pair x1 x2))
|  |  |                                                          all@Open@@Pair@@_t1@@_t2@Close)
|  |  |                                      (mk-set@Open@@Pair@@_t2@@_t3@Close (pair x4 x5)))
|  |  |                  (mk-set@Open@@Pair@@_t0@@_t3@Close (pair x1 x5)))))
|  |  |   (forall ( (x1 _t0)
|  |  |             (x2 _t1) )
|  |  |           (=> true
|  |  |               (= (seq@@_t0@@_t1@@_t1 (seq@@_t0@@_t0@@_t1 (asrel@@_t0 (mk-set@@_t0 x1))
|  |  |                                                          all@Open@@Pair@@_t0@@_t1@Close)
|  |  |                                      (asrel@@_t1 (mk-set@@_t1 x2)))
|  |  |                  (mk-set@Open@@Pair@@_t0@@_t1@Close (pair x1 x2)))))
|  |  |   (forall ( (x1 _t0)
|  |  |             (x3 _t0) )
|  |  |           (=> true
|  |  |               (= (elem@Open@@Pair@@_t0@@_t0@Close (pair x1 x3) id@@_t0)
|  |  |                  (= x1 x3))))
|  |  |   (forall ( (r1 (set (Pair _t0 _t1))) )
|  |  |           (=> true (= (seq@@_t0@@_t0@@_t1 id@@_t0 r1) r1)))
|  |  |   (forall ( (r1 (set (Pair _t0 _t1))) )
|  |  |           (=> true (= (seq@@_t0@@_t1@@_t1 r1 id@@_t1) r1)))
|  |  |   (forall ( (rr (set (Pair _t0 _t0))) )
|  |  |           (=> true (subset rr (star@@_t0 rr))))
|  |  |   (forall ( (rr (set (Pair _t0 _t0)))
|  |  |             (rr2 (set (Pair _t0 _t0))) )
|  |  |           (=> true
|  |  |               (=> (subset rr rr2)
|  |  |                   (subset (star@@_t0 rr) (star@@_t0 rr2)))))
|  |  |   (forall ( (rr (set (Pair _t0 _t0)))
|  |  |             (rr2 (set (Pair _t0 _t0)))
|  |  |             (x1 _t0)
|  |  |             (x3 _t0) )
|  |  |           (=> true
|  |  |               (=> (elem@Open@@Pair@@_t0@@_t0@Close (pair x1 x3) (star@@_t0 (intersect rr rr2)))
|  |  |                   (elem@Open@@Pair@@_t0@@_t0@Close (pair x1 x3) (star@@_t0 rr)))))
|  |  |   (forall ( (rr (set (Pair _t0 _t0)))
|  |  |             (rr2 (set (Pair _t0 _t0)))
|  |  |             (x1 _t0)
|  |  |             (x3 _t0) )
|  |  |           (=> true
|  |  |               (=> (elem@Open@@Pair@@_t0@@_t0@Close (pair x1 x3) (star@@_t0 rr))
|  |  |                   (elem@Open@@Pair@@_t0@@_t0@Close (pair x1 x3) (star@@_t0 (union rr rr2))))))
|  |  |   (forall ( (rr (set (Pair _t0 _t0))) )
|  |  |           (=> true
|  |  |               (= (seq@@_t0@@_t0@@_t0 (star@@_t0 rr) (star@@_t0 rr))
|  |  |                  (star@@_t0 rr))))
|  |  |   (forall ( (r1 (set (Pair _t0 _t1)))
|  |  |             (r2 (set (Pair _t0 _t1)))
|  |  |             (r3 (set (Pair _t1 _t2))) )
|  |  |           (=> true
|  |  |               (=> (subset r1 r2)
|  |  |                   (subset (seq@@_t0@@_t1@@_t2 r1 r3)
|  |  |                           (seq@@_t0@@_t1@@_t2 r2 r3)))))
|  |  |   (forall ( (r1 (set (Pair _t0 _t1)))
|  |  |             (r2 (set (Pair _t0 _t1)))
|  |  |             (r4 (set (Pair _t2 _t0))) )
|  |  |           (=> true
|  |  |               (=> (subset r1 r2)
|  |  |                   (subset (seq@@_t2@@_t0@@_t1 r4 r1)
|  |  |                           (seq@@_t2@@_t0@@_t1 r4 r2)))))
|  |  |   (forall ( (rr (set (Pair _t0 _t0))) )
|  |  |           (=> true
|  |  |               (= (plus@@_t0 rr)
|  |  |                  (seq@@_t0@@_t0@@_t0 (star@@_t0 rr) rr))))
|  |  |   (forall ( (rr (set (Pair _t0 _t0))) )
|  |  |           (=> true
|  |  |               (= (plus@@_t0 rr)
|  |  |                  (seq@@_t0@@_t0@@_t0 rr (star@@_t0 rr)))))
|  |  |   (forall ( (r1 (set (Pair _t0 _t1)))
|  |  |             (s1 (set _t0))
|  |  |             (x2 _t1) )
|  |  |           (=> true
|  |  |               (= (elem@@_t1 x2 (lookup@@_t0@@_t1 r1 s1))
|  |  |                  (exists ( (x1 _t0) )
|  |  |                          (and (elem@@_t0 x1 s1)
|  |  |                               (elem@Open@@Pair@@_t0@@_t1@Close (pair x1 x2) r1))))))
|  |  |   (forall ( (r1 (set (Pair _t0 _t1)))
|  |  |             (s1 (set _t0))
|  |  |             (x1 _t0)
|  |  |             (x2 _t1) )
|  |  |           (=> true
|  |  |               (=> (elem@@_t0 x1 s1)
|  |  |                   (=> (elem@Open@@Pair@@_t0@@_t1@Close (pair x1 x2) r1)
|  |  |                       (elem@@_t1 x2 (lookup@@_t0@@_t1 r1 s1))))))
|  |  |  |----
|  |  |   (forall ( (p_0 Node)
|  |  |             (p_1 Node)
|  |  |             (q Node) )
|  |  |           (=> (elem@Open@@Pair@@Node@@Node@Close (pair r p_1) (star@@Node ptr))
|  |  |               (=> (elem@Open@@Pair@@Node@@Node@Close (pair r q)
|  |  |                                                      (star@@Node (union ptr
|  |  |                                                                         (mk-set@Open@@Pair@@Node@@Node@Close (pair p_0 p_1)))))
|  |  |                   (elem@Open@@Pair@@Node@@Node@Close (pair r q) (star@@Node ptr)))))
|  |  |  +- test4: monotonicity of POs
|  |  |     Exception:  UnitB/PO.hs:914:21-26: Assertion failed "Sequent scopes: 
|  |  |  (pair x1 x2)
|  |  |  (forall ((r1 (\set (Pair _t0 _t1))) (x1 _t0) (x2 _t1)) (=> true (=> (elem (pair x1 x2) r1) (elem x1 (reldom r1)))))
|  |  |  (pair x1 x2)
|  |  |  (pair x1 x2)
|  |  |  (forall ((r1 (\set (Pair _t0 _t1))) (x1 _t0) (x2 _t1)) (=> true (= (elem (pair x1 x2) (seq (asrel (mk-set x1)) r1)) (elem (pair x1 x2) r1))))
|  |  |  (pair x1 x1)
|  |  |  (forall ((x1 _t0)) (=> true (= (asrel (mk-set x1)) (mk-set (pair x1 x1)))))
|  |  |  (pair x1 x3)
|  |  |  (forall ((x1 _t0) (x3 _t0)) (=> true (= (seq (mk-set (pair x1 x3)) all) (seq (asrel (mk-set x1)) all))))
|  |  |  (pair x1 x2)
|  |  |  (pair x4 x5)
|  |  |  (pair x1 x5)
|  |  |  (forall ((x1 _t0) (x2 _t1) (x4 _t2) (x5 _t3)) (=> true (= (seq (seq (mk-set (pair x1 x2)) all) (mk-set (pair x4 x5))) (mk-set (pair x1 x5)))))
|  |  |  (pair x1 x2)
|  |  |  (forall ((x1 _t0) (x2 _t1)) (=> true (= (seq (seq (asrel (mk-set x1)) all) (asrel (mk-set x2))) (mk-set (pair x1 x2)))))
|  |  |  (pair x1 x3)
|  |  |  (forall ((x1 _t0) (x3 _t0)) (=> true (= (elem (pair x1 x3) id) (= x1 x3))))
|  |  |  (pair x1 x3)
|  |  |  (pair x1 x3)
|  |  |  (forall ((rr (\set (Pair _t0 _t0))) (rr2 (\set (Pair _t0 _t0))) (x1 _t0) (x3 _t0)) (=> true (=> (elem (pair x1 x3) (star (intersect rr rr2))) (elem (pair x1 x3) (star rr)))))
|  |  |  (pair x1 x3)
|  |  |  (pair x1 x3)
|  |  |  (forall ((rr (\set (Pair _t0 _t0))) (rr2 (\set (Pair _t0 _t0))) (x1 _t0) (x3 _t0)) (=> true (=> (elem (pair x1 x3) (star rr)) (elem (pair x1 x3) (star (union rr rr2))))))
|  |  |  (pair x1 x2)
|  |  |  (forall ((r1 (\set (Pair _t0 _t1))) (s1 (\set _t0)) (x2 _t1)) (=> true (= (elem x2 (lookup r1 s1)) (exists ((x1 _t0)) (and (elem x1 s1) (elem (pair x1 x2) r1))))))
|  |  |  (pair x1 x2)
|  |  |  (forall ((r1 (\set (Pair _t0 _t1))) (s1 (\set _t0)) (x1 _t0) (x2 _t1)) (=> true (=> (elem x1 s1) (=> (elem (pair x1 x2) r1) (elem x2 (lookup r1 s1))))))
|  |  |  (pair r p_1)
|  |  |  (pair r q)
|  |  |  (pair p_0 p_1)
|  |  |  (pair r q)
|  |  |  (forall ((p_0 Node) (p_1 Node) (q Node)) (=> (elem (pair r p_1) (star ptr)) (=> (elem (pair r q) (star (union ptr (mk-set (pair p_0 p_1))))) (elem (pair r q) (star ptr)))))
|  |  |  ",  sort: Node, Pair [a,b], pfun [a,b], set [a]
|  |  |   apply[_t0,_t1]: (pfun t0 t1) x t0 -> t1
|  |  |   asrel[_a]: (set a) -> (set (Pair a a))
|  |  |   const[_a,_b]: b -> (Array a b)
|  |  |   dom[_t0,_t1]: (pfun t0 t1) -> (set t0)
|  |  |   dom-rest[_t0,_t1]: (set t0) x (pfun t0 t1) -> (pfun t0 t1)
|  |  |   dom-subt[_t0,_t1]: (set t0) x (pfun t0 t1) -> (pfun t0 t1)
|  |  |   empty-fun[_t0,_t1]: (pfun t0 t1)
|  |  |   finite[_t]: (set t) -> Bool
|  |  |   id[_a]: (set (Pair a a))
|  |  |   ident[_a]: (Array a a)
|  |  |   injective[_t0,_t1]: (pfun t0 t1) -> Bool
|  |  |   lambda[_a,_b]: (set a) x (Array a b) -> (pfun a b)
|  |  |   lookup[_a,_b]: (set (Pair a b)) x (set a) -> (set b)
|  |  |   mk-fun[_t0,_t1]: t0 x t1 -> (pfun t0 t1)
|  |  |   mk-set[_t]: t -> (set t)
|  |  |   ovl[_t0,_t1]: (pfun t0 t1) x (pfun t0 t1) -> (pfun t0 t1)
|  |  |   plus[_a]: (set (Pair a a)) -> (set (Pair a a))
|  |  |   qsum[_a]: (set a) x (Array a Int) -> Int
|  |  |   qunion[_a,_b]: (set a) x (Array a (set b)) -> (set b)
|  |  |   ran[_t0,_t1]: (pfun t0 t1) -> (set t1)
|  |  |   reldom[_a,_b]: (set (Pair a b)) -> (set a)
|  |  |   seq[_a,_b,_c]: (set (Pair a b)) x (set (Pair b c)) -> (set (Pair a c))
|  |  |   set[_a,_b]: (set a) x (Array a b) -> (set b)
|  |  |   star[_a]: (set (Pair a a)) -> (set (Pair a a))
|  |  |   tfun[_t0,_t1]: (set t0) x (set t1) -> (set (pfun t0 t1))
|  |  |   Node: (set Node)  =  ((as const (set Node)) true)
|  |  |   all[_t] : (set t)  =  ((as const (set t)) true)
|  |  |   compl[_t] : (s1 (set _t)) -> (set t)  =  ((_ map not) s1)
|  |  |   elem[_t] : (x _t) x (s1 (set _t)) -> Bool  =  (select s1 x)
|  |  |   empty-set[_t] : (set t)  =  ((as const (set t)) false)
|  |  |   set-diff[_t] : (s1 (set _t)) x (s2 (set _t)) -> (set t)  =  (intersect s1 ((_ map not) s2))
|  |  |   st-subset[_t] : (s1 (set _t)) x (s2 (set _t)) -> Bool  =  (and (subset s1 s2) (not (= s1 s2)))
|  |  |   free: (set Node)
|  |  |   live: (set Node)
|  |  |   ptr: (set (Pair Node Node))
|  |  |   r: Node
|  |  |   (elem@@Node r live)
|  |  |   (= Node (union live free))
|  |  |   (= (intersect live free) empty-set@@Node)
|  |  |   (forall ( (term (Array _t Int)) )
|  |  |           (=> true (= (qsum@@_t empty-set@@_t term) 0)))
|  |  |   (forall ( (r (set _t))
|  |  |             (term (Array _t Int))
|  |  |             (x _t) )
|  |  |           (=> true
|  |  |               (=> (not (elem@@_t x r))
|  |  |                   (= (qsum@@_t (union r (mk-set@@_t x)) term)
|  |  |                      (+ (qsum@@_t r term) (select term x))))))
|  |  |   (forall ( (r (set _t))
|  |  |             (r0 (set _t))
|  |  |             (term (Array _t Int)) )
|  |  |           (=> true
|  |  |               (=> (= (intersect r r0) empty-set@@_t)
|  |  |                   (= (qsum@@_t (union r r0) term)
|  |  |                      (+ (qsum@@_t r term) (qsum@@_t r0 term))))))
|  |  |   (forall ( (r (set _t)) )
|  |  |           (=> true
|  |  |               (=> (finite@@_t r)
|  |  |                   (<= 0 (qsum@@_t r (const@@_t@@Int 1))))))
|  |  |   (forall ( (r (set _t)) )
|  |  |           (=> true
|  |  |               (= (= (qsum@@_t r (const@@_t@@Int 1)) 0)
|  |  |                  (= r empty-set@@_t))))
|  |  |   (forall ( (x _t) )
|  |  |           (=> true
|  |  |               (= (qsum@@_t (mk-set@@_t x) (const@@_t@@Int 1)) 1)))
|  |  |   (forall ( (r (set _t)) )
|  |  |           (=> true
|  |  |               (= (= (qsum@@_t r (const@@_t@@Int 1)) 1)
|  |  |                  (exists ( (x _t) ) (and true (= r (mk-set@@_t x)))))))
|  |  |   (forall ( (r (set _t))
|  |  |             (r0 (set _t)) )
|  |  |           (=> true
|  |  |               (=> (= (intersect r r0) empty-set@@_t)
|  |  |                   (= (qsum@@_t (union r r0) (const@@_t@@Int 1))
|  |  |                      (+ (qsum@@_t r (const@@_t@@Int 1))
|  |  |                         (qsum@@_t r0 (const@@_t@@Int 1)))))))
|  |  |   (forall ( (x _t0)
|  |  |             (y _t1) )
|  |  |           (=> true (= (select (const@@_t1@@_t0 x) y) x)))
|  |  |   (forall ( (x _t0) ) (=> true (= (select ident@@_t0 x) x)))
|  |  |   (= (dom@@_t0@@_t1 empty-fun@@_t0@@_t1)
|  |  |      empty-set@@_t0)
|  |  |   (forall ( (t (Array _t0 _t1)) )
|  |  |           (=> true
|  |  |               (= (lambda@@_t0@@_t1 empty-set@@_t0 t)
|  |  |                  empty-fun@@_t0@@_t1)))
|  |  |   (forall ( (r (set _t0))
|  |  |             (t (Array _t0 _t1)) )
|  |  |           (=> true (= (dom@@_t0@@_t1 (lambda@@_t0@@_t1 r t)) r)))
|  |  |   (forall ( (t (Array _t0 _t1))
|  |  |             (x _t0) )
|  |  |           (=> true
|  |  |               (= (lambda@@_t0@@_t1 (mk-set@@_t0 x) t)
|  |  |                  (mk-fun@@_t0@@_t1 x (select t x)))))
|  |  |   (forall ( (r (set _t0))
|  |  |             (t (Array _t0 _t1))
|  |  |             (x _t0) )
|  |  |           (=> true
|  |  |               (= (ovl@@_t0@@_t1 (lambda@@_t0@@_t1 r t)
|  |  |                                 (mk-fun@@_t0@@_t1 x (select t x)))
|  |  |                  (lambda@@_t0@@_t1 (union r (mk-set@@_t0 x)) t))))
|  |  |   (forall ( (r (set _t0))
|  |  |             (r0 (set _t0))
|  |  |             (t (Array _t0 _t1)) )
|  |  |           (=> true
|  |  |               (= (ovl@@_t0@@_t1 (lambda@@_t0@@_t1 r t) (lambda@@_t0@@_t1 r0 t))
|  |  |                  (lambda@@_t0@@_t1 (union r r0) t))))
|  |  |   (forall ( (f1 (pfun _t0 _t1)) )
|  |  |           (=> true
|  |  |               (= (ovl@@_t0@@_t1 f1 empty-fun@@_t0@@_t1) f1)))
|  |  |   (forall ( (f1 (pfun _t0 _t1)) )
|  |  |           (=> true
|  |  |               (= (ovl@@_t0@@_t1 empty-fun@@_t0@@_t1 f1) f1)))
|  |  |   (forall ( (x _t0)
|  |  |             (y _t1) )
|  |  |           (=> true
|  |  |               (= (dom@@_t0@@_t1 (mk-fun@@_t0@@_t1 x y))
|  |  |                  (mk-set@@_t0 x))))
|  |  |   (forall ( (f1 (pfun _t0 _t1))
|  |  |             (f2 (pfun _t0 _t1))
|  |  |             (x _t0) )
|  |  |           (=> true
|  |  |               (=> (elem@@_t0 x (dom@@_t0@@_t1 f2))
|  |  |                   (= (apply@@_t0@@_t1 (ovl@@_t0@@_t1 f1 f2) x)
|  |  |                      (apply@@_t0@@_t1 f2 x)))))
|  |  |   (forall ( (f1 (pfun _t0 _t1))
|  |  |             (f2 (pfun _t0 _t1))
|  |  |             (x _t0) )
|  |  |           (=> true
|  |  |               (=> (and (elem@@_t0 x (dom@@_t0@@_t1 f1))
|  |  |                        (not (elem@@_t0 x (dom@@_t0@@_t1 f2))))
|  |  |                   (= (apply@@_t0@@_t1 (ovl@@_t0@@_t1 f1 f2) x)
|  |  |                      (apply@@_t0@@_t1 f1 x)))))
|  |  |   (forall ( (x _t0)
|  |  |             (y _t1) )
|  |  |           (=> true
|  |  |               (= (apply@@_t0@@_t1 (mk-fun@@_t0@@_t1 x y) x) y)))
|  |  |   (forall ( (f1 (pfun _t0 _t1))
|  |  |             (s1 (set _t0))
|  |  |             (x _t0) )
|  |  |           (=> true
|  |  |               (=> (and (elem@@_t0 x s1) (elem@@_t0 x (dom@@_t0@@_t1 f1)))
|  |  |                   (= (apply@@_t0@@_t1 (dom-rest@@_t0@@_t1 s1 f1) x)
|  |  |                      (apply@@_t0@@_t1 f1 x)))))
|  |  |   (forall ( (f1 (pfun _t0 _t1))
|  |  |             (s1 (set _t0))
|  |  |             (x _t0) )
|  |  |           (=> true
|  |  |               (=> (elem@@_t0 x (set-diff@@_t0 (dom@@_t0@@_t1 f1) s1))
|  |  |                   (= (apply@@_t0@@_t1 (dom-subt@@_t0@@_t1 s1 f1) x)
|  |  |                      (apply@@_t0@@_t1 f1 x)))))
|  |  |   (forall ( (s2 (set _t1)) )
|  |  |           (=> true
|  |  |               (elem@Open@@pfun@@_t0@@_t1@Close empty-fun@@_t0@@_t1
|  |  |                                                (tfun@@_t0@@_t1 empty-set@@_t0 s2))))
|  |  |   (forall ( (f1 (pfun _t0 _t1))
|  |  |             (f2 (pfun _t0 _t1)) )
|  |  |           (=> true
|  |  |               (= (dom@@_t0@@_t1 (ovl@@_t0@@_t1 f1 f2))
|  |  |                  (union (dom@@_t0@@_t1 f1) (dom@@_t0@@_t1 f2)))))
|  |  |   (forall ( (f1 (pfun _t0 _t1))
|  |  |             (s1 (set _t0)) )
|  |  |           (=> true
|  |  |               (= (dom@@_t0@@_t1 (dom-rest@@_t0@@_t1 s1 f1))
|  |  |                  (intersect s1 (dom@@_t0@@_t1 f1)))))
|  |  |   (forall ( (f1 (pfun _t0 _t1))
|  |  |             (s1 (set _t0)) )
|  |  |           (=> true
|  |  |               (= (dom@@_t0@@_t1 (dom-subt@@_t0@@_t1 s1 f1))
|  |  |                  (set-diff@@_t0 (dom@@_t0@@_t1 f1) s1))))
|  |  |   (forall ( (r (set _t0))
|  |  |             (t (Array _t0 _t1))
|  |  |             (x _t0) )
|  |  |           (=> true
|  |  |               (=> (elem@@_t0 x r)
|  |  |                   (= (apply@@_t0@@_t1 (lambda@@_t0@@_t1 r t) x)
|  |  |                      (select t x)))))
|  |  |   (forall ( (f1 (pfun _t0 _t1))
|  |  |             (x _t0)
|  |  |             (y _t1) )
|  |  |           (=> true
|  |  |               (= (and (elem@@_t0 x (dom@@_t0@@_t1 f1))
|  |  |                       (= (apply@@_t0@@_t1 f1 x) y))
|  |  |                  (= (select f1 x) (Just y)))))
|  |  |   (forall ( (f1 (pfun _t0 _t1))
|  |  |             (x _t0)
|  |  |             (x2 _t0)
|  |  |             (y _t1) )
|  |  |           (=> true
|  |  |               (=> (not (= x x2))
|  |  |                   (= (apply@@_t0@@_t1 (ovl@@_t0@@_t1 f1 (mk-fun@@_t0@@_t1 x y)) x2)
|  |  |                      (apply@@_t0@@_t1 f1 x2)))))
|  |  |   (forall ( (f1 (pfun _t0 _t1))
|  |  |             (x _t0)
|  |  |             (y _t1) )
|  |  |           (=> true
|  |  |               (= (apply@@_t0@@_t1 (ovl@@_t0@@_t1 f1 (mk-fun@@_t0@@_t1 x y)) x)
|  |  |                  y)))
|  |  |   (= (ran@@_t0@@_t1 empty-fun@@_t0@@_t1)
|  |  |      empty-set@@_t1)
|  |  |   (forall ( (f1 (pfun _t0 _t1))
|  |  |             (y _t1) )
|  |  |           (=> true
|  |  |               (= (elem@@_t1 y (ran@@_t0@@_t1 f1))
|  |  |                  (exists ( (x _t0) )
|  |  |                          (and true
|  |  |                               (and (elem@@_t0 x (dom@@_t0@@_t1 f1))
|  |  |                                    (= (apply@@_t0@@_t1 f1 x) y)))))))
|  |  |   (forall ( (x _t0)
|  |  |             (y _t1) )
|  |  |           (=> true
|  |  |               (= (ran@@_t0@@_t1 (mk-fun@@_t0@@_t1 x y))
|  |  |                  (mk-set@@_t1 y))))
|  |  |   (forall ( (f1 (pfun _t0 _t1))
|  |  |             (s1 (set _t0))
|  |  |             (s2 (set _t1)) )
|  |  |           (=> true
|  |  |               (= (elem@Open@@pfun@@_t0@@_t1@Close f1 (tfun@@_t0@@_t1 s1 s2))
|  |  |                  (and (= s1 (dom@@_t0@@_t1 f1))
|  |  |                       (subset (ran@@_t0@@_t1 f1) s2)))))
|  |  |   (forall ( (f1 (pfun _t0 _t1)) )
|  |  |           (=> true
|  |  |               (= (injective@@_t0@@_t1 f1)
|  |  |                  (forall ( (x _t0)
|  |  |                            (x2 _t0) )
|  |  |                          (=> (and (elem@@_t0 x (dom@@_t0@@_t1 f1))
|  |  |                                   (elem@@_t0 x2 (dom@@_t0@@_t1 f1)))
|  |  |                              (=> (= (apply@@_t0@@_t1 f1 x) (apply@@_t0@@_t1 f1 x2))
|  |  |                                  (= x x2)))))))
|  |  |   (injective@@_t0@@_t1 empty-fun@@_t0@@_t1)
|  |  |   (forall ( (f1 (pfun _t0 _t1))
|  |  |             (x _t0) )
|  |  |           (=> true
|  |  |               (=> (elem@@_t0 x (dom@@_t0@@_t1 f1))
|  |  |                   (elem@@_t1 (apply@@_t0@@_t1 f1 x) (ran@@_t0@@_t1 f1)))))
|  |  |   (forall ( (f1 (pfun _t0 _t1))
|  |  |             (s1 (set _t0))
|  |  |             (x _t0) )
|  |  |           (=> true
|  |  |               (=> (elem@@_t0 x (set-diff@@_t0 (dom@@_t0@@_t1 f1) s1))
|  |  |                   (elem@@_t1 (apply@@_t0@@_t1 f1 x)
|  |  |                              (ran@@_t0@@_t1 (dom-subt@@_t0@@_t1 s1 f1))))))
|  |  |   (forall ( (f1 (pfun _t0 _t1))
|  |  |             (s1 (set _t0))
|  |  |             (x _t0) )
|  |  |           (=> true
|  |  |               (=> (elem@@_t0 x (intersect (dom@@_t0@@_t1 f1) s1))
|  |  |                   (elem@@_t1 (apply@@_t0@@_t1 f1 x)
|  |  |                              (ran@@_t0@@_t1 (dom-rest@@_t0@@_t1 s1 f1))))))
|  |  |   (forall ( (f1 (pfun _t0 _t1))
|  |  |             (x _t0)
|  |  |             (y _t1) )
|  |  |           (=> true
|  |  |               (=> (and (elem@@_t0 x (dom@@_t0@@_t1 f1))
|  |  |                        (injective@@_t0@@_t1 f1))
|  |  |                   (= (ran@@_t0@@_t1 (ovl@@_t0@@_t1 f1 (mk-fun@@_t0@@_t1 x y)))
|  |  |                      (union (set-diff@@_t1 (ran@@_t0@@_t1 f1)
|  |  |                                            (mk-set@@_t1 (apply@@_t0@@_t1 f1 x)))
|  |  |                             (mk-set@@_t1 y))))))
|  |  |   (forall ( (f1 (pfun _t0 _t1))
|  |  |             (x _t0)
|  |  |             (y _t1) )
|  |  |           (=> true
|  |  |               (=> (not (elem@@_t0 x (dom@@_t0@@_t1 f1)))
|  |  |                   (= (ran@@_t0@@_t1 (ovl@@_t0@@_t1 f1 (mk-fun@@_t0@@_t1 x y)))
|  |  |                      (union (ran@@_t0@@_t1 f1) (mk-set@@_t1 y))))))
|  |  |   (forall ( (x _t)
|  |  |             (y _t) )
|  |  |           (=> true (= (elem@@_t x (mk-set@@_t y)) (= x y))))
|  |  |   (forall ( (r1 (set _t0))
|  |  |             (term (Array _t0 _t))
|  |  |             (y _t) )
|  |  |           (=> true
|  |  |               (= (elem@@_t y (set@@_t0@@_t r1 term))
|  |  |                  (exists ( (x _t0) )
|  |  |                          (and (elem@@_t0 x r1) (= (select term x) y))))))
|  |  |   (forall ( (r1 (set _t0))
|  |  |             (term (Array _t0 _t))
|  |  |             (y _t) )
|  |  |           (=> true
|  |  |               (= (= (set@@_t0@@_t r1 term) (mk-set@@_t y))
|  |  |                  (forall ( (x _t0) )
|  |  |                          (=> (elem@@_t0 x r1) (= (select term x) y))))))
|  |  |   (forall ( (s1 (set _t))
|  |  |             (s2 (set _t)) )
|  |  |           (=> true
|  |  |               (=> (finite@@_t s1) (finite@@_t (set-diff@@_t s1 s2)))))
|  |  |   (forall ( (s1 (set _t))
|  |  |             (s2 (set _t)) )
|  |  |           (=> true
|  |  |               (=> (and (finite@@_t s1) (finite@@_t s2))
|  |  |                   (finite@@_t (union s1 s2)))))
|  |  |   (forall ( (x _t) ) (=> true (finite@@_t (mk-set@@_t x))))
|  |  |   (finite@@_t empty-set@@_t)
|  |  |   (forall ( (s1 (set _t))
|  |  |             (s2 (set _t)) )
|  |  |           (=> true
|  |  |               (=> (subset s1 s2)
|  |  |                   (=> (finite@@_t s2) (finite@@_t s1)))))
|  |  |   (forall ( (r1 (set _t0)) )
|  |  |           (=> true (= (set@@_t0@@_t0 r1 ident@@_t0) r1)))
|  |  |   (forall ( (terms (Array _t0 (set _t))) )
|  |  |           (=> true
|  |  |               (= (qunion@@_t0@@_t empty-set@@_t0 terms)
|  |  |                  empty-set@@_t)))
|  |  |   (forall ( (terms (Array _t0 (set _t)))
|  |  |             (x _t0) )
|  |  |           (=> true
|  |  |               (= (qunion@@_t0@@_t (mk-set@@_t0 x) terms)
|  |  |                  (select terms x))))
|  |  |   (forall ( (r1 (set _t0))
|  |  |             (r2 (set _t0))
|  |  |             (terms (Array _t0 (set _t))) )
|  |  |           (=> true
|  |  |               (= (qunion@@_t0@@_t (union r1 r2) terms)
|  |  |                  (union (qunion@@_t0@@_t r1 terms)
|  |  |                         (qunion@@_t0@@_t r2 terms)))))
|  |  |   (forall ( (r1 (set _t0))
|  |  |             (terms (Array _t0 (set _t)))
|  |  |             (terms0 (Array _t0 (set _t))) )
|  |  |           (=> true
|  |  |               (=> (forall ( (x _t0) )
|  |  |                           (=> (elem@@_t0 x r1)
|  |  |                               (= (select terms x) (select terms0 x))))
|  |  |                   (= (qunion@@_t0@@_t r1 terms)
|  |  |                      (qunion@@_t0@@_t r1 terms0)))))
|  |  |   (forall ( (r1 (set (Pair _t0 _t1)))
|  |  |             (x1 _t0)
|  |  |             (x2 _t1) )
|  |  |           (=> true
|  |  |               (=> (elem@Open@@Pair@@_t0@@_t1@Close (pair x1 x2) r1)
|  |  |                   (elem@@_t0 x1 (reldom@@_t0@@_t1 r1)))))
|  |  |   (forall ( (r1 (set (Pair _t0 _t1)))
|  |  |             (s1 (set _t0)) )
|  |  |           (=> true
|  |  |               (= (reldom@@_t0@@_t1 (seq@@_t0@@_t0@@_t1 (asrel@@_t0 s1) r1))
|  |  |                  (intersect s1 (reldom@@_t0@@_t1 r1)))))
|  |  |   (forall ( (r1 (set (Pair _t0 _t1)))
|  |  |             (x1 _t0)
|  |  |             (x2 _t1) )
|  |  |           (=> true
|  |  |               (= (elem@Open@@Pair@@_t0@@_t1@Close (pair x1 x2)
|  |  |                                                   (seq@@_t0@@_t0@@_t1 (asrel@@_t0 (mk-set@@_t0 x1)) r1))
|  |  |                  (elem@Open@@Pair@@_t0@@_t1@Close (pair x1 x2) r1))))
|  |  |   (forall ( (x1 _t0) )
|  |  |           (=> true
|  |  |               (= (asrel@@_t0 (mk-set@@_t0 x1))
|  |  |                  (mk-set@Open@@Pair@@_t0@@_t0@Close (pair x1 x1)))))
|  |  |   (forall ( (r1 (set (Pair _t0 _t1)))
|  |  |             (r3 (set (Pair _t1 _t2)))
|  |  |             (r5 (set (Pair _t2 _t3))) )
|  |  |           (=> true
|  |  |               (= (seq@@_t0@@_t2@@_t3 (seq@@_t0@@_t1@@_t2 r1 r3) r5)
|  |  |                  (seq@@_t0@@_t1@@_t3 r1 (seq@@_t1@@_t2@@_t3 r3 r5)))))
|  |  |   (forall ( (r1 (set (Pair _t0 _t1)))
|  |  |             (r2 (set (Pair _t0 _t1)))
|  |  |             (r3 (set (Pair _t1 _t2))) )
|  |  |           (=> true
|  |  |               (=> (subset r1 r2)
|  |  |                   (subset (seq@@_t0@@_t1@@_t2 r1 r3)
|  |  |                           (seq@@_t0@@_t1@@_t2 r2 r3)))))
|  |  |   (forall ( (r1 (set (Pair _t0 _t1)))
|  |  |             (r2 (set (Pair _t0 _t1)))
|  |  |             (r4 (set (Pair _t2 _t0))) )
|  |  |           (=> true
|  |  |               (=> (subset r1 r2)
|  |  |                   (subset (seq@@_t2@@_t0@@_t1 r4 r1)
|  |  |                           (seq@@_t2@@_t0@@_t1 r4 r2)))))
|  |  |   (forall ( (rr (set (Pair _t0 _t0)))
|  |  |             (rr2 (set (Pair _t0 _t0))) )
|  |  |           (=> true
|  |  |               (= (star@@_t0 (union rr rr2))
|  |  |                  (seq@@_t0@@_t0@@_t0 (star@@_t0 (seq@@_t0@@_t0@@_t0 (star@@_t0 rr) rr2))
|  |  |                                      (star@@_t0 rr)))))
|  |  |   (forall ( (rr (set (Pair _t0 _t0)))
|  |  |             (rr2 (set (Pair _t0 _t0))) )
|  |  |           (=> true
|  |  |               (= (star@@_t0 (union rr rr2))
|  |  |                  (seq@@_t0@@_t0@@_t0 (star@@_t0 rr2)
|  |  |                                      (star@@_t0 (seq@@_t0@@_t0@@_t0 rr (star@@_t0 rr2)))))))
|  |  |   (forall ( (rr (set (Pair _t0 _t0))) )
|  |  |           (=> true
|  |  |               (= (union (seq@@_t0@@_t0@@_t0 (star@@_t0 rr) rr) id@@_t0)
|  |  |                  (star@@_t0 rr))))
|  |  |   (forall ( (rr (set (Pair _t0 _t0))) )
|  |  |           (=> true
|  |  |               (= (union (seq@@_t0@@_t0@@_t0 rr (star@@_t0 rr)) id@@_t0)
|  |  |                  (star@@_t0 rr))))
|  |  |   (forall ( (r1 (set (Pair _t0 _t1)))
|  |  |             (r2 (set (Pair _t0 _t1)))
|  |  |             (r3 (set (Pair _t1 _t2))) )
|  |  |           (=> true
|  |  |               (= (seq@@_t0@@_t1@@_t2 (union r1 r2) r3)
|  |  |                  (union (seq@@_t0@@_t1@@_t2 r1 r3)
|  |  |                         (seq@@_t0@@_t1@@_t2 r2 r3)))))
|  |  |   (forall ( (r1 (set (Pair _t0 _t1)))
|  |  |             (r2 (set (Pair _t0 _t1)))
|  |  |             (r4 (set (Pair _t2 _t0))) )
|  |  |           (=> true
|  |  |               (= (seq@@_t2@@_t0@@_t1 r4 (union r1 r2))
|  |  |                  (union (seq@@_t2@@_t0@@_t1 r4 r1)
|  |  |                         (seq@@_t2@@_t0@@_t1 r4 r2)))))
|  |  |   (forall ( (x1 _t0)
|  |  |             (x3 _t0) )
|  |  |           (=> true
|  |  |               (= (seq@@_t0@@_t0@@_t1 (mk-set@Open@@Pair@@_t0@@_t0@Close (pair x1 x3))
|  |  |                                      all@Open@@Pair@@_t0@@_t1@Close)
|  |  |                  (seq@@_t0@@_t0@@_t1 (asrel@@_t0 (mk-set@@_t0 x1))
|  |  |                                      all@Open@@Pair@@_t0@@_t1@Close))))
|  |  |   (forall ( (x1 _t0)
|  |  |             (x2 _t1)
|  |  |             (x4 _t2)
|  |  |             (x5 _t3) )
|  |  |           (=> true
|  |  |               (= (seq@@_t0@@_t2@@_t3 (seq@@_t0@@_t1@@_t2 (mk-set@Open@@Pair@@_t0@@_t1@Close (pair x1 x2))
|  |  |                                                          all@Open@@Pair@@_t1@@_t2@Close)
|  |  |                                      (mk-set@Open@@Pair@@_t2@@_t3@Close (pair x4 x5)))
|  |  |                  (mk-set@Open@@Pair@@_t0@@_t3@Close (pair x1 x5)))))
|  |  |   (forall ( (x1 _t0)
|  |  |             (x2 _t1) )
|  |  |           (=> true
|  |  |               (= (seq@@_t0@@_t1@@_t1 (seq@@_t0@@_t0@@_t1 (asrel@@_t0 (mk-set@@_t0 x1))
|  |  |                                                          all@Open@@Pair@@_t0@@_t1@Close)
|  |  |                                      (asrel@@_t1 (mk-set@@_t1 x2)))
|  |  |                  (mk-set@Open@@Pair@@_t0@@_t1@Close (pair x1 x2)))))
|  |  |   (forall ( (x1 _t0)
|  |  |             (x3 _t0) )
|  |  |           (=> true
|  |  |               (= (elem@Open@@Pair@@_t0@@_t0@Close (pair x1 x3) id@@_t0)
|  |  |                  (= x1 x3))))
|  |  |   (forall ( (r1 (set (Pair _t0 _t1))) )
|  |  |           (=> true (= (seq@@_t0@@_t0@@_t1 id@@_t0 r1) r1)))
|  |  |   (forall ( (r1 (set (Pair _t0 _t1))) )
|  |  |           (=> true (= (seq@@_t0@@_t1@@_t1 r1 id@@_t1) r1)))
|  |  |   (forall ( (rr (set (Pair _t0 _t0))) )
|  |  |           (=> true (subset rr (star@@_t0 rr))))
|  |  |   (forall ( (rr (set (Pair _t0 _t0)))
|  |  |             (rr2 (set (Pair _t0 _t0))) )
|  |  |           (=> true
|  |  |               (=> (subset rr rr2)
|  |  |                   (subset (star@@_t0 rr) (star@@_t0 rr2)))))
|  |  |   (forall ( (rr (set (Pair _t0 _t0)))
|  |  |             (rr2 (set (Pair _t0 _t0)))
|  |  |             (x1 _t0)
|  |  |             (x3 _t0) )
|  |  |           (=> true
|  |  |               (=> (elem@Open@@Pair@@_t0@@_t0@Close (pair x1 x3) (star@@_t0 (intersect rr rr2)))
|  |  |                   (elem@Open@@Pair@@_t0@@_t0@Close (pair x1 x3) (star@@_t0 rr)))))
|  |  |   (forall ( (rr (set (Pair _t0 _t0)))
|  |  |             (rr2 (set (Pair _t0 _t0)))
|  |  |             (x1 _t0)
|  |  |             (x3 _t0) )
|  |  |           (=> true
|  |  |               (=> (elem@Open@@Pair@@_t0@@_t0@Close (pair x1 x3) (star@@_t0 rr))
|  |  |                   (elem@Open@@Pair@@_t0@@_t0@Close (pair x1 x3) (star@@_t0 (union rr rr2))))))
|  |  |   (forall ( (rr (set (Pair _t0 _t0))) )
|  |  |           (=> true
|  |  |               (= (seq@@_t0@@_t0@@_t0 (star@@_t0 rr) (star@@_t0 rr))
|  |  |                  (star@@_t0 rr))))
|  |  |   (forall ( (r1 (set (Pair _t0 _t1)))
|  |  |             (r2 (set (Pair _t0 _t1)))
|  |  |             (r3 (set (Pair _t1 _t2))) )
|  |  |           (=> true
|  |  |               (=> (subset r1 r2)
|  |  |                   (subset (seq@@_t0@@_t1@@_t2 r1 r3)
|  |  |                           (seq@@_t0@@_t1@@_t2 r2 r3)))))
|  |  |   (forall ( (r1 (set (Pair _t0 _t1)))
|  |  |             (r2 (set (Pair _t0 _t1)))
|  |  |             (r4 (set (Pair _t2 _t0))) )
|  |  |           (=> true
|  |  |               (=> (subset r1 r2)
|  |  |                   (subset (seq@@_t2@@_t0@@_t1 r4 r1)
|  |  |                           (seq@@_t2@@_t0@@_t1 r4 r2)))))
|  |  |   (forall ( (rr (set (Pair _t0 _t0))) )
|  |  |           (=> true
|  |  |               (= (plus@@_t0 rr)
|  |  |                  (seq@@_t0@@_t0@@_t0 (star@@_t0 rr) rr))))
|  |  |   (forall ( (rr (set (Pair _t0 _t0))) )
|  |  |           (=> true
|  |  |               (= (plus@@_t0 rr)
|  |  |                  (seq@@_t0@@_t0@@_t0 rr (star@@_t0 rr)))))
|  |  |   (forall ( (r1 (set (Pair _t0 _t1)))
|  |  |             (s1 (set _t0))
|  |  |             (x2 _t1) )
|  |  |           (=> true
|  |  |               (= (elem@@_t1 x2 (lookup@@_t0@@_t1 r1 s1))
|  |  |                  (exists ( (x1 _t0) )
|  |  |                          (and (elem@@_t0 x1 s1)
|  |  |                               (elem@Open@@Pair@@_t0@@_t1@Close (pair x1 x2) r1))))))
|  |  |   (forall ( (r1 (set (Pair _t0 _t1)))
|  |  |             (s1 (set _t0))
|  |  |             (x1 _t0)
|  |  |             (x2 _t1) )
|  |  |           (=> true
|  |  |               (=> (elem@@_t0 x1 s1)
|  |  |                   (=> (elem@Open@@Pair@@_t0@@_t1@Close (pair x1 x2) r1)
|  |  |                       (elem@@_t1 x2 (lookup@@_t0@@_t1 r1 s1))))))
|  |  |  |----
|  |  |   (forall ( (p_0 Node)
|  |  |             (p_1 Node)
|  |  |             (q Node) )
|  |  |           (=> (elem@Open@@Pair@@Node@@Node@Close (pair r p_1) (star@@Node ptr))
|  |  |               (=> (elem@Open@@Pair@@Node@@Node@Close (pair r q)
|  |  |                                                      (star@@Node (union ptr
|  |  |                                                                         (mk-set@Open@@Pair@@Node@@Node@Close (pair p_0 p_1)))))
|  |  |                   (elem@Open@@Pair@@Node@@Node@Close (pair r q) (star@@Node ptr)))))
|  |  |  +- test5: monotonicity in relation theory
|  |  |  +- test6: monotonicity of POs
|  |  |     Exception:  UnitB/PO.hs:914:21-26: Assertion failed "Sequent scopes: 
|  |  |  (pair x1 x2)
|  |  |  (forall ((r1 (\set (Pair _t0 _t1))) (x1 _t0) (x2 _t1)) (=> true (=> (elem (pair x1 x2) r1) (elem x1 (reldom r1)))))
|  |  |  (pair x1 x2)
|  |  |  (pair x1 x2)
|  |  |  (forall ((r1 (\set (Pair _t0 _t1))) (x1 _t0) (x2 _t1)) (=> true (= (elem (pair x1 x2) (seq (asrel (mk-set x1)) r1)) (elem (pair x1 x2) r1))))
|  |  |  (pair x1 x1)
|  |  |  (forall ((x1 _t0)) (=> true (= (asrel (mk-set x1)) (mk-set (pair x1 x1)))))
|  |  |  (pair x1 x3)
|  |  |  (forall ((x1 _t0) (x3 _t0)) (=> true (= (seq (mk-set (pair x1 x3)) all) (seq (asrel (mk-set x1)) all))))
|  |  |  (pair x1 x2)
|  |  |  (pair x4 x5)
|  |  |  (pair x1 x5)
|  |  |  (forall ((x1 _t0) (x2 _t1) (x4 _t2) (x5 _t3)) (=> true (= (seq (seq (mk-set (pair x1 x2)) all) (mk-set (pair x4 x5))) (mk-set (pair x1 x5)))))
|  |  |  (pair x1 x2)
|  |  |  (forall ((x1 _t0) (x2 _t1)) (=> true (= (seq (seq (asrel (mk-set x1)) all) (asrel (mk-set x2))) (mk-set (pair x1 x2)))))
|  |  |  (pair x1 x3)
|  |  |  (forall ((x1 _t0) (x3 _t0)) (=> true (= (elem (pair x1 x3) id) (= x1 x3))))
|  |  |  (pair x1 x3)
|  |  |  (pair x1 x3)
|  |  |  (forall ((rr (\set (Pair _t0 _t0))) (rr2 (\set (Pair _t0 _t0))) (x1 _t0) (x3 _t0)) (=> true (=> (elem (pair x1 x3) (star (intersect rr rr2))) (elem (pair x1 x3) (star rr)))))
|  |  |  (pair x1 x3)
|  |  |  (pair x1 x3)
|  |  |  (forall ((rr (\set (Pair _t0 _t0))) (rr2 (\set (Pair _t0 _t0))) (x1 _t0) (x3 _t0)) (=> true (=> (elem (pair x1 x3) (star rr)) (elem (pair x1 x3) (star (union rr rr2))))))
|  |  |  (pair x1 x2)
|  |  |  (forall ((r1 (\set (Pair _t0 _t1))) (s1 (\set _t0)) (x2 _t1)) (=> true (= (elem x2 (lookup r1 s1)) (exists ((x1 _t0)) (and (elem x1 s1) (elem (pair x1 x2) r1))))))
|  |  |  (pair x1 x2)
|  |  |  (forall ((r1 (\set (Pair _t0 _t1))) (s1 (\set _t0)) (x1 _t0) (x2 _t1)) (=> true (=> (elem x1 s1) (=> (elem (pair x1 x2) r1) (elem x2 (lookup r1 s1))))))
|  |  |  (pair r p_1)
|  |  |  (pair r q)
|  |  |  (pair p_0 p_1)
|  |  |  (pair r q)
|  |  |  (forall ((p_0 Node) (p_1 Node) (q Node)) (=> (elem (pair r p_1) (star ptr)) (=> (elem (pair r q) (star (union ptr (mk-set (pair p_0 p_1))))) (elem (pair r q) (star ptr)))))
|  |  |  ",  sort: Node, Pair [a,b], pfun [a,b], set [a]
|  |  |   apply[_t0,_t1]: (pfun t0 t1) x t0 -> t1
|  |  |   asrel[_a]: (set a) -> (set (Pair a a))
|  |  |   const[_a,_b]: b -> (Array a b)
|  |  |   dom[_t0,_t1]: (pfun t0 t1) -> (set t0)
|  |  |   dom-rest[_t0,_t1]: (set t0) x (pfun t0 t1) -> (pfun t0 t1)
|  |  |   dom-subt[_t0,_t1]: (set t0) x (pfun t0 t1) -> (pfun t0 t1)
|  |  |   empty-fun[_t0,_t1]: (pfun t0 t1)
|  |  |   finite[_t]: (set t) -> Bool
|  |  |   id[_a]: (set (Pair a a))
|  |  |   ident[_a]: (Array a a)
|  |  |   injective[_t0,_t1]: (pfun t0 t1) -> Bool
|  |  |   lambda[_a,_b]: (set a) x (Array a b) -> (pfun a b)
|  |  |   lookup[_a,_b]: (set (Pair a b)) x (set a) -> (set b)
|  |  |   mk-fun[_t0,_t1]: t0 x t1 -> (pfun t0 t1)
|  |  |   mk-set[_t]: t -> (set t)
|  |  |   ovl[_t0,_t1]: (pfun t0 t1) x (pfun t0 t1) -> (pfun t0 t1)
|  |  |   plus[_a]: (set (Pair a a)) -> (set (Pair a a))
|  |  |   qsum[_a]: (set a) x (Array a Int) -> Int
|  |  |   qunion[_a,_b]: (set a) x (Array a (set b)) -> (set b)
|  |  |   ran[_t0,_t1]: (pfun t0 t1) -> (set t1)
|  |  |   reldom[_a,_b]: (set (Pair a b)) -> (set a)
|  |  |   seq[_a,_b,_c]: (set (Pair a b)) x (set (Pair b c)) -> (set (Pair a c))
|  |  |   set[_a,_b]: (set a) x (Array a b) -> (set b)
|  |  |   star[_a]: (set (Pair a a)) -> (set (Pair a a))
|  |  |   tfun[_t0,_t1]: (set t0) x (set t1) -> (set (pfun t0 t1))
|  |  |   Node: (set Node)  =  ((as const (set Node)) true)
|  |  |   all[_t] : (set t)  =  ((as const (set t)) true)
|  |  |   compl[_t] : (s1 (set _t)) -> (set t)  =  ((_ map not) s1)
|  |  |   elem[_t] : (x _t) x (s1 (set _t)) -> Bool  =  (select s1 x)
|  |  |   empty-set[_t] : (set t)  =  ((as const (set t)) false)
|  |  |   set-diff[_t] : (s1 (set _t)) x (s2 (set _t)) -> (set t)  =  (intersect s1 ((_ map not) s2))
|  |  |   st-subset[_t] : (s1 (set _t)) x (s2 (set _t)) -> Bool  =  (and (subset s1 s2) (not (= s1 s2)))
|  |  |   free: (set Node)
|  |  |   live: (set Node)
|  |  |   ptr: (set (Pair Node Node))
|  |  |   r: Node
|  |  |   (elem@@Node r live)
|  |  |   (= Node (union live free))
|  |  |   (= (intersect live free) empty-set@@Node)
|  |  |   (forall ( (term (Array _t Int)) )
|  |  |           (=> true (= (qsum@@_t empty-set@@_t term) 0)))
|  |  |   (forall ( (r (set _t))
|  |  |             (term (Array _t Int))
|  |  |             (x _t) )
|  |  |           (=> true
|  |  |               (=> (not (elem@@_t x r))
|  |  |                   (= (qsum@@_t (union r (mk-set@@_t x)) term)
|  |  |                      (+ (qsum@@_t r term) (select term x))))))
|  |  |   (forall ( (r (set _t))
|  |  |             (r0 (set _t))
|  |  |             (term (Array _t Int)) )
|  |  |           (=> true
|  |  |               (=> (= (intersect r r0) empty-set@@_t)
|  |  |                   (= (qsum@@_t (union r r0) term)
|  |  |                      (+ (qsum@@_t r term) (qsum@@_t r0 term))))))
|  |  |   (forall ( (r (set _t)) )
|  |  |           (=> true
|  |  |               (=> (finite@@_t r)
|  |  |                   (<= 0 (qsum@@_t r (const@@_t@@Int 1))))))
|  |  |   (forall ( (r (set _t)) )
|  |  |           (=> true
|  |  |               (= (= (qsum@@_t r (const@@_t@@Int 1)) 0)
|  |  |                  (= r empty-set@@_t))))
|  |  |   (forall ( (x _t) )
|  |  |           (=> true
|  |  |               (= (qsum@@_t (mk-set@@_t x) (const@@_t@@Int 1)) 1)))
|  |  |   (forall ( (r (set _t)) )
|  |  |           (=> true
|  |  |               (= (= (qsum@@_t r (const@@_t@@Int 1)) 1)
|  |  |                  (exists ( (x _t) ) (and true (= r (mk-set@@_t x)))))))
|  |  |   (forall ( (r (set _t))
|  |  |             (r0 (set _t)) )
|  |  |           (=> true
|  |  |               (=> (= (intersect r r0) empty-set@@_t)
|  |  |                   (= (qsum@@_t (union r r0) (const@@_t@@Int 1))
|  |  |                      (+ (qsum@@_t r (const@@_t@@Int 1))
|  |  |                         (qsum@@_t r0 (const@@_t@@Int 1)))))))
|  |  |   (forall ( (x _t0)
|  |  |             (y _t1) )
|  |  |           (=> true (= (select (const@@_t1@@_t0 x) y) x)))
|  |  |   (forall ( (x _t0) ) (=> true (= (select ident@@_t0 x) x)))
|  |  |   (= (dom@@_t0@@_t1 empty-fun@@_t0@@_t1)
|  |  |      empty-set@@_t0)
|  |  |   (forall ( (t (Array _t0 _t1)) )
|  |  |           (=> true
|  |  |               (= (lambda@@_t0@@_t1 empty-set@@_t0 t)
|  |  |                  empty-fun@@_t0@@_t1)))
|  |  |   (forall ( (r (set _t0))
|  |  |             (t (Array _t0 _t1)) )
|  |  |           (=> true (= (dom@@_t0@@_t1 (lambda@@_t0@@_t1 r t)) r)))
|  |  |   (forall ( (t (Array _t0 _t1))
|  |  |             (x _t0) )
|  |  |           (=> true
|  |  |               (= (lambda@@_t0@@_t1 (mk-set@@_t0 x) t)
|  |  |                  (mk-fun@@_t0@@_t1 x (select t x)))))
|  |  |   (forall ( (r (set _t0))
|  |  |             (t (Array _t0 _t1))
|  |  |             (x _t0) )
|  |  |           (=> true
|  |  |               (= (ovl@@_t0@@_t1 (lambda@@_t0@@_t1 r t)
|  |  |                                 (mk-fun@@_t0@@_t1 x (select t x)))
|  |  |                  (lambda@@_t0@@_t1 (union r (mk-set@@_t0 x)) t))))
|  |  |   (forall ( (r (set _t0))
|  |  |             (r0 (set _t0))
|  |  |             (t (Array _t0 _t1)) )
|  |  |           (=> true
|  |  |               (= (ovl@@_t0@@_t1 (lambda@@_t0@@_t1 r t) (lambda@@_t0@@_t1 r0 t))
|  |  |                  (lambda@@_t0@@_t1 (union r r0) t))))
|  |  |   (forall ( (f1 (pfun _t0 _t1)) )
|  |  |           (=> true
|  |  |               (= (ovl@@_t0@@_t1 f1 empty-fun@@_t0@@_t1) f1)))
|  |  |   (forall ( (f1 (pfun _t0 _t1)) )
|  |  |           (=> true
|  |  |               (= (ovl@@_t0@@_t1 empty-fun@@_t0@@_t1 f1) f1)))
|  |  |   (forall ( (x _t0)
|  |  |             (y _t1) )
|  |  |           (=> true
|  |  |               (= (dom@@_t0@@_t1 (mk-fun@@_t0@@_t1 x y))
|  |  |                  (mk-set@@_t0 x))))
|  |  |   (forall ( (f1 (pfun _t0 _t1))
|  |  |             (f2 (pfun _t0 _t1))
|  |  |             (x _t0) )
|  |  |           (=> true
|  |  |               (=> (elem@@_t0 x (dom@@_t0@@_t1 f2))
|  |  |                   (= (apply@@_t0@@_t1 (ovl@@_t0@@_t1 f1 f2) x)
|  |  |                      (apply@@_t0@@_t1 f2 x)))))
|  |  |   (forall ( (f1 (pfun _t0 _t1))
|  |  |             (f2 (pfun _t0 _t1))
|  |  |             (x _t0) )
|  |  |           (=> true
|  |  |               (=> (and (elem@@_t0 x (dom@@_t0@@_t1 f1))
|  |  |                        (not (elem@@_t0 x (dom@@_t0@@_t1 f2))))
|  |  |                   (= (apply@@_t0@@_t1 (ovl@@_t0@@_t1 f1 f2) x)
|  |  |                      (apply@@_t0@@_t1 f1 x)))))
|  |  |   (forall ( (x _t0)
|  |  |             (y _t1) )
|  |  |           (=> true
|  |  |               (= (apply@@_t0@@_t1 (mk-fun@@_t0@@_t1 x y) x) y)))
|  |  |   (forall ( (f1 (pfun _t0 _t1))
|  |  |             (s1 (set _t0))
|  |  |             (x _t0) )
|  |  |           (=> true
|  |  |               (=> (and (elem@@_t0 x s1) (elem@@_t0 x (dom@@_t0@@_t1 f1)))
|  |  |                   (= (apply@@_t0@@_t1 (dom-rest@@_t0@@_t1 s1 f1) x)
|  |  |                      (apply@@_t0@@_t1 f1 x)))))
|  |  |   (forall ( (f1 (pfun _t0 _t1))
|  |  |             (s1 (set _t0))
|  |  |             (x _t0) )
|  |  |           (=> true
|  |  |               (=> (elem@@_t0 x (set-diff@@_t0 (dom@@_t0@@_t1 f1) s1))
|  |  |                   (= (apply@@_t0@@_t1 (dom-subt@@_t0@@_t1 s1 f1) x)
|  |  |                      (apply@@_t0@@_t1 f1 x)))))
|  |  |   (forall ( (s2 (set _t1)) )
|  |  |           (=> true
|  |  |               (elem@Open@@pfun@@_t0@@_t1@Close empty-fun@@_t0@@_t1
|  |  |                                                (tfun@@_t0@@_t1 empty-set@@_t0 s2))))
|  |  |   (forall ( (f1 (pfun _t0 _t1))
|  |  |             (f2 (pfun _t0 _t1)) )
|  |  |           (=> true
|  |  |               (= (dom@@_t0@@_t1 (ovl@@_t0@@_t1 f1 f2))
|  |  |                  (union (dom@@_t0@@_t1 f1) (dom@@_t0@@_t1 f2)))))
|  |  |   (forall ( (f1 (pfun _t0 _t1))
|  |  |             (s1 (set _t0)) )
|  |  |           (=> true
|  |  |               (= (dom@@_t0@@_t1 (dom-rest@@_t0@@_t1 s1 f1))
|  |  |                  (intersect s1 (dom@@_t0@@_t1 f1)))))
|  |  |   (forall ( (f1 (pfun _t0 _t1))
|  |  |             (s1 (set _t0)) )
|  |  |           (=> true
|  |  |               (= (dom@@_t0@@_t1 (dom-subt@@_t0@@_t1 s1 f1))
|  |  |                  (set-diff@@_t0 (dom@@_t0@@_t1 f1) s1))))
|  |  |   (forall ( (r (set _t0))
|  |  |             (t (Array _t0 _t1))
|  |  |             (x _t0) )
|  |  |           (=> true
|  |  |               (=> (elem@@_t0 x r)
|  |  |                   (= (apply@@_t0@@_t1 (lambda@@_t0@@_t1 r t) x)
|  |  |                      (select t x)))))
|  |  |   (forall ( (f1 (pfun _t0 _t1))
|  |  |             (x _t0)
|  |  |             (y _t1) )
|  |  |           (=> true
|  |  |               (= (and (elem@@_t0 x (dom@@_t0@@_t1 f1))
|  |  |                       (= (apply@@_t0@@_t1 f1 x) y))
|  |  |                  (= (select f1 x) (Just y)))))
|  |  |   (forall ( (f1 (pfun _t0 _t1))
|  |  |             (x _t0)
|  |  |             (x2 _t0)
|  |  |             (y _t1) )
|  |  |           (=> true
|  |  |               (=> (not (= x x2))
|  |  |                   (= (apply@@_t0@@_t1 (ovl@@_t0@@_t1 f1 (mk-fun@@_t0@@_t1 x y)) x2)
|  |  |                      (apply@@_t0@@_t1 f1 x2)))))
|  |  |   (forall ( (f1 (pfun _t0 _t1))
|  |  |             (x _t0)
|  |  |             (y _t1) )
|  |  |           (=> true
|  |  |               (= (apply@@_t0@@_t1 (ovl@@_t0@@_t1 f1 (mk-fun@@_t0@@_t1 x y)) x)
|  |  |                  y)))
|  |  |   (= (ran@@_t0@@_t1 empty-fun@@_t0@@_t1)
|  |  |      empty-set@@_t1)
|  |  |   (forall ( (f1 (pfun _t0 _t1))
|  |  |             (y _t1) )
|  |  |           (=> true
|  |  |               (= (elem@@_t1 y (ran@@_t0@@_t1 f1))
|  |  |                  (exists ( (x _t0) )
|  |  |                          (and true
|  |  |                               (and (elem@@_t0 x (dom@@_t0@@_t1 f1))
|  |  |                                    (= (apply@@_t0@@_t1 f1 x) y)))))))
|  |  |   (forall ( (x _t0)
|  |  |             (y _t1) )
|  |  |           (=> true
|  |  |               (= (ran@@_t0@@_t1 (mk-fun@@_t0@@_t1 x y))
|  |  |                  (mk-set@@_t1 y))))
|  |  |   (forall ( (f1 (pfun _t0 _t1))
|  |  |             (s1 (set _t0))
|  |  |             (s2 (set _t1)) )
|  |  |           (=> true
|  |  |               (= (elem@Open@@pfun@@_t0@@_t1@Close f1 (tfun@@_t0@@_t1 s1 s2))
|  |  |                  (and (= s1 (dom@@_t0@@_t1 f1))
|  |  |                       (subset (ran@@_t0@@_t1 f1) s2)))))
|  |  |   (forall ( (f1 (pfun _t0 _t1)) )
|  |  |           (=> true
|  |  |               (= (injective@@_t0@@_t1 f1)
|  |  |                  (forall ( (x _t0)
|  |  |                            (x2 _t0) )
|  |  |                          (=> (and (elem@@_t0 x (dom@@_t0@@_t1 f1))
|  |  |                                   (elem@@_t0 x2 (dom@@_t0@@_t1 f1)))
|  |  |                              (=> (= (apply@@_t0@@_t1 f1 x) (apply@@_t0@@_t1 f1 x2))
|  |  |                                  (= x x2)))))))
|  |  |   (injective@@_t0@@_t1 empty-fun@@_t0@@_t1)
|  |  |   (forall ( (f1 (pfun _t0 _t1))
|  |  |             (x _t0) )
|  |  |           (=> true
|  |  |               (=> (elem@@_t0 x (dom@@_t0@@_t1 f1))
|  |  |                   (elem@@_t1 (apply@@_t0@@_t1 f1 x) (ran@@_t0@@_t1 f1)))))
|  |  |   (forall ( (f1 (pfun _t0 _t1))
|  |  |             (s1 (set _t0))
|  |  |             (x _t0) )
|  |  |           (=> true
|  |  |               (=> (elem@@_t0 x (set-diff@@_t0 (dom@@_t0@@_t1 f1) s1))
|  |  |                   (elem@@_t1 (apply@@_t0@@_t1 f1 x)
|  |  |                              (ran@@_t0@@_t1 (dom-subt@@_t0@@_t1 s1 f1))))))
|  |  |   (forall ( (f1 (pfun _t0 _t1))
|  |  |             (s1 (set _t0))
|  |  |             (x _t0) )
|  |  |           (=> true
|  |  |               (=> (elem@@_t0 x (intersect (dom@@_t0@@_t1 f1) s1))
|  |  |                   (elem@@_t1 (apply@@_t0@@_t1 f1 x)
|  |  |                              (ran@@_t0@@_t1 (dom-rest@@_t0@@_t1 s1 f1))))))
|  |  |   (forall ( (f1 (pfun _t0 _t1))
|  |  |             (x _t0)
|  |  |             (y _t1) )
|  |  |           (=> true
|  |  |               (=> (and (elem@@_t0 x (dom@@_t0@@_t1 f1))
|  |  |                        (injective@@_t0@@_t1 f1))
|  |  |                   (= (ran@@_t0@@_t1 (ovl@@_t0@@_t1 f1 (mk-fun@@_t0@@_t1 x y)))
|  |  |                      (union (set-diff@@_t1 (ran@@_t0@@_t1 f1)
|  |  |                                            (mk-set@@_t1 (apply@@_t0@@_t1 f1 x)))
|  |  |                             (mk-set@@_t1 y))))))
|  |  |   (forall ( (f1 (pfun _t0 _t1))
|  |  |             (x _t0)
|  |  |             (y _t1) )
|  |  |           (=> true
|  |  |               (=> (not (elem@@_t0 x (dom@@_t0@@_t1 f1)))
|  |  |                   (= (ran@@_t0@@_t1 (ovl@@_t0@@_t1 f1 (mk-fun@@_t0@@_t1 x y)))
|  |  |                      (union (ran@@_t0@@_t1 f1) (mk-set@@_t1 y))))))
|  |  |   (forall ( (x _t)
|  |  |             (y _t) )
|  |  |           (=> true (= (elem@@_t x (mk-set@@_t y)) (= x y))))
|  |  |   (forall ( (r1 (set _t0))
|  |  |             (term (Array _t0 _t))
|  |  |             (y _t) )
|  |  |           (=> true
|  |  |               (= (elem@@_t y (set@@_t0@@_t r1 term))
|  |  |                  (exists ( (x _t0) )
|  |  |                          (and (elem@@_t0 x r1) (= (select term x) y))))))
|  |  |   (forall ( (r1 (set _t0))
|  |  |             (term (Array _t0 _t))
|  |  |             (y _t) )
|  |  |           (=> true
|  |  |               (= (= (set@@_t0@@_t r1 term) (mk-set@@_t y))
|  |  |                  (forall ( (x _t0) )
|  |  |                          (=> (elem@@_t0 x r1) (= (select term x) y))))))
|  |  |   (forall ( (s1 (set _t))
|  |  |             (s2 (set _t)) )
|  |  |           (=> true
|  |  |               (=> (finite@@_t s1) (finite@@_t (set-diff@@_t s1 s2)))))
|  |  |   (forall ( (s1 (set _t))
|  |  |             (s2 (set _t)) )
|  |  |           (=> true
|  |  |               (=> (and (finite@@_t s1) (finite@@_t s2))
|  |  |                   (finite@@_t (union s1 s2)))))
|  |  |   (forall ( (x _t) ) (=> true (finite@@_t (mk-set@@_t x))))
|  |  |   (finite@@_t empty-set@@_t)
|  |  |   (forall ( (s1 (set _t))
|  |  |             (s2 (set _t)) )
|  |  |           (=> true
|  |  |               (=> (subset s1 s2)
|  |  |                   (=> (finite@@_t s2) (finite@@_t s1)))))
|  |  |   (forall ( (r1 (set _t0)) )
|  |  |           (=> true (= (set@@_t0@@_t0 r1 ident@@_t0) r1)))
|  |  |   (forall ( (terms (Array _t0 (set _t))) )
|  |  |           (=> true
|  |  |               (= (qunion@@_t0@@_t empty-set@@_t0 terms)
|  |  |                  empty-set@@_t)))
|  |  |   (forall ( (terms (Array _t0 (set _t)))
|  |  |             (x _t0) )
|  |  |           (=> true
|  |  |               (= (qunion@@_t0@@_t (mk-set@@_t0 x) terms)
|  |  |                  (select terms x))))
|  |  |   (forall ( (r1 (set _t0))
|  |  |             (r2 (set _t0))
|  |  |             (terms (Array _t0 (set _t))) )
|  |  |           (=> true
|  |  |               (= (qunion@@_t0@@_t (union r1 r2) terms)
|  |  |                  (union (qunion@@_t0@@_t r1 terms)
|  |  |                         (qunion@@_t0@@_t r2 terms)))))
|  |  |   (forall ( (r1 (set _t0))
|  |  |             (terms (Array _t0 (set _t)))
|  |  |             (terms0 (Array _t0 (set _t))) )
|  |  |           (=> true
|  |  |               (=> (forall ( (x _t0) )
|  |  |                           (=> (elem@@_t0 x r1)
|  |  |                               (= (select terms x) (select terms0 x))))
|  |  |                   (= (qunion@@_t0@@_t r1 terms)
|  |  |                      (qunion@@_t0@@_t r1 terms0)))))
|  |  |   (forall ( (r1 (set (Pair _t0 _t1)))
|  |  |             (x1 _t0)
|  |  |             (x2 _t1) )
|  |  |           (=> true
|  |  |               (=> (elem@Open@@Pair@@_t0@@_t1@Close (pair x1 x2) r1)
|  |  |                   (elem@@_t0 x1 (reldom@@_t0@@_t1 r1)))))
|  |  |   (forall ( (r1 (set (Pair _t0 _t1)))
|  |  |             (s1 (set _t0)) )
|  |  |           (=> true
|  |  |               (= (reldom@@_t0@@_t1 (seq@@_t0@@_t0@@_t1 (asrel@@_t0 s1) r1))
|  |  |                  (intersect s1 (reldom@@_t0@@_t1 r1)))))
|  |  |   (forall ( (r1 (set (Pair _t0 _t1)))
|  |  |             (x1 _t0)
|  |  |             (x2 _t1) )
|  |  |           (=> true
|  |  |               (= (elem@Open@@Pair@@_t0@@_t1@Close (pair x1 x2)
|  |  |                                                   (seq@@_t0@@_t0@@_t1 (asrel@@_t0 (mk-set@@_t0 x1)) r1))
|  |  |                  (elem@Open@@Pair@@_t0@@_t1@Close (pair x1 x2) r1))))
|  |  |   (forall ( (x1 _t0) )
|  |  |           (=> true
|  |  |               (= (asrel@@_t0 (mk-set@@_t0 x1))
|  |  |                  (mk-set@Open@@Pair@@_t0@@_t0@Close (pair x1 x1)))))
|  |  |   (forall ( (r1 (set (Pair _t0 _t1)))
|  |  |             (r3 (set (Pair _t1 _t2)))
|  |  |             (r5 (set (Pair _t2 _t3))) )
|  |  |           (=> true
|  |  |               (= (seq@@_t0@@_t2@@_t3 (seq@@_t0@@_t1@@_t2 r1 r3) r5)
|  |  |                  (seq@@_t0@@_t1@@_t3 r1 (seq@@_t1@@_t2@@_t3 r3 r5)))))
|  |  |   (forall ( (r1 (set (Pair _t0 _t1)))
|  |  |             (r2 (set (Pair _t0 _t1)))
|  |  |             (r3 (set (Pair _t1 _t2))) )
|  |  |           (=> true
|  |  |               (=> (subset r1 r2)
|  |  |                   (subset (seq@@_t0@@_t1@@_t2 r1 r3)
|  |  |                           (seq@@_t0@@_t1@@_t2 r2 r3)))))
|  |  |   (forall ( (r1 (set (Pair _t0 _t1)))
|  |  |             (r2 (set (Pair _t0 _t1)))
|  |  |             (r4 (set (Pair _t2 _t0))) )
|  |  |           (=> true
|  |  |               (=> (subset r1 r2)
|  |  |                   (subset (seq@@_t2@@_t0@@_t1 r4 r1)
|  |  |                           (seq@@_t2@@_t0@@_t1 r4 r2)))))
|  |  |   (forall ( (rr (set (Pair _t0 _t0)))
|  |  |             (rr2 (set (Pair _t0 _t0))) )
|  |  |           (=> true
|  |  |               (= (star@@_t0 (union rr rr2))
|  |  |                  (seq@@_t0@@_t0@@_t0 (star@@_t0 (seq@@_t0@@_t0@@_t0 (star@@_t0 rr) rr2))
|  |  |                                      (star@@_t0 rr)))))
|  |  |   (forall ( (rr (set (Pair _t0 _t0)))
|  |  |             (rr2 (set (Pair _t0 _t0))) )
|  |  |           (=> true
|  |  |               (= (star@@_t0 (union rr rr2))
|  |  |                  (seq@@_t0@@_t0@@_t0 (star@@_t0 rr2)
|  |  |                                      (star@@_t0 (seq@@_t0@@_t0@@_t0 rr (star@@_t0 rr2)))))))
|  |  |   (forall ( (rr (set (Pair _t0 _t0))) )
|  |  |           (=> true
|  |  |               (= (union (seq@@_t0@@_t0@@_t0 (star@@_t0 rr) rr) id@@_t0)
|  |  |                  (star@@_t0 rr))))
|  |  |   (forall ( (rr (set (Pair _t0 _t0))) )
|  |  |           (=> true
|  |  |               (= (union (seq@@_t0@@_t0@@_t0 rr (star@@_t0 rr)) id@@_t0)
|  |  |                  (star@@_t0 rr))))
|  |  |   (forall ( (r1 (set (Pair _t0 _t1)))
|  |  |             (r2 (set (Pair _t0 _t1)))
|  |  |             (r3 (set (Pair _t1 _t2))) )
|  |  |           (=> true
|  |  |               (= (seq@@_t0@@_t1@@_t2 (union r1 r2) r3)
|  |  |                  (union (seq@@_t0@@_t1@@_t2 r1 r3)
|  |  |                         (seq@@_t0@@_t1@@_t2 r2 r3)))))
|  |  |   (forall ( (r1 (set (Pair _t0 _t1)))
|  |  |             (r2 (set (Pair _t0 _t1)))
|  |  |             (r4 (set (Pair _t2 _t0))) )
|  |  |           (=> true
|  |  |               (= (seq@@_t2@@_t0@@_t1 r4 (union r1 r2))
|  |  |                  (union (seq@@_t2@@_t0@@_t1 r4 r1)
|  |  |                         (seq@@_t2@@_t0@@_t1 r4 r2)))))
|  |  |   (forall ( (x1 _t0)
|  |  |             (x3 _t0) )
|  |  |           (=> true
|  |  |               (= (seq@@_t0@@_t0@@_t1 (mk-set@Open@@Pair@@_t0@@_t0@Close (pair x1 x3))
|  |  |                                      all@Open@@Pair@@_t0@@_t1@Close)
|  |  |                  (seq@@_t0@@_t0@@_t1 (asrel@@_t0 (mk-set@@_t0 x1))
|  |  |                                      all@Open@@Pair@@_t0@@_t1@Close))))
|  |  |   (forall ( (x1 _t0)
|  |  |             (x2 _t1)
|  |  |             (x4 _t2)
|  |  |             (x5 _t3) )
|  |  |           (=> true
|  |  |               (= (seq@@_t0@@_t2@@_t3 (seq@@_t0@@_t1@@_t2 (mk-set@Open@@Pair@@_t0@@_t1@Close (pair x1 x2))
|  |  |                                                          all@Open@@Pair@@_t1@@_t2@Close)
|  |  |                                      (mk-set@Open@@Pair@@_t2@@_t3@Close (pair x4 x5)))
|  |  |                  (mk-set@Open@@Pair@@_t0@@_t3@Close (pair x1 x5)))))
|  |  |   (forall ( (x1 _t0)
|  |  |             (x2 _t1) )
|  |  |           (=> true
|  |  |               (= (seq@@_t0@@_t1@@_t1 (seq@@_t0@@_t0@@_t1 (asrel@@_t0 (mk-set@@_t0 x1))
|  |  |                                                          all@Open@@Pair@@_t0@@_t1@Close)
|  |  |                                      (asrel@@_t1 (mk-set@@_t1 x2)))
|  |  |                  (mk-set@Open@@Pair@@_t0@@_t1@Close (pair x1 x2)))))
|  |  |   (forall ( (x1 _t0)
|  |  |             (x3 _t0) )
|  |  |           (=> true
|  |  |               (= (elem@Open@@Pair@@_t0@@_t0@Close (pair x1 x3) id@@_t0)
|  |  |                  (= x1 x3))))
|  |  |   (forall ( (r1 (set (Pair _t0 _t1))) )
|  |  |           (=> true (= (seq@@_t0@@_t0@@_t1 id@@_t0 r1) r1)))
|  |  |   (forall ( (r1 (set (Pair _t0 _t1))) )
|  |  |           (=> true (= (seq@@_t0@@_t1@@_t1 r1 id@@_t1) r1)))
|  |  |   (forall ( (rr (set (Pair _t0 _t0))) )
|  |  |           (=> true (subset rr (star@@_t0 rr))))
|  |  |   (forall ( (rr (set (Pair _t0 _t0)))
|  |  |             (rr2 (set (Pair _t0 _t0))) )
|  |  |           (=> true
|  |  |               (=> (subset rr rr2)
|  |  |                   (subset (star@@_t0 rr) (star@@_t0 rr2)))))
|  |  |   (forall ( (rr (set (Pair _t0 _t0)))
|  |  |             (rr2 (set (Pair _t0 _t0)))
|  |  |             (x1 _t0)
|  |  |             (x3 _t0) )
|  |  |           (=> true
|  |  |               (=> (elem@Open@@Pair@@_t0@@_t0@Close (pair x1 x3) (star@@_t0 (intersect rr rr2)))
|  |  |                   (elem@Open@@Pair@@_t0@@_t0@Close (pair x1 x3) (star@@_t0 rr)))))
|  |  |   (forall ( (rr (set (Pair _t0 _t0)))
|  |  |             (rr2 (set (Pair _t0 _t0)))
|  |  |             (x1 _t0)
|  |  |             (x3 _t0) )
|  |  |           (=> true
|  |  |               (=> (elem@Open@@Pair@@_t0@@_t0@Close (pair x1 x3) (star@@_t0 rr))
|  |  |                   (elem@Open@@Pair@@_t0@@_t0@Close (pair x1 x3) (star@@_t0 (union rr rr2))))))
|  |  |   (forall ( (rr (set (Pair _t0 _t0))) )
|  |  |           (=> true
|  |  |               (= (seq@@_t0@@_t0@@_t0 (star@@_t0 rr) (star@@_t0 rr))
|  |  |                  (star@@_t0 rr))))
|  |  |   (forall ( (r1 (set (Pair _t0 _t1)))
|  |  |             (r2 (set (Pair _t0 _t1)))
|  |  |             (r3 (set (Pair _t1 _t2))) )
|  |  |           (=> true
|  |  |               (=> (subset r1 r2)
|  |  |                   (subset (seq@@_t0@@_t1@@_t2 r1 r3)
|  |  |                           (seq@@_t0@@_t1@@_t2 r2 r3)))))
|  |  |   (forall ( (r1 (set (Pair _t0 _t1)))
|  |  |             (r2 (set (Pair _t0 _t1)))
|  |  |             (r4 (set (Pair _t2 _t0))) )
|  |  |           (=> true
|  |  |               (=> (subset r1 r2)
|  |  |                   (subset (seq@@_t2@@_t0@@_t1 r4 r1)
|  |  |                           (seq@@_t2@@_t0@@_t1 r4 r2)))))
|  |  |   (forall ( (rr (set (Pair _t0 _t0))) )
|  |  |           (=> true
|  |  |               (= (plus@@_t0 rr)
|  |  |                  (seq@@_t0@@_t0@@_t0 (star@@_t0 rr) rr))))
|  |  |   (forall ( (rr (set (Pair _t0 _t0))) )
|  |  |           (=> true
|  |  |               (= (plus@@_t0 rr)
|  |  |                  (seq@@_t0@@_t0@@_t0 rr (star@@_t0 rr)))))
|  |  |   (forall ( (r1 (set (Pair _t0 _t1)))
|  |  |             (s1 (set _t0))
|  |  |             (x2 _t1) )
|  |  |           (=> true
|  |  |               (= (elem@@_t1 x2 (lookup@@_t0@@_t1 r1 s1))
|  |  |                  (exists ( (x1 _t0) )
|  |  |                          (and (elem@@_t0 x1 s1)
|  |  |                               (elem@Open@@Pair@@_t0@@_t1@Close (pair x1 x2) r1))))))
|  |  |   (forall ( (r1 (set (Pair _t0 _t1)))
|  |  |             (s1 (set _t0))
|  |  |             (x1 _t0)
|  |  |             (x2 _t1) )
|  |  |           (=> true
|  |  |               (=> (elem@@_t0 x1 s1)
|  |  |                   (=> (elem@Open@@Pair@@_t0@@_t1@Close (pair x1 x2) r1)
|  |  |                       (elem@@_t1 x2 (lookup@@_t0@@_t1 r1 s1))))))
|  |  |  |----
|  |  |   (forall ( (p_0 Node)
|  |  |             (p_1 Node)
|  |  |             (q Node) )
|  |  |           (=> (elem@Open@@Pair@@Node@@Node@Close (pair r p_1) (star@@Node ptr))
|  |  |               (=> (elem@Open@@Pair@@Node@@Node@Close (pair r q)
|  |  |                                                      (star@@Node (union ptr
|  |  |                                                                         (mk-set@Open@@Pair@@Node@@Node@Close (pair p_0 p_1)))))
|  |  |                   (elem@Open@@Pair@@Node@@Node@Close (pair r q) (star@@Node ptr)))))
|  |  |  +- test7: POs, step 3 (monotonicity, associativity)
|  |  |     Exception:  UnitB/PO.hs:914:21-26: Assertion failed "Sequent scopes: 
|  |  |  (pair x1 x2)
|  |  |  (forall ((r1 (\set (Pair _t0 _t1))) (x1 _t0) (x2 _t1)) (=> true (=> (elem (pair x1 x2) r1) (elem x1 (reldom r1)))))
|  |  |  (pair x1 x2)
|  |  |  (pair x1 x2)
|  |  |  (forall ((r1 (\set (Pair _t0 _t1))) (x1 _t0) (x2 _t1)) (=> true (= (elem (pair x1 x2) (seq (asrel (mk-set x1)) r1)) (elem (pair x1 x2) r1))))
|  |  |  (pair x1 x1)
|  |  |  (forall ((x1 _t0)) (=> true (= (asrel (mk-set x1)) (mk-set (pair x1 x1)))))
|  |  |  (pair x1 x3)
|  |  |  (forall ((x1 _t0) (x3 _t0)) (=> true (= (seq (mk-set (pair x1 x3)) all) (seq (asrel (mk-set x1)) all))))
|  |  |  (pair x1 x2)
|  |  |  (pair x4 x5)
|  |  |  (pair x1 x5)
|  |  |  (forall ((x1 _t0) (x2 _t1) (x4 _t2) (x5 _t3)) (=> true (= (seq (seq (mk-set (pair x1 x2)) all) (mk-set (pair x4 x5))) (mk-set (pair x1 x5)))))
|  |  |  (pair x1 x2)
|  |  |  (forall ((x1 _t0) (x2 _t1)) (=> true (= (seq (seq (asrel (mk-set x1)) all) (asrel (mk-set x2))) (mk-set (pair x1 x2)))))
|  |  |  (pair x1 x3)
|  |  |  (forall ((x1 _t0) (x3 _t0)) (=> true (= (elem (pair x1 x3) id) (= x1 x3))))
|  |  |  (pair x1 x3)
|  |  |  (pair x1 x3)
|  |  |  (forall ((rr (\set (Pair _t0 _t0))) (rr2 (\set (Pair _t0 _t0))) (x1 _t0) (x3 _t0)) (=> true (=> (elem (pair x1 x3) (star (intersect rr rr2))) (elem (pair x1 x3) (star rr)))))
|  |  |  (pair x1 x3)
|  |  |  (pair x1 x3)
|  |  |  (forall ((rr (\set (Pair _t0 _t0))) (rr2 (\set (Pair _t0 _t0))) (x1 _t0) (x3 _t0)) (=> true (=> (elem (pair x1 x3) (star rr)) (elem (pair x1 x3) (star (union rr rr2))))))
|  |  |  (pair x1 x2)
|  |  |  (forall ((r1 (\set (Pair _t0 _t1))) (s1 (\set _t0)) (x2 _t1)) (=> true (= (elem x2 (lookup r1 s1)) (exists ((x1 _t0)) (and (elem x1 s1) (elem (pair x1 x2) r1))))))
|  |  |  (pair x1 x2)
|  |  |  (forall ((r1 (\set (Pair _t0 _t1))) (s1 (\set _t0)) (x1 _t0) (x2 _t1)) (=> true (=> (elem x1 s1) (=> (elem (pair x1 x2) r1) (elem x2 (lookup r1 s1))))))
|  |  |  (pair r p_1)
|  |  |  (pair r q)
|  |  |  (pair p_0 p_1)
|  |  |  (pair r q)
|  |  |  (forall ((p_0 Node) (p_1 Node) (q Node)) (=> (elem (pair r p_1) (star ptr)) (=> (elem (pair r q) (star (union ptr (mk-set (pair p_0 p_1))))) (elem (pair r q) (star ptr)))))
|  |  |  ",  sort: Node, Pair [a,b], pfun [a,b], set [a]
|  |  |   apply[_t0,_t1]: (pfun t0 t1) x t0 -> t1
|  |  |   asrel[_a]: (set a) -> (set (Pair a a))
|  |  |   const[_a,_b]: b -> (Array a b)
|  |  |   dom[_t0,_t1]: (pfun t0 t1) -> (set t0)
|  |  |   dom-rest[_t0,_t1]: (set t0) x (pfun t0 t1) -> (pfun t0 t1)
|  |  |   dom-subt[_t0,_t1]: (set t0) x (pfun t0 t1) -> (pfun t0 t1)
|  |  |   empty-fun[_t0,_t1]: (pfun t0 t1)
|  |  |   finite[_t]: (set t) -> Bool
|  |  |   id[_a]: (set (Pair a a))
|  |  |   ident[_a]: (Array a a)
|  |  |   injective[_t0,_t1]: (pfun t0 t1) -> Bool
|  |  |   lambda[_a,_b]: (set a) x (Array a b) -> (pfun a b)
|  |  |   lookup[_a,_b]: (set (Pair a b)) x (set a) -> (set b)
|  |  |   mk-fun[_t0,_t1]: t0 x t1 -> (pfun t0 t1)
|  |  |   mk-set[_t]: t -> (set t)
|  |  |   ovl[_t0,_t1]: (pfun t0 t1) x (pfun t0 t1) -> (pfun t0 t1)
|  |  |   plus[_a]: (set (Pair a a)) -> (set (Pair a a))
|  |  |   qsum[_a]: (set a) x (Array a Int) -> Int
|  |  |   qunion[_a,_b]: (set a) x (Array a (set b)) -> (set b)
|  |  |   ran[_t0,_t1]: (pfun t0 t1) -> (set t1)
|  |  |   reldom[_a,_b]: (set (Pair a b)) -> (set a)
|  |  |   seq[_a,_b,_c]: (set (Pair a b)) x (set (Pair b c)) -> (set (Pair a c))
|  |  |   set[_a,_b]: (set a) x (Array a b) -> (set b)
|  |  |   star[_a]: (set (Pair a a)) -> (set (Pair a a))
|  |  |   tfun[_t0,_t1]: (set t0) x (set t1) -> (set (pfun t0 t1))
|  |  |   Node: (set Node)  =  ((as const (set Node)) true)
|  |  |   all[_t] : (set t)  =  ((as const (set t)) true)
|  |  |   compl[_t] : (s1 (set _t)) -> (set t)  =  ((_ map not) s1)
|  |  |   elem[_t] : (x _t) x (s1 (set _t)) -> Bool  =  (select s1 x)
|  |  |   empty-set[_t] : (set t)  =  ((as const (set t)) false)
|  |  |   set-diff[_t] : (s1 (set _t)) x (s2 (set _t)) -> (set t)  =  (intersect s1 ((_ map not) s2))
|  |  |   st-subset[_t] : (s1 (set _t)) x (s2 (set _t)) -> Bool  =  (and (subset s1 s2) (not (= s1 s2)))
|  |  |   free: (set Node)
|  |  |   live: (set Node)
|  |  |   ptr: (set (Pair Node Node))
|  |  |   r: Node
|  |  |   (elem@@Node r live)
|  |  |   (= Node (union live free))
|  |  |   (= (intersect live free) empty-set@@Node)
|  |  |   (forall ( (term (Array _t Int)) )
|  |  |           (=> true (= (qsum@@_t empty-set@@_t term) 0)))
|  |  |   (forall ( (r (set _t))
|  |  |             (term (Array _t Int))
|  |  |             (x _t) )
|  |  |           (=> true
|  |  |               (=> (not (elem@@_t x r))
|  |  |                   (= (qsum@@_t (union r (mk-set@@_t x)) term)
|  |  |                      (+ (qsum@@_t r term) (select term x))))))
|  |  |   (forall ( (r (set _t))
|  |  |             (r0 (set _t))
|  |  |             (term (Array _t Int)) )
|  |  |           (=> true
|  |  |               (=> (= (intersect r r0) empty-set@@_t)
|  |  |                   (= (qsum@@_t (union r r0) term)
|  |  |                      (+ (qsum@@_t r term) (qsum@@_t r0 term))))))
|  |  |   (forall ( (r (set _t)) )
|  |  |           (=> true
|  |  |               (=> (finite@@_t r)
|  |  |                   (<= 0 (qsum@@_t r (const@@_t@@Int 1))))))
|  |  |   (forall ( (r (set _t)) )
|  |  |           (=> true
|  |  |               (= (= (qsum@@_t r (const@@_t@@Int 1)) 0)
|  |  |                  (= r empty-set@@_t))))
|  |  |   (forall ( (x _t) )
|  |  |           (=> true
|  |  |               (= (qsum@@_t (mk-set@@_t x) (const@@_t@@Int 1)) 1)))
|  |  |   (forall ( (r (set _t)) )
|  |  |           (=> true
|  |  |               (= (= (qsum@@_t r (const@@_t@@Int 1)) 1)
|  |  |                  (exists ( (x _t) ) (and true (= r (mk-set@@_t x)))))))
|  |  |   (forall ( (r (set _t))
|  |  |             (r0 (set _t)) )
|  |  |           (=> true
|  |  |               (=> (= (intersect r r0) empty-set@@_t)
|  |  |                   (= (qsum@@_t (union r r0) (const@@_t@@Int 1))
|  |  |                      (+ (qsum@@_t r (const@@_t@@Int 1))
|  |  |                         (qsum@@_t r0 (const@@_t@@Int 1)))))))
|  |  |   (forall ( (x _t0)
|  |  |             (y _t1) )
|  |  |           (=> true (= (select (const@@_t1@@_t0 x) y) x)))
|  |  |   (forall ( (x _t0) ) (=> true (= (select ident@@_t0 x) x)))
|  |  |   (= (dom@@_t0@@_t1 empty-fun@@_t0@@_t1)
|  |  |      empty-set@@_t0)
|  |  |   (forall ( (t (Array _t0 _t1)) )
|  |  |           (=> true
|  |  |               (= (lambda@@_t0@@_t1 empty-set@@_t0 t)
|  |  |                  empty-fun@@_t0@@_t1)))
|  |  |   (forall ( (r (set _t0))
|  |  |             (t (Array _t0 _t1)) )
|  |  |           (=> true (= (dom@@_t0@@_t1 (lambda@@_t0@@_t1 r t)) r)))
|  |  |   (forall ( (t (Array _t0 _t1))
|  |  |             (x _t0) )
|  |  |           (=> true
|  |  |               (= (lambda@@_t0@@_t1 (mk-set@@_t0 x) t)
|  |  |                  (mk-fun@@_t0@@_t1 x (select t x)))))
|  |  |   (forall ( (r (set _t0))
|  |  |             (t (Array _t0 _t1))
|  |  |             (x _t0) )
|  |  |           (=> true
|  |  |               (= (ovl@@_t0@@_t1 (lambda@@_t0@@_t1 r t)
|  |  |                                 (mk-fun@@_t0@@_t1 x (select t x)))
|  |  |                  (lambda@@_t0@@_t1 (union r (mk-set@@_t0 x)) t))))
|  |  |   (forall ( (r (set _t0))
|  |  |             (r0 (set _t0))
|  |  |             (t (Array _t0 _t1)) )
|  |  |           (=> true
|  |  |               (= (ovl@@_t0@@_t1 (lambda@@_t0@@_t1 r t) (lambda@@_t0@@_t1 r0 t))
|  |  |                  (lambda@@_t0@@_t1 (union r r0) t))))
|  |  |   (forall ( (f1 (pfun _t0 _t1)) )
|  |  |           (=> true
|  |  |               (= (ovl@@_t0@@_t1 f1 empty-fun@@_t0@@_t1) f1)))
|  |  |   (forall ( (f1 (pfun _t0 _t1)) )
|  |  |           (=> true
|  |  |               (= (ovl@@_t0@@_t1 empty-fun@@_t0@@_t1 f1) f1)))
|  |  |   (forall ( (x _t0)
|  |  |             (y _t1) )
|  |  |           (=> true
|  |  |               (= (dom@@_t0@@_t1 (mk-fun@@_t0@@_t1 x y))
|  |  |                  (mk-set@@_t0 x))))
|  |  |   (forall ( (f1 (pfun _t0 _t1))
|  |  |             (f2 (pfun _t0 _t1))
|  |  |             (x _t0) )
|  |  |           (=> true
|  |  |               (=> (elem@@_t0 x (dom@@_t0@@_t1 f2))
|  |  |                   (= (apply@@_t0@@_t1 (ovl@@_t0@@_t1 f1 f2) x)
|  |  |                      (apply@@_t0@@_t1 f2 x)))))
|  |  |   (forall ( (f1 (pfun _t0 _t1))
|  |  |             (f2 (pfun _t0 _t1))
|  |  |             (x _t0) )
|  |  |           (=> true
|  |  |               (=> (and (elem@@_t0 x (dom@@_t0@@_t1 f1))
|  |  |                        (not (elem@@_t0 x (dom@@_t0@@_t1 f2))))
|  |  |                   (= (apply@@_t0@@_t1 (ovl@@_t0@@_t1 f1 f2) x)
|  |  |                      (apply@@_t0@@_t1 f1 x)))))
|  |  |   (forall ( (x _t0)
|  |  |             (y _t1) )
|  |  |           (=> true
|  |  |               (= (apply@@_t0@@_t1 (mk-fun@@_t0@@_t1 x y) x) y)))
|  |  |   (forall ( (f1 (pfun _t0 _t1))
|  |  |             (s1 (set _t0))
|  |  |             (x _t0) )
|  |  |           (=> true
|  |  |               (=> (and (elem@@_t0 x s1) (elem@@_t0 x (dom@@_t0@@_t1 f1)))
|  |  |                   (= (apply@@_t0@@_t1 (dom-rest@@_t0@@_t1 s1 f1) x)
|  |  |                      (apply@@_t0@@_t1 f1 x)))))
|  |  |   (forall ( (f1 (pfun _t0 _t1))
|  |  |             (s1 (set _t0))
|  |  |             (x _t0) )
|  |  |           (=> true
|  |  |               (=> (elem@@_t0 x (set-diff@@_t0 (dom@@_t0@@_t1 f1) s1))
|  |  |                   (= (apply@@_t0@@_t1 (dom-subt@@_t0@@_t1 s1 f1) x)
|  |  |                      (apply@@_t0@@_t1 f1 x)))))
|  |  |   (forall ( (s2 (set _t1)) )
|  |  |           (=> true
|  |  |               (elem@Open@@pfun@@_t0@@_t1@Close empty-fun@@_t0@@_t1
|  |  |                                                (tfun@@_t0@@_t1 empty-set@@_t0 s2))))
|  |  |   (forall ( (f1 (pfun _t0 _t1))
|  |  |             (f2 (pfun _t0 _t1)) )
|  |  |           (=> true
|  |  |               (= (dom@@_t0@@_t1 (ovl@@_t0@@_t1 f1 f2))
|  |  |                  (union (dom@@_t0@@_t1 f1) (dom@@_t0@@_t1 f2)))))
|  |  |   (forall ( (f1 (pfun _t0 _t1))
|  |  |             (s1 (set _t0)) )
|  |  |           (=> true
|  |  |               (= (dom@@_t0@@_t1 (dom-rest@@_t0@@_t1 s1 f1))
|  |  |                  (intersect s1 (dom@@_t0@@_t1 f1)))))
|  |  |   (forall ( (f1 (pfun _t0 _t1))
|  |  |             (s1 (set _t0)) )
|  |  |           (=> true
|  |  |               (= (dom@@_t0@@_t1 (dom-subt@@_t0@@_t1 s1 f1))
|  |  |                  (set-diff@@_t0 (dom@@_t0@@_t1 f1) s1))))
|  |  |   (forall ( (r (set _t0))
|  |  |             (t (Array _t0 _t1))
|  |  |             (x _t0) )
|  |  |           (=> true
|  |  |               (=> (elem@@_t0 x r)
|  |  |                   (= (apply@@_t0@@_t1 (lambda@@_t0@@_t1 r t) x)
|  |  |                      (select t x)))))
|  |  |   (forall ( (f1 (pfun _t0 _t1))
|  |  |             (x _t0)
|  |  |             (y _t1) )
|  |  |           (=> true
|  |  |               (= (and (elem@@_t0 x (dom@@_t0@@_t1 f1))
|  |  |                       (= (apply@@_t0@@_t1 f1 x) y))
|  |  |                  (= (select f1 x) (Just y)))))
|  |  |   (forall ( (f1 (pfun _t0 _t1))
|  |  |             (x _t0)
|  |  |             (x2 _t0)
|  |  |             (y _t1) )
|  |  |           (=> true
|  |  |               (=> (not (= x x2))
|  |  |                   (= (apply@@_t0@@_t1 (ovl@@_t0@@_t1 f1 (mk-fun@@_t0@@_t1 x y)) x2)
|  |  |                      (apply@@_t0@@_t1 f1 x2)))))
|  |  |   (forall ( (f1 (pfun _t0 _t1))
|  |  |             (x _t0)
|  |  |             (y _t1) )
|  |  |           (=> true
|  |  |               (= (apply@@_t0@@_t1 (ovl@@_t0@@_t1 f1 (mk-fun@@_t0@@_t1 x y)) x)
|  |  |                  y)))
|  |  |   (= (ran@@_t0@@_t1 empty-fun@@_t0@@_t1)
|  |  |      empty-set@@_t1)
|  |  |   (forall ( (f1 (pfun _t0 _t1))
|  |  |             (y _t1) )
|  |  |           (=> true
|  |  |               (= (elem@@_t1 y (ran@@_t0@@_t1 f1))
|  |  |                  (exists ( (x _t0) )
|  |  |                          (and true
|  |  |                               (and (elem@@_t0 x (dom@@_t0@@_t1 f1))
|  |  |                                    (= (apply@@_t0@@_t1 f1 x) y)))))))
|  |  |   (forall ( (x _t0)
|  |  |             (y _t1) )
|  |  |           (=> true
|  |  |               (= (ran@@_t0@@_t1 (mk-fun@@_t0@@_t1 x y))
|  |  |                  (mk-set@@_t1 y))))
|  |  |   (forall ( (f1 (pfun _t0 _t1))
|  |  |             (s1 (set _t0))
|  |  |             (s2 (set _t1)) )
|  |  |           (=> true
|  |  |               (= (elem@Open@@pfun@@_t0@@_t1@Close f1 (tfun@@_t0@@_t1 s1 s2))
|  |  |                  (and (= s1 (dom@@_t0@@_t1 f1))
|  |  |                       (subset (ran@@_t0@@_t1 f1) s2)))))
|  |  |   (forall ( (f1 (pfun _t0 _t1)) )
|  |  |           (=> true
|  |  |               (= (injective@@_t0@@_t1 f1)
|  |  |                  (forall ( (x _t0)
|  |  |                            (x2 _t0) )
|  |  |                          (=> (and (elem@@_t0 x (dom@@_t0@@_t1 f1))
|  |  |                                   (elem@@_t0 x2 (dom@@_t0@@_t1 f1)))
|  |  |                              (=> (= (apply@@_t0@@_t1 f1 x) (apply@@_t0@@_t1 f1 x2))
|  |  |                                  (= x x2)))))))
|  |  |   (injective@@_t0@@_t1 empty-fun@@_t0@@_t1)
|  |  |   (forall ( (f1 (pfun _t0 _t1))
|  |  |             (x _t0) )
|  |  |           (=> true
|  |  |               (=> (elem@@_t0 x (dom@@_t0@@_t1 f1))
|  |  |                   (elem@@_t1 (apply@@_t0@@_t1 f1 x) (ran@@_t0@@_t1 f1)))))
|  |  |   (forall ( (f1 (pfun _t0 _t1))
|  |  |             (s1 (set _t0))
|  |  |             (x _t0) )
|  |  |           (=> true
|  |  |               (=> (elem@@_t0 x (set-diff@@_t0 (dom@@_t0@@_t1 f1) s1))
|  |  |                   (elem@@_t1 (apply@@_t0@@_t1 f1 x)
|  |  |                              (ran@@_t0@@_t1 (dom-subt@@_t0@@_t1 s1 f1))))))
|  |  |   (forall ( (f1 (pfun _t0 _t1))
|  |  |             (s1 (set _t0))
|  |  |             (x _t0) )
|  |  |           (=> true
|  |  |               (=> (elem@@_t0 x (intersect (dom@@_t0@@_t1 f1) s1))
|  |  |                   (elem@@_t1 (apply@@_t0@@_t1 f1 x)
|  |  |                              (ran@@_t0@@_t1 (dom-rest@@_t0@@_t1 s1 f1))))))
|  |  |   (forall ( (f1 (pfun _t0 _t1))
|  |  |             (x _t0)
|  |  |             (y _t1) )
|  |  |           (=> true
|  |  |               (=> (and (elem@@_t0 x (dom@@_t0@@_t1 f1))
|  |  |                        (injective@@_t0@@_t1 f1))
|  |  |                   (= (ran@@_t0@@_t1 (ovl@@_t0@@_t1 f1 (mk-fun@@_t0@@_t1 x y)))
|  |  |                      (union (set-diff@@_t1 (ran@@_t0@@_t1 f1)
|  |  |                                            (mk-set@@_t1 (apply@@_t0@@_t1 f1 x)))
|  |  |                             (mk-set@@_t1 y))))))
|  |  |   (forall ( (f1 (pfun _t0 _t1))
|  |  |             (x _t0)
|  |  |             (y _t1) )
|  |  |           (=> true
|  |  |               (=> (not (elem@@_t0 x (dom@@_t0@@_t1 f1)))
|  |  |                   (= (ran@@_t0@@_t1 (ovl@@_t0@@_t1 f1 (mk-fun@@_t0@@_t1 x y)))
|  |  |                      (union (ran@@_t0@@_t1 f1) (mk-set@@_t1 y))))))
|  |  |   (forall ( (x _t)
|  |  |             (y _t) )
|  |  |           (=> true (= (elem@@_t x (mk-set@@_t y)) (= x y))))
|  |  |   (forall ( (r1 (set _t0))
|  |  |             (term (Array _t0 _t))
|  |  |             (y _t) )
|  |  |           (=> true
|  |  |               (= (elem@@_t y (set@@_t0@@_t r1 term))
|  |  |                  (exists ( (x _t0) )
|  |  |                          (and (elem@@_t0 x r1) (= (select term x) y))))))
|  |  |   (forall ( (r1 (set _t0))
|  |  |             (term (Array _t0 _t))
|  |  |             (y _t) )
|  |  |           (=> true
|  |  |               (= (= (set@@_t0@@_t r1 term) (mk-set@@_t y))
|  |  |                  (forall ( (x _t0) )
|  |  |                          (=> (elem@@_t0 x r1) (= (select term x) y))))))
|  |  |   (forall ( (s1 (set _t))
|  |  |             (s2 (set _t)) )
|  |  |           (=> true
|  |  |               (=> (finite@@_t s1) (finite@@_t (set-diff@@_t s1 s2)))))
|  |  |   (forall ( (s1 (set _t))
|  |  |             (s2 (set _t)) )
|  |  |           (=> true
|  |  |               (=> (and (finite@@_t s1) (finite@@_t s2))
|  |  |                   (finite@@_t (union s1 s2)))))
|  |  |   (forall ( (x _t) ) (=> true (finite@@_t (mk-set@@_t x))))
|  |  |   (finite@@_t empty-set@@_t)
|  |  |   (forall ( (s1 (set _t))
|  |  |             (s2 (set _t)) )
|  |  |           (=> true
|  |  |               (=> (subset s1 s2)
|  |  |                   (=> (finite@@_t s2) (finite@@_t s1)))))
|  |  |   (forall ( (r1 (set _t0)) )
|  |  |           (=> true (= (set@@_t0@@_t0 r1 ident@@_t0) r1)))
|  |  |   (forall ( (terms (Array _t0 (set _t))) )
|  |  |           (=> true
|  |  |               (= (qunion@@_t0@@_t empty-set@@_t0 terms)
|  |  |                  empty-set@@_t)))
|  |  |   (forall ( (terms (Array _t0 (set _t)))
|  |  |             (x _t0) )
|  |  |           (=> true
|  |  |               (= (qunion@@_t0@@_t (mk-set@@_t0 x) terms)
|  |  |                  (select terms x))))
|  |  |   (forall ( (r1 (set _t0))
|  |  |             (r2 (set _t0))
|  |  |             (terms (Array _t0 (set _t))) )
|  |  |           (=> true
|  |  |               (= (qunion@@_t0@@_t (union r1 r2) terms)
|  |  |                  (union (qunion@@_t0@@_t r1 terms)
|  |  |                         (qunion@@_t0@@_t r2 terms)))))
|  |  |   (forall ( (r1 (set _t0))
|  |  |             (terms (Array _t0 (set _t)))
|  |  |             (terms0 (Array _t0 (set _t))) )
|  |  |           (=> true
|  |  |               (=> (forall ( (x _t0) )
|  |  |                           (=> (elem@@_t0 x r1)
|  |  |                               (= (select terms x) (select terms0 x))))
|  |  |                   (= (qunion@@_t0@@_t r1 terms)
|  |  |                      (qunion@@_t0@@_t r1 terms0)))))
|  |  |   (forall ( (r1 (set (Pair _t0 _t1)))
|  |  |             (x1 _t0)
|  |  |             (x2 _t1) )
|  |  |           (=> true
|  |  |               (=> (elem@Open@@Pair@@_t0@@_t1@Close (pair x1 x2) r1)
|  |  |                   (elem@@_t0 x1 (reldom@@_t0@@_t1 r1)))))
|  |  |   (forall ( (r1 (set (Pair _t0 _t1)))
|  |  |             (s1 (set _t0)) )
|  |  |           (=> true
|  |  |               (= (reldom@@_t0@@_t1 (seq@@_t0@@_t0@@_t1 (asrel@@_t0 s1) r1))
|  |  |                  (intersect s1 (reldom@@_t0@@_t1 r1)))))
|  |  |   (forall ( (r1 (set (Pair _t0 _t1)))
|  |  |             (x1 _t0)
|  |  |             (x2 _t1) )
|  |  |           (=> true
|  |  |               (= (elem@Open@@Pair@@_t0@@_t1@Close (pair x1 x2)
|  |  |                                                   (seq@@_t0@@_t0@@_t1 (asrel@@_t0 (mk-set@@_t0 x1)) r1))
|  |  |                  (elem@Open@@Pair@@_t0@@_t1@Close (pair x1 x2) r1))))
|  |  |   (forall ( (x1 _t0) )
|  |  |           (=> true
|  |  |               (= (asrel@@_t0 (mk-set@@_t0 x1))
|  |  |                  (mk-set@Open@@Pair@@_t0@@_t0@Close (pair x1 x1)))))
|  |  |   (forall ( (r1 (set (Pair _t0 _t1)))
|  |  |             (r3 (set (Pair _t1 _t2)))
|  |  |             (r5 (set (Pair _t2 _t3))) )
|  |  |           (=> true
|  |  |               (= (seq@@_t0@@_t2@@_t3 (seq@@_t0@@_t1@@_t2 r1 r3) r5)
|  |  |                  (seq@@_t0@@_t1@@_t3 r1 (seq@@_t1@@_t2@@_t3 r3 r5)))))
|  |  |   (forall ( (r1 (set (Pair _t0 _t1)))
|  |  |             (r2 (set (Pair _t0 _t1)))
|  |  |             (r3 (set (Pair _t1 _t2))) )
|  |  |           (=> true
|  |  |               (=> (subset r1 r2)
|  |  |                   (subset (seq@@_t0@@_t1@@_t2 r1 r3)
|  |  |                           (seq@@_t0@@_t1@@_t2 r2 r3)))))
|  |  |   (forall ( (r1 (set (Pair _t0 _t1)))
|  |  |             (r2 (set (Pair _t0 _t1)))
|  |  |             (r4 (set (Pair _t2 _t0))) )
|  |  |           (=> true
|  |  |               (=> (subset r1 r2)
|  |  |                   (subset (seq@@_t2@@_t0@@_t1 r4 r1)
|  |  |                           (seq@@_t2@@_t0@@_t1 r4 r2)))))
|  |  |   (forall ( (rr (set (Pair _t0 _t0)))
|  |  |             (rr2 (set (Pair _t0 _t0))) )
|  |  |           (=> true
|  |  |               (= (star@@_t0 (union rr rr2))
|  |  |                  (seq@@_t0@@_t0@@_t0 (star@@_t0 (seq@@_t0@@_t0@@_t0 (star@@_t0 rr) rr2))
|  |  |                                      (star@@_t0 rr)))))
|  |  |   (forall ( (rr (set (Pair _t0 _t0)))
|  |  |             (rr2 (set (Pair _t0 _t0))) )
|  |  |           (=> true
|  |  |               (= (star@@_t0 (union rr rr2))
|  |  |                  (seq@@_t0@@_t0@@_t0 (star@@_t0 rr2)
|  |  |                                      (star@@_t0 (seq@@_t0@@_t0@@_t0 rr (star@@_t0 rr2)))))))
|  |  |   (forall ( (rr (set (Pair _t0 _t0))) )
|  |  |           (=> true
|  |  |               (= (union (seq@@_t0@@_t0@@_t0 (star@@_t0 rr) rr) id@@_t0)
|  |  |                  (star@@_t0 rr))))
|  |  |   (forall ( (rr (set (Pair _t0 _t0))) )
|  |  |           (=> true
|  |  |               (= (union (seq@@_t0@@_t0@@_t0 rr (star@@_t0 rr)) id@@_t0)
|  |  |                  (star@@_t0 rr))))
|  |  |   (forall ( (r1 (set (Pair _t0 _t1)))
|  |  |             (r2 (set (Pair _t0 _t1)))
|  |  |             (r3 (set (Pair _t1 _t2))) )
|  |  |           (=> true
|  |  |               (= (seq@@_t0@@_t1@@_t2 (union r1 r2) r3)
|  |  |                  (union (seq@@_t0@@_t1@@_t2 r1 r3)
|  |  |                         (seq@@_t0@@_t1@@_t2 r2 r3)))))
|  |  |   (forall ( (r1 (set (Pair _t0 _t1)))
|  |  |             (r2 (set (Pair _t0 _t1)))
|  |  |             (r4 (set (Pair _t2 _t0))) )
|  |  |           (=> true
|  |  |               (= (seq@@_t2@@_t0@@_t1 r4 (union r1 r2))
|  |  |                  (union (seq@@_t2@@_t0@@_t1 r4 r1)
|  |  |                         (seq@@_t2@@_t0@@_t1 r4 r2)))))
|  |  |   (forall ( (x1 _t0)
|  |  |             (x3 _t0) )
|  |  |           (=> true
|  |  |               (= (seq@@_t0@@_t0@@_t1 (mk-set@Open@@Pair@@_t0@@_t0@Close (pair x1 x3))
|  |  |                                      all@Open@@Pair@@_t0@@_t1@Close)
|  |  |                  (seq@@_t0@@_t0@@_t1 (asrel@@_t0 (mk-set@@_t0 x1))
|  |  |                                      all@Open@@Pair@@_t0@@_t1@Close))))
|  |  |   (forall ( (x1 _t0)
|  |  |             (x2 _t1)
|  |  |             (x4 _t2)
|  |  |             (x5 _t3) )
|  |  |           (=> true
|  |  |               (= (seq@@_t0@@_t2@@_t3 (seq@@_t0@@_t1@@_t2 (mk-set@Open@@Pair@@_t0@@_t1@Close (pair x1 x2))
|  |  |                                                          all@Open@@Pair@@_t1@@_t2@Close)
|  |  |                                      (mk-set@Open@@Pair@@_t2@@_t3@Close (pair x4 x5)))
|  |  |                  (mk-set@Open@@Pair@@_t0@@_t3@Close (pair x1 x5)))))
|  |  |   (forall ( (x1 _t0)
|  |  |             (x2 _t1) )
|  |  |           (=> true
|  |  |               (= (seq@@_t0@@_t1@@_t1 (seq@@_t0@@_t0@@_t1 (asrel@@_t0 (mk-set@@_t0 x1))
|  |  |                                                          all@Open@@Pair@@_t0@@_t1@Close)
|  |  |                                      (asrel@@_t1 (mk-set@@_t1 x2)))
|  |  |                  (mk-set@Open@@Pair@@_t0@@_t1@Close (pair x1 x2)))))
|  |  |   (forall ( (x1 _t0)
|  |  |             (x3 _t0) )
|  |  |           (=> true
|  |  |               (= (elem@Open@@Pair@@_t0@@_t0@Close (pair x1 x3) id@@_t0)
|  |  |                  (= x1 x3))))
|  |  |   (forall ( (r1 (set (Pair _t0 _t1))) )
|  |  |           (=> true (= (seq@@_t0@@_t0@@_t1 id@@_t0 r1) r1)))
|  |  |   (forall ( (r1 (set (Pair _t0 _t1))) )
|  |  |           (=> true (= (seq@@_t0@@_t1@@_t1 r1 id@@_t1) r1)))
|  |  |   (forall ( (rr (set (Pair _t0 _t0))) )
|  |  |           (=> true (subset rr (star@@_t0 rr))))
|  |  |   (forall ( (rr (set (Pair _t0 _t0)))
|  |  |             (rr2 (set (Pair _t0 _t0))) )
|  |  |           (=> true
|  |  |               (=> (subset rr rr2)
|  |  |                   (subset (star@@_t0 rr) (star@@_t0 rr2)))))
|  |  |   (forall ( (rr (set (Pair _t0 _t0)))
|  |  |             (rr2 (set (Pair _t0 _t0)))
|  |  |             (x1 _t0)
|  |  |             (x3 _t0) )
|  |  |           (=> true
|  |  |               (=> (elem@Open@@Pair@@_t0@@_t0@Close (pair x1 x3) (star@@_t0 (intersect rr rr2)))
|  |  |                   (elem@Open@@Pair@@_t0@@_t0@Close (pair x1 x3) (star@@_t0 rr)))))
|  |  |   (forall ( (rr (set (Pair _t0 _t0)))
|  |  |             (rr2 (set (Pair _t0 _t0)))
|  |  |             (x1 _t0)
|  |  |             (x3 _t0) )
|  |  |           (=> true
|  |  |               (=> (elem@Open@@Pair@@_t0@@_t0@Close (pair x1 x3) (star@@_t0 rr))
|  |  |                   (elem@Open@@Pair@@_t0@@_t0@Close (pair x1 x3) (star@@_t0 (union rr rr2))))))
|  |  |   (forall ( (rr (set (Pair _t0 _t0))) )
|  |  |           (=> true
|  |  |               (= (seq@@_t0@@_t0@@_t0 (star@@_t0 rr) (star@@_t0 rr))
|  |  |                  (star@@_t0 rr))))
|  |  |   (forall ( (r1 (set (Pair _t0 _t1)))
|  |  |             (r2 (set (Pair _t0 _t1)))
|  |  |             (r3 (set (Pair _t1 _t2))) )
|  |  |           (=> true
|  |  |               (=> (subset r1 r2)
|  |  |                   (subset (seq@@_t0@@_t1@@_t2 r1 r3)
|  |  |                           (seq@@_t0@@_t1@@_t2 r2 r3)))))
|  |  |   (forall ( (r1 (set (Pair _t0 _t1)))
|  |  |             (r2 (set (Pair _t0 _t1)))
|  |  |             (r4 (set (Pair _t2 _t0))) )
|  |  |           (=> true
|  |  |               (=> (subset r1 r2)
|  |  |                   (subset (seq@@_t2@@_t0@@_t1 r4 r1)
|  |  |                           (seq@@_t2@@_t0@@_t1 r4 r2)))))
|  |  |   (forall ( (rr (set (Pair _t0 _t0))) )
|  |  |           (=> true
|  |  |               (= (plus@@_t0 rr)
|  |  |                  (seq@@_t0@@_t0@@_t0 (star@@_t0 rr) rr))))
|  |  |   (forall ( (rr (set (Pair _t0 _t0))) )
|  |  |           (=> true
|  |  |               (= (plus@@_t0 rr)
|  |  |                  (seq@@_t0@@_t0@@_t0 rr (star@@_t0 rr)))))
|  |  |   (forall ( (r1 (set (Pair _t0 _t1)))
|  |  |             (s1 (set _t0))
|  |  |             (x2 _t1) )
|  |  |           (=> true
|  |  |               (= (elem@@_t1 x2 (lookup@@_t0@@_t1 r1 s1))
|  |  |                  (exists ( (x1 _t0) )
|  |  |                          (and (elem@@_t0 x1 s1)
|  |  |                               (elem@Open@@Pair@@_t0@@_t1@Close (pair x1 x2) r1))))))
|  |  |   (forall ( (r1 (set (Pair _t0 _t1)))
|  |  |             (s1 (set _t0))
|  |  |             (x1 _t0)
|  |  |             (x2 _t1) )
|  |  |           (=> true
|  |  |               (=> (elem@@_t0 x1 s1)
|  |  |                   (=> (elem@Open@@Pair@@_t0@@_t1@Close (pair x1 x2) r1)
|  |  |                       (elem@@_t1 x2 (lookup@@_t0@@_t1 r1 s1))))))
|  |  |  |----
|  |  |   (forall ( (p_0 Node)
|  |  |             (p_1 Node)
|  |  |             (q Node) )
|  |  |           (=> (elem@Open@@Pair@@Node@@Node@Close (pair r p_1) (star@@Node ptr))
|  |  |               (=> (elem@Open@@Pair@@Node@@Node@Close (pair r q)
|  |  |                                                      (star@@Node (union ptr
|  |  |                                                                         (mk-set@Open@@Pair@@Node@@Node@Close (pair p_0 p_1)))))
|  |  |                   (elem@Open@@Pair@@Node@@Node@Close (pair r q) (star@@Node ptr)))))
|  |  |  +- test8: POs, step 4 (monotonicity, associativity)
|  |  |     Exception:  UnitB/PO.hs:914:21-26: Assertion failed "Sequent scopes: 
|  |  |  (pair x1 x2)
|  |  |  (forall ((r1 (\set (Pair _t0 _t1))) (x1 _t0) (x2 _t1)) (=> true (=> (elem (pair x1 x2) r1) (elem x1 (reldom r1)))))
|  |  |  (pair x1 x2)
|  |  |  (pair x1 x2)
|  |  |  (forall ((r1 (\set (Pair _t0 _t1))) (x1 _t0) (x2 _t1)) (=> true (= (elem (pair x1 x2) (seq (asrel (mk-set x1)) r1)) (elem (pair x1 x2) r1))))
|  |  |  (pair x1 x1)
|  |  |  (forall ((x1 _t0)) (=> true (= (asrel (mk-set x1)) (mk-set (pair x1 x1)))))
|  |  |  (pair x1 x3)
|  |  |  (forall ((x1 _t0) (x3 _t0)) (=> true (= (seq (mk-set (pair x1 x3)) all) (seq (asrel (mk-set x1)) all))))
|  |  |  (pair x1 x2)
|  |  |  (pair x4 x5)
|  |  |  (pair x1 x5)
|  |  |  (forall ((x1 _t0) (x2 _t1) (x4 _t2) (x5 _t3)) (=> true (= (seq (seq (mk-set (pair x1 x2)) all) (mk-set (pair x4 x5))) (mk-set (pair x1 x5)))))
|  |  |  (pair x1 x2)
|  |  |  (forall ((x1 _t0) (x2 _t1)) (=> true (= (seq (seq (asrel (mk-set x1)) all) (asrel (mk-set x2))) (mk-set (pair x1 x2)))))
|  |  |  (pair x1 x3)
|  |  |  (forall ((x1 _t0) (x3 _t0)) (=> true (= (elem (pair x1 x3) id) (= x1 x3))))
|  |  |  (pair x1 x3)
|  |  |  (pair x1 x3)
|  |  |  (forall ((rr (\set (Pair _t0 _t0))) (rr2 (\set (Pair _t0 _t0))) (x1 _t0) (x3 _t0)) (=> true (=> (elem (pair x1 x3) (star (intersect rr rr2))) (elem (pair x1 x3) (star rr)))))
|  |  |  (pair x1 x3)
|  |  |  (pair x1 x3)
|  |  |  (forall ((rr (\set (Pair _t0 _t0))) (rr2 (\set (Pair _t0 _t0))) (x1 _t0) (x3 _t0)) (=> true (=> (elem (pair x1 x3) (star rr)) (elem (pair x1 x3) (star (union rr rr2))))))
|  |  |  (pair x1 x2)
|  |  |  (forall ((r1 (\set (Pair _t0 _t1))) (s1 (\set _t0)) (x2 _t1)) (=> true (= (elem x2 (lookup r1 s1)) (exists ((x1 _t0)) (and (elem x1 s1) (elem (pair x1 x2) r1))))))
|  |  |  (pair x1 x2)
|  |  |  (forall ((r1 (\set (Pair _t0 _t1))) (s1 (\set _t0)) (x1 _t0) (x2 _t1)) (=> true (=> (elem x1 s1) (=> (elem (pair x1 x2) r1) (elem x2 (lookup r1 s1))))))
|  |  |  (pair r p_1)
|  |  |  (pair r q)
|  |  |  (pair p_0 p_1)
|  |  |  (pair r q)
|  |  |  (forall ((p_0 Node) (p_1 Node) (q Node)) (=> (elem (pair r p_1) (star ptr)) (=> (elem (pair r q) (star (union ptr (mk-set (pair p_0 p_1))))) (elem (pair r q) (star ptr)))))
|  |  |  ",  sort: Node, Pair [a,b], pfun [a,b], set [a]
|  |  |   apply[_t0,_t1]: (pfun t0 t1) x t0 -> t1
|  |  |   asrel[_a]: (set a) -> (set (Pair a a))
|  |  |   const[_a,_b]: b -> (Array a b)
|  |  |   dom[_t0,_t1]: (pfun t0 t1) -> (set t0)
|  |  |   dom-rest[_t0,_t1]: (set t0) x (pfun t0 t1) -> (pfun t0 t1)
|  |  |   dom-subt[_t0,_t1]: (set t0) x (pfun t0 t1) -> (pfun t0 t1)
|  |  |   empty-fun[_t0,_t1]: (pfun t0 t1)
|  |  |   finite[_t]: (set t) -> Bool
|  |  |   id[_a]: (set (Pair a a))
|  |  |   ident[_a]: (Array a a)
|  |  |   injective[_t0,_t1]: (pfun t0 t1) -> Bool
|  |  |   lambda[_a,_b]: (set a) x (Array a b) -> (pfun a b)
|  |  |   lookup[_a,_b]: (set (Pair a b)) x (set a) -> (set b)
|  |  |   mk-fun[_t0,_t1]: t0 x t1 -> (pfun t0 t1)
|  |  |   mk-set[_t]: t -> (set t)
|  |  |   ovl[_t0,_t1]: (pfun t0 t1) x (pfun t0 t1) -> (pfun t0 t1)
|  |  |   plus[_a]: (set (Pair a a)) -> (set (Pair a a))
|  |  |   qsum[_a]: (set a) x (Array a Int) -> Int
|  |  |   qunion[_a,_b]: (set a) x (Array a (set b)) -> (set b)
|  |  |   ran[_t0,_t1]: (pfun t0 t1) -> (set t1)
|  |  |   reldom[_a,_b]: (set (Pair a b)) -> (set a)
|  |  |   seq[_a,_b,_c]: (set (Pair a b)) x (set (Pair b c)) -> (set (Pair a c))
|  |  |   set[_a,_b]: (set a) x (Array a b) -> (set b)
|  |  |   star[_a]: (set (Pair a a)) -> (set (Pair a a))
|  |  |   tfun[_t0,_t1]: (set t0) x (set t1) -> (set (pfun t0 t1))
|  |  |   Node: (set Node)  =  ((as const (set Node)) true)
|  |  |   all[_t] : (set t)  =  ((as const (set t)) true)
|  |  |   compl[_t] : (s1 (set _t)) -> (set t)  =  ((_ map not) s1)
|  |  |   elem[_t] : (x _t) x (s1 (set _t)) -> Bool  =  (select s1 x)
|  |  |   empty-set[_t] : (set t)  =  ((as const (set t)) false)
|  |  |   set-diff[_t] : (s1 (set _t)) x (s2 (set _t)) -> (set t)  =  (intersect s1 ((_ map not) s2))
|  |  |   st-subset[_t] : (s1 (set _t)) x (s2 (set _t)) -> Bool  =  (and (subset s1 s2) (not (= s1 s2)))
|  |  |   free: (set Node)
|  |  |   live: (set Node)
|  |  |   ptr: (set (Pair Node Node))
|  |  |   r: Node
|  |  |   (elem@@Node r live)
|  |  |   (= Node (union live free))
|  |  |   (= (intersect live free) empty-set@@Node)
|  |  |   (forall ( (term (Array _t Int)) )
|  |  |           (=> true (= (qsum@@_t empty-set@@_t term) 0)))
|  |  |   (forall ( (r (set _t))
|  |  |             (term (Array _t Int))
|  |  |             (x _t) )
|  |  |           (=> true
|  |  |               (=> (not (elem@@_t x r))
|  |  |                   (= (qsum@@_t (union r (mk-set@@_t x)) term)
|  |  |                      (+ (qsum@@_t r term) (select term x))))))
|  |  |   (forall ( (r (set _t))
|  |  |             (r0 (set _t))
|  |  |             (term (Array _t Int)) )
|  |  |           (=> true
|  |  |               (=> (= (intersect r r0) empty-set@@_t)
|  |  |                   (= (qsum@@_t (union r r0) term)
|  |  |                      (+ (qsum@@_t r term) (qsum@@_t r0 term))))))
|  |  |   (forall ( (r (set _t)) )
|  |  |           (=> true
|  |  |               (=> (finite@@_t r)
|  |  |                   (<= 0 (qsum@@_t r (const@@_t@@Int 1))))))
|  |  |   (forall ( (r (set _t)) )
|  |  |           (=> true
|  |  |               (= (= (qsum@@_t r (const@@_t@@Int 1)) 0)
|  |  |                  (= r empty-set@@_t))))
|  |  |   (forall ( (x _t) )
|  |  |           (=> true
|  |  |               (= (qsum@@_t (mk-set@@_t x) (const@@_t@@Int 1)) 1)))
|  |  |   (forall ( (r (set _t)) )
|  |  |           (=> true
|  |  |               (= (= (qsum@@_t r (const@@_t@@Int 1)) 1)
|  |  |                  (exists ( (x _t) ) (and true (= r (mk-set@@_t x)))))))
|  |  |   (forall ( (r (set _t))
|  |  |             (r0 (set _t)) )
|  |  |           (=> true
|  |  |               (=> (= (intersect r r0) empty-set@@_t)
|  |  |                   (= (qsum@@_t (union r r0) (const@@_t@@Int 1))
|  |  |                      (+ (qsum@@_t r (const@@_t@@Int 1))
|  |  |                         (qsum@@_t r0 (const@@_t@@Int 1)))))))
|  |  |   (forall ( (x _t0)
|  |  |             (y _t1) )
|  |  |           (=> true (= (select (const@@_t1@@_t0 x) y) x)))
|  |  |   (forall ( (x _t0) ) (=> true (= (select ident@@_t0 x) x)))
|  |  |   (= (dom@@_t0@@_t1 empty-fun@@_t0@@_t1)
|  |  |      empty-set@@_t0)
|  |  |   (forall ( (t (Array _t0 _t1)) )
|  |  |           (=> true
|  |  |               (= (lambda@@_t0@@_t1 empty-set@@_t0 t)
|  |  |                  empty-fun@@_t0@@_t1)))
|  |  |   (forall ( (r (set _t0))
|  |  |             (t (Array _t0 _t1)) )
|  |  |           (=> true (= (dom@@_t0@@_t1 (lambda@@_t0@@_t1 r t)) r)))
|  |  |   (forall ( (t (Array _t0 _t1))
|  |  |             (x _t0) )
|  |  |           (=> true
|  |  |               (= (lambda@@_t0@@_t1 (mk-set@@_t0 x) t)
|  |  |                  (mk-fun@@_t0@@_t1 x (select t x)))))
|  |  |   (forall ( (r (set _t0))
|  |  |             (t (Array _t0 _t1))
|  |  |             (x _t0) )
|  |  |           (=> true
|  |  |               (= (ovl@@_t0@@_t1 (lambda@@_t0@@_t1 r t)
|  |  |                                 (mk-fun@@_t0@@_t1 x (select t x)))
|  |  |                  (lambda@@_t0@@_t1 (union r (mk-set@@_t0 x)) t))))
|  |  |   (forall ( (r (set _t0))
|  |  |             (r0 (set _t0))
|  |  |             (t (Array _t0 _t1)) )
|  |  |           (=> true
|  |  |               (= (ovl@@_t0@@_t1 (lambda@@_t0@@_t1 r t) (lambda@@_t0@@_t1 r0 t))
|  |  |                  (lambda@@_t0@@_t1 (union r r0) t))))
|  |  |   (forall ( (f1 (pfun _t0 _t1)) )
|  |  |           (=> true
|  |  |               (= (ovl@@_t0@@_t1 f1 empty-fun@@_t0@@_t1) f1)))
|  |  |   (forall ( (f1 (pfun _t0 _t1)) )
|  |  |           (=> true
|  |  |               (= (ovl@@_t0@@_t1 empty-fun@@_t0@@_t1 f1) f1)))
|  |  |   (forall ( (x _t0)
|  |  |             (y _t1) )
|  |  |           (=> true
|  |  |               (= (dom@@_t0@@_t1 (mk-fun@@_t0@@_t1 x y))
|  |  |                  (mk-set@@_t0 x))))
|  |  |   (forall ( (f1 (pfun _t0 _t1))
|  |  |             (f2 (pfun _t0 _t1))
|  |  |             (x _t0) )
|  |  |           (=> true
|  |  |               (=> (elem@@_t0 x (dom@@_t0@@_t1 f2))
|  |  |                   (= (apply@@_t0@@_t1 (ovl@@_t0@@_t1 f1 f2) x)
|  |  |                      (apply@@_t0@@_t1 f2 x)))))
|  |  |   (forall ( (f1 (pfun _t0 _t1))
|  |  |             (f2 (pfun _t0 _t1))
|  |  |             (x _t0) )
|  |  |           (=> true
|  |  |               (=> (and (elem@@_t0 x (dom@@_t0@@_t1 f1))
|  |  |                        (not (elem@@_t0 x (dom@@_t0@@_t1 f2))))
|  |  |                   (= (apply@@_t0@@_t1 (ovl@@_t0@@_t1 f1 f2) x)
|  |  |                      (apply@@_t0@@_t1 f1 x)))))
|  |  |   (forall ( (x _t0)
|  |  |             (y _t1) )
|  |  |           (=> true
|  |  |               (= (apply@@_t0@@_t1 (mk-fun@@_t0@@_t1 x y) x) y)))
|  |  |   (forall ( (f1 (pfun _t0 _t1))
|  |  |             (s1 (set _t0))
|  |  |             (x _t0) )
|  |  |           (=> true
|  |  |               (=> (and (elem@@_t0 x s1) (elem@@_t0 x (dom@@_t0@@_t1 f1)))
|  |  |                   (= (apply@@_t0@@_t1 (dom-rest@@_t0@@_t1 s1 f1) x)
|  |  |                      (apply@@_t0@@_t1 f1 x)))))
|  |  |   (forall ( (f1 (pfun _t0 _t1))
|  |  |             (s1 (set _t0))
|  |  |             (x _t0) )
|  |  |           (=> true
|  |  |               (=> (elem@@_t0 x (set-diff@@_t0 (dom@@_t0@@_t1 f1) s1))
|  |  |                   (= (apply@@_t0@@_t1 (dom-subt@@_t0@@_t1 s1 f1) x)
|  |  |                      (apply@@_t0@@_t1 f1 x)))))
|  |  |   (forall ( (s2 (set _t1)) )
|  |  |           (=> true
|  |  |               (elem@Open@@pfun@@_t0@@_t1@Close empty-fun@@_t0@@_t1
|  |  |                                                (tfun@@_t0@@_t1 empty-set@@_t0 s2))))
|  |  |   (forall ( (f1 (pfun _t0 _t1))
|  |  |             (f2 (pfun _t0 _t1)) )
|  |  |           (=> true
|  |  |               (= (dom@@_t0@@_t1 (ovl@@_t0@@_t1 f1 f2))
|  |  |                  (union (dom@@_t0@@_t1 f1) (dom@@_t0@@_t1 f2)))))
|  |  |   (forall ( (f1 (pfun _t0 _t1))
|  |  |             (s1 (set _t0)) )
|  |  |           (=> true
|  |  |               (= (dom@@_t0@@_t1 (dom-rest@@_t0@@_t1 s1 f1))
|  |  |                  (intersect s1 (dom@@_t0@@_t1 f1)))))
|  |  |   (forall ( (f1 (pfun _t0 _t1))
|  |  |             (s1 (set _t0)) )
|  |  |           (=> true
|  |  |               (= (dom@@_t0@@_t1 (dom-subt@@_t0@@_t1 s1 f1))
|  |  |                  (set-diff@@_t0 (dom@@_t0@@_t1 f1) s1))))
|  |  |   (forall ( (r (set _t0))
|  |  |             (t (Array _t0 _t1))
|  |  |             (x _t0) )
|  |  |           (=> true
|  |  |               (=> (elem@@_t0 x r)
|  |  |                   (= (apply@@_t0@@_t1 (lambda@@_t0@@_t1 r t) x)
|  |  |                      (select t x)))))
|  |  |   (forall ( (f1 (pfun _t0 _t1))
|  |  |             (x _t0)
|  |  |             (y _t1) )
|  |  |           (=> true
|  |  |               (= (and (elem@@_t0 x (dom@@_t0@@_t1 f1))
|  |  |                       (= (apply@@_t0@@_t1 f1 x) y))
|  |  |                  (= (select f1 x) (Just y)))))
|  |  |   (forall ( (f1 (pfun _t0 _t1))
|  |  |             (x _t0)
|  |  |             (x2 _t0)
|  |  |             (y _t1) )
|  |  |           (=> true
|  |  |               (=> (not (= x x2))
|  |  |                   (= (apply@@_t0@@_t1 (ovl@@_t0@@_t1 f1 (mk-fun@@_t0@@_t1 x y)) x2)
|  |  |                      (apply@@_t0@@_t1 f1 x2)))))
|  |  |   (forall ( (f1 (pfun _t0 _t1))
|  |  |             (x _t0)
|  |  |             (y _t1) )
|  |  |           (=> true
|  |  |               (= (apply@@_t0@@_t1 (ovl@@_t0@@_t1 f1 (mk-fun@@_t0@@_t1 x y)) x)
|  |  |                  y)))
|  |  |   (= (ran@@_t0@@_t1 empty-fun@@_t0@@_t1)
|  |  |      empty-set@@_t1)
|  |  |   (forall ( (f1 (pfun _t0 _t1))
|  |  |             (y _t1) )
|  |  |           (=> true
|  |  |               (= (elem@@_t1 y (ran@@_t0@@_t1 f1))
|  |  |                  (exists ( (x _t0) )
|  |  |                          (and true
|  |  |                               (and (elem@@_t0 x (dom@@_t0@@_t1 f1))
|  |  |                                    (= (apply@@_t0@@_t1 f1 x) y)))))))
|  |  |   (forall ( (x _t0)
|  |  |             (y _t1) )
|  |  |           (=> true
|  |  |               (= (ran@@_t0@@_t1 (mk-fun@@_t0@@_t1 x y))
|  |  |                  (mk-set@@_t1 y))))
|  |  |   (forall ( (f1 (pfun _t0 _t1))
|  |  |             (s1 (set _t0))
|  |  |             (s2 (set _t1)) )
|  |  |           (=> true
|  |  |               (= (elem@Open@@pfun@@_t0@@_t1@Close f1 (tfun@@_t0@@_t1 s1 s2))
|  |  |                  (and (= s1 (dom@@_t0@@_t1 f1))
|  |  |                       (subset (ran@@_t0@@_t1 f1) s2)))))
|  |  |   (forall ( (f1 (pfun _t0 _t1)) )
|  |  |           (=> true
|  |  |               (= (injective@@_t0@@_t1 f1)
|  |  |                  (forall ( (x _t0)
|  |  |                            (x2 _t0) )
|  |  |                          (=> (and (elem@@_t0 x (dom@@_t0@@_t1 f1))
|  |  |                                   (elem@@_t0 x2 (dom@@_t0@@_t1 f1)))
|  |  |                              (=> (= (apply@@_t0@@_t1 f1 x) (apply@@_t0@@_t1 f1 x2))
|  |  |                                  (= x x2)))))))
|  |  |   (injective@@_t0@@_t1 empty-fun@@_t0@@_t1)
|  |  |   (forall ( (f1 (pfun _t0 _t1))
|  |  |             (x _t0) )
|  |  |           (=> true
|  |  |               (=> (elem@@_t0 x (dom@@_t0@@_t1 f1))
|  |  |                   (elem@@_t1 (apply@@_t0@@_t1 f1 x) (ran@@_t0@@_t1 f1)))))
|  |  |   (forall ( (f1 (pfun _t0 _t1))
|  |  |             (s1 (set _t0))
|  |  |             (x _t0) )
|  |  |           (=> true
|  |  |               (=> (elem@@_t0 x (set-diff@@_t0 (dom@@_t0@@_t1 f1) s1))
|  |  |                   (elem@@_t1 (apply@@_t0@@_t1 f1 x)
|  |  |                              (ran@@_t0@@_t1 (dom-subt@@_t0@@_t1 s1 f1))))))
|  |  |   (forall ( (f1 (pfun _t0 _t1))
|  |  |             (s1 (set _t0))
|  |  |             (x _t0) )
|  |  |           (=> true
|  |  |               (=> (elem@@_t0 x (intersect (dom@@_t0@@_t1 f1) s1))
|  |  |                   (elem@@_t1 (apply@@_t0@@_t1 f1 x)
|  |  |                              (ran@@_t0@@_t1 (dom-rest@@_t0@@_t1 s1 f1))))))
|  |  |   (forall ( (f1 (pfun _t0 _t1))
|  |  |             (x _t0)
|  |  |             (y _t1) )
|  |  |           (=> true
|  |  |               (=> (and (elem@@_t0 x (dom@@_t0@@_t1 f1))
|  |  |                        (injective@@_t0@@_t1 f1))
|  |  |                   (= (ran@@_t0@@_t1 (ovl@@_t0@@_t1 f1 (mk-fun@@_t0@@_t1 x y)))
|  |  |                      (union (set-diff@@_t1 (ran@@_t0@@_t1 f1)
|  |  |                                            (mk-set@@_t1 (apply@@_t0@@_t1 f1 x)))
|  |  |                             (mk-set@@_t1 y))))))
|  |  |   (forall ( (f1 (pfun _t0 _t1))
|  |  |             (x _t0)
|  |  |             (y _t1) )
|  |  |           (=> true
|  |  |               (=> (not (elem@@_t0 x (dom@@_t0@@_t1 f1)))
|  |  |                   (= (ran@@_t0@@_t1 (ovl@@_t0@@_t1 f1 (mk-fun@@_t0@@_t1 x y)))
|  |  |                      (union (ran@@_t0@@_t1 f1) (mk-set@@_t1 y))))))
|  |  |   (forall ( (x _t)
|  |  |             (y _t) )
|  |  |           (=> true (= (elem@@_t x (mk-set@@_t y)) (= x y))))
|  |  |   (forall ( (r1 (set _t0))
|  |  |             (term (Array _t0 _t))
|  |  |             (y _t) )
|  |  |           (=> true
|  |  |               (= (elem@@_t y (set@@_t0@@_t r1 term))
|  |  |                  (exists ( (x _t0) )
|  |  |                          (and (elem@@_t0 x r1) (= (select term x) y))))))
|  |  |   (forall ( (r1 (set _t0))
|  |  |             (term (Array _t0 _t))
|  |  |             (y _t) )
|  |  |           (=> true
|  |  |               (= (= (set@@_t0@@_t r1 term) (mk-set@@_t y))
|  |  |                  (forall ( (x _t0) )
|  |  |                          (=> (elem@@_t0 x r1) (= (select term x) y))))))
|  |  |   (forall ( (s1 (set _t))
|  |  |             (s2 (set _t)) )
|  |  |           (=> true
|  |  |               (=> (finite@@_t s1) (finite@@_t (set-diff@@_t s1 s2)))))
|  |  |   (forall ( (s1 (set _t))
|  |  |             (s2 (set _t)) )
|  |  |           (=> true
|  |  |               (=> (and (finite@@_t s1) (finite@@_t s2))
|  |  |                   (finite@@_t (union s1 s2)))))
|  |  |   (forall ( (x _t) ) (=> true (finite@@_t (mk-set@@_t x))))
|  |  |   (finite@@_t empty-set@@_t)
|  |  |   (forall ( (s1 (set _t))
|  |  |             (s2 (set _t)) )
|  |  |           (=> true
|  |  |               (=> (subset s1 s2)
|  |  |                   (=> (finite@@_t s2) (finite@@_t s1)))))
|  |  |   (forall ( (r1 (set _t0)) )
|  |  |           (=> true (= (set@@_t0@@_t0 r1 ident@@_t0) r1)))
|  |  |   (forall ( (terms (Array _t0 (set _t))) )
|  |  |           (=> true
|  |  |               (= (qunion@@_t0@@_t empty-set@@_t0 terms)
|  |  |                  empty-set@@_t)))
|  |  |   (forall ( (terms (Array _t0 (set _t)))
|  |  |             (x _t0) )
|  |  |           (=> true
|  |  |               (= (qunion@@_t0@@_t (mk-set@@_t0 x) terms)
|  |  |                  (select terms x))))
|  |  |   (forall ( (r1 (set _t0))
|  |  |             (r2 (set _t0))
|  |  |             (terms (Array _t0 (set _t))) )
|  |  |           (=> true
|  |  |               (= (qunion@@_t0@@_t (union r1 r2) terms)
|  |  |                  (union (qunion@@_t0@@_t r1 terms)
|  |  |                         (qunion@@_t0@@_t r2 terms)))))
|  |  |   (forall ( (r1 (set _t0))
|  |  |             (terms (Array _t0 (set _t)))
|  |  |             (terms0 (Array _t0 (set _t))) )
|  |  |           (=> true
|  |  |               (=> (forall ( (x _t0) )
|  |  |                           (=> (elem@@_t0 x r1)
|  |  |                               (= (select terms x) (select terms0 x))))
|  |  |                   (= (qunion@@_t0@@_t r1 terms)
|  |  |                      (qunion@@_t0@@_t r1 terms0)))))
|  |  |   (forall ( (r1 (set (Pair _t0 _t1)))
|  |  |             (x1 _t0)
|  |  |             (x2 _t1) )
|  |  |           (=> true
|  |  |               (=> (elem@Open@@Pair@@_t0@@_t1@Close (pair x1 x2) r1)
|  |  |                   (elem@@_t0 x1 (reldom@@_t0@@_t1 r1)))))
|  |  |   (forall ( (r1 (set (Pair _t0 _t1)))
|  |  |             (s1 (set _t0)) )
|  |  |           (=> true
|  |  |               (= (reldom@@_t0@@_t1 (seq@@_t0@@_t0@@_t1 (asrel@@_t0 s1) r1))
|  |  |                  (intersect s1 (reldom@@_t0@@_t1 r1)))))
|  |  |   (forall ( (r1 (set (Pair _t0 _t1)))
|  |  |             (x1 _t0)
|  |  |             (x2 _t1) )
|  |  |           (=> true
|  |  |               (= (elem@Open@@Pair@@_t0@@_t1@Close (pair x1 x2)
|  |  |                                                   (seq@@_t0@@_t0@@_t1 (asrel@@_t0 (mk-set@@_t0 x1)) r1))
|  |  |                  (elem@Open@@Pair@@_t0@@_t1@Close (pair x1 x2) r1))))
|  |  |   (forall ( (x1 _t0) )
|  |  |           (=> true
|  |  |               (= (asrel@@_t0 (mk-set@@_t0 x1))
|  |  |                  (mk-set@Open@@Pair@@_t0@@_t0@Close (pair x1 x1)))))
|  |  |   (forall ( (r1 (set (Pair _t0 _t1)))
|  |  |             (r3 (set (Pair _t1 _t2)))
|  |  |             (r5 (set (Pair _t2 _t3))) )
|  |  |           (=> true
|  |  |               (= (seq@@_t0@@_t2@@_t3 (seq@@_t0@@_t1@@_t2 r1 r3) r5)
|  |  |                  (seq@@_t0@@_t1@@_t3 r1 (seq@@_t1@@_t2@@_t3 r3 r5)))))
|  |  |   (forall ( (r1 (set (Pair _t0 _t1)))
|  |  |             (r2 (set (Pair _t0 _t1)))
|  |  |             (r3 (set (Pair _t1 _t2))) )
|  |  |           (=> true
|  |  |               (=> (subset r1 r2)
|  |  |                   (subset (seq@@_t0@@_t1@@_t2 r1 r3)
|  |  |                           (seq@@_t0@@_t1@@_t2 r2 r3)))))
|  |  |   (forall ( (r1 (set (Pair _t0 _t1)))
|  |  |             (r2 (set (Pair _t0 _t1)))
|  |  |             (r4 (set (Pair _t2 _t0))) )
|  |  |           (=> true
|  |  |               (=> (subset r1 r2)
|  |  |                   (subset (seq@@_t2@@_t0@@_t1 r4 r1)
|  |  |                           (seq@@_t2@@_t0@@_t1 r4 r2)))))
|  |  |   (forall ( (rr (set (Pair _t0 _t0)))
|  |  |             (rr2 (set (Pair _t0 _t0))) )
|  |  |           (=> true
|  |  |               (= (star@@_t0 (union rr rr2))
|  |  |                  (seq@@_t0@@_t0@@_t0 (star@@_t0 (seq@@_t0@@_t0@@_t0 (star@@_t0 rr) rr2))
|  |  |                                      (star@@_t0 rr)))))
|  |  |   (forall ( (rr (set (Pair _t0 _t0)))
|  |  |             (rr2 (set (Pair _t0 _t0))) )
|  |  |           (=> true
|  |  |               (= (star@@_t0 (union rr rr2))
|  |  |                  (seq@@_t0@@_t0@@_t0 (star@@_t0 rr2)
|  |  |                                      (star@@_t0 (seq@@_t0@@_t0@@_t0 rr (star@@_t0 rr2)))))))
|  |  |   (forall ( (rr (set (Pair _t0 _t0))) )
|  |  |           (=> true
|  |  |               (= (union (seq@@_t0@@_t0@@_t0 (star@@_t0 rr) rr) id@@_t0)
|  |  |                  (star@@_t0 rr))))
|  |  |   (forall ( (rr (set (Pair _t0 _t0))) )
|  |  |           (=> true
|  |  |               (= (union (seq@@_t0@@_t0@@_t0 rr (star@@_t0 rr)) id@@_t0)
|  |  |                  (star@@_t0 rr))))
|  |  |   (forall ( (r1 (set (Pair _t0 _t1)))
|  |  |             (r2 (set (Pair _t0 _t1)))
|  |  |             (r3 (set (Pair _t1 _t2))) )
|  |  |           (=> true
|  |  |               (= (seq@@_t0@@_t1@@_t2 (union r1 r2) r3)
|  |  |                  (union (seq@@_t0@@_t1@@_t2 r1 r3)
|  |  |                         (seq@@_t0@@_t1@@_t2 r2 r3)))))
|  |  |   (forall ( (r1 (set (Pair _t0 _t1)))
|  |  |             (r2 (set (Pair _t0 _t1)))
|  |  |             (r4 (set (Pair _t2 _t0))) )
|  |  |           (=> true
|  |  |               (= (seq@@_t2@@_t0@@_t1 r4 (union r1 r2))
|  |  |                  (union (seq@@_t2@@_t0@@_t1 r4 r1)
|  |  |                         (seq@@_t2@@_t0@@_t1 r4 r2)))))
|  |  |   (forall ( (x1 _t0)
|  |  |             (x3 _t0) )
|  |  |           (=> true
|  |  |               (= (seq@@_t0@@_t0@@_t1 (mk-set@Open@@Pair@@_t0@@_t0@Close (pair x1 x3))
|  |  |                                      all@Open@@Pair@@_t0@@_t1@Close)
|  |  |                  (seq@@_t0@@_t0@@_t1 (asrel@@_t0 (mk-set@@_t0 x1))
|  |  |                                      all@Open@@Pair@@_t0@@_t1@Close))))
|  |  |   (forall ( (x1 _t0)
|  |  |             (x2 _t1)
|  |  |             (x4 _t2)
|  |  |             (x5 _t3) )
|  |  |           (=> true
|  |  |               (= (seq@@_t0@@_t2@@_t3 (seq@@_t0@@_t1@@_t2 (mk-set@Open@@Pair@@_t0@@_t1@Close (pair x1 x2))
|  |  |                                                          all@Open@@Pair@@_t1@@_t2@Close)
|  |  |                                      (mk-set@Open@@Pair@@_t2@@_t3@Close (pair x4 x5)))
|  |  |                  (mk-set@Open@@Pair@@_t0@@_t3@Close (pair x1 x5)))))
|  |  |   (forall ( (x1 _t0)
|  |  |             (x2 _t1) )
|  |  |           (=> true
|  |  |               (= (seq@@_t0@@_t1@@_t1 (seq@@_t0@@_t0@@_t1 (asrel@@_t0 (mk-set@@_t0 x1))
|  |  |                                                          all@Open@@Pair@@_t0@@_t1@Close)
|  |  |                                      (asrel@@_t1 (mk-set@@_t1 x2)))
|  |  |                  (mk-set@Open@@Pair@@_t0@@_t1@Close (pair x1 x2)))))
|  |  |   (forall ( (x1 _t0)
|  |  |             (x3 _t0) )
|  |  |           (=> true
|  |  |               (= (elem@Open@@Pair@@_t0@@_t0@Close (pair x1 x3) id@@_t0)
|  |  |                  (= x1 x3))))
|  |  |   (forall ( (r1 (set (Pair _t0 _t1))) )
|  |  |           (=> true (= (seq@@_t0@@_t0@@_t1 id@@_t0 r1) r1)))
|  |  |   (forall ( (r1 (set (Pair _t0 _t1))) )
|  |  |           (=> true (= (seq@@_t0@@_t1@@_t1 r1 id@@_t1) r1)))
|  |  |   (forall ( (rr (set (Pair _t0 _t0))) )
|  |  |           (=> true (subset rr (star@@_t0 rr))))
|  |  |   (forall ( (rr (set (Pair _t0 _t0)))
|  |  |             (rr2 (set (Pair _t0 _t0))) )
|  |  |           (=> true
|  |  |               (=> (subset rr rr2)
|  |  |                   (subset (star@@_t0 rr) (star@@_t0 rr2)))))
|  |  |   (forall ( (rr (set (Pair _t0 _t0)))
|  |  |             (rr2 (set (Pair _t0 _t0)))
|  |  |             (x1 _t0)
|  |  |             (x3 _t0) )
|  |  |           (=> true
|  |  |               (=> (elem@Open@@Pair@@_t0@@_t0@Close (pair x1 x3) (star@@_t0 (intersect rr rr2)))
|  |  |                   (elem@Open@@Pair@@_t0@@_t0@Close (pair x1 x3) (star@@_t0 rr)))))
|  |  |   (forall ( (rr (set (Pair _t0 _t0)))
|  |  |             (rr2 (set (Pair _t0 _t0)))
|  |  |             (x1 _t0)
|  |  |             (x3 _t0) )
|  |  |           (=> true
|  |  |               (=> (elem@Open@@Pair@@_t0@@_t0@Close (pair x1 x3) (star@@_t0 rr))
|  |  |                   (elem@Open@@Pair@@_t0@@_t0@Close (pair x1 x3) (star@@_t0 (union rr rr2))))))
|  |  |   (forall ( (rr (set (Pair _t0 _t0))) )
|  |  |           (=> true
|  |  |               (= (seq@@_t0@@_t0@@_t0 (star@@_t0 rr) (star@@_t0 rr))
|  |  |                  (star@@_t0 rr))))
|  |  |   (forall ( (r1 (set (Pair _t0 _t1)))
|  |  |             (r2 (set (Pair _t0 _t1)))
|  |  |             (r3 (set (Pair _t1 _t2))) )
|  |  |           (=> true
|  |  |               (=> (subset r1 r2)
|  |  |                   (subset (seq@@_t0@@_t1@@_t2 r1 r3)
|  |  |                           (seq@@_t0@@_t1@@_t2 r2 r3)))))
|  |  |   (forall ( (r1 (set (Pair _t0 _t1)))
|  |  |             (r2 (set (Pair _t0 _t1)))
|  |  |             (r4 (set (Pair _t2 _t0))) )
|  |  |           (=> true
|  |  |               (=> (subset r1 r2)
|  |  |                   (subset (seq@@_t2@@_t0@@_t1 r4 r1)
|  |  |                           (seq@@_t2@@_t0@@_t1 r4 r2)))))
|  |  |   (forall ( (rr (set (Pair _t0 _t0))) )
|  |  |           (=> true
|  |  |               (= (plus@@_t0 rr)
|  |  |                  (seq@@_t0@@_t0@@_t0 (star@@_t0 rr) rr))))
|  |  |   (forall ( (rr (set (Pair _t0 _t0))) )
|  |  |           (=> true
|  |  |               (= (plus@@_t0 rr)
|  |  |                  (seq@@_t0@@_t0@@_t0 rr (star@@_t0 rr)))))
|  |  |   (forall ( (r1 (set (Pair _t0 _t1)))
|  |  |             (s1 (set _t0))
|  |  |             (x2 _t1) )
|  |  |           (=> true
|  |  |               (= (elem@@_t1 x2 (lookup@@_t0@@_t1 r1 s1))
|  |  |                  (exists ( (x1 _t0) )
|  |  |                          (and (elem@@_t0 x1 s1)
|  |  |                               (elem@Open@@Pair@@_t0@@_t1@Close (pair x1 x2) r1))))))
|  |  |   (forall ( (r1 (set (Pair _t0 _t1)))
|  |  |             (s1 (set _t0))
|  |  |             (x1 _t0)
|  |  |             (x2 _t1) )
|  |  |           (=> true
|  |  |               (=> (elem@@_t0 x1 s1)
|  |  |                   (=> (elem@Open@@Pair@@_t0@@_t1@Close (pair x1 x2) r1)
|  |  |                       (elem@@_t1 x2 (lookup@@_t0@@_t1 r1 s1))))))
|  |  |  |----
|  |  |   (forall ( (p_0 Node)
|  |  |             (p_1 Node)
|  |  |             (q Node) )
|  |  |           (=> (elem@Open@@Pair@@Node@@Node@Close (pair r p_1) (star@@Node ptr))
|  |  |               (=> (elem@Open@@Pair@@Node@@Node@Close (pair r q)
|  |  |                                                      (star@@Node (union ptr
|  |  |                                                                         (mk-set@Open@@Pair@@Node@@Node@Close (pair p_0 p_1)))))
|  |  |                   (elem@Open@@Pair@@Node@@Node@Close (pair r q) (star@@Node ptr)))))
|  |  |  +- [ Success: 1 / 9 ]
|  |  +- Termination Detection
|  |  |  +- test0: verify m0
|  |  |  *** FAILED ***
|  |  |  +- test1: verify m1
|  |  |  *** FAILED ***
|  |  |  +- test2: verify m2
|  |  |  *** FAILED ***
|  |  |  +- test3: verify m3
|  |  |  *** FAILED ***
|  |  |  +- test4: quantified union
|  |  |  *** FAILED ***
|  |  |  +- [ Success: 0 / 5 ]
|  |  +- Parser
|  |  |  +- test0: verify m0
|  |  |  *** FAILED ***
|  |  |  +- test1: verify m1
|  |  |  *** FAILED ***
|  |  |  +- test2: verify m2
|  |  |  *** FAILED ***
|  |  |  +- [ Success: 0 / 3 ]
+++ OK, passed 100 tests.

=== prop_identity_def from ./Utilities/Relation.hs:262 ===
+++ OK, passed 100 tests.

=== prop_concat_lines'_cancel from ./Utilities/Lines.hs:78 ===
+++ OK, passed 100 tests.

=== prop_ranSubt from ./Utilities/Relation.hs:265 ===
+++ OK, passed 100 tests.

=== prop_ranRestr from ./Utilities/Relation.hs:268 ===
+++ OK, passed 100 tests.

=== prop_domSubt from ./Utilities/Relation.hs:271 ===
*** Failed! Falsifiable (after 59 tests): 
Lines ("GQ[C46k9\EM,@\160\238|w\RS!c\RS\RSA\228R\191!\165+\246\&0lC\r\n" :| ["V^\137a9Aio\244\v\GS\146[\231,\189X\DC2IK,\r\n","\252,[\132\134ly2F\DLE\150\ENQ^x);P_j?\251\248\GS\DC3EO\139\141*um\158[\174\DEL{\v5?\163\DC1I\r","/\RS-}y\236\253^x)x\SI\NAKku\STX\v\243\DC1\172Z\t\r\n","\DEL@{\SI\134K?\b\160\&5d\r\n","\NULTA\NAK\142\DLE\ACK6\RS\200\192B\FS0On\247\226\198\205\RS>F\162\ETX9\212/\159h$6\DELES%Q\220C\178\203;5\187aByP\r\n","&c\ENQh\150\&4|\224\225R.@\DC4m\vAUh\170!C\226O\DLE\SOH\170\190*\134J\n","M\SI\253 z.-\169l\130\247\208U\r\n","\254\NUL\193\188\152)h\a\224l$\156.6\230p\SIFU}\174\218\189\246VI__\a\NUL9V\SYN\207\US\td\CAN8\168\DC1 )\GSGpNR7q\n","=0\137\233\ETX\166G)9K\GSg\217\198>\EM7\SO$w\162\&5\ESC\f\159\170\223$A\v\GS\241Y\DC4\CANe\146O\245\&8\STX\SO\STX\157\f|\163Nj\170\230gG\r","@j(O\194\203\148d\211w0\236\130\SOHq&JV\\\n","\n","c3+\200]\CANzo-lm\167(zu\223\NULU\157/\DC3E\170@\US}bC\164y-V%\ENQ\252\228\NUL\r\n","g>mT\247\174\&4(,,jq\SUB3Oj0\150`\172_\r","\n","\211\"\b~\145\ETB\213qV\147\159\189\153,\160p\SO\144}\129\DC4Yq\b\178\140Q)\SI\DC3B\178V\223\SOH\a\176}\225blt\151A\171Y\157\152_{H\161Bh\151\144|\r\n","6\251n\223\182\217l\US^\242ok\DC1\CANI\157\198\170\EOTwn\EOT<?\165<\r","\ACK\\\SOY2\a\209\&2&\167Q@s\171f%\b\133\&4\tV\194\&1(@\199\173=\NAK%8\209>-\186{\ESCTs\n","\fF\r\n","3\ESC\\P\224mGg\193\DLE\223\220\DC1P\160=6\SYNNT\194\&9m@b\FSmGF\EM\197\&7\177\188\134@Z\138#\ACK8\192h6|YK\"\199\169 \DC2\r","\DLE&\ESC:ZPq\147]Q\130@{W\193\250\213\242^\fD\NULa\212\174\CANK\RS/D}s\DC2%\CAN\f\EMk\233\DLE\RS\194LOG=\ETX\188jAi5!\r","{\DLE+h\SOHOY .\ACKi9\246wN#\226b\v\242YY\ACK\240@V9j\170\131\220\191Of\159\189\202O\209]\FS\152\SI\167F_\140\178A\134\b-\211mNL\fe\n","i\n","\CANuM2\184x,;=\167c]K\SO\196C\250\171]\159\ACKIr\ETBn'\238\214j\t\EM\214\129\n","YI\159\&5\233\248/\a}\233e\225-\254\r\n","n\128\b\191+\218\USGx3u\235+\141\&5{z\220'>\SOH\236\GS6\254:c(\b\ETX|B&1\ENQ\200\155s\198\248^(^ND8\193{3(\n","_*9\216\DC1\219\DC1S\201^\205 q \182'\138L\NUL\197C\EM8\DC3\r\n","\SYN\198B\215\a7XO\188\DELxW\ACK\131\GS\183-\142_8\174\v\130T\SYN:\236\159Y9QkG$.,\206;%&\r\n","D\FS\SO\243\216$n{@\250*\SOH\230\203\213{2$\207N7\243\183u`+d\227\133\r\n","h\CAN\t\243\&5G\153n\r","23\239S\253\&5]=|\237\213h\157\164\DLECs\129E~\134\150fe\233\SYN6\147\236\r\n","\135e$k\154\NAK\n","\244\143D|\160%X\US0\208\SOH\131\&0\237R\ETBF/\138\CAN\DC49}9\DC4\GS/Q[\RS;\DC4\208.\170,*RAU]\SI\r","\192*\154\132,\244\226\214,UY\199(\141w\ACKd\DEL0\DLEB\237o}U\NAK~B\143Q@\"&\CAN}<h;T\206\225\201\159WB\219\r\n","\253K3\SOHpap\RS\235\178g\144\225\ETXB2\230\251pd\195w:U\252.P?\154m\129@0K\aS\241Z-!F\r","^\NUL\237\\_)~\DEL\229xzW\164\164)[\200*\223~|\CANa}\230Ui\251$s\CANQu\fjV\r","A\b\160\DC2\EOTb\140y?\198\202r {f\206\&0^T\DC3U\RSR;\138\&8=\NAK\v+\\!\176|7C=\a'\SYN\201\&2M\150\EMx\228\241F\v\198\131\r\n","\f\"\SOH}o\n","A\199rjN\146\"f\237l\197(\DLE\GS\147\217-L:o\DC2n\US\157kU8\139&\169e\219\&8\ESCpH\n","6L\CAN\248qMF)\218 jTW\n","Gto^Se,a\GSrb`U"])
"GQ[C46k9\EM,@\160\238|w\RS!c\RS\RSA\228R\191!\165+\246\&0lC\r\n" :| ["V^\137a9Aio\244\v\GS\146[\231,\189X\DC2IK,\r\n","\252,[\132\134ly2F\DLE\150\ENQ^x);P_j?\251\248\GS\DC3EO\139\141*um\158[\174\DEL{\v5?\163\DC1I\r","/\RS-}y\236\253^x)x\SI\NAKku\STX\v\243\DC1\172Z\t\r\n","\DEL@{\SI\134K?\b\160\&5d\r\n","\NULTA\NAK\142\DLE\ACK6\RS\200\192B\FS0On\247\226\198\205\RS>F\162\ETX9\212/\159h$6\DELES%Q\220C\178\203;5\187aByP\r\n","&c\ENQh\150\&4|\224\225R.@\DC4m\vAUh\170!C\226O\DLE\SOH\170\190*\134J\n","M\SI\253 z.-\169l\130\247\208U\r\n","\254\NUL\193\188\152)h\a\224l$\156.6\230p\SIFU}\174\218\189\246VI__\a\NUL9V\SYN\207\US\td\CAN8\168\DC1 )\GSGpNR7q\n","=0\137\233\ETX\166G)9K\GSg\217\198>\EM7\SO$w\162\&5\ESC\f\159\170\223$A\v\GS\241Y\DC4\CANe\146O\245\&8\STX\SO\STX\157\f|\163Nj\170\230gG\r","@j(O\194\203\148d\211w0\236\130\SOHq&JV\\\n","\n","c3+\200]\CANzo-lm\167(zu\223\NULU\157/\DC3E\170@\US}bC\164y-V%\ENQ\252\228\NUL\r\n","g>mT\247\174\&4(,,jq\SUB3Oj0\150`\172_\r","\n","\211\"\b~\145\ETB\213qV\147\159\189\153,\160p\SO\144}\129\DC4Yq\b\178\140Q)\SI\DC3B\178V\223\SOH\a\176}\225blt\151A\171Y\157\152_{H\161Bh\151\144|\r\n","6\251n\223\182\217l\US^\242ok\DC1\CANI\157\198\170\EOTwn\EOT<?\165<\r","\ACK\\\SOY2\a\209\&2&\167Q@s\171f%\b\133\&4\tV\194\&1(@\199\173=\NAK%8\209>-\186{\ESCTs\n","\fF\r\n","3\ESC\\P\224mGg\193\DLE\223\220\DC1P\160=6\SYNNT\194\&9m@b\FSmGF\EM\197\&7\177\188\134@Z\138#\ACK8\192h6|YK\"\199\169 \DC2\r","\DLE&\ESC:ZPq\147]Q\130@{W\193\250\213\242^\fD\NULa\212\174\CANK\RS/D}s\DC2%\CAN\f\EMk\233\DLE\RS\194LOG=\ETX\188jAi5!\r","{\DLE+h\SOHOY .\ACKi9\246wN#\226b\v\242YY\ACK\240@V9j\170\131\220\191Of\159\189\202O\209]\FS\152\SI\167F_\140\178A\134\b-\211mNL\fe\n","i\n","\CANuM2\184x,;=\167c]K\SO\196C\250\171]\159\ACKIr\ETBn'\238\214j\t\EM\214\129\n","YI\159\&5\233\248/\a}\233e\225-\254\r\n","n\128\b\191+\218\USGx3u\235+\141\&5{z\220'>\SOH\236\GS6\254:c(\b\ETX|B&1\ENQ\200\155s\198\248^(^ND8\193{3(\n","_*9\216\DC1\219\DC1S\201^\205 q \182'\138L\NUL\197C\EM8\DC3\r\n","\SYN\198B\215\a7XO\188\DELxW\ACK\131\GS\183-\142_8\174\v\130T\SYN:\236\159Y9QkG$.,\206;%&\r\n","D\FS\SO\243\216$n{@\250*\SOH\230\203\213{2$\207N7\243\183u`+d\227\133\r\n","h\CAN\t\243\&5G\153n\r","23\239S\253\&5]=|\237\213h\157\164\DLECs\129E~\134\150fe\233\SYN6\147\236\r\n","\135e$k\154\NAK\n","\244\143D|\160%X\US0\208\SOH\131\&0\237R\ETBF/\138\CAN\DC49}9\DC4\GS/Q[\RS;\DC4\208.\170,*RAU]\SI\r","\192*\154\132,\244\226\214,UY\199(\141w\ACKd\DEL0\DLEB\237o}U\NAK~B\143Q@\"&\CAN}<h;T\206\225\201\159WB\219\r\n","\253K3\SOHpap\RS\235\178g\144\225\ETXB2\230\251pd\195w:U\252.P?\154m\129@0K\aS\241Z-!F\r","^\NUL\237\\_)~\DEL\229xzW\164\164)[\200*\223~|\CANa}\230Ui\251$s\CANQu\fjV\r","A\b\160\DC2\EOTb\140y?\198\202r {f\206\&0^T\DC3U\RSR;\138\&8=\NAK\v+\\!\176|7C=\a'\SYN\201\&2M\150\EMx\228\241F\v\198\131\r\n","\f\"\SOH}o\n","A\199rjN\146\"f\237l\197(\DLE\GS\147\217-L:o\DC2n\US\157kU8\139&\169e\219\&8\ESCpH\n","6L\CAN\248qMF)\218 jTW\n","Gto^Se,a\GSrb`U"] /= "GQ[C46k9\EM,@\160\238|w\RS!c\RS\RSA\228R\191!\165+\246\&0lC\r\n" :| ["V^\137a9Aio\244\v\GS\146[\231,\189X\DC2IK,\r\n","\252,[\132\134ly2F\DLE\150\ENQ^x);P_j?\251\248\GS\DC3EO\139\141*um\158[\174\DEL{\v5?\163\DC1I\r","/\RS-}y\236\253^x)x\SI\NAKku\STX\v\243\DC1\172Z\t\r\n","\DEL@{\SI\134K?\b\160\&5d\r\n","\NULTA\NAK\142\DLE\ACK6\RS\200\192B\FS0On\247\226\198\205\RS>F\162\ETX9\212/\159h$6\DELES%Q\220C\178\203;5\187aByP\r\n","&c\ENQh\150\&4|\224\225R.@\DC4m\vAUh\170!C\226O\DLE\SOH\170\190*\134J\n","M\SI\253 z.-\169l\130\247\208U\r\n","\254\NUL\193\188\152)h\a\224l$\156.6\230p\SIFU}\174\218\189\246VI__\a\NUL9V\SYN\207\US\td\CAN8\168\DC1 )\GSGpNR7q\n","=0\137\233\ETX\166G)9K\GSg\217\198>\EM7\SO$w\162\&5\ESC\f\159\170\223$A\v\GS\241Y\DC4\CANe\146O\245\&8\STX\SO\STX\157\f|\163Nj\170\230gG\r","@j(O\194\203\148d\211w0\236\130\SOHq&JV\\\n","\n","c3+\200]\CANzo-lm\167(zu\223\NULU\157/\DC3E\170@\US}bC\164y-V%\ENQ\252\228\NUL\r\n","g>mT\247\174\&4(,,jq\SUB3Oj0\150`\172_\r\n","\211\"\b~\145\ETB\213qV\147\159\189\153,\160p\SO\144}\129\DC4Yq\b\178\140Q)\SI\DC3B\178V\223\SOH\a\176}\225blt\151A\171Y\157\152_{H\161Bh\151\144|\r\n","6\251n\223\182\217l\US^\242ok\DC1\CANI\157\198\170\EOTwn\EOT<?\165<\r","\ACK\\\SOY2\a\209\&2&\167Q@s\171f%\b\133\&4\tV\194\&1(@\199\173=\NAK%8\209>-\186{\ESCTs\n","\fF\r\n","3\ESC\\P\224mGg\193\DLE\223\220\DC1P\160=6\SYNNT\194\&9m@b\FSmGF\EM\197\&7\177\188\134@Z\138#\ACK8\192h6|YK\"\199\169 \DC2\r","\DLE&\ESC:ZPq\147]Q\130@{W\193\250\213\242^\fD\NULa\212\174\CANK\RS/D}s\DC2%\CAN\f\EMk\233\DLE\RS\194LOG=\ETX\188jAi5!\r","{\DLE+h\SOHOY .\ACKi9\246wN#\226b\v\242YY\ACK\240@V9j\170\131\220\191Of\159\189\202O\209]\FS\152\SI\167F_\140\178A\134\b-\211mNL\fe\n","i\n","\CANuM2\184x,;=\167c]K\SO\196C\250\171]\159\ACKIr\ETBn'\238\214j\t\EM\214\129\n","YI\159\&5\233\248/\a}\233e\225-\254\r\n","n\128\b\191+\218\USGx3u\235+\141\&5{z\220'>\SOH\236\GS6\254:c(\b\ETX|B&1\ENQ\200\155s\198\248^(^ND8\193{3(\n","_*9\216\DC1\219\DC1S\201^\205 q \182'\138L\NUL\197C\EM8\DC3\r\n","\SYN\198B\215\a7XO\188\DELxW\ACK\131\GS\183-\142_8\174\v\130T\SYN:\236\159Y9QkG$.,\206;%&\r\n","D\FS\SO\243\216$n{@\250*\SOH\230\203\213{2$\207N7\243\183u`+d\227\133\r\n","h\CAN\t\243\&5G\153n\r","23\239S\253\&5]=|\237\213h\157\164\DLECs\129E~\134\150fe\233\SYN6\147\236\r\n","\135e$k\154\NAK\n","\244\143D|\160%X\US0\208\SOH\131\&0\237R\ETBF/\138\CAN\DC49}9\DC4\GS/Q[\RS;\DC4\208.\170,*RAU]\SI\r","\192*\154\132,\244\226\214,UY\199(\141w\ACKd\DEL0\DLEB\237o}U\NAK~B\143Q@\"&\CAN}<h;T\206\225\201\159WB\219\r\n","\253K3\SOHpap\RS\235\178g\144\225\ETXB2\230\251pd\195w:U\252.P?\154m\129@0K\aS\241Z-!F\r","^\NUL\237\\_)~\DEL\229xzW\164\164)[\200*\223~|\CANa}\230Ui\251$s\CANQu\fjV\r","A\b\160\DC2\EOTb\140y?\198\202r {f\206\&0^T\DC3U\RSR;\138\&8=\NAK\v+\\!\176|7C=\a'\SYN\201\&2M\150\EMx\228\241F\v\198\131\r\n","\f\"\SOH}o\n","A\199rjN\146\"f\237l\197(\DLE\GS\147\217-L:o\DC2n\US\157kU8\139&\169e\219\&8\ESCpH\n","6L\CAN\248qMF)\218 jTW\n","Gto^Se,a\GSrb`U"]

=== prop_concat_lines'_cancel_regression from ./Utilities/Lines.hs:81 ===
+++ OK, passed 100 tests.

+++ OK, passed 100 tests.

=== prop_domRestr from ./Utilities/Relation.hs:274 ===
+++ OK, passed 100 tests.

=== prop_transpose_def from ./Utilities/Relation.hs:277 ===
+++ OK, passed 100 tests.

=== prop_subset_def from ./Utilities/Relation.hs:280 ===

=== prop_e from ./Utilities/EditDistance.hs:147 ===
+++ OK, passed 100 tests.

=== prop_irreflexive_def from ./Utilities/Relation.hs:283 ===
+++ OK, passed 100 tests.

=== prop_symmetric_def from ./Utilities/Relation.hs:286 ===
+++ OK, passed 100 tests.

=== prop_transitive_def from ./Utilities/Relation.hs:289 ===
+++ OK, passed 100 tests.

=== prop_antisymmetric_def from ./Utilities/Relation.hs:292 ===
+++ OK, passed 100 tests.

=== prop_null_def from ./Utilities/Relation.hs:295 ===
+++ OK, passed 100 tests.

=== prop_image_def from ./Utilities/Relation.hs:298 ===
+++ OK, passed 100 tests.

=== prop_closure_is_transitive from ./Utilities/Relation.hs:301 ===
+++ OK, passed 100 tests.

=== prop_mapDomain_def from ./Utilities/Relation.hs:306 ===
+++ OK, passed 100 tests.

=== prop_mapRange_def from ./Utilities/Relation.hs:309 ===
+++ OK, passed 100 tests.

=== prop_cycles_all_valid from ./Utilities/Relation.hs:312 ===

=== prop_top_sort_complete from ./Utilities/Permutation.hs:411 ===

=== prop_top_sort_cycles from ./Utilities/Permutation.hs:418 ===

=== prop_f from ./Utilities/EditDistance.hs:153 ===

|  |  +- QuickCheck spec of machine parser
|  |  *** FAILED ***
|  |  +- the parser is exception free
|  |  +- [ Success: 108 / 155 ]
|  +- Unit-B
|  |  +- 'x eventually increases' verifies
|  |  *** FAILED ***
|  |  +- train, model 0, verification
|  |  *** FAILED ***
|  |  +- train, m0 transient / enablement PO
|  |  +- train, m0 transient / falsification PO
|  |  +- Feasibility and partitioning
|  |  +- Debugging the partitioning
|  |  +- genericity
|  |  |  +- unification, t0
|  |  |  +- unification, t1
|  |  |  +- unification, t2
|  |  |  +- unification, t3
|  |  |  +- unification, t4
|  |  |  +- unification, t5
|  |  |  +- unification, t6
|  |  |  +- type instantiation
|  |  |  +- type inference 1
|  |  |  +- type inference 3
|  |  |  +- type inference 4
|  |  |  +- type inference 5
|  |  |  +- instantiation of unified types is unique
|  |  |  +- common type is symmetric
|  |  |  +- common type is symmetric (counter-example)
|  |  |  +- common type is symmetric (counter-example 2)
|  |  |  +- instantiation of unified types is unique (counter examples)
|  |  |  +- type mapping are acyclic
|  |  |  +- one-point rule simplification on existentials
|  |  |  +- [ Success: 19 / 19 ]
|  |  +- [ Success: 23 / 25 ]
|  +- latex parser
+++ OK, passed 100 tests.

=== prop_cycles_maximal from ./Utilities/Relation.hs:317 ===

=== prop_top_sort_singles from ./Utilities/Permutation.hs:424 ===
+++ OK, passed 100 tests.

=== prop_filterDom_def from ./Utilities/Relation.hs:328 ===
+++ OK, passed 100 tests.

=== prop_filterRan_def from ./Utilities/Relation.hs:331 ===

=== prop_top_sort_order from ./Utilities/Permutation.hs:429 ===
+++ OK, passed 100 tests.

=== prop_mapMaybeDom_def from ./Utilities/Relation.hs:334 ===

=== prop_g from ./Utilities/EditDistance.hs:159 ===
+++ OK, passed 100 tests.

=== prop_mapMaybeRan_def from ./Utilities/Relation.hs:339 ===
+++ OK, passed 100 tests.

=== prop_bimapMaybe_def from ./Utilities/Relation.hs:344 ===

=== prop_closure_complete from ./Utilities/Permutation.hs:461 ===
+++ OK, passed 100 tests.


=== prop_closure_contain_all_edges from ./Utilities/Permutation.hs:464 ===

=== prop_closure_closed from ./Utilities/Permutation.hs:469 ===

=== prop_closure_minimal from ./Utilities/Permutation.hs:475 ===


+++ OK, passed 100 tests.

=== prop_flatten_parse_inv_regression from ./Latex/Test_Latex_Parser.hs:176 ===
+++ OK, passed 100 tests.

=== prop_parse_error from ./Latex/Test_Latex_Parser.hs:184 ===
+++ OK, passed 100 tests.

=== prop_makeLatex_latexMonad_inverse from ./Latex/Test_Latex_Parser.hs:187 ===
+++ OK, passed 100 tests.

=== prop_flatten_scan_inv from ./Latex/Test_Latex_Parser.hs:190 ===
+++ OK, passed 100 tests.

=== prop_flatten_scan_inv_regression from ./Latex/Test_Latex_Parser.hs:193 ===
+++ OK, passed 100 tests.

=== prop_uncomment_inv from ./Latex/Test_Latex_Parser.hs:200 ===
+++ OK, passed 100 tests.

=== prop_uncomment_inv_regression from ./Latex/Test_Latex_Parser.hs:205 ===
+++ OK, passed 100 tests.

=== prop_line_number_inv from ./Latex/Test_Latex_Parser.hs:211 ===
+++ OK, passed 100 tests.

=== prop_line_number_inv_regression from ./Latex/Test_Latex_Parser.hs:214 ===
+++ OK, passed 100 tests.

=== prop_flatten_scan_inv' from ./Latex/Test_Latex_Parser.hs:220 ===
+++ OK, passed 100 tests.

=== prop_flatten_scan_inv'_regression from ./Latex/Test_Latex_Parser.hs:223 ===
+++ OK, passed 100 tests.

|  |  +- quickcheck
|  |  +- sample.tex
|  |  *** FAILED ***
|  |  +- sorted seq err.tex
|  |  *** FAILED ***
|  |  +- reconstitute sample.tex
|  |  +- reconstitute integers.tex
|  |  +- reconstitute sorted seq.tex
|  |  +- [ Success: 4 / 6 ]
|  +- Z3 test
|  |  +- sample_quant
|  |  +- sample_quant2
|  |  +- sample_quant3
|  |  +- sample proof
|  |  +- canonical lambdas part a
|  |  +- canonical lambdas part b
|  |  +- canonical lambdas with quantifier part a
|  |  +- canonical lambdas with quantifier part b
|  |  +- conversion to first order typing (no type variables)
|  |  +- conversion to first order typing
|  |  *** FAILED ***
|  |  +- instantiating type variables by matching some generic types
|  |  +- [ Success: 10 / 11 ]
|  +- Graphs and operator grammars
|  |  +- case 0 - complete domain of matrices
|  |  +- case 2 - new ambiguities
|  |  +- case 3 - transitive closures
|  |  +- case 4 - transitive closures in linear time
|  |  +- Formatting utilities
|  |  |  +- test 0
|  |  |  +- test 1
|  |  |  +- [ Success: 2 / 2 ]
|  |  +- case 5 - error monad
|  |  +- case 6 - union of a list of {sorted} list
|  |  +- case 7 - union of a list of {unsorted} list
|  |  +- case 8 - edit distance, random testing
|  |  +- case 9 - edit distance, regression test from random testing
|  |  +- QuickCheck of graphs
|  |  +- case 11 - Relations, quickcheck
|  |  +- case 12 - New graphs, quickcheck
|  |  +- case 13 - Sane line breaks, quickcheck
|  |  *** FAILED ***
|  |  +- [ Success: 14 / 15 ]
|  +- code generation in the cube example
|  |  +- test0: code for the {state}
|  |  +- test1: code for the {event}
|  |  +- test2: code for the {initialization}
|  |  +- test3: code for the {procedure + loop}
|  |  *** FAILED ***
|  |  +- test4: {whole source file}
|  |  *** FAILED ***
|  |  +- test5: run {source file}
|  |  *** FAILED ***
|  |  +- test6: verify {control flow graph}
|  |  +- test7: {concurrent} code
|  |  *** FAILED ***
|  |  +- test8: {run concurrent} code
|  |  *** FAILED ***
|  |  +- [ Success: 4 / 9 ]
|  +- Documentation generation
|  |  +- m2, event m1:moveout
|  |  *** FAILED ***
|  |  +- m3, event m1:moveout
|  |  *** FAILED ***
|  |  +- safety properties of m2
|  |  *** FAILED ***
|  |  +- progress properties of m2
|  |  *** FAILED ***
|  |  +- [ Success: 0 / 4 ]
|  +- [ Success: 163 / 225 ]
+- [ Success: 163 / 225 ]

***************
*** FAILURE ***
***************
Lines of Haskell code:
   48510 total
    1049 Document/phase.hs
    1015 UnitB/PO.hs
     969 Document/Phase/Expressions.hs
     809 Logic/Expr/Expr.hs
     738 Latex/Parser.hs
Run time: 1m 40s
