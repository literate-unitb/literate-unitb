module Document.Tests.TrainStationSets where

import Document.Tests.Suite


    -- Libraries

import Tests.UnitTest

import Utilities.Format

test_case :: TestCase
test_case = test

test :: TestCase
test = test_cases
            "train station example, with sets"
            [ POCase "verify machine m0 (sets)" (verify path0 0) result0
            , POCase "verify machine m1 (sets)" (verify path0 1) result1
            , POCase "verify machine m2 (sets)" (verify path0 2) result2
            , Case "m2, enablement proof obligation" case6 result6
            , Case "m2, transient proof obligation, no dummy" case7 result7
            , Case "m2, safety property of schedule replacement" case8 result8
            , POCase "verify machine m3 (sets)" (verify path0 3) result5
            , Case "type checking of boolean expressions" case3 result3
            , Case "verify machine m3 error (wandering free variable)" case4 result4
            , StringCase "witness well definedness PO" case9 result9
            ]

result0 :: String
result0 = unlines
    [ "  o  m0/INIT/WD"
    , "  o  m0/INV/WD"
    , "  o  m0/TR/m0:tr0/t@param"
    , "  o  m0/m0:enter/FIS/in@prime"
    , "  o  m0/m0:enter/SCH"
    , "  o  m0/m0:enter/WD/ACT/a1"
    , "  o  m0/m0:enter/WD/C_SCH"
    , "  o  m0/m0:enter/WD/F_SCH"
    , "  o  m0/m0:enter/WD/GRD"
    , "  o  m0/m0:leave/FIS/in@prime"
    , "  o  m0/m0:leave/SCH"
    , "  o  m0/m0:leave/SCH/m0/0/REF/weaken"
    , "  o  m0/m0:leave/WD/ACT/lv:a0"
    , "  o  m0/m0:leave/WD/C_SCH"
    , "  o  m0/m0:leave/WD/F_SCH"
    , "  o  m0/m0:leave/WD/GRD"
    , "  o  m0/m0:prog0/PROG/WD/lhs"
    , "  o  m0/m0:prog0/PROG/WD/rhs"
    , "  o  m0/m0:prog0/REF/discharge/tr/lhs"
    , "  o  m0/m0:prog0/REF/discharge/tr/rhs"
    , "  o  m0/m0:tr0/TR/WD"
    , "passed 21 / 21"
    ]

result1 :: String
result1 = unlines
    [ "  o  m1/INIT/FIS/in"
    , "  o  m1/INIT/FIS/loc"
    , "  o  m1/INIT/INV/inv0"
    , "  o  m1/INIT/WD"
    , "  o  m1/INV/WD"
    , "  o  m1/TR/m1:tr0/t@param"
    , "  o  m1/TR/m1:tr1/WFIS/t/t@prime"
    , "  o  m1/TR/m1:tr1/m1:movein/EN"
    , "  o  m1/TR/m1:tr1/m1:movein/NEG"
    , "  o  m1/m0:enter/FIS/in@prime"
    , "  o  m1/m0:enter/FIS/loc@prime"
    , "  o  m1/m0:enter/INV/inv0"
    , "  o  m1/m0:enter/SAF/m1:saf0"
    , "  o  m1/m0:enter/SAF/m1:saf1"
    , "  o  m1/m0:enter/SAF/m1:saf2"
    , "  o  m1/m0:enter/SAF/m1:saf3"
    , "  o  m1/m0:enter/SCH"
    , "  o  m1/m0:enter/WD/ACT/a3"
    , "  o  m1/m0:enter/WD/C_SCH"
    , "  o  m1/m0:enter/WD/F_SCH"
    , "  o  m1/m0:enter/WD/GRD"
    , "  o  m1/m0:leave/FIS/in@prime"
    , "  o  m1/m0:leave/FIS/loc@prime"
    , "  o  m1/m0:leave/INV/inv0"
    , "  o  m1/m0:leave/SAF/m1:saf0"
    , "  o  m1/m0:leave/SAF/m1:saf1"
    , "  o  m1/m0:leave/SAF/m1:saf2"
    , "  o  m1/m0:leave/SAF/m1:saf3"
    , "  o  m1/m0:leave/SCH"
    , "  o  m1/m0:leave/SCH/m1/0/REF/delay/prog/lhs"
    , "  o  m1/m0:leave/SCH/m1/0/REF/delay/prog/rhs"
    , "  o  m1/m0:leave/SCH/m1/0/REF/delay/saf/lhs"
    , "  o  m1/m0:leave/SCH/m1/0/REF/delay/saf/rhs"
    , "  o  m1/m0:leave/WD/ACT/lv:a2"
    , "  o  m1/m0:leave/WD/C_SCH"
    , "  o  m1/m0:leave/WD/F_SCH"
    , "  o  m1/m0:leave/WD/GRD"
    , "  o  m1/m1:movein/FIS/in@prime"
    , "  o  m1/m1:movein/FIS/loc@prime"
    , "  o  m1/m1:movein/INV/inv0"
    , "  o  m1/m1:movein/SAF/m1:saf0"
    , "  o  m1/m1:movein/SAF/m1:saf1"
    , "  o  m1/m1:movein/SAF/m1:saf2"
    , "  o  m1/m1:movein/SAF/m1:saf3"
    , "  o  m1/m1:movein/SCH"
    , "  o  m1/m1:movein/SCH/m1/0/REF/weaken"
    , "  o  m1/m1:movein/WD/ACT/mi:a2"
    , "  o  m1/m1:movein/WD/C_SCH"
    , "  o  m1/m1:movein/WD/F_SCH"
    , "  o  m1/m1:movein/WD/GRD"
    , "  o  m1/m1:moveout/FIS/in@prime"
    , "  o  m1/m1:moveout/FIS/loc@prime"
    , "  o  m1/m1:moveout/INV/inv0"
    , "  o  m1/m1:moveout/SAF/m1:saf0"
    , "  o  m1/m1:moveout/SAF/m1:saf1"
    , "  o  m1/m1:moveout/SAF/m1:saf2"
    , "  o  m1/m1:moveout/SAF/m1:saf3"
    , "  o  m1/m1:moveout/SCH"
    , "  o  m1/m1:moveout/SCH/m1/0/REF/weaken"
    , "  o  m1/m1:moveout/WD/ACT/a2"
    , "  o  m1/m1:moveout/WD/C_SCH"
    , "  o  m1/m1:moveout/WD/F_SCH"
    , "  o  m1/m1:moveout/WD/GRD"
    , "  o  m1/m1:prog0/PROG/WD/lhs"
    , "  o  m1/m1:prog0/PROG/WD/rhs"
    , "  o  m1/m1:prog0/REF/disjunction/lhs"
    , "  o  m1/m1:prog0/REF/disjunction/rhs"
    , "  o  m1/m1:prog1/PROG/WD/lhs"
    , "  o  m1/m1:prog1/PROG/WD/rhs"
    , "  o  m1/m1:prog1/REF/transitivity/lhs"
    , "  o  m1/m1:prog1/REF/transitivity/mhs/m1:prog4/m1:prog3"
    , "  o  m1/m1:prog1/REF/transitivity/rhs"
    , "  o  m1/m1:prog2/PROG/WD/lhs"
    , "  o  m1/m1:prog2/PROG/WD/rhs"
    , "  o  m1/m1:prog2/REF/implication"
    , "  o  m1/m1:prog3/PROG/WD/lhs"
    , "  o  m1/m1:prog3/PROG/WD/rhs"
    , "  o  m1/m1:prog3/REF/discharge/saf/lhs"
    , "  o  m1/m1:prog3/REF/discharge/saf/rhs"
    , "  o  m1/m1:prog3/REF/discharge/tr"
    , "  o  m1/m1:prog4/PROG/WD/lhs"
    , "  o  m1/m1:prog4/PROG/WD/rhs"
    , "  o  m1/m1:prog4/REF/discharge/saf/lhs"
    , "  o  m1/m1:prog4/REF/discharge/saf/rhs"
    , "  o  m1/m1:prog4/REF/discharge/tr"
    , "  o  m1/m1:saf0/SAF/WD/lhs"
    , "  o  m1/m1:saf0/SAF/WD/rhs"
    , "  o  m1/m1:saf1/SAF/WD/lhs"
    , "  o  m1/m1:saf1/SAF/WD/rhs"
    , "  o  m1/m1:saf2/SAF/WD/lhs"
    , "  o  m1/m1:saf2/SAF/WD/rhs"
    , "  o  m1/m1:saf3/SAF/WD/lhs"
    , "  o  m1/m1:saf3/SAF/WD/rhs"
    , "  o  m1/m1:tr0/TR/WD"
    , "  o  m1/m1:tr1/TR/WD"
    , "  o  m1/m1:tr1/TR/WD/witness/t"
    , "passed 96 / 96"
    ]

result2 :: String
result2 = unlines
    [ "  o  m2/INIT/FIS/in"
    , "  o  m2/INIT/FIS/loc"
    , "  o  m2/INIT/INV/m2:inv0"
    , "  o  m2/INIT/WD"
    , "  o  m2/INV/WD"
    , "  o  m2/TR/m2:tr0/t@param"
    , "  o  m2/TR/m2:tr1/WFIS/t/t@prime"
    , "  o  m2/TR/m2:tr1/leadsto/lhs"
    , "  o  m2/TR/m2:tr1/leadsto/rhs"
    , "  o  m2/TR/m2:tr1/m1:moveout/EN"
    , "  o  m2/TR/m2:tr1/m1:moveout/NEG"
    , "  o  m2/m0:enter/FIS/in@prime"
    , "  o  m2/m0:enter/FIS/loc@prime"
    , "  o  m2/m0:enter/INV/m2:inv0"
    , "  o  m2/m0:enter/SAF/m2:saf0"
    , "  o  m2/m0:enter/SAF/m2:saf1"
    , "  o  m2/m0:enter/SAF/m2:saf2"
    , "  o  m2/m0:enter/SCH"
    , "  o  m2/m0:enter/WD/C_SCH"
    , "  o  m2/m0:enter/WD/F_SCH"
    , "  o  m2/m0:enter/WD/GRD"
    , "  o  m2/m0:leave/FIS/in@prime"
    , "  o  m2/m0:leave/FIS/loc@prime"
    , "  o  m2/m0:leave/INV/m2:inv0/assertion/goal0/assertion/hyp3/easy (332,26)"
    , "  o  m2/m0:leave/INV/m2:inv0/assertion/goal0/assertion/hyp4/easy (333,25)"
    , "  o  m2/m0:leave/INV/m2:inv0/assertion/goal0/assertion/hyp5/easy (334,25)"
    , "  o  m2/m0:leave/INV/m2:inv0/assertion/goal0/assertion/hyp6/easy (335,25)"
    , "  o  m2/m0:leave/INV/m2:inv0/assertion/goal0/assertion/hyp7/goal (339,2)"
    , "  o  m2/m0:leave/INV/m2:inv0/assertion/goal0/assertion/hyp7/hypotheses (339,2)"
    , "  o  m2/m0:leave/INV/m2:inv0/assertion/goal0/assertion/hyp7/relation (339,2)"
    , "  o  m2/m0:leave/INV/m2:inv0/assertion/goal0/assertion/hyp7/step (341,2)"
    , "  o  m2/m0:leave/INV/m2:inv0/assertion/goal0/assertion/hyp7/step (343,2)"
    , "  o  m2/m0:leave/INV/m2:inv0/assertion/goal0/assertion/hyp7/step (345,2)"
    , "  o  m2/m0:leave/INV/m2:inv0/assertion/goal0/assertion/hyp8/goal (350,2)"
    , "  o  m2/m0:leave/INV/m2:inv0/assertion/goal0/assertion/hyp8/hypotheses (350,2)"
    , "  o  m2/m0:leave/INV/m2:inv0/assertion/goal0/assertion/hyp8/relation (350,2)"
    , "  o  m2/m0:leave/INV/m2:inv0/assertion/goal0/assertion/hyp8/step (352,2)"
    , "  o  m2/m0:leave/INV/m2:inv0/assertion/goal0/assertion/hyp8/step (354,2)"
    , "  o  m2/m0:leave/INV/m2:inv0/assertion/goal0/assertion/hyp8/step (356,2)"
    , "  o  m2/m0:leave/INV/m2:inv0/assertion/goal0/main goal/goal (319,1)"
    , "  o  m2/m0:leave/INV/m2:inv0/assertion/goal0/main goal/hypotheses (319,1)"
    , "  o  m2/m0:leave/INV/m2:inv0/assertion/goal0/main goal/relation (319,1)"
    , "  o  m2/m0:leave/INV/m2:inv0/assertion/goal0/main goal/step (321,1)"
    , "  o  m2/m0:leave/INV/m2:inv0/assertion/goal0/main goal/step (323,1)"
    , "  o  m2/m0:leave/INV/m2:inv0/assertion/goal0/main goal/step (326,1)"
    , "  o  m2/m0:leave/INV/m2:inv0/assertion/goal0/new assumption (302,51)"
    , "  o  m2/m0:leave/INV/m2:inv0/main goal/easy (362,30)"
    , "  o  m2/m0:leave/SAF/m2:saf0"
    , "  o  m2/m0:leave/SAF/m2:saf1"
    , "  o  m2/m0:leave/SAF/m2:saf2"
    , "  o  m2/m0:leave/SCH"
    , "  o  m2/m0:leave/WD/C_SCH"
    , "  o  m2/m0:leave/WD/F_SCH"
    , "  o  m2/m0:leave/WD/GRD"
    , "  o  m2/m1:movein/FIS/in@prime"
    , "  o  m2/m1:movein/FIS/loc@prime"
    , "  o  m2/m1:movein/INV/m2:inv0"
    , "  o  m2/m1:movein/SAF/m2:saf0"
    , "  o  m2/m1:movein/SAF/m2:saf1"
    , "  o  m2/m1:movein/SAF/m2:saf2"
    , "  o  m2/m1:movein/SCH"
    , "  o  m2/m1:movein/SCH/m2/0/REF/delay/prog/lhs"
    , "  o  m2/m1:movein/SCH/m2/0/REF/delay/prog/rhs"
    , "  o  m2/m1:movein/SCH/m2/0/REF/delay/saf/lhs"
    , "  o  m2/m1:movein/SCH/m2/0/REF/delay/saf/rhs"
    , "  o  m2/m1:movein/WD/C_SCH"
    , "  o  m2/m1:movein/WD/F_SCH"
    , "  o  m2/m1:movein/WD/GRD"
    , "  o  m2/m1:moveout/FIS/in@prime"
    , "  o  m2/m1:moveout/FIS/loc@prime"
    , "  o  m2/m1:moveout/INV/m2:inv0"
    , "  o  m2/m1:moveout/SAF/m2:saf0"
    , "  o  m2/m1:moveout/SAF/m2:saf1"
    , "  o  m2/m1:moveout/SAF/m2:saf2"
    , "  o  m2/m1:moveout/SCH"
    , "  o  m2/m1:moveout/SCH/m2/0/REF/replace/prog/lhs"
    , "  o  m2/m1:moveout/SCH/m2/0/REF/replace/prog/rhs"
    , "  o  m2/m1:moveout/SCH/m2/0/REF/replace/str"
    , "  o  m2/m1:moveout/WD/C_SCH"
    , "  o  m2/m1:moveout/WD/F_SCH"
    , "  o  m2/m1:moveout/WD/GRD"
    , "  o  m2/m2:prog0/PROG/WD/lhs"
    , "  o  m2/m2:prog0/PROG/WD/rhs"
    , "  o  m2/m2:prog0/REF/trading/lhs"
    , "  o  m2/m2:prog0/REF/trading/rhs"
    , "  o  m2/m2:prog1/PROG/WD/lhs"
    , "  o  m2/m2:prog1/PROG/WD/rhs"
    , "  o  m2/m2:prog1/REF/trading/lhs"
    , "  o  m2/m2:prog1/REF/trading/rhs"
    , "  o  m2/m2:prog2/PROG/WD/lhs"
    , "  o  m2/m2:prog2/PROG/WD/rhs"
    , "  o  m2/m2:prog2/REF/disjunction/lhs"
    , "  o  m2/m2:prog2/REF/disjunction/rhs"
    , "  o  m2/m2:prog3/PROG/WD/lhs"
    , "  o  m2/m2:prog3/PROG/WD/rhs"
    , "  o  m2/m2:prog3/REF/discharge/saf/lhs"
    , "  o  m2/m2:prog3/REF/discharge/saf/rhs"
    , "  o  m2/m2:prog3/REF/discharge/tr"
    , "  o  m2/m2:prog4/PROG/WD/lhs"
    , "  o  m2/m2:prog4/PROG/WD/rhs"
    , "  o  m2/m2:prog4/REF/monotonicity/lhs"
    , "  o  m2/m2:prog4/REF/monotonicity/rhs"
    , "  o  m2/m2:prog5/PROG/WD/lhs"
    , "  o  m2/m2:prog5/PROG/WD/rhs"
    , "  o  m2/m2:prog5/REF/disjunction/lhs"
    , "  o  m2/m2:prog5/REF/disjunction/rhs"
    , "  o  m2/m2:prog6/PROG/WD/lhs"
    , "  o  m2/m2:prog6/PROG/WD/rhs"
    , "  o  m2/m2:prog6/REF/disjunction/lhs"
    , "  o  m2/m2:prog6/REF/disjunction/rhs"
    , "  o  m2/m2:prog7/PROG/WD/lhs"
    , "  o  m2/m2:prog7/PROG/WD/rhs"
    , "  o  m2/m2:prog7/REF/discharge/saf/lhs"
    , "  o  m2/m2:prog7/REF/discharge/saf/rhs"
    , "  o  m2/m2:prog7/REF/discharge/tr"
    , "  o  m2/m2:saf0/SAF/WD/lhs"
    , "  o  m2/m2:saf0/SAF/WD/rhs"
    , "  o  m2/m2:saf1/SAF/WD/lhs"
    , "  o  m2/m2:saf1/SAF/WD/rhs"
    , "  o  m2/m2:saf2/SAF/WD/lhs"
    , "  o  m2/m2:saf2/SAF/WD/rhs"
    , "  o  m2/m2:tr0/TR/WD"
    , "  o  m2/m2:tr1/TR/WD"
    , "  o  m2/m2:tr1/TR/WD/witness/t"
    , "passed 124 / 124"
    ]

path0 :: String
path0 = "Tests/train-station-set.tex"

result3 :: String
result3 = unlines
    [ "error (295,48): type error: expression has type incompatible \
      \with its expected type:"
    , "  expression: ent"
    , "  actual type: BLK"
    , "  expected type: Bool "
    , ""
    ]

path3 :: String
path3 = "Tests/train-station-set-err0.tex"

case3 :: IO String
case3 = find_errors path3

path4 :: String
path4 = "Tests/train-station-set-err1.tex"

case4 :: IO String
case4 = find_errors path4

result4 :: String
result4 = format "error (494,25): {0}" $ 
            unlines 
                [ "unrecognized term: t"
                , "Perhaps you meant:"
                , "ent (variable)"
                , "ext (variable)" 
                , "" ]

result5 :: String
result5 = unlines
    [ "  o  m3/INIT/FIS/in"
    , "  o  m3/INIT/FIS/isgn"
    , "  o  m3/INIT/FIS/loc"
    , "  o  m3/INIT/FIS/osgn"
    , "  o  m3/INIT/INV/m3:inv0"
    , "  o  m3/INIT/INV/m3:inv1"
    , "  o  m3/INIT/INV/m3:inv2"
    , "  o  m3/INIT/INV/m3:inv3"
    , "  o  m3/INIT/WD"
    , "  o  m3/INV/WD"
    , "  o  m3/TR/m3:tr0/WFIS/p/p@prime"
    , " xxx m3/TR/m3:tr0/m3:ctr:plf/EN"
    , "  o  m3/TR/m3:tr0/m3:ctr:plf/NEG"
    , "  o  m3/m0:enter/FIS/in@prime"
    , "  o  m3/m0:enter/FIS/isgn@prime"
    , "  o  m3/m0:enter/FIS/loc@prime"
    , "  o  m3/m0:enter/FIS/osgn@prime"
    , "  o  m3/m0:enter/INV/m3:inv0"
    , "  o  m3/m0:enter/INV/m3:inv1"
    , "  o  m3/m0:enter/INV/m3:inv2"
    , "  o  m3/m0:enter/INV/m3:inv3"
    , "  o  m3/m0:enter/SAF/m3:saf0"
    , "  o  m3/m0:enter/SAF/m3:saf1"
    , "  o  m3/m0:enter/SCH"
    , "  o  m3/m0:enter/WD/ACT/m3:ent:act0"
    , "  o  m3/m0:enter/WD/ACT/m3:ent:act1"
    , "  o  m3/m0:enter/WD/C_SCH"
    , "  o  m3/m0:enter/WD/F_SCH"
    , "  o  m3/m0:enter/WD/GRD"
    , "  o  m3/m0:leave/FIS/in@prime"
    , "  o  m3/m0:leave/FIS/isgn@prime"
    , "  o  m3/m0:leave/FIS/loc@prime"
    , "  o  m3/m0:leave/FIS/osgn@prime"
    , "  o  m3/m0:leave/INV/m3:inv0"
    , "  o  m3/m0:leave/INV/m3:inv1"
    , "  o  m3/m0:leave/INV/m3:inv2"
    , "  o  m3/m0:leave/INV/m3:inv3"
    , "  o  m3/m0:leave/SAF/m3:saf0"
    , "  o  m3/m0:leave/SAF/m3:saf1"
    , "  o  m3/m0:leave/SCH"
    , "  o  m3/m0:leave/WD/ACT/m3:ext:act0"
    , "  o  m3/m0:leave/WD/ACT/m3:ext:act1"
    , "  o  m3/m0:leave/WD/C_SCH"
    , "  o  m3/m0:leave/WD/F_SCH"
    , "  o  m3/m0:leave/WD/GRD"
    , "  o  m3/m1:movein/FIS/in@prime"
    , "  o  m3/m1:movein/FIS/isgn@prime"
    , "  o  m3/m1:movein/FIS/loc@prime"
    , "  o  m3/m1:movein/FIS/osgn@prime"
    , "  o  m3/m1:movein/INV/m3:inv0"
    , "  o  m3/m1:movein/INV/m3:inv1"
    , "  o  m3/m1:movein/INV/m3:inv2"
    , "  o  m3/m1:movein/INV/m3:inv3"
    , "  o  m3/m1:movein/SAF/m3:saf0"
    , "  o  m3/m1:movein/SAF/m3:saf1"
    , "  o  m3/m1:movein/SCH"
    , "  o  m3/m1:movein/WD/ACT/m3:mi:act0"
    , "  o  m3/m1:movein/WD/ACT/m3:mi:act1"
    , "  o  m3/m1:movein/WD/C_SCH"
    , "  o  m3/m1:movein/WD/F_SCH"
    , "  o  m3/m1:movein/WD/GRD"
    , "  o  m3/m1:moveout/FIS/in@prime"
    , "  o  m3/m1:moveout/FIS/isgn@prime"
    , "  o  m3/m1:moveout/FIS/loc@prime"
    , "  o  m3/m1:moveout/FIS/osgn@prime"
    , "  o  m3/m1:moveout/GRD/m3/0/REF/grd"
    , "  o  m3/m1:moveout/INV/m3:inv0"
    , "  o  m3/m1:moveout/INV/m3:inv1"
    , "  o  m3/m1:moveout/INV/m3:inv2"
    , "  o  m3/m1:moveout/INV/m3:inv3"
    , "  o  m3/m1:moveout/SAF/m3:saf0"
    , "  o  m3/m1:moveout/SAF/m3:saf1"
    , "  o  m3/m1:moveout/SCH"
    , "  o  m3/m1:moveout/SCH/m3/1/REF/replace/prog/lhs"
    , "  o  m3/m1:moveout/SCH/m3/1/REF/replace/prog/rhs"
    , "  o  m3/m1:moveout/SCH/m3/1/REF/replace/str"
    , "  o  m3/m1:moveout/SCH/m3/2/REF/delay/prog/lhs"
    , "  o  m3/m1:moveout/SCH/m3/2/REF/delay/prog/rhs"
    , "  o  m3/m1:moveout/SCH/m3/2/REF/delay/saf/lhs"
    , " xxx m3/m1:moveout/SCH/m3/2/REF/delay/saf/rhs"
    , "  o  m3/m1:moveout/WD/ACT/m3:mo:act0"
    , "  o  m3/m1:moveout/WD/ACT/m3:mo:act1"
    , "  o  m3/m1:moveout/WD/C_SCH"
    , "  o  m3/m1:moveout/WD/F_SCH"
    , "  o  m3/m1:moveout/WD/GRD"
    , "  o  m3/m3:ctr:plf/FIS/in@prime"
    , "  o  m3/m3:ctr:plf/FIS/loc@prime"
    , "  o  m3/m3:ctr:plf/FIS/osgn@prime"
    , " xxx m3/m3:ctr:plf/INV/m3:inv0"
    , " xxx m3/m3:ctr:plf/INV/m3:inv1"
    , " xxx m3/m3:ctr:plf/INV/m3:inv2"
    , " xxx m3/m3:ctr:plf/INV/m3:inv3"
    , "  o  m3/m3:ctr:plf/SAF/m3:saf0"
    , "  o  m3/m3:ctr:plf/SAF/m3:saf1"
    , "  o  m3/m3:ctr:plf/SCH"
    , "  o  m3/m3:ctr:plf/WD/ACT/m3:cp:act0"
    , "  o  m3/m3:ctr:plf/WD/C_SCH"
    , "  o  m3/m3:ctr:plf/WD/F_SCH"
    , "  o  m3/m3:ctr:plf/WD/GRD"
    , "  o  m3/m3:prog0/PROG/WD/lhs"
    , "  o  m3/m3:prog0/PROG/WD/rhs"
    , "  o  m3/m3:prog0/REF/discharge/saf/lhs"
    , "  o  m3/m3:prog0/REF/discharge/saf/rhs"
    , "  o  m3/m3:prog0/REF/discharge/tr"
    , "  o  m3/m3:saf0/SAF/WD/lhs"
    , "  o  m3/m3:saf0/SAF/WD/rhs"
    , "  o  m3/m3:saf1/SAF/WD/lhs"
    , "  o  m3/m3:saf1/SAF/WD/rhs"
    , "  o  m3/m3:tr0/TR/WD"
    , "  o  m3/m3:tr0/TR/WD/witness/p"
    , "passed 104 / 110"
    ]

case6 :: IO String
case6 = proof_obligation path0 "m2/TR/m2:tr1/m1:moveout/EN" 2

result6 :: String
result6 = unlines
    [ "(declare-datatypes (a) ( (Maybe (Just (fromJust a)) Nothing) ))"
    , "(declare-datatypes () ( (Null null) ))"
    , "(declare-datatypes (a b) ( (Pair (pair (first a) (second b))) ))"
    , "(declare-sort BLK 0)"
    , "; comment: we don't need to declare the sort Bool"
    , "; comment: we don't need to declare the sort Int"
    , "; comment: we don't need to declare the sort Real"
    , "(declare-sort TRAIN 0)"
    , "(define-sort pfun (a b) (Array a (Maybe b)))"
    , "(define-sort set (a) (Array a Bool))"
    , "(declare-const b BLK)"
    , "(declare-const ent BLK)"
    , "(declare-const ext BLK)"
    , "(declare-const in (set TRAIN))"
    , "(declare-const in@prime (set TRAIN))"
    , "(declare-const loc (pfun TRAIN BLK))"
    , "(declare-const loc@prime (pfun TRAIN BLK))"
    , "(declare-const plf (set BLK))"
    , "(declare-const t TRAIN)"
    , "(declare-fun apply@@TRAIN@@BLK ( (pfun TRAIN BLK) TRAIN ) BLK)"
    , "(declare-fun dom-rest@@TRAIN@@BLK"
    , "             ( (set TRAIN)"
    , "               (pfun TRAIN BLK) )"
    , "             (pfun TRAIN BLK))"
    , "(declare-fun dom-subt@@TRAIN@@BLK"
    , "             ( (set TRAIN)"
    , "               (pfun TRAIN BLK) )"
    , "             (pfun TRAIN BLK))"
    , "(declare-fun dom@@TRAIN@@BLK ( (pfun TRAIN BLK) ) (set TRAIN))"
    , "(declare-fun empty-fun@@TRAIN@@BLK () (pfun TRAIN BLK))"
    , "(declare-fun injective@@TRAIN@@BLK ( (pfun TRAIN BLK) ) Bool)"
    , "(declare-fun mk-fun@@TRAIN@@BLK (TRAIN BLK) (pfun TRAIN BLK))"
    , "(declare-fun mk-set@@BLK (BLK) (set BLK))"
    , "(declare-fun mk-set@@TRAIN (TRAIN) (set TRAIN))"
    , "(declare-fun ovl@@TRAIN@@BLK"
    , "             ( (pfun TRAIN BLK)"
    , "               (pfun TRAIN BLK) )"
    , "             (pfun TRAIN BLK))"
    , "(declare-fun ran@@TRAIN@@BLK ( (pfun TRAIN BLK) ) (set BLK))"
    , "(declare-fun set@@TRAIN@@BLK ( (pfun TRAIN BLK) ) (set BLK))"
    , "(declare-fun t@param () TRAIN)"
    , "(define-fun BLK () (set BLK) ( (as const (set BLK)) true ))"
    , "(define-fun TRAIN"
    , "            ()"
    , "            (set TRAIN)"
    , "            ( (as const (set TRAIN))"
    , "              true ))"
    , "(define-fun compl@@BLK"
    , "            ( (s1 (set BLK)) )"
    , "            (set BLK)"
    , "            ((_ map not) s1))"
    , "(define-fun compl@@TRAIN"
    , "            ( (s1 (set TRAIN)) )"
    , "            (set TRAIN)"
    , "            ((_ map not) s1))"
    , "(define-fun elem@@BLK"
    , "            ( (x BLK)"
    , "              (s1 (set BLK)) )"
    , "            Bool"
    , "            (select s1 x))"
    , "(define-fun elem@@TRAIN"
    , "            ( (x TRAIN)"
    , "              (s1 (set TRAIN)) )"
    , "            Bool"
    , "            (select s1 x))"
    , "(define-fun empty-set@@BLK"
    , "            ()"
    , "            (set BLK)"
    , "            ( (as const (set BLK))"
    , "              false ))"
    , "(define-fun empty-set@@TRAIN"
    , "            ()"
    , "            (set TRAIN)"
    , "            ( (as const (set TRAIN))"
    , "              false ))"
    , "(define-fun set-diff@@BLK"
    , "            ( (s1 (set BLK))"
    , "              (s2 (set BLK)) )"
    , "            (set BLK)"
    , "            (intersect s1 ((_ map not) s2)))"
    , "(define-fun set-diff@@TRAIN"
    , "            ( (s1 (set TRAIN))"
    , "              (s2 (set TRAIN)) )"
    , "            (set TRAIN)"
    , "            (intersect s1 ((_ map not) s2)))"
    , "(define-fun st-subset@@BLK"
    , "            ( (s1 (set BLK))"
    , "              (s2 (set BLK)) )"
    , "            Bool"
    , "            (and (subset s1 s2) (not (= s1 s2))))"
    , "(define-fun st-subset@@TRAIN"
    , "            ( (s1 (set TRAIN))"
    , "              (s2 (set TRAIN)) )"
    , "            Bool"
    , "            (and (subset s1 s2) (not (= s1 s2))))"
    , "(assert (forall ( (f1 (pfun TRAIN BLK))"
    , "                  (f2 (pfun TRAIN BLK)) )"
    , "                (! (= (dom@@TRAIN@@BLK (ovl@@TRAIN@@BLK f1 f2))"
    , "                      (union (dom@@TRAIN@@BLK f1) (dom@@TRAIN@@BLK f2)))"
    , "                   :pattern"
    , "                   ( (dom@@TRAIN@@BLK (ovl@@TRAIN@@BLK f1 f2)) ))))"
    , "(assert (= (dom@@TRAIN@@BLK empty-fun@@TRAIN@@BLK)"
    , "           empty-set@@TRAIN))"
    , "(assert (forall ( (x TRAIN)"
    , "                  (y BLK) )"
    , "                (! (= (dom@@TRAIN@@BLK (mk-fun@@TRAIN@@BLK x y))"
    , "                      (mk-set@@TRAIN x))"
    , "                   :pattern"
    , "                   ( (dom@@TRAIN@@BLK (mk-fun@@TRAIN@@BLK x y)) ))))"
    , "(assert (forall ( (f1 (pfun TRAIN BLK))"
    , "                  (f2 (pfun TRAIN BLK))"
    , "                  (x TRAIN) )"
    , "                (! (=> (elem@@TRAIN x (dom@@TRAIN@@BLK f2))"
    , "                       (= (apply@@TRAIN@@BLK (ovl@@TRAIN@@BLK f1 f2) x)"
    , "                          (apply@@TRAIN@@BLK f2 x)))"
    , "                   :pattern"
    , "                   ( (apply@@TRAIN@@BLK (ovl@@TRAIN@@BLK f1 f2) x) ))))"
    , "(assert (forall ( (f1 (pfun TRAIN BLK))"
    , "                  (f2 (pfun TRAIN BLK))"
    , "                  (x TRAIN) )"
    , "                (! (=> (and (elem@@TRAIN x (dom@@TRAIN@@BLK f1))"
    , "                            (not (elem@@TRAIN x (dom@@TRAIN@@BLK f2))))"
    , "                       (= (apply@@TRAIN@@BLK (ovl@@TRAIN@@BLK f1 f2) x)"
    , "                          (apply@@TRAIN@@BLK f1 x)))"
    , "                   :pattern"
    , "                   ( (apply@@TRAIN@@BLK (ovl@@TRAIN@@BLK f1 f2) x) ))))"
    , "(assert (forall ( (f1 (pfun TRAIN BLK))"
    , "                  (s1 (set TRAIN)) )"
    , "                (! (= (dom@@TRAIN@@BLK (dom-subt@@TRAIN@@BLK s1 f1))"
    , "                      (set-diff@@TRAIN (dom@@TRAIN@@BLK f1) s1))"
    , "                   :pattern"
    , "                   ( (dom@@TRAIN@@BLK (dom-subt@@TRAIN@@BLK s1 f1)) ))))"
    , "(assert (forall ( (x TRAIN)"
    , "                  (y BLK) )"
    , "                (! (= (apply@@TRAIN@@BLK (mk-fun@@TRAIN@@BLK x y) x) y)"
    , "                   :pattern"
    , "                   ( (apply@@TRAIN@@BLK (mk-fun@@TRAIN@@BLK x y) x) ))))"
    , "(assert (forall ( (f1 (pfun TRAIN BLK))"
    , "                  (s1 (set TRAIN))"
    , "                  (x TRAIN) )"
    , "                (! (=> (and (elem@@TRAIN x s1)"
    , "                            (elem@@TRAIN x (dom@@TRAIN@@BLK f1)))"
    , "                       (= (apply@@TRAIN@@BLK (dom-rest@@TRAIN@@BLK s1 f1) x)"
    , "                          (apply@@TRAIN@@BLK f1 x)))"
    , "                   :pattern"
    , "                   ( (apply@@TRAIN@@BLK (dom-rest@@TRAIN@@BLK s1 f1) x) ))))"
    , "(assert (forall ( (f1 (pfun TRAIN BLK))"
    , "                  (s1 (set TRAIN))"
    , "                  (x TRAIN) )"
    , "                (! (=> (elem@@TRAIN x (set-diff@@TRAIN (dom@@TRAIN@@BLK f1) s1))"
    , "                       (= (apply@@TRAIN@@BLK (dom-subt@@TRAIN@@BLK s1 f1) x)"
    , "                          (apply@@TRAIN@@BLK f1 x)))"
    , "                   :pattern"
    , "                   ( (apply@@TRAIN@@BLK (dom-subt@@TRAIN@@BLK s1 f1) x) ))))"
    , "(assert (forall ( (x TRAIN) )"
    , "                (! (= (select empty-fun@@TRAIN@@BLK x)"
    , "                      (as Nothing (Maybe BLK)))"
    , "                   :pattern"
    , "                   ( (select empty-fun@@TRAIN@@BLK x) ))))"
    , "(assert (forall ( (x TRAIN)"
    , "                  (x2 TRAIN)"
    , "                  (y BLK) )"
    , "                (! (= (select (mk-fun@@TRAIN@@BLK x y) x2)"
    , "                      (ite (= x x2) (Just y) (as Nothing (Maybe BLK))))"
    , "                   :pattern"
    , "                   ( (select (mk-fun@@TRAIN@@BLK x y) x2) ))))"
    , "(assert (forall ( (x TRAIN)"
    , "                  (f1 (pfun TRAIN BLK))"
    , "                  (f2 (pfun TRAIN BLK)) )"
    , "                (! (= (select (ovl@@TRAIN@@BLK f1 f2) x)"
    , "                      (ite (= (select f2 x) (as Nothing (Maybe BLK)))"
    , "                           (select f1 x)"
    , "                           (select f2 x)))"
    , "                   :pattern"
    , "                   ( (select (ovl@@TRAIN@@BLK f1 f2) x) ))))"
    , "(assert (forall ( (x TRAIN)"
    , "                  (f1 (pfun TRAIN BLK)) )"
    , "                (! (= (select (dom@@TRAIN@@BLK f1) x)"
    , "                      (not (= (select f1 x) (as Nothing (Maybe BLK)))))"
    , "                   :pattern"
    , "                   ( (select (dom@@TRAIN@@BLK f1) x) ))))"
    , "(assert (forall ( (y BLK)"
    , "                  (f1 (pfun TRAIN BLK)) )"
    , "                (! (= (elem@@BLK y (set@@TRAIN@@BLK f1))"
    , "                      (exists ( (x TRAIN) )"
    , "                              (and (elem@@TRAIN x (dom@@TRAIN@@BLK f1))"
    , "                                   (= (apply@@TRAIN@@BLK f1 x) y))))"
    , "                   :pattern"
    , "                   ( (elem@@BLK y (set@@TRAIN@@BLK f1)) ))))"
    , "(assert (forall ( (x TRAIN)"
    , "                  (y BLK)"
    , "                  (f1 (pfun TRAIN BLK)) )"
    , "                (! (= (and (elem@@TRAIN x (dom@@TRAIN@@BLK f1))"
    , "                           (= (apply@@TRAIN@@BLK f1 x) y))"
    , "                      (= (select f1 x) (Just y)))"
    , "                   :pattern"
    , "                   ())))"
    , "(assert (forall ( (f1 (pfun TRAIN BLK))"
    , "                  (x2 TRAIN)"
    , "                  (x TRAIN)"
    , "                  (y BLK) )"
    , "                (! (=> (not (= x x2))"
    , "                       (= (apply@@TRAIN@@BLK (ovl@@TRAIN@@BLK f1 (mk-fun@@TRAIN@@BLK x y)) x2)"
    , "                          (apply@@TRAIN@@BLK f1 x2)))"
    , "                   :pattern"
    , "                   ( (apply@@TRAIN@@BLK (ovl@@TRAIN@@BLK f1 (mk-fun@@TRAIN@@BLK x y)) x2) ))))"
    , "(assert (forall ( (f1 (pfun TRAIN BLK))"
    , "                  (x TRAIN)"
    , "                  (y BLK) )"
    , "                (! (= (apply@@TRAIN@@BLK (ovl@@TRAIN@@BLK f1 (mk-fun@@TRAIN@@BLK x y)) x)"
    , "                      y)"
    , "                   :pattern"
    , "                   ( (apply@@TRAIN@@BLK (ovl@@TRAIN@@BLK f1 (mk-fun@@TRAIN@@BLK x y)) x) ))))"
    , "(assert (= (ran@@TRAIN@@BLK empty-fun@@TRAIN@@BLK)"
    , "           empty-set@@BLK))"
    , "(assert (forall ( (f1 (pfun TRAIN BLK))"
    , "                  (y BLK) )"
    , "                (! (= (elem@@BLK y (ran@@TRAIN@@BLK f1))"
    , "                      (exists ( (x TRAIN) )"
    , "                              (and true"
    , "                                   (and (elem@@TRAIN x (dom@@TRAIN@@BLK f1))"
    , "                                        (= (apply@@TRAIN@@BLK f1 x) y)))))"
    , "                   :pattern"
    , "                   ( (elem@@BLK y (ran@@TRAIN@@BLK f1)) ))))"
    , "(assert (forall ( (x TRAIN)"
    , "                  (y BLK) )"
    , "                (! (= (ran@@TRAIN@@BLK (mk-fun@@TRAIN@@BLK x y))"
    , "                      (mk-set@@BLK y))"
    , "                   :pattern"
    , "                   ( (ran@@TRAIN@@BLK (mk-fun@@TRAIN@@BLK x y)) ))))"
    , "(assert (forall ( (f1 (pfun TRAIN BLK))"
    , "                  (f2 (pfun TRAIN BLK)) )"
    , "                (! (subset (ran@@TRAIN@@BLK (ovl@@TRAIN@@BLK f1 f2))"
    , "                           (union (ran@@TRAIN@@BLK f1) (ran@@TRAIN@@BLK f2)))"
    , "                   :pattern"
    , "                   ( (subset (ran@@TRAIN@@BLK (ovl@@TRAIN@@BLK f1 f2))"
    , "                             (union (ran@@TRAIN@@BLK f1) (ran@@TRAIN@@BLK f2))) ))))"
    , "(assert (forall ( (f1 (pfun TRAIN BLK)) )"
    , "                (! (= (injective@@TRAIN@@BLK f1)"
    , "                      (forall ( (x TRAIN)"
    , "                                (x2 TRAIN) )"
    , "                              (=> (and (elem@@TRAIN x (dom@@TRAIN@@BLK f1))"
    , "                                       (elem@@TRAIN x2 (dom@@TRAIN@@BLK f1)))"
    , "                                  (=> (= (apply@@TRAIN@@BLK f1 x)"
    , "                                         (apply@@TRAIN@@BLK f1 x2))"
    , "                                      (= x x2)))))"
    , "                   :pattern"
    , "                   ( (injective@@TRAIN@@BLK f1) ))))"
    , "(assert (forall ( (f1 (pfun TRAIN BLK))"
    , "                  (x TRAIN) )"
    , "                (! (=> (and (injective@@TRAIN@@BLK f1)"
    , "                            (elem@@TRAIN x (dom@@TRAIN@@BLK f1)))"
    , "                       (= (ran@@TRAIN@@BLK (dom-subt@@TRAIN@@BLK (mk-set@@TRAIN x) f1))"
    , "                          (set-diff@@BLK (ran@@TRAIN@@BLK f1)"
    , "                                         (mk-set@@BLK (apply@@TRAIN@@BLK f1 x)))))"
    , "                   :pattern"
    , "                   ( (ran@@TRAIN@@BLK (dom-subt@@TRAIN@@BLK (mk-set@@TRAIN x) f1)) ))))"
    , "(assert (forall ( (f1 (pfun TRAIN BLK))"
    , "                  (x TRAIN)"
    , "                  (x2 TRAIN) )"
    , "                (! (=> (and (not (= x x2))"
    , "                            (elem@@TRAIN x2 (dom@@TRAIN@@BLK f1)))"
    , "                       (= (apply@@TRAIN@@BLK (dom-subt@@TRAIN@@BLK (mk-set@@TRAIN x) f1) x2)"
    , "                          (apply@@TRAIN@@BLK f1 x2)))"
    , "                   :pattern"
    , "                   ( (apply@@TRAIN@@BLK (dom-subt@@TRAIN@@BLK (mk-set@@TRAIN x) f1) x2) ))))"
    , "(assert (forall ( (f1 (pfun TRAIN BLK))"
    , "                  (x TRAIN) )"
    , "                (! (=> (elem@@TRAIN x (dom@@TRAIN@@BLK f1))"
    , "                       (= (apply@@TRAIN@@BLK (dom-rest@@TRAIN@@BLK (mk-set@@TRAIN x) f1) x)"
    , "                          (apply@@TRAIN@@BLK f1 x)))"
    , "                   :pattern"
    , "                   ( (apply@@TRAIN@@BLK (dom-rest@@TRAIN@@BLK (mk-set@@TRAIN x) f1) x) ))))"
    , "(assert (forall ( (f1 (pfun TRAIN BLK))"
    , "                  (x TRAIN)"
    , "                  (s1 (set TRAIN)) )"
    , "                (! (=> (and (not (elem@@TRAIN x s1))"
    , "                            (elem@@TRAIN x (dom@@TRAIN@@BLK f1)))"
    , "                       (= (apply@@TRAIN@@BLK (dom-subt@@TRAIN@@BLK s1 f1) x)"
    , "                          (apply@@TRAIN@@BLK f1 x)))"
    , "                   :pattern"
    , "                   ( (apply@@TRAIN@@BLK (dom-subt@@TRAIN@@BLK s1 f1) x) ))))"
    , "(assert (forall ( (f1 (pfun TRAIN BLK))"
    , "                  (x TRAIN)"
    , "                  (s1 (set TRAIN)) )"
    , "                (! (=> (and (elem@@TRAIN x s1)"
    , "                            (elem@@TRAIN x (dom@@TRAIN@@BLK f1)))"
    , "                       (= (apply@@TRAIN@@BLK (dom-rest@@TRAIN@@BLK s1 f1) x)"
    , "                          (apply@@TRAIN@@BLK f1 x)))"
    , "                   :pattern"
    , "                   ( (apply@@TRAIN@@BLK (dom-rest@@TRAIN@@BLK s1 f1) x) ))))"
    , "(assert (forall ( (f1 (pfun TRAIN BLK))"
    , "                  (x TRAIN) )"
    , "                (! (=> (elem@@TRAIN x (dom@@TRAIN@@BLK f1))"
    , "                       (elem@@BLK (apply@@TRAIN@@BLK f1 x) (ran@@TRAIN@@BLK f1)))"
    , "                   :pattern"
    , "                   ( (elem@@BLK (apply@@TRAIN@@BLK f1 x) (ran@@TRAIN@@BLK f1)) ))))"
    , "(assert (forall ( (f1 (pfun TRAIN BLK))"
    , "                  (x TRAIN)"
    , "                  (s1 (set TRAIN)) )"
    , "                (! (=> (elem@@TRAIN x (set-diff@@TRAIN (dom@@TRAIN@@BLK f1) s1))"
    , "                       (elem@@BLK (apply@@TRAIN@@BLK f1 x)"
    , "                                  (ran@@TRAIN@@BLK (dom-subt@@TRAIN@@BLK s1 f1))))"
    , "                   :pattern"
    , "                   ( (elem@@BLK (apply@@TRAIN@@BLK f1 x)"
    , "                                (ran@@TRAIN@@BLK (dom-subt@@TRAIN@@BLK s1 f1))) ))))"
    , "(assert (forall ( (f1 (pfun TRAIN BLK))"
    , "                  (x TRAIN)"
    , "                  (s1 (set TRAIN)) )"
    , "                (! (=> (elem@@TRAIN x (intersect (dom@@TRAIN@@BLK f1) s1))"
    , "                       (elem@@BLK (apply@@TRAIN@@BLK f1 x)"
    , "                                  (ran@@TRAIN@@BLK (dom-rest@@TRAIN@@BLK s1 f1))))"
    , "                   :pattern"
    , "                   ( (elem@@BLK (apply@@TRAIN@@BLK f1 x)"
    , "                                (ran@@TRAIN@@BLK (dom-rest@@TRAIN@@BLK s1 f1))) ))))"
    , "(assert (forall ( (f1 (pfun TRAIN BLK))"
    , "                  (x TRAIN)"
    , "                  (y BLK) )"
    , "                (! (=> (and (elem@@TRAIN x (dom@@TRAIN@@BLK f1))"
    , "                            (injective@@TRAIN@@BLK f1))"
    , "                       (= (ran@@TRAIN@@BLK (ovl@@TRAIN@@BLK f1 (mk-fun@@TRAIN@@BLK x y)))"
    , "                          (union (set-diff@@BLK (ran@@TRAIN@@BLK f1)"
    , "                                                (mk-set@@BLK (apply@@TRAIN@@BLK f1 x)))"
    , "                                 (mk-set@@BLK y))))"
    , "                   :pattern"
    , "                   ( (ran@@TRAIN@@BLK (ovl@@TRAIN@@BLK f1 (mk-fun@@TRAIN@@BLK x y))) ))))"
    , "(assert (forall ( (f1 (pfun TRAIN BLK))"
    , "                  (x TRAIN)"
    , "                  (y BLK) )"
    , "                (! (=> (not (elem@@TRAIN x (dom@@TRAIN@@BLK f1)))"
    , "                       (= (ran@@TRAIN@@BLK (ovl@@TRAIN@@BLK f1 (mk-fun@@TRAIN@@BLK x y)))"
    , "                          (union (ran@@TRAIN@@BLK f1) (mk-set@@BLK y))))"
    , "                   :pattern"
    , "                   ( (ran@@TRAIN@@BLK (ovl@@TRAIN@@BLK f1 (mk-fun@@TRAIN@@BLK x y))) ))))"
    , "(assert (forall ( (f1 (pfun TRAIN BLK))"
    , "                  (y BLK) )"
    , "                (! (= (= (set@@TRAIN@@BLK f1) (mk-set@@BLK y))"
    , "                      (forall ( (x TRAIN) )"
    , "                              (=> true"
    , "                                  (or (= (select f1 x) (Just y))"
    , "                                      (= (select f1 x) (as Nothing (Maybe BLK)))))))"
    , "                   :pattern"
    , "                   ())))"
    , "(assert (forall ( (x BLK)"
    , "                  (y BLK) )"
    , "                (! (= (elem@@BLK x (mk-set@@BLK y)) (= x y))"
    , "                   :pattern"
    , "                   ( (elem@@BLK x (mk-set@@BLK y)) ))))"
    , "(assert (forall ( (x TRAIN)"
    , "                  (y TRAIN) )"
    , "                (! (= (elem@@TRAIN x (mk-set@@TRAIN y)) (= x y))"
    , "                   :pattern"
    , "                   ( (elem@@TRAIN x (mk-set@@TRAIN y)) ))))"
    , "(assert (= t@param t))"
    , "; asm0"
    , "(assert (and (not (elem@@BLK ext plf)) (not (= ext ent))))"
    , "; asm1"
    , "(assert (forall ( (b BLK) )"
    , "                (! (= (elem@@BLK b BLK)"
    , "                      (or (elem@@BLK b plf) (= b ent) (= b ext)))"
    , "                   :pattern"
    , "                   ( (elem@@BLK b BLK) ))))"
    , "; asm2"
    , "(assert (exists ( (b BLK) ) (and true (elem@@BLK b plf))))"
    , "; asm3"
    , "(assert (not (elem@@BLK ent plf)))"
    , "; asm7"
    , "(assert (and (= (union (mk-set@@BLK ext) plf)"
    , "                (compl@@BLK (mk-set@@BLK ent)))"
    , "             (= (union (mk-set@@BLK ent) plf)"
    , "                (compl@@BLK (mk-set@@BLK ext)))"
    , "             (= (union (mk-set@@BLK ext) (mk-set@@BLK ent))"
    , "                (compl@@BLK plf))))"
    , "; inv0"
    , "(assert (= (dom@@TRAIN@@BLK loc) in))"
    , "; m2:inv0"
    , "(assert (injective@@TRAIN@@BLK loc))"
    , "(assert (not (=> (and (elem@@BLK b plf)"
    , "                      (elem@@TRAIN t in)"
    , "                      (= (apply@@TRAIN@@BLK loc t) b))"
    , "                 (and (elem@@TRAIN t@param in)"
    , "                      (elem@@BLK (apply@@TRAIN@@BLK loc t@param) plf)))))"
    , "(check-sat-using (or-else (then qe smt)"
    , "                          (then simplify smt)"
    , "                          (then skip smt)"
    , "                          (then (using-params simplify :expand-power true) smt)))"
    ]

case7 :: IO String
case7 = proof_obligation path0 "m2/TR/m2:tr0/t@param" 2

result7 :: String
result7 = unlines
    [ "(declare-datatypes (a) ( (Maybe (Just (fromJust a)) Nothing) ))"
    , "(declare-datatypes () ( (Null null) ))"
    , "(declare-datatypes (a b) ( (Pair (pair (first a) (second b))) ))"
    , "(declare-sort BLK 0)"
    , "; comment: we don't need to declare the sort Bool"
    , "; comment: we don't need to declare the sort Int"
    , "; comment: we don't need to declare the sort Real"
    , "(declare-sort TRAIN 0)"
    , "(define-sort pfun (a b) (Array a (Maybe b)))"
    , "(define-sort set (a) (Array a Bool))"
    , "(declare-const ent BLK)"
    , "(declare-const ext BLK)"
    , "(declare-const in (set TRAIN))"
    , "(declare-const in@prime (set TRAIN))"
    , "(declare-const loc (pfun TRAIN BLK))"
    , "(declare-const loc@prime (pfun TRAIN BLK))"
    , "(declare-const plf (set BLK))"
    , "(declare-const t TRAIN)"
    , "(declare-fun apply@@TRAIN@@BLK ( (pfun TRAIN BLK) TRAIN ) BLK)"
    , "(declare-fun dom-rest@@TRAIN@@BLK"
    , "             ( (set TRAIN)"
    , "               (pfun TRAIN BLK) )"
    , "             (pfun TRAIN BLK))"
    , "(declare-fun dom-subt@@TRAIN@@BLK"
    , "             ( (set TRAIN)"
    , "               (pfun TRAIN BLK) )"
    , "             (pfun TRAIN BLK))"
    , "(declare-fun dom@@TRAIN@@BLK ( (pfun TRAIN BLK) ) (set TRAIN))"
    , "(declare-fun empty-fun@@TRAIN@@BLK () (pfun TRAIN BLK))"
    , "(declare-fun injective@@TRAIN@@BLK ( (pfun TRAIN BLK) ) Bool)"
    , "(declare-fun mk-fun@@TRAIN@@BLK (TRAIN BLK) (pfun TRAIN BLK))"
    , "(declare-fun mk-set@@BLK (BLK) (set BLK))"
    , "(declare-fun mk-set@@TRAIN (TRAIN) (set TRAIN))"
    , "(declare-fun ovl@@TRAIN@@BLK"
    , "             ( (pfun TRAIN BLK)"
    , "               (pfun TRAIN BLK) )"
    , "             (pfun TRAIN BLK))"
    , "(declare-fun ran@@TRAIN@@BLK ( (pfun TRAIN BLK) ) (set BLK))"
    , "(declare-fun set@@TRAIN@@BLK ( (pfun TRAIN BLK) ) (set BLK))"
    , "(define-fun BLK () (set BLK) ( (as const (set BLK)) true ))"
    , "(define-fun TRAIN"
    , "            ()"
    , "            (set TRAIN)"
    , "            ( (as const (set TRAIN))"
    , "              true ))"
    , "(define-fun compl@@BLK"
    , "            ( (s1 (set BLK)) )"
    , "            (set BLK)"
    , "            ((_ map not) s1))"
    , "(define-fun compl@@TRAIN"
    , "            ( (s1 (set TRAIN)) )"
    , "            (set TRAIN)"
    , "            ((_ map not) s1))"
    , "(define-fun elem@@BLK"
    , "            ( (x BLK)"
    , "              (s1 (set BLK)) )"
    , "            Bool"
    , "            (select s1 x))"
    , "(define-fun elem@@TRAIN"
    , "            ( (x TRAIN)"
    , "              (s1 (set TRAIN)) )"
    , "            Bool"
    , "            (select s1 x))"
    , "(define-fun empty-set@@BLK"
    , "            ()"
    , "            (set BLK)"
    , "            ( (as const (set BLK))"
    , "              false ))"
    , "(define-fun empty-set@@TRAIN"
    , "            ()"
    , "            (set TRAIN)"
    , "            ( (as const (set TRAIN))"
    , "              false ))"
    , "(define-fun set-diff@@BLK"
    , "            ( (s1 (set BLK))"
    , "              (s2 (set BLK)) )"
    , "            (set BLK)"
    , "            (intersect s1 ((_ map not) s2)))"
    , "(define-fun set-diff@@TRAIN"
    , "            ( (s1 (set TRAIN))"
    , "              (s2 (set TRAIN)) )"
    , "            (set TRAIN)"
    , "            (intersect s1 ((_ map not) s2)))"
    , "(define-fun st-subset@@BLK"
    , "            ( (s1 (set BLK))"
    , "              (s2 (set BLK)) )"
    , "            Bool"
    , "            (and (subset s1 s2) (not (= s1 s2))))"
    , "(define-fun st-subset@@TRAIN"
    , "            ( (s1 (set TRAIN))"
    , "              (s2 (set TRAIN)) )"
    , "            Bool"
    , "            (and (subset s1 s2) (not (= s1 s2))))"
    , "(assert (forall ( (f1 (pfun TRAIN BLK))"
    , "                  (f2 (pfun TRAIN BLK)) )"
    , "                (! (= (dom@@TRAIN@@BLK (ovl@@TRAIN@@BLK f1 f2))"
    , "                      (union (dom@@TRAIN@@BLK f1) (dom@@TRAIN@@BLK f2)))"
    , "                   :pattern"
    , "                   ( (dom@@TRAIN@@BLK (ovl@@TRAIN@@BLK f1 f2)) ))))"
    , "(assert (= (dom@@TRAIN@@BLK empty-fun@@TRAIN@@BLK)"
    , "           empty-set@@TRAIN))"
    , "(assert (forall ( (x TRAIN)"
    , "                  (y BLK) )"
    , "                (! (= (dom@@TRAIN@@BLK (mk-fun@@TRAIN@@BLK x y))"
    , "                      (mk-set@@TRAIN x))"
    , "                   :pattern"
    , "                   ( (dom@@TRAIN@@BLK (mk-fun@@TRAIN@@BLK x y)) ))))"
    , "(assert (forall ( (f1 (pfun TRAIN BLK))"
    , "                  (f2 (pfun TRAIN BLK))"
    , "                  (x TRAIN) )"
    , "                (! (=> (elem@@TRAIN x (dom@@TRAIN@@BLK f2))"
    , "                       (= (apply@@TRAIN@@BLK (ovl@@TRAIN@@BLK f1 f2) x)"
    , "                          (apply@@TRAIN@@BLK f2 x)))"
    , "                   :pattern"
    , "                   ( (apply@@TRAIN@@BLK (ovl@@TRAIN@@BLK f1 f2) x) ))))"
    , "(assert (forall ( (f1 (pfun TRAIN BLK))"
    , "                  (f2 (pfun TRAIN BLK))"
    , "                  (x TRAIN) )"
    , "                (! (=> (and (elem@@TRAIN x (dom@@TRAIN@@BLK f1))"
    , "                            (not (elem@@TRAIN x (dom@@TRAIN@@BLK f2))))"
    , "                       (= (apply@@TRAIN@@BLK (ovl@@TRAIN@@BLK f1 f2) x)"
    , "                          (apply@@TRAIN@@BLK f1 x)))"
    , "                   :pattern"
    , "                   ( (apply@@TRAIN@@BLK (ovl@@TRAIN@@BLK f1 f2) x) ))))"
    , "(assert (forall ( (f1 (pfun TRAIN BLK))"
    , "                  (s1 (set TRAIN)) )"
    , "                (! (= (dom@@TRAIN@@BLK (dom-subt@@TRAIN@@BLK s1 f1))"
    , "                      (set-diff@@TRAIN (dom@@TRAIN@@BLK f1) s1))"
    , "                   :pattern"
    , "                   ( (dom@@TRAIN@@BLK (dom-subt@@TRAIN@@BLK s1 f1)) ))))"
    , "(assert (forall ( (x TRAIN)"
    , "                  (y BLK) )"
    , "                (! (= (apply@@TRAIN@@BLK (mk-fun@@TRAIN@@BLK x y) x) y)"
    , "                   :pattern"
    , "                   ( (apply@@TRAIN@@BLK (mk-fun@@TRAIN@@BLK x y) x) ))))"
    , "(assert (forall ( (f1 (pfun TRAIN BLK))"
    , "                  (s1 (set TRAIN))"
    , "                  (x TRAIN) )"
    , "                (! (=> (and (elem@@TRAIN x s1)"
    , "                            (elem@@TRAIN x (dom@@TRAIN@@BLK f1)))"
    , "                       (= (apply@@TRAIN@@BLK (dom-rest@@TRAIN@@BLK s1 f1) x)"
    , "                          (apply@@TRAIN@@BLK f1 x)))"
    , "                   :pattern"
    , "                   ( (apply@@TRAIN@@BLK (dom-rest@@TRAIN@@BLK s1 f1) x) ))))"
    , "(assert (forall ( (f1 (pfun TRAIN BLK))"
    , "                  (s1 (set TRAIN))"
    , "                  (x TRAIN) )"
    , "                (! (=> (elem@@TRAIN x (set-diff@@TRAIN (dom@@TRAIN@@BLK f1) s1))"
    , "                       (= (apply@@TRAIN@@BLK (dom-subt@@TRAIN@@BLK s1 f1) x)"
    , "                          (apply@@TRAIN@@BLK f1 x)))"
    , "                   :pattern"
    , "                   ( (apply@@TRAIN@@BLK (dom-subt@@TRAIN@@BLK s1 f1) x) ))))"
    , "(assert (forall ( (x TRAIN) )"
    , "                (! (= (select empty-fun@@TRAIN@@BLK x)"
    , "                      (as Nothing (Maybe BLK)))"
    , "                   :pattern"
    , "                   ( (select empty-fun@@TRAIN@@BLK x) ))))"
    , "(assert (forall ( (x TRAIN)"
    , "                  (x2 TRAIN)"
    , "                  (y BLK) )"
    , "                (! (= (select (mk-fun@@TRAIN@@BLK x y) x2)"
    , "                      (ite (= x x2) (Just y) (as Nothing (Maybe BLK))))"
    , "                   :pattern"
    , "                   ( (select (mk-fun@@TRAIN@@BLK x y) x2) ))))"
    , "(assert (forall ( (x TRAIN)"
    , "                  (f1 (pfun TRAIN BLK))"
    , "                  (f2 (pfun TRAIN BLK)) )"
    , "                (! (= (select (ovl@@TRAIN@@BLK f1 f2) x)"
    , "                      (ite (= (select f2 x) (as Nothing (Maybe BLK)))"
    , "                           (select f1 x)"
    , "                           (select f2 x)))"
    , "                   :pattern"
    , "                   ( (select (ovl@@TRAIN@@BLK f1 f2) x) ))))"
    , "(assert (forall ( (x TRAIN)"
    , "                  (f1 (pfun TRAIN BLK)) )"
    , "                (! (= (select (dom@@TRAIN@@BLK f1) x)"
    , "                      (not (= (select f1 x) (as Nothing (Maybe BLK)))))"
    , "                   :pattern"
    , "                   ( (select (dom@@TRAIN@@BLK f1) x) ))))"
    , "(assert (forall ( (y BLK)"
    , "                  (f1 (pfun TRAIN BLK)) )"
    , "                (! (= (elem@@BLK y (set@@TRAIN@@BLK f1))"
    , "                      (exists ( (x TRAIN) )"
    , "                              (and (elem@@TRAIN x (dom@@TRAIN@@BLK f1))"
    , "                                   (= (apply@@TRAIN@@BLK f1 x) y))))"
    , "                   :pattern"
    , "                   ( (elem@@BLK y (set@@TRAIN@@BLK f1)) ))))"
    , "(assert (forall ( (x TRAIN)"
    , "                  (y BLK)"
    , "                  (f1 (pfun TRAIN BLK)) )"
    , "                (! (= (and (elem@@TRAIN x (dom@@TRAIN@@BLK f1))"
    , "                           (= (apply@@TRAIN@@BLK f1 x) y))"
    , "                      (= (select f1 x) (Just y)))"
    , "                   :pattern"
    , "                   ())))"
    , "(assert (forall ( (f1 (pfun TRAIN BLK))"
    , "                  (x2 TRAIN)"
    , "                  (x TRAIN)"
    , "                  (y BLK) )"
    , "                (! (=> (not (= x x2))"
    , "                       (= (apply@@TRAIN@@BLK (ovl@@TRAIN@@BLK f1 (mk-fun@@TRAIN@@BLK x y)) x2)"
    , "                          (apply@@TRAIN@@BLK f1 x2)))"
    , "                   :pattern"
    , "                   ( (apply@@TRAIN@@BLK (ovl@@TRAIN@@BLK f1 (mk-fun@@TRAIN@@BLK x y)) x2) ))))"
    , "(assert (forall ( (f1 (pfun TRAIN BLK))"
    , "                  (x TRAIN)"
    , "                  (y BLK) )"
    , "                (! (= (apply@@TRAIN@@BLK (ovl@@TRAIN@@BLK f1 (mk-fun@@TRAIN@@BLK x y)) x)"
    , "                      y)"
    , "                   :pattern"
    , "                   ( (apply@@TRAIN@@BLK (ovl@@TRAIN@@BLK f1 (mk-fun@@TRAIN@@BLK x y)) x) ))))"
    , "(assert (= (ran@@TRAIN@@BLK empty-fun@@TRAIN@@BLK)"
    , "           empty-set@@BLK))"
    , "(assert (forall ( (f1 (pfun TRAIN BLK))"
    , "                  (y BLK) )"
    , "                (! (= (elem@@BLK y (ran@@TRAIN@@BLK f1))"
    , "                      (exists ( (x TRAIN) )"
    , "                              (and true"
    , "                                   (and (elem@@TRAIN x (dom@@TRAIN@@BLK f1))"
    , "                                        (= (apply@@TRAIN@@BLK f1 x) y)))))"
    , "                   :pattern"
    , "                   ( (elem@@BLK y (ran@@TRAIN@@BLK f1)) ))))"
    , "(assert (forall ( (x TRAIN)"
    , "                  (y BLK) )"
    , "                (! (= (ran@@TRAIN@@BLK (mk-fun@@TRAIN@@BLK x y))"
    , "                      (mk-set@@BLK y))"
    , "                   :pattern"
    , "                   ( (ran@@TRAIN@@BLK (mk-fun@@TRAIN@@BLK x y)) ))))"
    , "(assert (forall ( (f1 (pfun TRAIN BLK))"
    , "                  (f2 (pfun TRAIN BLK)) )"
    , "                (! (subset (ran@@TRAIN@@BLK (ovl@@TRAIN@@BLK f1 f2))"
    , "                           (union (ran@@TRAIN@@BLK f1) (ran@@TRAIN@@BLK f2)))"
    , "                   :pattern"
    , "                   ( (subset (ran@@TRAIN@@BLK (ovl@@TRAIN@@BLK f1 f2))"
    , "                             (union (ran@@TRAIN@@BLK f1) (ran@@TRAIN@@BLK f2))) ))))"
    , "(assert (forall ( (f1 (pfun TRAIN BLK)) )"
    , "                (! (= (injective@@TRAIN@@BLK f1)"
    , "                      (forall ( (x TRAIN)"
    , "                                (x2 TRAIN) )"
    , "                              (=> (and (elem@@TRAIN x (dom@@TRAIN@@BLK f1))"
    , "                                       (elem@@TRAIN x2 (dom@@TRAIN@@BLK f1)))"
    , "                                  (=> (= (apply@@TRAIN@@BLK f1 x)"
    , "                                         (apply@@TRAIN@@BLK f1 x2))"
    , "                                      (= x x2)))))"
    , "                   :pattern"
    , "                   ( (injective@@TRAIN@@BLK f1) ))))"
    , "(assert (forall ( (f1 (pfun TRAIN BLK))"
    , "                  (x TRAIN) )"
    , "                (! (=> (and (injective@@TRAIN@@BLK f1)"
    , "                            (elem@@TRAIN x (dom@@TRAIN@@BLK f1)))"
    , "                       (= (ran@@TRAIN@@BLK (dom-subt@@TRAIN@@BLK (mk-set@@TRAIN x) f1))"
    , "                          (set-diff@@BLK (ran@@TRAIN@@BLK f1)"
    , "                                         (mk-set@@BLK (apply@@TRAIN@@BLK f1 x)))))"
    , "                   :pattern"
    , "                   ( (ran@@TRAIN@@BLK (dom-subt@@TRAIN@@BLK (mk-set@@TRAIN x) f1)) ))))"
    , "(assert (forall ( (f1 (pfun TRAIN BLK))"
    , "                  (x TRAIN)"
    , "                  (x2 TRAIN) )"
    , "                (! (=> (and (not (= x x2))"
    , "                            (elem@@TRAIN x2 (dom@@TRAIN@@BLK f1)))"
    , "                       (= (apply@@TRAIN@@BLK (dom-subt@@TRAIN@@BLK (mk-set@@TRAIN x) f1) x2)"
    , "                          (apply@@TRAIN@@BLK f1 x2)))"
    , "                   :pattern"
    , "                   ( (apply@@TRAIN@@BLK (dom-subt@@TRAIN@@BLK (mk-set@@TRAIN x) f1) x2) ))))"
    , "(assert (forall ( (f1 (pfun TRAIN BLK))"
    , "                  (x TRAIN) )"
    , "                (! (=> (elem@@TRAIN x (dom@@TRAIN@@BLK f1))"
    , "                       (= (apply@@TRAIN@@BLK (dom-rest@@TRAIN@@BLK (mk-set@@TRAIN x) f1) x)"
    , "                          (apply@@TRAIN@@BLK f1 x)))"
    , "                   :pattern"
    , "                   ( (apply@@TRAIN@@BLK (dom-rest@@TRAIN@@BLK (mk-set@@TRAIN x) f1) x) ))))"
    , "(assert (forall ( (f1 (pfun TRAIN BLK))"
    , "                  (x TRAIN)"
    , "                  (s1 (set TRAIN)) )"
    , "                (! (=> (and (not (elem@@TRAIN x s1))"
    , "                            (elem@@TRAIN x (dom@@TRAIN@@BLK f1)))"
    , "                       (= (apply@@TRAIN@@BLK (dom-subt@@TRAIN@@BLK s1 f1) x)"
    , "                          (apply@@TRAIN@@BLK f1 x)))"
    , "                   :pattern"
    , "                   ( (apply@@TRAIN@@BLK (dom-subt@@TRAIN@@BLK s1 f1) x) ))))"
    , "(assert (forall ( (f1 (pfun TRAIN BLK))"
    , "                  (x TRAIN)"
    , "                  (s1 (set TRAIN)) )"
    , "                (! (=> (and (elem@@TRAIN x s1)"
    , "                            (elem@@TRAIN x (dom@@TRAIN@@BLK f1)))"
    , "                       (= (apply@@TRAIN@@BLK (dom-rest@@TRAIN@@BLK s1 f1) x)"
    , "                          (apply@@TRAIN@@BLK f1 x)))"
    , "                   :pattern"
    , "                   ( (apply@@TRAIN@@BLK (dom-rest@@TRAIN@@BLK s1 f1) x) ))))"
    , "(assert (forall ( (f1 (pfun TRAIN BLK))"
    , "                  (x TRAIN) )"
    , "                (! (=> (elem@@TRAIN x (dom@@TRAIN@@BLK f1))"
    , "                       (elem@@BLK (apply@@TRAIN@@BLK f1 x) (ran@@TRAIN@@BLK f1)))"
    , "                   :pattern"
    , "                   ( (elem@@BLK (apply@@TRAIN@@BLK f1 x) (ran@@TRAIN@@BLK f1)) ))))"
    , "(assert (forall ( (f1 (pfun TRAIN BLK))"
    , "                  (x TRAIN)"
    , "                  (s1 (set TRAIN)) )"
    , "                (! (=> (elem@@TRAIN x (set-diff@@TRAIN (dom@@TRAIN@@BLK f1) s1))"
    , "                       (elem@@BLK (apply@@TRAIN@@BLK f1 x)"
    , "                                  (ran@@TRAIN@@BLK (dom-subt@@TRAIN@@BLK s1 f1))))"
    , "                   :pattern"
    , "                   ( (elem@@BLK (apply@@TRAIN@@BLK f1 x)"
    , "                                (ran@@TRAIN@@BLK (dom-subt@@TRAIN@@BLK s1 f1))) ))))"
    , "(assert (forall ( (f1 (pfun TRAIN BLK))"
    , "                  (x TRAIN)"
    , "                  (s1 (set TRAIN)) )"
    , "                (! (=> (elem@@TRAIN x (intersect (dom@@TRAIN@@BLK f1) s1))"
    , "                       (elem@@BLK (apply@@TRAIN@@BLK f1 x)"
    , "                                  (ran@@TRAIN@@BLK (dom-rest@@TRAIN@@BLK s1 f1))))"
    , "                   :pattern"
    , "                   ( (elem@@BLK (apply@@TRAIN@@BLK f1 x)"
    , "                                (ran@@TRAIN@@BLK (dom-rest@@TRAIN@@BLK s1 f1))) ))))"
    , "(assert (forall ( (f1 (pfun TRAIN BLK))"
    , "                  (x TRAIN)"
    , "                  (y BLK) )"
    , "                (! (=> (and (elem@@TRAIN x (dom@@TRAIN@@BLK f1))"
    , "                            (injective@@TRAIN@@BLK f1))"
    , "                       (= (ran@@TRAIN@@BLK (ovl@@TRAIN@@BLK f1 (mk-fun@@TRAIN@@BLK x y)))"
    , "                          (union (set-diff@@BLK (ran@@TRAIN@@BLK f1)"
    , "                                                (mk-set@@BLK (apply@@TRAIN@@BLK f1 x)))"
    , "                                 (mk-set@@BLK y))))"
    , "                   :pattern"
    , "                   ( (ran@@TRAIN@@BLK (ovl@@TRAIN@@BLK f1 (mk-fun@@TRAIN@@BLK x y))) ))))"
    , "(assert (forall ( (f1 (pfun TRAIN BLK))"
    , "                  (x TRAIN)"
    , "                  (y BLK) )"
    , "                (! (=> (not (elem@@TRAIN x (dom@@TRAIN@@BLK f1)))"
    , "                       (= (ran@@TRAIN@@BLK (ovl@@TRAIN@@BLK f1 (mk-fun@@TRAIN@@BLK x y)))"
    , "                          (union (ran@@TRAIN@@BLK f1) (mk-set@@BLK y))))"
    , "                   :pattern"
    , "                   ( (ran@@TRAIN@@BLK (ovl@@TRAIN@@BLK f1 (mk-fun@@TRAIN@@BLK x y))) ))))"
    , "(assert (forall ( (f1 (pfun TRAIN BLK))"
    , "                  (y BLK) )"
    , "                (! (= (= (set@@TRAIN@@BLK f1) (mk-set@@BLK y))"
    , "                      (forall ( (x TRAIN) )"
    , "                              (=> true"
    , "                                  (or (= (select f1 x) (Just y))"
    , "                                      (= (select f1 x) (as Nothing (Maybe BLK)))))))"
    , "                   :pattern"
    , "                   ())))"
    , "(assert (forall ( (x BLK)"
    , "                  (y BLK) )"
    , "                (! (= (elem@@BLK x (mk-set@@BLK y)) (= x y))"
    , "                   :pattern"
    , "                   ( (elem@@BLK x (mk-set@@BLK y)) ))))"
    , "(assert (forall ( (x TRAIN)"
    , "                  (y TRAIN) )"
    , "                (! (= (elem@@TRAIN x (mk-set@@TRAIN y)) (= x y))"
    , "                   :pattern"
    , "                   ( (elem@@TRAIN x (mk-set@@TRAIN y)) ))))"
    , "(assert (not (exists ( (t@param TRAIN) )"
    , "                     (and true"
    , "                          (and (=> (and (= in@prime"
    , "                                           (set-diff@@TRAIN in (mk-set@@TRAIN t@param)))"
    , "                                        (= loc@prime"
    , "                                           (dom-subt@@TRAIN@@BLK (mk-set@@TRAIN t@param) loc))"
    , "                                        (elem@@TRAIN t@param in)"
    , "                                        (= (apply@@TRAIN@@BLK loc t@param) ext)"
    , "                                        (elem@@TRAIN t@param in)"
    , "                                        (= (apply@@TRAIN@@BLK loc t@param) ext))"
    , "                                   (=> (and (elem@@TRAIN t in)"
    , "                                            (= (apply@@TRAIN@@BLK loc t) ext))"
    , "                                       (not (and (elem@@TRAIN t in@prime)"
    , "                                                 (= (apply@@TRAIN@@BLK loc@prime t) ext)))))"
    , "                               (=> (and (elem@@TRAIN t in)"
    , "                                        (= (apply@@TRAIN@@BLK loc t) ext))"
    , "                                   (and (elem@@TRAIN t@param in)"
    , "                                        (= (apply@@TRAIN@@BLK loc t@param) ext))))))))"
    , "; asm0"
    , "(assert (and (not (elem@@BLK ext plf)) (not (= ext ent))))"
    , "; asm1"
    , "(assert (forall ( (b BLK) )"
    , "                (! (= (elem@@BLK b BLK)"
    , "                      (or (elem@@BLK b plf) (= b ent) (= b ext)))"
    , "                   :pattern"
    , "                   ( (elem@@BLK b BLK) ))))"
    , "; asm2"
    , "(assert (exists ( (b BLK) ) (and true (elem@@BLK b plf))))"
    , "; asm3"
    , "(assert (not (elem@@BLK ent plf)))"
    , "; asm7"
    , "(assert (and (= (union (mk-set@@BLK ext) plf)"
    , "                (compl@@BLK (mk-set@@BLK ent)))"
    , "             (= (union (mk-set@@BLK ent) plf)"
    , "                (compl@@BLK (mk-set@@BLK ext)))"
    , "             (= (union (mk-set@@BLK ext) (mk-set@@BLK ent))"
    , "                (compl@@BLK plf))))"
    , "; inv0"
    , "(assert (= (dom@@TRAIN@@BLK loc) in))"
    , "; m2:inv0"
    , "(assert (injective@@TRAIN@@BLK loc))"
    , "(assert (not (exists ( (t@param TRAIN) )"
    , "                     (and true"
    , "                          (and (=> (and (= in@prime"
    , "                                           (set-diff@@TRAIN in (mk-set@@TRAIN t@param)))"
    , "                                        (= loc@prime"
    , "                                           (dom-subt@@TRAIN@@BLK (mk-set@@TRAIN t@param) loc))"
    , "                                        (elem@@TRAIN t@param in)"
    , "                                        (= (apply@@TRAIN@@BLK loc t@param) ext)"
    , "                                        (elem@@TRAIN t@param in)"
    , "                                        (= (apply@@TRAIN@@BLK loc t@param) ext))"
    , "                                   (=> (and (elem@@TRAIN t in)"
    , "                                            (= (apply@@TRAIN@@BLK loc t) ext))"
    , "                                       (not (and (elem@@TRAIN t in@prime)"
    , "                                                 (= (apply@@TRAIN@@BLK loc@prime t) ext)))))"
    , "                               (=> (and (elem@@TRAIN t in)"
    , "                                        (= (apply@@TRAIN@@BLK loc t) ext))"
    , "                                   (and (elem@@TRAIN t@param in)"
    , "                                        (= (apply@@TRAIN@@BLK loc t@param) ext))))))))"
    , "(check-sat-using (or-else (then qe smt)"
    , "                          (then simplify smt)"
    , "                          (then skip smt)"
    , "                          (then (using-params simplify :expand-power true) smt)))"
    ]


case8 :: IO String
case8 = proof_obligation path0 "m3/m1:moveout/SCH/m3/2/REF/delay/saf/rhs" 3

result8 :: String
result8 = unlines
    [ "(declare-datatypes (a) ( (Maybe (Just (fromJust a)) Nothing) ))"
    , "(declare-datatypes () ( (Null null) ))"
    , "(declare-datatypes (a b) ( (Pair (pair (first a) (second b))) ))"
    , "(declare-sort BLK 0)"
    , "; comment: we don't need to declare the sort Bool"
    , "; comment: we don't need to declare the sort Int"
    , "; comment: we don't need to declare the sort Real"
    , "(declare-sort TRAIN 0)"
    , "(define-sort pfun (a b) (Array a (Maybe b)))"
    , "(define-sort set (a) (Array a Bool))"
    , "(declare-const ent BLK)"
    , "(declare-const ext BLK)"
    , "(declare-const in (set TRAIN))"
    , "(declare-const in@prime (set TRAIN))"
    , "(declare-const isgn Bool)"
    , "(declare-const isgn@prime Bool)"
    , "(declare-const loc (pfun TRAIN BLK))"
    , "(declare-const loc@prime (pfun TRAIN BLK))"
    , "(declare-const osgn (set BLK))"
    , "(declare-const osgn@prime (set BLK))"
    , "(declare-const plf (set BLK))"
    , "(declare-const t TRAIN)"
    , "(declare-const t0 TRAIN)"
    , "(declare-fun apply@@TRAIN@@BLK ( (pfun TRAIN BLK) TRAIN ) BLK)"
    , "(declare-fun dom-rest@@TRAIN@@BLK"
    , "             ( (set TRAIN)"
    , "               (pfun TRAIN BLK) )"
    , "             (pfun TRAIN BLK))"
    , "(declare-fun dom-subt@@TRAIN@@BLK"
    , "             ( (set TRAIN)"
    , "               (pfun TRAIN BLK) )"
    , "             (pfun TRAIN BLK))"
    , "(declare-fun dom@@TRAIN@@BLK ( (pfun TRAIN BLK) ) (set TRAIN))"
    , "(declare-fun empty-fun@@TRAIN@@BLK () (pfun TRAIN BLK))"
    , "(declare-fun injective@@TRAIN@@BLK ( (pfun TRAIN BLK) ) Bool)"
    , "(declare-fun mk-fun@@TRAIN@@BLK (TRAIN BLK) (pfun TRAIN BLK))"
    , "(declare-fun mk-set@@BLK (BLK) (set BLK))"
    , "(declare-fun mk-set@@TRAIN (TRAIN) (set TRAIN))"
    , "(declare-fun ovl@@TRAIN@@BLK"
    , "             ( (pfun TRAIN BLK)"
    , "               (pfun TRAIN BLK) )"
    , "             (pfun TRAIN BLK))"
    , "(declare-fun ran@@TRAIN@@BLK ( (pfun TRAIN BLK) ) (set BLK))"
    , "(declare-fun set@@TRAIN@@BLK ( (pfun TRAIN BLK) ) (set BLK))"
    , "(define-fun BLK () (set BLK) ( (as const (set BLK)) true ))"
    , "(define-fun TRAIN"
    , "            ()"
    , "            (set TRAIN)"
    , "            ( (as const (set TRAIN))"
    , "              true ))"
    , "(define-fun compl@@BLK"
    , "            ( (s1 (set BLK)) )"
    , "            (set BLK)"
    , "            ((_ map not) s1))"
    , "(define-fun compl@@TRAIN"
    , "            ( (s1 (set TRAIN)) )"
    , "            (set TRAIN)"
    , "            ((_ map not) s1))"
    , "(define-fun elem@@BLK"
    , "            ( (x BLK)"
    , "              (s1 (set BLK)) )"
    , "            Bool"
    , "            (select s1 x))"
    , "(define-fun elem@@TRAIN"
    , "            ( (x TRAIN)"
    , "              (s1 (set TRAIN)) )"
    , "            Bool"
    , "            (select s1 x))"
    , "(define-fun empty-set@@BLK"
    , "            ()"
    , "            (set BLK)"
    , "            ( (as const (set BLK))"
    , "              false ))"
    , "(define-fun empty-set@@TRAIN"
    , "            ()"
    , "            (set TRAIN)"
    , "            ( (as const (set TRAIN))"
    , "              false ))"
    , "(define-fun set-diff@@BLK"
    , "            ( (s1 (set BLK))"
    , "              (s2 (set BLK)) )"
    , "            (set BLK)"
    , "            (intersect s1 ((_ map not) s2)))"
    , "(define-fun set-diff@@TRAIN"
    , "            ( (s1 (set TRAIN))"
    , "              (s2 (set TRAIN)) )"
    , "            (set TRAIN)"
    , "            (intersect s1 ((_ map not) s2)))"
    , "(define-fun st-subset@@BLK"
    , "            ( (s1 (set BLK))"
    , "              (s2 (set BLK)) )"
    , "            Bool"
    , "            (and (subset s1 s2) (not (= s1 s2))))"
    , "(define-fun st-subset@@TRAIN"
    , "            ( (s1 (set TRAIN))"
    , "              (s2 (set TRAIN)) )"
    , "            Bool"
    , "            (and (subset s1 s2) (not (= s1 s2))))"
    , "(assert (forall ( (f1 (pfun TRAIN BLK))"
    , "                  (f2 (pfun TRAIN BLK)) )"
    , "                (! (= (dom@@TRAIN@@BLK (ovl@@TRAIN@@BLK f1 f2))"
    , "                      (union (dom@@TRAIN@@BLK f1) (dom@@TRAIN@@BLK f2)))"
    , "                   :pattern"
    , "                   ( (dom@@TRAIN@@BLK (ovl@@TRAIN@@BLK f1 f2)) ))))"
    , "(assert (= (dom@@TRAIN@@BLK empty-fun@@TRAIN@@BLK)"
    , "           empty-set@@TRAIN))"
    , "(assert (forall ( (x TRAIN)"
    , "                  (y BLK) )"
    , "                (! (= (dom@@TRAIN@@BLK (mk-fun@@TRAIN@@BLK x y))"
    , "                      (mk-set@@TRAIN x))"
    , "                   :pattern"
    , "                   ( (dom@@TRAIN@@BLK (mk-fun@@TRAIN@@BLK x y)) ))))"
    , "(assert (forall ( (f1 (pfun TRAIN BLK))"
    , "                  (f2 (pfun TRAIN BLK))"
    , "                  (x TRAIN) )"
    , "                (! (=> (elem@@TRAIN x (dom@@TRAIN@@BLK f2))"
    , "                       (= (apply@@TRAIN@@BLK (ovl@@TRAIN@@BLK f1 f2) x)"
    , "                          (apply@@TRAIN@@BLK f2 x)))"
    , "                   :pattern"
    , "                   ( (apply@@TRAIN@@BLK (ovl@@TRAIN@@BLK f1 f2) x) ))))"
    , "(assert (forall ( (f1 (pfun TRAIN BLK))"
    , "                  (f2 (pfun TRAIN BLK))"
    , "                  (x TRAIN) )"
    , "                (! (=> (and (elem@@TRAIN x (dom@@TRAIN@@BLK f1))"
    , "                            (not (elem@@TRAIN x (dom@@TRAIN@@BLK f2))))"
    , "                       (= (apply@@TRAIN@@BLK (ovl@@TRAIN@@BLK f1 f2) x)"
    , "                          (apply@@TRAIN@@BLK f1 x)))"
    , "                   :pattern"
    , "                   ( (apply@@TRAIN@@BLK (ovl@@TRAIN@@BLK f1 f2) x) ))))"
    , "(assert (forall ( (f1 (pfun TRAIN BLK))"
    , "                  (s1 (set TRAIN)) )"
    , "                (! (= (dom@@TRAIN@@BLK (dom-subt@@TRAIN@@BLK s1 f1))"
    , "                      (set-diff@@TRAIN (dom@@TRAIN@@BLK f1) s1))"
    , "                   :pattern"
    , "                   ( (dom@@TRAIN@@BLK (dom-subt@@TRAIN@@BLK s1 f1)) ))))"
    , "(assert (forall ( (x TRAIN)"
    , "                  (y BLK) )"
    , "                (! (= (apply@@TRAIN@@BLK (mk-fun@@TRAIN@@BLK x y) x) y)"
    , "                   :pattern"
    , "                   ( (apply@@TRAIN@@BLK (mk-fun@@TRAIN@@BLK x y) x) ))))"
    , "(assert (forall ( (f1 (pfun TRAIN BLK))"
    , "                  (s1 (set TRAIN))"
    , "                  (x TRAIN) )"
    , "                (! (=> (and (elem@@TRAIN x s1)"
    , "                            (elem@@TRAIN x (dom@@TRAIN@@BLK f1)))"
    , "                       (= (apply@@TRAIN@@BLK (dom-rest@@TRAIN@@BLK s1 f1) x)"
    , "                          (apply@@TRAIN@@BLK f1 x)))"
    , "                   :pattern"
    , "                   ( (apply@@TRAIN@@BLK (dom-rest@@TRAIN@@BLK s1 f1) x) ))))"
    , "(assert (forall ( (f1 (pfun TRAIN BLK))"
    , "                  (s1 (set TRAIN))"
    , "                  (x TRAIN) )"
    , "                (! (=> (elem@@TRAIN x (set-diff@@TRAIN (dom@@TRAIN@@BLK f1) s1))"
    , "                       (= (apply@@TRAIN@@BLK (dom-subt@@TRAIN@@BLK s1 f1) x)"
    , "                          (apply@@TRAIN@@BLK f1 x)))"
    , "                   :pattern"
    , "                   ( (apply@@TRAIN@@BLK (dom-subt@@TRAIN@@BLK s1 f1) x) ))))"
    , "(assert (forall ( (x TRAIN) )"
    , "                (! (= (select empty-fun@@TRAIN@@BLK x)"
    , "                      (as Nothing (Maybe BLK)))"
    , "                   :pattern"
    , "                   ( (select empty-fun@@TRAIN@@BLK x) ))))"
    , "(assert (forall ( (x TRAIN)"
    , "                  (x2 TRAIN)"
    , "                  (y BLK) )"
    , "                (! (= (select (mk-fun@@TRAIN@@BLK x y) x2)"
    , "                      (ite (= x x2) (Just y) (as Nothing (Maybe BLK))))"
    , "                   :pattern"
    , "                   ( (select (mk-fun@@TRAIN@@BLK x y) x2) ))))"
    , "(assert (forall ( (x TRAIN)"
    , "                  (f1 (pfun TRAIN BLK))"
    , "                  (f2 (pfun TRAIN BLK)) )"
    , "                (! (= (select (ovl@@TRAIN@@BLK f1 f2) x)"
    , "                      (ite (= (select f2 x) (as Nothing (Maybe BLK)))"
    , "                           (select f1 x)"
    , "                           (select f2 x)))"
    , "                   :pattern"
    , "                   ( (select (ovl@@TRAIN@@BLK f1 f2) x) ))))"
    , "(assert (forall ( (x TRAIN)"
    , "                  (f1 (pfun TRAIN BLK)) )"
    , "                (! (= (select (dom@@TRAIN@@BLK f1) x)"
    , "                      (not (= (select f1 x) (as Nothing (Maybe BLK)))))"
    , "                   :pattern"
    , "                   ( (select (dom@@TRAIN@@BLK f1) x) ))))"
    , "(assert (forall ( (y BLK)"
    , "                  (f1 (pfun TRAIN BLK)) )"
    , "                (! (= (elem@@BLK y (set@@TRAIN@@BLK f1))"
    , "                      (exists ( (x TRAIN) )"
    , "                              (and (elem@@TRAIN x (dom@@TRAIN@@BLK f1))"
    , "                                   (= (apply@@TRAIN@@BLK f1 x) y))))"
    , "                   :pattern"
    , "                   ( (elem@@BLK y (set@@TRAIN@@BLK f1)) ))))"
    , "(assert (forall ( (x TRAIN)"
    , "                  (y BLK)"
    , "                  (f1 (pfun TRAIN BLK)) )"
    , "                (! (= (and (elem@@TRAIN x (dom@@TRAIN@@BLK f1))"
    , "                           (= (apply@@TRAIN@@BLK f1 x) y))"
    , "                      (= (select f1 x) (Just y)))"
    , "                   :pattern"
    , "                   ())))"
    , "(assert (forall ( (f1 (pfun TRAIN BLK))"
    , "                  (x2 TRAIN)"
    , "                  (x TRAIN)"
    , "                  (y BLK) )"
    , "                (! (=> (not (= x x2))"
    , "                       (= (apply@@TRAIN@@BLK (ovl@@TRAIN@@BLK f1 (mk-fun@@TRAIN@@BLK x y)) x2)"
    , "                          (apply@@TRAIN@@BLK f1 x2)))"
    , "                   :pattern"
    , "                   ( (apply@@TRAIN@@BLK (ovl@@TRAIN@@BLK f1 (mk-fun@@TRAIN@@BLK x y)) x2) ))))"
    , "(assert (forall ( (f1 (pfun TRAIN BLK))"
    , "                  (x TRAIN)"
    , "                  (y BLK) )"
    , "                (! (= (apply@@TRAIN@@BLK (ovl@@TRAIN@@BLK f1 (mk-fun@@TRAIN@@BLK x y)) x)"
    , "                      y)"
    , "                   :pattern"
    , "                   ( (apply@@TRAIN@@BLK (ovl@@TRAIN@@BLK f1 (mk-fun@@TRAIN@@BLK x y)) x) ))))"
    , "(assert (= (ran@@TRAIN@@BLK empty-fun@@TRAIN@@BLK)"
    , "           empty-set@@BLK))"
    , "(assert (forall ( (f1 (pfun TRAIN BLK))"
    , "                  (y BLK) )"
    , "                (! (= (elem@@BLK y (ran@@TRAIN@@BLK f1))"
    , "                      (exists ( (x TRAIN) )"
    , "                              (and true"
    , "                                   (and (elem@@TRAIN x (dom@@TRAIN@@BLK f1))"
    , "                                        (= (apply@@TRAIN@@BLK f1 x) y)))))"
    , "                   :pattern"
    , "                   ( (elem@@BLK y (ran@@TRAIN@@BLK f1)) ))))"
    , "(assert (forall ( (x TRAIN)"
    , "                  (y BLK) )"
    , "                (! (= (ran@@TRAIN@@BLK (mk-fun@@TRAIN@@BLK x y))"
    , "                      (mk-set@@BLK y))"
    , "                   :pattern"
    , "                   ( (ran@@TRAIN@@BLK (mk-fun@@TRAIN@@BLK x y)) ))))"
    , "(assert (forall ( (f1 (pfun TRAIN BLK))"
    , "                  (f2 (pfun TRAIN BLK)) )"
    , "                (! (subset (ran@@TRAIN@@BLK (ovl@@TRAIN@@BLK f1 f2))"
    , "                           (union (ran@@TRAIN@@BLK f1) (ran@@TRAIN@@BLK f2)))"
    , "                   :pattern"
    , "                   ( (subset (ran@@TRAIN@@BLK (ovl@@TRAIN@@BLK f1 f2))"
    , "                             (union (ran@@TRAIN@@BLK f1) (ran@@TRAIN@@BLK f2))) ))))"
    , "(assert (forall ( (f1 (pfun TRAIN BLK)) )"
    , "                (! (= (injective@@TRAIN@@BLK f1)"
    , "                      (forall ( (x TRAIN)"
    , "                                (x2 TRAIN) )"
    , "                              (=> (and (elem@@TRAIN x (dom@@TRAIN@@BLK f1))"
    , "                                       (elem@@TRAIN x2 (dom@@TRAIN@@BLK f1)))"
    , "                                  (=> (= (apply@@TRAIN@@BLK f1 x)"
    , "                                         (apply@@TRAIN@@BLK f1 x2))"
    , "                                      (= x x2)))))"
    , "                   :pattern"
    , "                   ( (injective@@TRAIN@@BLK f1) ))))"
    , "(assert (forall ( (f1 (pfun TRAIN BLK))"
    , "                  (x TRAIN) )"
    , "                (! (=> (and (injective@@TRAIN@@BLK f1)"
    , "                            (elem@@TRAIN x (dom@@TRAIN@@BLK f1)))"
    , "                       (= (ran@@TRAIN@@BLK (dom-subt@@TRAIN@@BLK (mk-set@@TRAIN x) f1))"
    , "                          (set-diff@@BLK (ran@@TRAIN@@BLK f1)"
    , "                                         (mk-set@@BLK (apply@@TRAIN@@BLK f1 x)))))"
    , "                   :pattern"
    , "                   ( (ran@@TRAIN@@BLK (dom-subt@@TRAIN@@BLK (mk-set@@TRAIN x) f1)) ))))"
    , "(assert (forall ( (f1 (pfun TRAIN BLK))"
    , "                  (x TRAIN)"
    , "                  (x2 TRAIN) )"
    , "                (! (=> (and (not (= x x2))"
    , "                            (elem@@TRAIN x2 (dom@@TRAIN@@BLK f1)))"
    , "                       (= (apply@@TRAIN@@BLK (dom-subt@@TRAIN@@BLK (mk-set@@TRAIN x) f1) x2)"
    , "                          (apply@@TRAIN@@BLK f1 x2)))"
    , "                   :pattern"
    , "                   ( (apply@@TRAIN@@BLK (dom-subt@@TRAIN@@BLK (mk-set@@TRAIN x) f1) x2) ))))"
    , "(assert (forall ( (f1 (pfun TRAIN BLK))"
    , "                  (x TRAIN) )"
    , "                (! (=> (elem@@TRAIN x (dom@@TRAIN@@BLK f1))"
    , "                       (= (apply@@TRAIN@@BLK (dom-rest@@TRAIN@@BLK (mk-set@@TRAIN x) f1) x)"
    , "                          (apply@@TRAIN@@BLK f1 x)))"
    , "                   :pattern"
    , "                   ( (apply@@TRAIN@@BLK (dom-rest@@TRAIN@@BLK (mk-set@@TRAIN x) f1) x) ))))"
    , "(assert (forall ( (f1 (pfun TRAIN BLK))"
    , "                  (x TRAIN)"
    , "                  (s1 (set TRAIN)) )"
    , "                (! (=> (and (not (elem@@TRAIN x s1))"
    , "                            (elem@@TRAIN x (dom@@TRAIN@@BLK f1)))"
    , "                       (= (apply@@TRAIN@@BLK (dom-subt@@TRAIN@@BLK s1 f1) x)"
    , "                          (apply@@TRAIN@@BLK f1 x)))"
    , "                   :pattern"
    , "                   ( (apply@@TRAIN@@BLK (dom-subt@@TRAIN@@BLK s1 f1) x) ))))"
    , "(assert (forall ( (f1 (pfun TRAIN BLK))"
    , "                  (x TRAIN)"
    , "                  (s1 (set TRAIN)) )"
    , "                (! (=> (and (elem@@TRAIN x s1)"
    , "                            (elem@@TRAIN x (dom@@TRAIN@@BLK f1)))"
    , "                       (= (apply@@TRAIN@@BLK (dom-rest@@TRAIN@@BLK s1 f1) x)"
    , "                          (apply@@TRAIN@@BLK f1 x)))"
    , "                   :pattern"
    , "                   ( (apply@@TRAIN@@BLK (dom-rest@@TRAIN@@BLK s1 f1) x) ))))"
    , "(assert (forall ( (f1 (pfun TRAIN BLK))"
    , "                  (x TRAIN) )"
    , "                (! (=> (elem@@TRAIN x (dom@@TRAIN@@BLK f1))"
    , "                       (elem@@BLK (apply@@TRAIN@@BLK f1 x) (ran@@TRAIN@@BLK f1)))"
    , "                   :pattern"
    , "                   ( (elem@@BLK (apply@@TRAIN@@BLK f1 x) (ran@@TRAIN@@BLK f1)) ))))"
    , "(assert (forall ( (f1 (pfun TRAIN BLK))"
    , "                  (x TRAIN)"
    , "                  (s1 (set TRAIN)) )"
    , "                (! (=> (elem@@TRAIN x (set-diff@@TRAIN (dom@@TRAIN@@BLK f1) s1))"
    , "                       (elem@@BLK (apply@@TRAIN@@BLK f1 x)"
    , "                                  (ran@@TRAIN@@BLK (dom-subt@@TRAIN@@BLK s1 f1))))"
    , "                   :pattern"
    , "                   ( (elem@@BLK (apply@@TRAIN@@BLK f1 x)"
    , "                                (ran@@TRAIN@@BLK (dom-subt@@TRAIN@@BLK s1 f1))) ))))"
    , "(assert (forall ( (f1 (pfun TRAIN BLK))"
    , "                  (x TRAIN)"
    , "                  (s1 (set TRAIN)) )"
    , "                (! (=> (elem@@TRAIN x (intersect (dom@@TRAIN@@BLK f1) s1))"
    , "                       (elem@@BLK (apply@@TRAIN@@BLK f1 x)"
    , "                                  (ran@@TRAIN@@BLK (dom-rest@@TRAIN@@BLK s1 f1))))"
    , "                   :pattern"
    , "                   ( (elem@@BLK (apply@@TRAIN@@BLK f1 x)"
    , "                                (ran@@TRAIN@@BLK (dom-rest@@TRAIN@@BLK s1 f1))) ))))"
    , "(assert (forall ( (f1 (pfun TRAIN BLK))"
    , "                  (x TRAIN)"
    , "                  (y BLK) )"
    , "                (! (=> (and (elem@@TRAIN x (dom@@TRAIN@@BLK f1))"
    , "                            (injective@@TRAIN@@BLK f1))"
    , "                       (= (ran@@TRAIN@@BLK (ovl@@TRAIN@@BLK f1 (mk-fun@@TRAIN@@BLK x y)))"
    , "                          (union (set-diff@@BLK (ran@@TRAIN@@BLK f1)"
    , "                                                (mk-set@@BLK (apply@@TRAIN@@BLK f1 x)))"
    , "                                 (mk-set@@BLK y))))"
    , "                   :pattern"
    , "                   ( (ran@@TRAIN@@BLK (ovl@@TRAIN@@BLK f1 (mk-fun@@TRAIN@@BLK x y))) ))))"
    , "(assert (forall ( (f1 (pfun TRAIN BLK))"
    , "                  (x TRAIN)"
    , "                  (y BLK) )"
    , "                (! (=> (not (elem@@TRAIN x (dom@@TRAIN@@BLK f1)))"
    , "                       (= (ran@@TRAIN@@BLK (ovl@@TRAIN@@BLK f1 (mk-fun@@TRAIN@@BLK x y)))"
    , "                          (union (ran@@TRAIN@@BLK f1) (mk-set@@BLK y))))"
    , "                   :pattern"
    , "                   ( (ran@@TRAIN@@BLK (ovl@@TRAIN@@BLK f1 (mk-fun@@TRAIN@@BLK x y))) ))))"
    , "(assert (forall ( (f1 (pfun TRAIN BLK))"
    , "                  (y BLK) )"
    , "                (! (= (= (set@@TRAIN@@BLK f1) (mk-set@@BLK y))"
    , "                      (forall ( (x TRAIN) )"
    , "                              (=> true"
    , "                                  (or (= (select f1 x) (Just y))"
    , "                                      (= (select f1 x) (as Nothing (Maybe BLK)))))))"
    , "                   :pattern"
    , "                   ())))"
    , "(assert (forall ( (x BLK)"
    , "                  (y BLK) )"
    , "                (! (= (elem@@BLK x (mk-set@@BLK y)) (= x y))"
    , "                   :pattern"
    , "                   ( (elem@@BLK x (mk-set@@BLK y)) ))))"
    , "(assert (forall ( (x TRAIN)"
    , "                  (y TRAIN) )"
    , "                (! (= (elem@@TRAIN x (mk-set@@TRAIN y)) (= x y))"
    , "                   :pattern"
    , "                   ( (elem@@TRAIN x (mk-set@@TRAIN y)) ))))"
    , "(assert (not (forall ( (t TRAIN)"
    , "                       (t TRAIN) )"
    , "                     (=> true"
    , "                         (=> (elem@@BLK ext (ran@@TRAIN@@BLK loc))"
    , "                             (not (and (elem@@TRAIN t in)"
    , "                                       (elem@@BLK (apply@@TRAIN@@BLK loc t) plf))))))))"
    , "(assert (not (forall ( (t TRAIN) )"
    , "                     (=> true"
    , "                         (=> (elem@@BLK ext (ran@@TRAIN@@BLK loc))"
    , "                             (not (and (elem@@TRAIN t in)"
    , "                                       (elem@@BLK (apply@@TRAIN@@BLK loc t) plf))))))))"
    , "; asm0"
    , "(assert (and (not (elem@@BLK ext plf)) (not (= ext ent))))"
    , "; asm1"
    , "(assert (forall ( (b BLK) )"
    , "                (! (= (elem@@BLK b BLK)"
    , "                      (or (elem@@BLK b plf) (= b ent) (= b ext)))"
    , "                   :pattern"
    , "                   ( (elem@@BLK b BLK) ))))"
    , "; asm2"
    , "(assert (exists ( (b BLK) ) (and true (elem@@BLK b plf))))"
    , "; asm3"
    , "(assert (not (elem@@BLK ent plf)))"
    , "; asm7"
    , "(assert (and (= (union (mk-set@@BLK ext) plf)"
    , "                (compl@@BLK (mk-set@@BLK ent)))"
    , "             (= (union (mk-set@@BLK ent) plf)"
    , "                (compl@@BLK (mk-set@@BLK ext)))"
    , "             (= (union (mk-set@@BLK ext) (mk-set@@BLK ent))"
    , "                (compl@@BLK plf))))"
    , "; inv0"
    , "(assert (= (dom@@TRAIN@@BLK loc) in))"
    , "; m2:inv0"
    , "(assert (injective@@TRAIN@@BLK loc))"
    , "; m3:inv0"
    , "(assert (subset osgn plf))"
    , "; m3:inv1"
    , "(assert (forall ( (p_0 BLK)"
    , "                  (p_1 BLK) )"
    , "                (! (=> (and (elem@@BLK p_0 osgn) (elem@@BLK p_1 osgn))"
    , "                       (= p_0 p_1))"
    , "                   :pattern"
    , "                   ())))"
    , "; m3:inv2"
    , "(assert (=> (elem@@BLK ext (ran@@TRAIN@@BLK loc))"
    , "            (= osgn empty-set@@BLK)))"
    , "; m3:inv3"
    , "(assert (subset osgn (ran@@TRAIN@@BLK loc)))"
    , "(assert (not (=> (elem@@BLK ext (ran@@TRAIN@@BLK loc))"
    , "                 (not (and (elem@@TRAIN t0 in)"
    , "                           (elem@@BLK (apply@@TRAIN@@BLK loc t0) plf))))))"
    , "(check-sat-using (or-else (then qe smt)"
    , "                          (then simplify smt)"
    , "                          (then skip smt)"
    , "                          (then (using-params simplify :expand-power true) smt)))"
    ]

case9 :: IO String
case9 = proof_obligation path0 "m3/m3:tr0/TR/WD/witness/p" 3

result9 :: String
result9 = unlines
    [ "(declare-datatypes (a) ( (Maybe (Just (fromJust a)) Nothing) ))"
    , "(declare-datatypes () ( (Null null) ))"
    , "(declare-datatypes (a b) ( (Pair (pair (first a) (second b))) ))"
    , "(declare-sort BLK 0)"
    , "; comment: we don't need to declare the sort Bool"
    , "; comment: we don't need to declare the sort Int"
    , "; comment: we don't need to declare the sort Real"
    , "(declare-sort TRAIN 0)"
    , "(define-sort pfun (a b) (Array a (Maybe b)))"
    , "(define-sort set (a) (Array a Bool))"
    , "(declare-const ent BLK)"
    , "(declare-const ext BLK)"
    , "(declare-const in (set TRAIN))"
    , "(declare-const in@prime (set TRAIN))"
    , "(declare-const isgn Bool)"
    , "(declare-const isgn@prime Bool)"
    , "(declare-const loc (pfun TRAIN BLK))"
    , "(declare-const loc@prime (pfun TRAIN BLK))"
    , "(declare-const osgn (set BLK))"
    , "(declare-const osgn@prime (set BLK))"
    , "(declare-const p@prime BLK)"
    , "(declare-const plf (set BLK))"
    , "(declare-const t TRAIN)"
    , "(declare-fun apply@@TRAIN@@BLK ( (pfun TRAIN BLK) TRAIN ) BLK)"
    , "(declare-fun dom-rest@@TRAIN@@BLK"
    , "             ( (set TRAIN)"
    , "               (pfun TRAIN BLK) )"
    , "             (pfun TRAIN BLK))"
    , "(declare-fun dom-subt@@TRAIN@@BLK"
    , "             ( (set TRAIN)"
    , "               (pfun TRAIN BLK) )"
    , "             (pfun TRAIN BLK))"
    , "(declare-fun dom@@TRAIN@@BLK ( (pfun TRAIN BLK) ) (set TRAIN))"
    , "(declare-fun empty-fun@@TRAIN@@BLK () (pfun TRAIN BLK))"
    , "(declare-fun injective@@TRAIN@@BLK ( (pfun TRAIN BLK) ) Bool)"
    , "(declare-fun mk-fun@@TRAIN@@BLK (TRAIN BLK) (pfun TRAIN BLK))"
    , "(declare-fun mk-set@@BLK (BLK) (set BLK))"
    , "(declare-fun mk-set@@TRAIN (TRAIN) (set TRAIN))"
    , "(declare-fun ovl@@TRAIN@@BLK"
    , "             ( (pfun TRAIN BLK)"
    , "               (pfun TRAIN BLK) )"
    , "             (pfun TRAIN BLK))"
    , "(declare-fun ran@@TRAIN@@BLK ( (pfun TRAIN BLK) ) (set BLK))"
    , "(declare-fun set@@TRAIN@@BLK ( (pfun TRAIN BLK) ) (set BLK))"
    , "(define-fun BLK () (set BLK) ( (as const (set BLK)) true ))"
    , "(define-fun TRAIN"
    , "            ()"
    , "            (set TRAIN)"
    , "            ( (as const (set TRAIN))"
    , "              true ))"
    , "(define-fun compl@@BLK"
    , "            ( (s1 (set BLK)) )"
    , "            (set BLK)"
    , "            ((_ map not) s1))"
    , "(define-fun compl@@TRAIN"
    , "            ( (s1 (set TRAIN)) )"
    , "            (set TRAIN)"
    , "            ((_ map not) s1))"
    , "(define-fun elem@@BLK"
    , "            ( (x BLK)"
    , "              (s1 (set BLK)) )"
    , "            Bool"
    , "            (select s1 x))"
    , "(define-fun elem@@TRAIN"
    , "            ( (x TRAIN)"
    , "              (s1 (set TRAIN)) )"
    , "            Bool"
    , "            (select s1 x))"
    , "(define-fun empty-set@@BLK"
    , "            ()"
    , "            (set BLK)"
    , "            ( (as const (set BLK))"
    , "              false ))"
    , "(define-fun empty-set@@TRAIN"
    , "            ()"
    , "            (set TRAIN)"
    , "            ( (as const (set TRAIN))"
    , "              false ))"
    , "(define-fun set-diff@@BLK"
    , "            ( (s1 (set BLK))"
    , "              (s2 (set BLK)) )"
    , "            (set BLK)"
    , "            (intersect s1 ((_ map not) s2)))"
    , "(define-fun set-diff@@TRAIN"
    , "            ( (s1 (set TRAIN))"
    , "              (s2 (set TRAIN)) )"
    , "            (set TRAIN)"
    , "            (intersect s1 ((_ map not) s2)))"
    , "(define-fun st-subset@@BLK"
    , "            ( (s1 (set BLK))"
    , "              (s2 (set BLK)) )"
    , "            Bool"
    , "            (and (subset s1 s2) (not (= s1 s2))))"
    , "(define-fun st-subset@@TRAIN"
    , "            ( (s1 (set TRAIN))"
    , "              (s2 (set TRAIN)) )"
    , "            Bool"
    , "            (and (subset s1 s2) (not (= s1 s2))))"
    , "(assert (forall ( (f1 (pfun TRAIN BLK))"
    , "                  (f2 (pfun TRAIN BLK)) )"
    , "                (! (= (dom@@TRAIN@@BLK (ovl@@TRAIN@@BLK f1 f2))"
    , "                      (union (dom@@TRAIN@@BLK f1) (dom@@TRAIN@@BLK f2)))"
    , "                   :pattern"
    , "                   ( (dom@@TRAIN@@BLK (ovl@@TRAIN@@BLK f1 f2)) ))))"
    , "(assert (= (dom@@TRAIN@@BLK empty-fun@@TRAIN@@BLK)"
    , "           empty-set@@TRAIN))"
    , "(assert (forall ( (x TRAIN)"
    , "                  (y BLK) )"
    , "                (! (= (dom@@TRAIN@@BLK (mk-fun@@TRAIN@@BLK x y))"
    , "                      (mk-set@@TRAIN x))"
    , "                   :pattern"
    , "                   ( (dom@@TRAIN@@BLK (mk-fun@@TRAIN@@BLK x y)) ))))"
    , "(assert (forall ( (f1 (pfun TRAIN BLK))"
    , "                  (f2 (pfun TRAIN BLK))"
    , "                  (x TRAIN) )"
    , "                (! (=> (elem@@TRAIN x (dom@@TRAIN@@BLK f2))"
    , "                       (= (apply@@TRAIN@@BLK (ovl@@TRAIN@@BLK f1 f2) x)"
    , "                          (apply@@TRAIN@@BLK f2 x)))"
    , "                   :pattern"
    , "                   ( (apply@@TRAIN@@BLK (ovl@@TRAIN@@BLK f1 f2) x) ))))"
    , "(assert (forall ( (f1 (pfun TRAIN BLK))"
    , "                  (f2 (pfun TRAIN BLK))"
    , "                  (x TRAIN) )"
    , "                (! (=> (and (elem@@TRAIN x (dom@@TRAIN@@BLK f1))"
    , "                            (not (elem@@TRAIN x (dom@@TRAIN@@BLK f2))))"
    , "                       (= (apply@@TRAIN@@BLK (ovl@@TRAIN@@BLK f1 f2) x)"
    , "                          (apply@@TRAIN@@BLK f1 x)))"
    , "                   :pattern"
    , "                   ( (apply@@TRAIN@@BLK (ovl@@TRAIN@@BLK f1 f2) x) ))))"
    , "(assert (forall ( (f1 (pfun TRAIN BLK))"
    , "                  (s1 (set TRAIN)) )"
    , "                (! (= (dom@@TRAIN@@BLK (dom-subt@@TRAIN@@BLK s1 f1))"
    , "                      (set-diff@@TRAIN (dom@@TRAIN@@BLK f1) s1))"
    , "                   :pattern"
    , "                   ( (dom@@TRAIN@@BLK (dom-subt@@TRAIN@@BLK s1 f1)) ))))"
    , "(assert (forall ( (x TRAIN)"
    , "                  (y BLK) )"
    , "                (! (= (apply@@TRAIN@@BLK (mk-fun@@TRAIN@@BLK x y) x) y)"
    , "                   :pattern"
    , "                   ( (apply@@TRAIN@@BLK (mk-fun@@TRAIN@@BLK x y) x) ))))"
    , "(assert (forall ( (f1 (pfun TRAIN BLK))"
    , "                  (s1 (set TRAIN))"
    , "                  (x TRAIN) )"
    , "                (! (=> (and (elem@@TRAIN x s1)"
    , "                            (elem@@TRAIN x (dom@@TRAIN@@BLK f1)))"
    , "                       (= (apply@@TRAIN@@BLK (dom-rest@@TRAIN@@BLK s1 f1) x)"
    , "                          (apply@@TRAIN@@BLK f1 x)))"
    , "                   :pattern"
    , "                   ( (apply@@TRAIN@@BLK (dom-rest@@TRAIN@@BLK s1 f1) x) ))))"
    , "(assert (forall ( (f1 (pfun TRAIN BLK))"
    , "                  (s1 (set TRAIN))"
    , "                  (x TRAIN) )"
    , "                (! (=> (elem@@TRAIN x (set-diff@@TRAIN (dom@@TRAIN@@BLK f1) s1))"
    , "                       (= (apply@@TRAIN@@BLK (dom-subt@@TRAIN@@BLK s1 f1) x)"
    , "                          (apply@@TRAIN@@BLK f1 x)))"
    , "                   :pattern"
    , "                   ( (apply@@TRAIN@@BLK (dom-subt@@TRAIN@@BLK s1 f1) x) ))))"
    , "(assert (forall ( (x TRAIN) )"
    , "                (! (= (select empty-fun@@TRAIN@@BLK x)"
    , "                      (as Nothing (Maybe BLK)))"
    , "                   :pattern"
    , "                   ( (select empty-fun@@TRAIN@@BLK x) ))))"
    , "(assert (forall ( (x TRAIN)"
    , "                  (x2 TRAIN)"
    , "                  (y BLK) )"
    , "                (! (= (select (mk-fun@@TRAIN@@BLK x y) x2)"
    , "                      (ite (= x x2) (Just y) (as Nothing (Maybe BLK))))"
    , "                   :pattern"
    , "                   ( (select (mk-fun@@TRAIN@@BLK x y) x2) ))))"
    , "(assert (forall ( (x TRAIN)"
    , "                  (f1 (pfun TRAIN BLK))"
    , "                  (f2 (pfun TRAIN BLK)) )"
    , "                (! (= (select (ovl@@TRAIN@@BLK f1 f2) x)"
    , "                      (ite (= (select f2 x) (as Nothing (Maybe BLK)))"
    , "                           (select f1 x)"
    , "                           (select f2 x)))"
    , "                   :pattern"
    , "                   ( (select (ovl@@TRAIN@@BLK f1 f2) x) ))))"
    , "(assert (forall ( (x TRAIN)"
    , "                  (f1 (pfun TRAIN BLK)) )"
    , "                (! (= (select (dom@@TRAIN@@BLK f1) x)"
    , "                      (not (= (select f1 x) (as Nothing (Maybe BLK)))))"
    , "                   :pattern"
    , "                   ( (select (dom@@TRAIN@@BLK f1) x) ))))"
    , "(assert (forall ( (y BLK)"
    , "                  (f1 (pfun TRAIN BLK)) )"
    , "                (! (= (elem@@BLK y (set@@TRAIN@@BLK f1))"
    , "                      (exists ( (x TRAIN) )"
    , "                              (and (elem@@TRAIN x (dom@@TRAIN@@BLK f1))"
    , "                                   (= (apply@@TRAIN@@BLK f1 x) y))))"
    , "                   :pattern"
    , "                   ( (elem@@BLK y (set@@TRAIN@@BLK f1)) ))))"
    , "(assert (forall ( (x TRAIN)"
    , "                  (y BLK)"
    , "                  (f1 (pfun TRAIN BLK)) )"
    , "                (! (= (and (elem@@TRAIN x (dom@@TRAIN@@BLK f1))"
    , "                           (= (apply@@TRAIN@@BLK f1 x) y))"
    , "                      (= (select f1 x) (Just y)))"
    , "                   :pattern"
    , "                   ())))"
    , "(assert (forall ( (f1 (pfun TRAIN BLK))"
    , "                  (x2 TRAIN)"
    , "                  (x TRAIN)"
    , "                  (y BLK) )"
    , "                (! (=> (not (= x x2))"
    , "                       (= (apply@@TRAIN@@BLK (ovl@@TRAIN@@BLK f1 (mk-fun@@TRAIN@@BLK x y)) x2)"
    , "                          (apply@@TRAIN@@BLK f1 x2)))"
    , "                   :pattern"
    , "                   ( (apply@@TRAIN@@BLK (ovl@@TRAIN@@BLK f1 (mk-fun@@TRAIN@@BLK x y)) x2) ))))"
    , "(assert (forall ( (f1 (pfun TRAIN BLK))"
    , "                  (x TRAIN)"
    , "                  (y BLK) )"
    , "                (! (= (apply@@TRAIN@@BLK (ovl@@TRAIN@@BLK f1 (mk-fun@@TRAIN@@BLK x y)) x)"
    , "                      y)"
    , "                   :pattern"
    , "                   ( (apply@@TRAIN@@BLK (ovl@@TRAIN@@BLK f1 (mk-fun@@TRAIN@@BLK x y)) x) ))))"
    , "(assert (= (ran@@TRAIN@@BLK empty-fun@@TRAIN@@BLK)"
    , "           empty-set@@BLK))"
    , "(assert (forall ( (f1 (pfun TRAIN BLK))"
    , "                  (y BLK) )"
    , "                (! (= (elem@@BLK y (ran@@TRAIN@@BLK f1))"
    , "                      (exists ( (x TRAIN) )"
    , "                              (and true"
    , "                                   (and (elem@@TRAIN x (dom@@TRAIN@@BLK f1))"
    , "                                        (= (apply@@TRAIN@@BLK f1 x) y)))))"
    , "                   :pattern"
    , "                   ( (elem@@BLK y (ran@@TRAIN@@BLK f1)) ))))"
    , "(assert (forall ( (x TRAIN)"
    , "                  (y BLK) )"
    , "                (! (= (ran@@TRAIN@@BLK (mk-fun@@TRAIN@@BLK x y))"
    , "                      (mk-set@@BLK y))"
    , "                   :pattern"
    , "                   ( (ran@@TRAIN@@BLK (mk-fun@@TRAIN@@BLK x y)) ))))"
    , "(assert (forall ( (f1 (pfun TRAIN BLK))"
    , "                  (f2 (pfun TRAIN BLK)) )"
    , "                (! (subset (ran@@TRAIN@@BLK (ovl@@TRAIN@@BLK f1 f2))"
    , "                           (union (ran@@TRAIN@@BLK f1) (ran@@TRAIN@@BLK f2)))"
    , "                   :pattern"
    , "                   ( (subset (ran@@TRAIN@@BLK (ovl@@TRAIN@@BLK f1 f2))"
    , "                             (union (ran@@TRAIN@@BLK f1) (ran@@TRAIN@@BLK f2))) ))))"
    , "(assert (forall ( (f1 (pfun TRAIN BLK)) )"
    , "                (! (= (injective@@TRAIN@@BLK f1)"
    , "                      (forall ( (x TRAIN)"
    , "                                (x2 TRAIN) )"
    , "                              (=> (and (elem@@TRAIN x (dom@@TRAIN@@BLK f1))"
    , "                                       (elem@@TRAIN x2 (dom@@TRAIN@@BLK f1)))"
    , "                                  (=> (= (apply@@TRAIN@@BLK f1 x)"
    , "                                         (apply@@TRAIN@@BLK f1 x2))"
    , "                                      (= x x2)))))"
    , "                   :pattern"
    , "                   ( (injective@@TRAIN@@BLK f1) ))))"
    , "(assert (forall ( (f1 (pfun TRAIN BLK))"
    , "                  (x TRAIN) )"
    , "                (! (=> (and (injective@@TRAIN@@BLK f1)"
    , "                            (elem@@TRAIN x (dom@@TRAIN@@BLK f1)))"
    , "                       (= (ran@@TRAIN@@BLK (dom-subt@@TRAIN@@BLK (mk-set@@TRAIN x) f1))"
    , "                          (set-diff@@BLK (ran@@TRAIN@@BLK f1)"
    , "                                         (mk-set@@BLK (apply@@TRAIN@@BLK f1 x)))))"
    , "                   :pattern"
    , "                   ( (ran@@TRAIN@@BLK (dom-subt@@TRAIN@@BLK (mk-set@@TRAIN x) f1)) ))))"
    , "(assert (forall ( (f1 (pfun TRAIN BLK))"
    , "                  (x TRAIN)"
    , "                  (x2 TRAIN) )"
    , "                (! (=> (and (not (= x x2))"
    , "                            (elem@@TRAIN x2 (dom@@TRAIN@@BLK f1)))"
    , "                       (= (apply@@TRAIN@@BLK (dom-subt@@TRAIN@@BLK (mk-set@@TRAIN x) f1) x2)"
    , "                          (apply@@TRAIN@@BLK f1 x2)))"
    , "                   :pattern"
    , "                   ( (apply@@TRAIN@@BLK (dom-subt@@TRAIN@@BLK (mk-set@@TRAIN x) f1) x2) ))))"
    , "(assert (forall ( (f1 (pfun TRAIN BLK))"
    , "                  (x TRAIN) )"
    , "                (! (=> (elem@@TRAIN x (dom@@TRAIN@@BLK f1))"
    , "                       (= (apply@@TRAIN@@BLK (dom-rest@@TRAIN@@BLK (mk-set@@TRAIN x) f1) x)"
    , "                          (apply@@TRAIN@@BLK f1 x)))"
    , "                   :pattern"
    , "                   ( (apply@@TRAIN@@BLK (dom-rest@@TRAIN@@BLK (mk-set@@TRAIN x) f1) x) ))))"
    , "(assert (forall ( (f1 (pfun TRAIN BLK))"
    , "                  (x TRAIN)"
    , "                  (s1 (set TRAIN)) )"
    , "                (! (=> (and (not (elem@@TRAIN x s1))"
    , "                            (elem@@TRAIN x (dom@@TRAIN@@BLK f1)))"
    , "                       (= (apply@@TRAIN@@BLK (dom-subt@@TRAIN@@BLK s1 f1) x)"
    , "                          (apply@@TRAIN@@BLK f1 x)))"
    , "                   :pattern"
    , "                   ( (apply@@TRAIN@@BLK (dom-subt@@TRAIN@@BLK s1 f1) x) ))))"
    , "(assert (forall ( (f1 (pfun TRAIN BLK))"
    , "                  (x TRAIN)"
    , "                  (s1 (set TRAIN)) )"
    , "                (! (=> (and (elem@@TRAIN x s1)"
    , "                            (elem@@TRAIN x (dom@@TRAIN@@BLK f1)))"
    , "                       (= (apply@@TRAIN@@BLK (dom-rest@@TRAIN@@BLK s1 f1) x)"
    , "                          (apply@@TRAIN@@BLK f1 x)))"
    , "                   :pattern"
    , "                   ( (apply@@TRAIN@@BLK (dom-rest@@TRAIN@@BLK s1 f1) x) ))))"
    , "(assert (forall ( (f1 (pfun TRAIN BLK))"
    , "                  (x TRAIN) )"
    , "                (! (=> (elem@@TRAIN x (dom@@TRAIN@@BLK f1))"
    , "                       (elem@@BLK (apply@@TRAIN@@BLK f1 x) (ran@@TRAIN@@BLK f1)))"
    , "                   :pattern"
    , "                   ( (elem@@BLK (apply@@TRAIN@@BLK f1 x) (ran@@TRAIN@@BLK f1)) ))))"
    , "(assert (forall ( (f1 (pfun TRAIN BLK))"
    , "                  (x TRAIN)"
    , "                  (s1 (set TRAIN)) )"
    , "                (! (=> (elem@@TRAIN x (set-diff@@TRAIN (dom@@TRAIN@@BLK f1) s1))"
    , "                       (elem@@BLK (apply@@TRAIN@@BLK f1 x)"
    , "                                  (ran@@TRAIN@@BLK (dom-subt@@TRAIN@@BLK s1 f1))))"
    , "                   :pattern"
    , "                   ( (elem@@BLK (apply@@TRAIN@@BLK f1 x)"
    , "                                (ran@@TRAIN@@BLK (dom-subt@@TRAIN@@BLK s1 f1))) ))))"
    , "(assert (forall ( (f1 (pfun TRAIN BLK))"
    , "                  (x TRAIN)"
    , "                  (s1 (set TRAIN)) )"
    , "                (! (=> (elem@@TRAIN x (intersect (dom@@TRAIN@@BLK f1) s1))"
    , "                       (elem@@BLK (apply@@TRAIN@@BLK f1 x)"
    , "                                  (ran@@TRAIN@@BLK (dom-rest@@TRAIN@@BLK s1 f1))))"
    , "                   :pattern"
    , "                   ( (elem@@BLK (apply@@TRAIN@@BLK f1 x)"
    , "                                (ran@@TRAIN@@BLK (dom-rest@@TRAIN@@BLK s1 f1))) ))))"
    , "(assert (forall ( (f1 (pfun TRAIN BLK))"
    , "                  (x TRAIN)"
    , "                  (y BLK) )"
    , "                (! (=> (and (elem@@TRAIN x (dom@@TRAIN@@BLK f1))"
    , "                            (injective@@TRAIN@@BLK f1))"
    , "                       (= (ran@@TRAIN@@BLK (ovl@@TRAIN@@BLK f1 (mk-fun@@TRAIN@@BLK x y)))"
    , "                          (union (set-diff@@BLK (ran@@TRAIN@@BLK f1)"
    , "                                                (mk-set@@BLK (apply@@TRAIN@@BLK f1 x)))"
    , "                                 (mk-set@@BLK y))))"
    , "                   :pattern"
    , "                   ( (ran@@TRAIN@@BLK (ovl@@TRAIN@@BLK f1 (mk-fun@@TRAIN@@BLK x y))) ))))"
    , "(assert (forall ( (f1 (pfun TRAIN BLK))"
    , "                  (x TRAIN)"
    , "                  (y BLK) )"
    , "                (! (=> (not (elem@@TRAIN x (dom@@TRAIN@@BLK f1)))"
    , "                       (= (ran@@TRAIN@@BLK (ovl@@TRAIN@@BLK f1 (mk-fun@@TRAIN@@BLK x y)))"
    , "                          (union (ran@@TRAIN@@BLK f1) (mk-set@@BLK y))))"
    , "                   :pattern"
    , "                   ( (ran@@TRAIN@@BLK (ovl@@TRAIN@@BLK f1 (mk-fun@@TRAIN@@BLK x y))) ))))"
    , "(assert (forall ( (f1 (pfun TRAIN BLK))"
    , "                  (y BLK) )"
    , "                (! (= (= (set@@TRAIN@@BLK f1) (mk-set@@BLK y))"
    , "                      (forall ( (x TRAIN) )"
    , "                              (=> true"
    , "                                  (or (= (select f1 x) (Just y))"
    , "                                      (= (select f1 x) (as Nothing (Maybe BLK)))))))"
    , "                   :pattern"
    , "                   ())))"
    , "(assert (forall ( (x BLK)"
    , "                  (y BLK) )"
    , "                (! (= (elem@@BLK x (mk-set@@BLK y)) (= x y))"
    , "                   :pattern"
    , "                   ( (elem@@BLK x (mk-set@@BLK y)) ))))"
    , "(assert (forall ( (x TRAIN)"
    , "                  (y TRAIN) )"
    , "                (! (= (elem@@TRAIN x (mk-set@@TRAIN y)) (= x y))"
    , "                   :pattern"
    , "                   ( (elem@@TRAIN x (mk-set@@TRAIN y)) ))))"
    , "; asm0"
    , "(assert (and (not (elem@@BLK ext plf)) (not (= ext ent))))"
    , "; asm1"
    , "(assert (forall ( (b BLK) )"
    , "                (! (= (elem@@BLK b BLK)"
    , "                      (or (elem@@BLK b plf) (= b ent) (= b ext)))"
    , "                   :pattern"
    , "                   ( (elem@@BLK b BLK) ))))"
    , "; asm2"
    , "(assert (exists ( (b BLK) ) (and true (elem@@BLK b plf))))"
    , "; asm3"
    , "(assert (not (elem@@BLK ent plf)))"
    , "; asm7"
    , "(assert (and (= (union (mk-set@@BLK ext) plf)"
    , "                (compl@@BLK (mk-set@@BLK ent)))"
    , "             (= (union (mk-set@@BLK ent) plf)"
    , "                (compl@@BLK (mk-set@@BLK ext)))"
    , "             (= (union (mk-set@@BLK ext) (mk-set@@BLK ent))"
    , "                (compl@@BLK plf))))"
    , "; inv0"
    , "(assert (= (dom@@TRAIN@@BLK loc) in))"
    , "; m2:inv0"
    , "(assert (injective@@TRAIN@@BLK loc))"
    , "; m3:inv0"
    , "(assert (subset osgn plf))"
    , "; m3:inv1"
    , "(assert (forall ( (p_0 BLK)"
    , "                  (p_1 BLK) )"
    , "                (! (=> (and (elem@@BLK p_0 osgn) (elem@@BLK p_1 osgn))"
    , "                       (= p_0 p_1))"
    , "                   :pattern"
    , "                   ())))"
    , "; m3:inv2"
    , "(assert (=> (elem@@BLK ext (ran@@TRAIN@@BLK loc))"
    , "            (= osgn empty-set@@BLK)))"
    , "; m3:inv3"
    , "(assert (subset osgn (ran@@TRAIN@@BLK loc)))"
    , "; m3:tr0"
    , "(assert (and (elem@@TRAIN t in)"
    , "             (elem@@BLK (apply@@TRAIN@@BLK loc t)"
    , "                        (set-diff@@BLK plf osgn))))"
    , "(assert (not (elem@@TRAIN t (dom@@TRAIN@@BLK loc))))"
    , "(check-sat-using (or-else (then qe smt)"
    , "                          (then simplify smt)"
    , "                          (then skip smt)"
    , "                          (then (using-params simplify :expand-power true) smt)))"
    ]
