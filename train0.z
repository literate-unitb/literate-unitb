(echo "> train0/INIT/FIS")
(push)
(declare-sort BLK 0)
(declare-sort LOC 0)
(declare-sort TRAIN 0)
(define-sort pfun (a b) (Array a b))
(declare-sort set 1)
(declare-const PLF (set BLK))
(declare-const BLK (set BLK))
(declare-const LOC (set LOC))
(declare-const TRAIN (set TRAIN))
(declare-const ent BLK)
(declare-const ext BLK)
(declare-const in (set TRAIN))
(declare-const loc (pfun TRAIN BLK))
(declare-const p BLK)
(declare-const q BLK)
(declare-const t TRAIN)
(declare-const t_0 TRAIN)
(declare-const t_1 TRAIN)
(declare-const t_2 TRAIN)
(declare-const t_3 TRAIN)
(declare-fun apply@@TRAIN@@BLK ((pfun TRAIN BLK) TRAIN) BLK)
(declare-fun dom-rest@@TRAIN@@BLK ((set TRAIN) (pfun TRAIN BLK)) (pfun TRAIN BLK))
(declare-fun dom-subt@@TRAIN@@BLK ((set TRAIN) (pfun TRAIN BLK)) (pfun TRAIN BLK))
(declare-fun dom@@TRAIN@@BLK ((pfun TRAIN BLK)) (set TRAIN))
(declare-fun elem@@BLK (BLK (set BLK)) Bool)
(declare-fun elem@@LOC (LOC (set LOC)) Bool)
(declare-fun elem@@TRAIN (TRAIN (set TRAIN)) Bool)
(declare-fun elem@Open@@pfun@@TRAIN@@BLK@Close ((pfun TRAIN BLK) (set (pfun TRAIN BLK))) Bool)
(declare-fun empty-fun@@TRAIN@@BLK () (pfun TRAIN BLK))
(declare-fun empty-set@@BLK () (set BLK))
(declare-fun empty-set@@LOC () (set LOC))
(declare-fun empty-set@@TRAIN () (set TRAIN))
(declare-fun empty-set@Open@@pfun@@TRAIN@@BLK@Close () (set (pfun TRAIN BLK)))
(declare-fun intersect@@BLK ((set BLK) (set BLK)) (set BLK))
(declare-fun intersect@@LOC ((set LOC) (set LOC)) (set LOC))
(declare-fun intersect@@TRAIN ((set TRAIN) (set TRAIN)) (set TRAIN))
(declare-fun intersect@Open@@pfun@@TRAIN@@BLK@Close ((set (pfun TRAIN BLK)) (set (pfun TRAIN BLK))) (set (pfun TRAIN BLK)))
(declare-fun mk-fun@@TRAIN@@BLK (TRAIN BLK) (pfun TRAIN BLK))
(declare-fun mk-set@@BLK (BLK) (set BLK))
(declare-fun mk-set@@LOC (LOC) (set LOC))
(declare-fun mk-set@@TRAIN (TRAIN) (set TRAIN))
(declare-fun mk-set@Open@@pfun@@TRAIN@@BLK@Close ((pfun TRAIN BLK)) (set (pfun TRAIN BLK)))
(declare-fun ovl@@TRAIN@@BLK ((pfun TRAIN BLK) (pfun TRAIN BLK)) (pfun TRAIN BLK))
(declare-fun set-diff@@BLK ((set BLK) (set BLK)) (set BLK))
(declare-fun set-diff@@LOC ((set LOC) (set LOC)) (set LOC))
(declare-fun set-diff@@TRAIN ((set TRAIN) (set TRAIN)) (set TRAIN))
(declare-fun set-diff@Open@@pfun@@TRAIN@@BLK@Close ((set (pfun TRAIN BLK)) (set (pfun TRAIN BLK))) (set (pfun TRAIN BLK)))
(declare-fun tfun@@TRAIN@@BLK ((set TRAIN) (set BLK)) (set (pfun TRAIN BLK)))
(declare-fun bunion@@BLK ((set BLK) (set BLK)) (set BLK))
(declare-fun bunion@@LOC ((set LOC) (set LOC)) (set LOC))
(declare-fun bunion@@TRAIN ((set TRAIN) (set TRAIN)) (set TRAIN))
(declare-fun bunion@Open@@pfun@@TRAIN@@BLK@Close ((set (pfun TRAIN BLK)) (set (pfun TRAIN BLK))) (set (pfun TRAIN BLK)))
(assert (forall ( (x BLK)
                  (y BLK) )
                (= (elem@@BLK x
                              (mk-set@@BLK y))
                   (= x
                      y))))

(assert (forall ( (x BLK)
                  (s1 (set BLK))
                  (s2 (set BLK)) )
                (= (elem@@BLK x
                              (set-diff@@BLK s1
                                             s2))
                   (and (elem@@BLK x
                                   s1)
                        (not (elem@@BLK x
                                        s2))))))

(assert (forall ( (x BLK)
                  (s1 (set BLK))
                  (s2 (set BLK)) )
                (= (elem@@BLK x
                              (intersect@@BLK s1
                                              s2))
                   (and (elem@@BLK x
                                   s1)
                        (elem@@BLK x
                                   s2)))))

(assert (forall ( (x BLK)
                  (s1 (set BLK))
                  (s2 (set BLK)) )
                (= (elem@@BLK x
                              (bunion@@BLK s1
                                           s2))
                   (or (elem@@BLK x
                                  s1)
                       (elem@@BLK x
                                  s2)))))

(assert (forall ( (x BLK)
                  (s1 (set BLK))
                  (s2 (set BLK)) )
                (not (elem@@BLK x
                                empty-set@@BLK))))

(assert (forall ( (x LOC)
                  (y LOC) )
                (= (elem@@LOC x
                              (mk-set@@LOC y))
                   (= x
                      y))))

(assert (forall ( (x LOC)
                  (s1 (set LOC))
                  (s2 (set LOC)) )
                (= (elem@@LOC x
                              (set-diff@@LOC s1
                                             s2))
                   (and (elem@@LOC x
                                   s1)
                        (not (elem@@LOC x
                                        s2))))))

(assert (forall ( (x LOC)
                  (s1 (set LOC))
                  (s2 (set LOC)) )
                (= (elem@@LOC x
                              (intersect@@LOC s1
                                              s2))
                   (and (elem@@LOC x
                                   s1)
                        (elem@@LOC x
                                   s2)))))

(assert (forall ( (x LOC)
                  (s1 (set LOC))
                  (s2 (set LOC)) )
                (= (elem@@LOC x
                              (bunion@@LOC s1
                                           s2))
                   (or (elem@@LOC x
                                  s1)
                       (elem@@LOC x
                                  s2)))))

(assert (forall ( (x LOC)
                  (s1 (set LOC))
                  (s2 (set LOC)) )
                (not (elem@@LOC x
                                empty-set@@LOC))))

(assert (forall ( (x TRAIN)
                  (y TRAIN) )
                (= (elem@@TRAIN x
                                (mk-set@@TRAIN y))
                   (= x
                      y))))

(assert (forall ( (x TRAIN)
                  (s1 (set TRAIN))
                  (s2 (set TRAIN)) )
                (= (elem@@TRAIN x
                                (set-diff@@TRAIN s1
                                                 s2))
                   (and (elem@@TRAIN x
                                     s1)
                        (not (elem@@TRAIN x
                                          s2))))))

(assert (forall ( (x TRAIN)
                  (s1 (set TRAIN))
                  (s2 (set TRAIN)) )
                (= (elem@@TRAIN x
                                (intersect@@TRAIN s1
                                                  s2))
                   (and (elem@@TRAIN x
                                     s1)
                        (elem@@TRAIN x
                                     s2)))))

(assert (forall ( (x TRAIN)
                  (s1 (set TRAIN))
                  (s2 (set TRAIN)) )
                (= (elem@@TRAIN x
                                (bunion@@TRAIN s1
                                               s2))
                   (or (elem@@TRAIN x
                                    s1)
                       (elem@@TRAIN x
                                    s2)))))

(assert (forall ( (x TRAIN)
                  (s1 (set TRAIN))
                  (s2 (set TRAIN)) )
                (not (elem@@TRAIN x
                                  empty-set@@TRAIN))))

(assert (forall ( (f1 (pfun TRAIN
                            BLK))
                  (f2 (pfun TRAIN
                            BLK)) )
                (= (bunion@@TRAIN (dom@@TRAIN@@BLK f1)
                                  (dom@@TRAIN@@BLK f2))
                   (dom@@TRAIN@@BLK (ovl@@TRAIN@@BLK f1
                                                     f2)))))

(assert (= (dom@@TRAIN@@BLK empty-fun@@TRAIN@@BLK)
           empty-set@@TRAIN))

(assert (forall ( (x TRAIN)
                  (y BLK) )
                (= (dom@@TRAIN@@BLK (mk-fun@@TRAIN@@BLK x
                                                        y))
                   (mk-set@@TRAIN x))))

(assert (forall ( (f1 (pfun TRAIN
                            BLK))
                  (f2 (pfun TRAIN
                            BLK))
                  (x TRAIN) )
                (=> (elem@@TRAIN x
                                 (dom@@TRAIN@@BLK f2))
                    (= (select (ovl@@TRAIN@@BLK f1
                                                f2)
                               x)
                       (select f2
                               x)))))

(assert (forall ( (f1 (pfun TRAIN
                            BLK))
                  (f2 (pfun TRAIN
                            BLK))
                  (x TRAIN) )
                (=> (elem@@TRAIN x
                                 (set-diff@@TRAIN (dom@@TRAIN@@BLK f1)
                                                  (dom@@TRAIN@@BLK f2)))
                    (= (select (ovl@@TRAIN@@BLK f1
                                                f2)
                               x)
                       (select f1
                               x)))))

(assert (forall ( (f1 (pfun TRAIN
                            BLK))
                  (s1 (set TRAIN)) )
                (= (dom@@TRAIN@@BLK (dom-subt@@TRAIN@@BLK s1
                                                          f1))
                   (set-diff@@TRAIN (dom@@TRAIN@@BLK f1)
                                    s1))))

(assert (forall ( (x TRAIN)
                  (y BLK) )
                (= (select (mk-fun@@TRAIN@@BLK x
                                               y)
                           x)
                   y)))

(assert (forall ( (f1 (pfun TRAIN
                            BLK))
                  (s1 (set TRAIN))
                  (x TRAIN) )
                (=> (elem@@TRAIN x
                                 (intersect@@TRAIN s1
                                                   (dom@@TRAIN@@BLK f1)))
                    (= (select (dom-rest@@TRAIN@@BLK s1
                                                     f1)
                               x)
                       (select f1
                               x)))))

(assert (forall ( (f1 (pfun TRAIN
                            BLK))
                  (s1 (set TRAIN))
                  (x TRAIN) )
                (=> (elem@@TRAIN x
                                 (set-diff@@TRAIN (dom@@TRAIN@@BLK f1)
                                                  s1))
                    (= (select (dom-subt@@TRAIN@@BLK s1
                                                     f1)
                               x)
                       (select f1
                               x)))))

(assert (forall ( (x (pfun TRAIN
                           BLK))
                  (y (pfun TRAIN
                           BLK)) )
                (= (elem@Open@@pfun@@TRAIN@@BLK@Close x
                                                      (mk-set@Open@@pfun@@TRAIN@@BLK@Close y))
                   (= x
                      y))))

(assert (forall ( (x (pfun TRAIN
                           BLK))
                  (s1 (set (pfun TRAIN
                                 BLK)))
                  (s2 (set (pfun TRAIN
                                 BLK))) )
                (= (elem@Open@@pfun@@TRAIN@@BLK@Close x
                                                      (set-diff@Open@@pfun@@TRAIN@@BLK@Close s1
                                                                                             s2))
                   (and (elem@Open@@pfun@@TRAIN@@BLK@Close x
                                                           s1)
                        (not (elem@Open@@pfun@@TRAIN@@BLK@Close x
                                                                s2))))))

(assert (forall ( (x (pfun TRAIN
                           BLK))
                  (s1 (set (pfun TRAIN
                                 BLK)))
                  (s2 (set (pfun TRAIN
                                 BLK))) )
                (= (elem@Open@@pfun@@TRAIN@@BLK@Close x
                                                      (intersect@Open@@pfun@@TRAIN@@BLK@Close s1
                                                                                              s2))
                   (and (elem@Open@@pfun@@TRAIN@@BLK@Close x
                                                           s1)
                        (elem@Open@@pfun@@TRAIN@@BLK@Close x
                                                           s2)))))

(assert (forall ( (x (pfun TRAIN
                           BLK))
                  (s1 (set (pfun TRAIN
                                 BLK)))
                  (s2 (set (pfun TRAIN
                                 BLK))) )
                (= (elem@Open@@pfun@@TRAIN@@BLK@Close x
                                                      (bunion@Open@@pfun@@TRAIN@@BLK@Close s1
                                                                                           s2))
                   (or (elem@Open@@pfun@@TRAIN@@BLK@Close x
                                                          s1)
                       (elem@Open@@pfun@@TRAIN@@BLK@Close x
                                                          s2)))))

(assert (forall ( (x (pfun TRAIN
                           BLK))
                  (s1 (set (pfun TRAIN
                                 BLK)))
                  (s2 (set (pfun TRAIN
                                 BLK))) )
                (not (elem@Open@@pfun@@TRAIN@@BLK@Close x
                                                        empty-set@Open@@pfun@@TRAIN@@BLK@Close))))

(assert (and (not (= ent
                     ext))
             (not (elem@@BLK ent
                             PLF))
             (not (elem@@BLK ext
                             PLF))))

(assert (forall ( (p BLK) )
                (=> true
                    (= (not (= p
                               ext))
                       (elem@@BLK p
                                  (bunion@@BLK (mk-set@@BLK ent)
                                               PLF))))))

(assert (forall ( (p BLK) )
                (=> true
                    (= (not (= p
                               ent))
                       (elem@@BLK p
                                  (bunion@@BLK (mk-set@@BLK ext)
                                               PLF))))))

(assert (forall ( (p BLK) )
                (=> true
                    (= (or (= p
                              ent)
                           (= p
                              ext))
                       (not (elem@@BLK p
                                       PLF))))))

(assert (= BLK
           (bunion@@BLK (bunion@@BLK (mk-set@@BLK ent)
                                     (mk-set@@BLK ext))
                        PLF)))

(assert (not (exists ( (in (set TRAIN))
                       (loc (pfun TRAIN
                                  BLK)) )
                     (and (= loc
                             empty-fun@@TRAIN@@BLK)
                          (= in
                             empty-set@@TRAIN)))))

(check-sat-using (or-else (then qe smt) (then skip smt) (then (using-params simplify :expand-power true) smt)))

(pop)
(echo "> train0/INIT/INV/inv1")
(push)
(declare-sort BLK 0)
(declare-sort LOC 0)
(declare-sort TRAIN 0)
(define-sort pfun (a b) (Array a b))
(declare-sort set 1)
(declare-const PLF (set BLK))
(declare-const BLK (set BLK))
(declare-const LOC (set LOC))
(declare-const TRAIN (set TRAIN))
(declare-const ent BLK)
(declare-const ext BLK)
(declare-const in (set TRAIN))
(declare-const loc (pfun TRAIN BLK))
(declare-const p BLK)
(declare-const q BLK)
(declare-const t TRAIN)
(declare-const t_0 TRAIN)
(declare-const t_1 TRAIN)
(declare-const t_2 TRAIN)
(declare-const t_3 TRAIN)
(declare-fun apply@@TRAIN@@BLK ((pfun TRAIN BLK) TRAIN) BLK)
(declare-fun dom-rest@@TRAIN@@BLK ((set TRAIN) (pfun TRAIN BLK)) (pfun TRAIN BLK))
(declare-fun dom-subt@@TRAIN@@BLK ((set TRAIN) (pfun TRAIN BLK)) (pfun TRAIN BLK))
(declare-fun dom@@TRAIN@@BLK ((pfun TRAIN BLK)) (set TRAIN))
(declare-fun elem@@BLK (BLK (set BLK)) Bool)
(declare-fun elem@@LOC (LOC (set LOC)) Bool)
(declare-fun elem@@TRAIN (TRAIN (set TRAIN)) Bool)
(declare-fun elem@Open@@pfun@@TRAIN@@BLK@Close ((pfun TRAIN BLK) (set (pfun TRAIN BLK))) Bool)
(declare-fun empty-fun@@TRAIN@@BLK () (pfun TRAIN BLK))
(declare-fun empty-set@@BLK () (set BLK))
(declare-fun empty-set@@LOC () (set LOC))
(declare-fun empty-set@@TRAIN () (set TRAIN))
(declare-fun empty-set@Open@@pfun@@TRAIN@@BLK@Close () (set (pfun TRAIN BLK)))
(declare-fun intersect@@BLK ((set BLK) (set BLK)) (set BLK))
(declare-fun intersect@@LOC ((set LOC) (set LOC)) (set LOC))
(declare-fun intersect@@TRAIN ((set TRAIN) (set TRAIN)) (set TRAIN))
(declare-fun intersect@Open@@pfun@@TRAIN@@BLK@Close ((set (pfun TRAIN BLK)) (set (pfun TRAIN BLK))) (set (pfun TRAIN BLK)))
(declare-fun mk-fun@@TRAIN@@BLK (TRAIN BLK) (pfun TRAIN BLK))
(declare-fun mk-set@@BLK (BLK) (set BLK))
(declare-fun mk-set@@LOC (LOC) (set LOC))
(declare-fun mk-set@@TRAIN (TRAIN) (set TRAIN))
(declare-fun mk-set@Open@@pfun@@TRAIN@@BLK@Close ((pfun TRAIN BLK)) (set (pfun TRAIN BLK)))
(declare-fun ovl@@TRAIN@@BLK ((pfun TRAIN BLK) (pfun TRAIN BLK)) (pfun TRAIN BLK))
(declare-fun set-diff@@BLK ((set BLK) (set BLK)) (set BLK))
(declare-fun set-diff@@LOC ((set LOC) (set LOC)) (set LOC))
(declare-fun set-diff@@TRAIN ((set TRAIN) (set TRAIN)) (set TRAIN))
(declare-fun set-diff@Open@@pfun@@TRAIN@@BLK@Close ((set (pfun TRAIN BLK)) (set (pfun TRAIN BLK))) (set (pfun TRAIN BLK)))
(declare-fun tfun@@TRAIN@@BLK ((set TRAIN) (set BLK)) (set (pfun TRAIN BLK)))
(declare-fun bunion@@BLK ((set BLK) (set BLK)) (set BLK))
(declare-fun bunion@@LOC ((set LOC) (set LOC)) (set LOC))
(declare-fun bunion@@TRAIN ((set TRAIN) (set TRAIN)) (set TRAIN))
(declare-fun bunion@Open@@pfun@@TRAIN@@BLK@Close ((set (pfun TRAIN BLK)) (set (pfun TRAIN BLK))) (set (pfun TRAIN BLK)))
(assert (forall ( (x BLK)
                  (y BLK) )
                (= (elem@@BLK x
                              (mk-set@@BLK y))
                   (= x
                      y))))

(assert (forall ( (x BLK)
                  (s1 (set BLK))
                  (s2 (set BLK)) )
                (= (elem@@BLK x
                              (set-diff@@BLK s1
                                             s2))
                   (and (elem@@BLK x
                                   s1)
                        (not (elem@@BLK x
                                        s2))))))

(assert (forall ( (x BLK)
                  (s1 (set BLK))
                  (s2 (set BLK)) )
                (= (elem@@BLK x
                              (intersect@@BLK s1
                                              s2))
                   (and (elem@@BLK x
                                   s1)
                        (elem@@BLK x
                                   s2)))))

(assert (forall ( (x BLK)
                  (s1 (set BLK))
                  (s2 (set BLK)) )
                (= (elem@@BLK x
                              (bunion@@BLK s1
                                           s2))
                   (or (elem@@BLK x
                                  s1)
                       (elem@@BLK x
                                  s2)))))

(assert (forall ( (x BLK)
                  (s1 (set BLK))
                  (s2 (set BLK)) )
                (not (elem@@BLK x
                                empty-set@@BLK))))

(assert (forall ( (x LOC)
                  (y LOC) )
                (= (elem@@LOC x
                              (mk-set@@LOC y))
                   (= x
                      y))))

(assert (forall ( (x LOC)
                  (s1 (set LOC))
                  (s2 (set LOC)) )
                (= (elem@@LOC x
                              (set-diff@@LOC s1
                                             s2))
                   (and (elem@@LOC x
                                   s1)
                        (not (elem@@LOC x
                                        s2))))))

(assert (forall ( (x LOC)
                  (s1 (set LOC))
                  (s2 (set LOC)) )
                (= (elem@@LOC x
                              (intersect@@LOC s1
                                              s2))
                   (and (elem@@LOC x
                                   s1)
                        (elem@@LOC x
                                   s2)))))

(assert (forall ( (x LOC)
                  (s1 (set LOC))
                  (s2 (set LOC)) )
                (= (elem@@LOC x
                              (bunion@@LOC s1
                                           s2))
                   (or (elem@@LOC x
                                  s1)
                       (elem@@LOC x
                                  s2)))))

(assert (forall ( (x LOC)
                  (s1 (set LOC))
                  (s2 (set LOC)) )
                (not (elem@@LOC x
                                empty-set@@LOC))))

(assert (forall ( (x TRAIN)
                  (y TRAIN) )
                (= (elem@@TRAIN x
                                (mk-set@@TRAIN y))
                   (= x
                      y))))

(assert (forall ( (x TRAIN)
                  (s1 (set TRAIN))
                  (s2 (set TRAIN)) )
                (= (elem@@TRAIN x
                                (set-diff@@TRAIN s1
                                                 s2))
                   (and (elem@@TRAIN x
                                     s1)
                        (not (elem@@TRAIN x
                                          s2))))))

(assert (forall ( (x TRAIN)
                  (s1 (set TRAIN))
                  (s2 (set TRAIN)) )
                (= (elem@@TRAIN x
                                (intersect@@TRAIN s1
                                                  s2))
                   (and (elem@@TRAIN x
                                     s1)
                        (elem@@TRAIN x
                                     s2)))))

(assert (forall ( (x TRAIN)
                  (s1 (set TRAIN))
                  (s2 (set TRAIN)) )
                (= (elem@@TRAIN x
                                (bunion@@TRAIN s1
                                               s2))
                   (or (elem@@TRAIN x
                                    s1)
                       (elem@@TRAIN x
                                    s2)))))

(assert (forall ( (x TRAIN)
                  (s1 (set TRAIN))
                  (s2 (set TRAIN)) )
                (not (elem@@TRAIN x
                                  empty-set@@TRAIN))))

(assert (forall ( (f1 (pfun TRAIN
                            BLK))
                  (f2 (pfun TRAIN
                            BLK)) )
                (= (bunion@@TRAIN (dom@@TRAIN@@BLK f1)
                                  (dom@@TRAIN@@BLK f2))
                   (dom@@TRAIN@@BLK (ovl@@TRAIN@@BLK f1
                                                     f2)))))

(assert (= (dom@@TRAIN@@BLK empty-fun@@TRAIN@@BLK)
           empty-set@@TRAIN))

(assert (forall ( (x TRAIN)
                  (y BLK) )
                (= (dom@@TRAIN@@BLK (mk-fun@@TRAIN@@BLK x
                                                        y))
                   (mk-set@@TRAIN x))))

(assert (forall ( (f1 (pfun TRAIN
                            BLK))
                  (f2 (pfun TRAIN
                            BLK))
                  (x TRAIN) )
                (=> (elem@@TRAIN x
                                 (dom@@TRAIN@@BLK f2))
                    (= (select (ovl@@TRAIN@@BLK f1
                                                f2)
                               x)
                       (select f2
                               x)))))

(assert (forall ( (f1 (pfun TRAIN
                            BLK))
                  (f2 (pfun TRAIN
                            BLK))
                  (x TRAIN) )
                (=> (elem@@TRAIN x
                                 (set-diff@@TRAIN (dom@@TRAIN@@BLK f1)
                                                  (dom@@TRAIN@@BLK f2)))
                    (= (select (ovl@@TRAIN@@BLK f1
                                                f2)
                               x)
                       (select f1
                               x)))))

(assert (forall ( (f1 (pfun TRAIN
                            BLK))
                  (s1 (set TRAIN)) )
                (= (dom@@TRAIN@@BLK (dom-subt@@TRAIN@@BLK s1
                                                          f1))
                   (set-diff@@TRAIN (dom@@TRAIN@@BLK f1)
                                    s1))))

(assert (forall ( (x TRAIN)
                  (y BLK) )
                (= (select (mk-fun@@TRAIN@@BLK x
                                               y)
                           x)
                   y)))

(assert (forall ( (f1 (pfun TRAIN
                            BLK))
                  (s1 (set TRAIN))
                  (x TRAIN) )
                (=> (elem@@TRAIN x
                                 (intersect@@TRAIN s1
                                                   (dom@@TRAIN@@BLK f1)))
                    (= (select (dom-rest@@TRAIN@@BLK s1
                                                     f1)
                               x)
                       (select f1
                               x)))))

(assert (forall ( (f1 (pfun TRAIN
                            BLK))
                  (s1 (set TRAIN))
                  (x TRAIN) )
                (=> (elem@@TRAIN x
                                 (set-diff@@TRAIN (dom@@TRAIN@@BLK f1)
                                                  s1))
                    (= (select (dom-subt@@TRAIN@@BLK s1
                                                     f1)
                               x)
                       (select f1
                               x)))))

(assert (forall ( (x (pfun TRAIN
                           BLK))
                  (y (pfun TRAIN
                           BLK)) )
                (= (elem@Open@@pfun@@TRAIN@@BLK@Close x
                                                      (mk-set@Open@@pfun@@TRAIN@@BLK@Close y))
                   (= x
                      y))))

(assert (forall ( (x (pfun TRAIN
                           BLK))
                  (s1 (set (pfun TRAIN
                                 BLK)))
                  (s2 (set (pfun TRAIN
                                 BLK))) )
                (= (elem@Open@@pfun@@TRAIN@@BLK@Close x
                                                      (set-diff@Open@@pfun@@TRAIN@@BLK@Close s1
                                                                                             s2))
                   (and (elem@Open@@pfun@@TRAIN@@BLK@Close x
                                                           s1)
                        (not (elem@Open@@pfun@@TRAIN@@BLK@Close x
                                                                s2))))))

(assert (forall ( (x (pfun TRAIN
                           BLK))
                  (s1 (set (pfun TRAIN
                                 BLK)))
                  (s2 (set (pfun TRAIN
                                 BLK))) )
                (= (elem@Open@@pfun@@TRAIN@@BLK@Close x
                                                      (intersect@Open@@pfun@@TRAIN@@BLK@Close s1
                                                                                              s2))
                   (and (elem@Open@@pfun@@TRAIN@@BLK@Close x
                                                           s1)
                        (elem@Open@@pfun@@TRAIN@@BLK@Close x
                                                           s2)))))

(assert (forall ( (x (pfun TRAIN
                           BLK))
                  (s1 (set (pfun TRAIN
                                 BLK)))
                  (s2 (set (pfun TRAIN
                                 BLK))) )
                (= (elem@Open@@pfun@@TRAIN@@BLK@Close x
                                                      (bunion@Open@@pfun@@TRAIN@@BLK@Close s1
                                                                                           s2))
                   (or (elem@Open@@pfun@@TRAIN@@BLK@Close x
                                                          s1)
                       (elem@Open@@pfun@@TRAIN@@BLK@Close x
                                                          s2)))))

(assert (forall ( (x (pfun TRAIN
                           BLK))
                  (s1 (set (pfun TRAIN
                                 BLK)))
                  (s2 (set (pfun TRAIN
                                 BLK))) )
                (not (elem@Open@@pfun@@TRAIN@@BLK@Close x
                                                        empty-set@Open@@pfun@@TRAIN@@BLK@Close))))

(assert (and (not (= ent
                     ext))
             (not (elem@@BLK ent
                             PLF))
             (not (elem@@BLK ext
                             PLF))))

(assert (forall ( (p BLK) )
                (=> true
                    (= (not (= p
                               ext))
                       (elem@@BLK p
                                  (bunion@@BLK (mk-set@@BLK ent)
                                               PLF))))))

(assert (forall ( (p BLK) )
                (=> true
                    (= (not (= p
                               ent))
                       (elem@@BLK p
                                  (bunion@@BLK (mk-set@@BLK ext)
                                               PLF))))))

(assert (forall ( (p BLK) )
                (=> true
                    (= (or (= p
                              ent)
                           (= p
                              ext))
                       (not (elem@@BLK p
                                       PLF))))))

(assert (= BLK
           (bunion@@BLK (bunion@@BLK (mk-set@@BLK ent)
                                     (mk-set@@BLK ext))
                        PLF)))

(assert (= loc
           empty-fun@@TRAIN@@BLK))

(assert (= in
           empty-set@@TRAIN))

(assert (not (forall ( (t TRAIN) )
                     (=> (elem@@TRAIN t
                                      in)
                         (elem@@BLK (select loc
                                            t)
                                    BLK)))))

(check-sat-using (or-else (then qe smt) (then skip smt) (then (using-params simplify :expand-power true) smt)))

(pop)
(echo "> train0/INIT/INV/inv2")
(push)
(declare-sort BLK 0)
(declare-sort LOC 0)
(declare-sort TRAIN 0)
(define-sort pfun (a b) (Array a b))
(declare-sort set 1)
(declare-const PLF (set BLK))
(declare-const BLK (set BLK))
(declare-const LOC (set LOC))
(declare-const TRAIN (set TRAIN))
(declare-const ent BLK)
(declare-const ext BLK)
(declare-const in (set TRAIN))
(declare-const loc (pfun TRAIN BLK))
(declare-const p BLK)
(declare-const q BLK)
(declare-const t TRAIN)
(declare-const t_0 TRAIN)
(declare-const t_1 TRAIN)
(declare-const t_2 TRAIN)
(declare-const t_3 TRAIN)
(declare-fun apply@@TRAIN@@BLK ((pfun TRAIN BLK) TRAIN) BLK)
(declare-fun dom-rest@@TRAIN@@BLK ((set TRAIN) (pfun TRAIN BLK)) (pfun TRAIN BLK))
(declare-fun dom-subt@@TRAIN@@BLK ((set TRAIN) (pfun TRAIN BLK)) (pfun TRAIN BLK))
(declare-fun dom@@TRAIN@@BLK ((pfun TRAIN BLK)) (set TRAIN))
(declare-fun elem@@BLK (BLK (set BLK)) Bool)
(declare-fun elem@@LOC (LOC (set LOC)) Bool)
(declare-fun elem@@TRAIN (TRAIN (set TRAIN)) Bool)
(declare-fun elem@Open@@pfun@@TRAIN@@BLK@Close ((pfun TRAIN BLK) (set (pfun TRAIN BLK))) Bool)
(declare-fun empty-fun@@TRAIN@@BLK () (pfun TRAIN BLK))
(declare-fun empty-set@@BLK () (set BLK))
(declare-fun empty-set@@LOC () (set LOC))
(declare-fun empty-set@@TRAIN () (set TRAIN))
(declare-fun empty-set@Open@@pfun@@TRAIN@@BLK@Close () (set (pfun TRAIN BLK)))
(declare-fun intersect@@BLK ((set BLK) (set BLK)) (set BLK))
(declare-fun intersect@@LOC ((set LOC) (set LOC)) (set LOC))
(declare-fun intersect@@TRAIN ((set TRAIN) (set TRAIN)) (set TRAIN))
(declare-fun intersect@Open@@pfun@@TRAIN@@BLK@Close ((set (pfun TRAIN BLK)) (set (pfun TRAIN BLK))) (set (pfun TRAIN BLK)))
(declare-fun mk-fun@@TRAIN@@BLK (TRAIN BLK) (pfun TRAIN BLK))
(declare-fun mk-set@@BLK (BLK) (set BLK))
(declare-fun mk-set@@LOC (LOC) (set LOC))
(declare-fun mk-set@@TRAIN (TRAIN) (set TRAIN))
(declare-fun mk-set@Open@@pfun@@TRAIN@@BLK@Close ((pfun TRAIN BLK)) (set (pfun TRAIN BLK)))
(declare-fun ovl@@TRAIN@@BLK ((pfun TRAIN BLK) (pfun TRAIN BLK)) (pfun TRAIN BLK))
(declare-fun set-diff@@BLK ((set BLK) (set BLK)) (set BLK))
(declare-fun set-diff@@LOC ((set LOC) (set LOC)) (set LOC))
(declare-fun set-diff@@TRAIN ((set TRAIN) (set TRAIN)) (set TRAIN))
(declare-fun set-diff@Open@@pfun@@TRAIN@@BLK@Close ((set (pfun TRAIN BLK)) (set (pfun TRAIN BLK))) (set (pfun TRAIN BLK)))
(declare-fun tfun@@TRAIN@@BLK ((set TRAIN) (set BLK)) (set (pfun TRAIN BLK)))
(declare-fun bunion@@BLK ((set BLK) (set BLK)) (set BLK))
(declare-fun bunion@@LOC ((set LOC) (set LOC)) (set LOC))
(declare-fun bunion@@TRAIN ((set TRAIN) (set TRAIN)) (set TRAIN))
(declare-fun bunion@Open@@pfun@@TRAIN@@BLK@Close ((set (pfun TRAIN BLK)) (set (pfun TRAIN BLK))) (set (pfun TRAIN BLK)))
(assert (forall ( (x BLK)
                  (y BLK) )
                (= (elem@@BLK x
                              (mk-set@@BLK y))
                   (= x
                      y))))

(assert (forall ( (x BLK)
                  (s1 (set BLK))
                  (s2 (set BLK)) )
                (= (elem@@BLK x
                              (set-diff@@BLK s1
                                             s2))
                   (and (elem@@BLK x
                                   s1)
                        (not (elem@@BLK x
                                        s2))))))

(assert (forall ( (x BLK)
                  (s1 (set BLK))
                  (s2 (set BLK)) )
                (= (elem@@BLK x
                              (intersect@@BLK s1
                                              s2))
                   (and (elem@@BLK x
                                   s1)
                        (elem@@BLK x
                                   s2)))))

(assert (forall ( (x BLK)
                  (s1 (set BLK))
                  (s2 (set BLK)) )
                (= (elem@@BLK x
                              (bunion@@BLK s1
                                           s2))
                   (or (elem@@BLK x
                                  s1)
                       (elem@@BLK x
                                  s2)))))

(assert (forall ( (x BLK)
                  (s1 (set BLK))
                  (s2 (set BLK)) )
                (not (elem@@BLK x
                                empty-set@@BLK))))

(assert (forall ( (x LOC)
                  (y LOC) )
                (= (elem@@LOC x
                              (mk-set@@LOC y))
                   (= x
                      y))))

(assert (forall ( (x LOC)
                  (s1 (set LOC))
                  (s2 (set LOC)) )
                (= (elem@@LOC x
                              (set-diff@@LOC s1
                                             s2))
                   (and (elem@@LOC x
                                   s1)
                        (not (elem@@LOC x
                                        s2))))))

(assert (forall ( (x LOC)
                  (s1 (set LOC))
                  (s2 (set LOC)) )
                (= (elem@@LOC x
                              (intersect@@LOC s1
                                              s2))
                   (and (elem@@LOC x
                                   s1)
                        (elem@@LOC x
                                   s2)))))

(assert (forall ( (x LOC)
                  (s1 (set LOC))
                  (s2 (set LOC)) )
                (= (elem@@LOC x
                              (bunion@@LOC s1
                                           s2))
                   (or (elem@@LOC x
                                  s1)
                       (elem@@LOC x
                                  s2)))))

(assert (forall ( (x LOC)
                  (s1 (set LOC))
                  (s2 (set LOC)) )
                (not (elem@@LOC x
                                empty-set@@LOC))))

(assert (forall ( (x TRAIN)
                  (y TRAIN) )
                (= (elem@@TRAIN x
                                (mk-set@@TRAIN y))
                   (= x
                      y))))

(assert (forall ( (x TRAIN)
                  (s1 (set TRAIN))
                  (s2 (set TRAIN)) )
                (= (elem@@TRAIN x
                                (set-diff@@TRAIN s1
                                                 s2))
                   (and (elem@@TRAIN x
                                     s1)
                        (not (elem@@TRAIN x
                                          s2))))))

(assert (forall ( (x TRAIN)
                  (s1 (set TRAIN))
                  (s2 (set TRAIN)) )
                (= (elem@@TRAIN x
                                (intersect@@TRAIN s1
                                                  s2))
                   (and (elem@@TRAIN x
                                     s1)
                        (elem@@TRAIN x
                                     s2)))))

(assert (forall ( (x TRAIN)
                  (s1 (set TRAIN))
                  (s2 (set TRAIN)) )
                (= (elem@@TRAIN x
                                (bunion@@TRAIN s1
                                               s2))
                   (or (elem@@TRAIN x
                                    s1)
                       (elem@@TRAIN x
                                    s2)))))

(assert (forall ( (x TRAIN)
                  (s1 (set TRAIN))
                  (s2 (set TRAIN)) )
                (not (elem@@TRAIN x
                                  empty-set@@TRAIN))))

(assert (forall ( (f1 (pfun TRAIN
                            BLK))
                  (f2 (pfun TRAIN
                            BLK)) )
                (= (bunion@@TRAIN (dom@@TRAIN@@BLK f1)
                                  (dom@@TRAIN@@BLK f2))
                   (dom@@TRAIN@@BLK (ovl@@TRAIN@@BLK f1
                                                     f2)))))

(assert (= (dom@@TRAIN@@BLK empty-fun@@TRAIN@@BLK)
           empty-set@@TRAIN))

(assert (forall ( (x TRAIN)
                  (y BLK) )
                (= (dom@@TRAIN@@BLK (mk-fun@@TRAIN@@BLK x
                                                        y))
                   (mk-set@@TRAIN x))))

(assert (forall ( (f1 (pfun TRAIN
                            BLK))
                  (f2 (pfun TRAIN
                            BLK))
                  (x TRAIN) )
                (=> (elem@@TRAIN x
                                 (dom@@TRAIN@@BLK f2))
                    (= (select (ovl@@TRAIN@@BLK f1
                                                f2)
                               x)
                       (select f2
                               x)))))

(assert (forall ( (f1 (pfun TRAIN
                            BLK))
                  (f2 (pfun TRAIN
                            BLK))
                  (x TRAIN) )
                (=> (elem@@TRAIN x
                                 (set-diff@@TRAIN (dom@@TRAIN@@BLK f1)
                                                  (dom@@TRAIN@@BLK f2)))
                    (= (select (ovl@@TRAIN@@BLK f1
                                                f2)
                               x)
                       (select f1
                               x)))))

(assert (forall ( (f1 (pfun TRAIN
                            BLK))
                  (s1 (set TRAIN)) )
                (= (dom@@TRAIN@@BLK (dom-subt@@TRAIN@@BLK s1
                                                          f1))
                   (set-diff@@TRAIN (dom@@TRAIN@@BLK f1)
                                    s1))))

(assert (forall ( (x TRAIN)
                  (y BLK) )
                (= (select (mk-fun@@TRAIN@@BLK x
                                               y)
                           x)
                   y)))

(assert (forall ( (f1 (pfun TRAIN
                            BLK))
                  (s1 (set TRAIN))
                  (x TRAIN) )
                (=> (elem@@TRAIN x
                                 (intersect@@TRAIN s1
                                                   (dom@@TRAIN@@BLK f1)))
                    (= (select (dom-rest@@TRAIN@@BLK s1
                                                     f1)
                               x)
                       (select f1
                               x)))))

(assert (forall ( (f1 (pfun TRAIN
                            BLK))
                  (s1 (set TRAIN))
                  (x TRAIN) )
                (=> (elem@@TRAIN x
                                 (set-diff@@TRAIN (dom@@TRAIN@@BLK f1)
                                                  s1))
                    (= (select (dom-subt@@TRAIN@@BLK s1
                                                     f1)
                               x)
                       (select f1
                               x)))))

(assert (forall ( (x (pfun TRAIN
                           BLK))
                  (y (pfun TRAIN
                           BLK)) )
                (= (elem@Open@@pfun@@TRAIN@@BLK@Close x
                                                      (mk-set@Open@@pfun@@TRAIN@@BLK@Close y))
                   (= x
                      y))))

(assert (forall ( (x (pfun TRAIN
                           BLK))
                  (s1 (set (pfun TRAIN
                                 BLK)))
                  (s2 (set (pfun TRAIN
                                 BLK))) )
                (= (elem@Open@@pfun@@TRAIN@@BLK@Close x
                                                      (set-diff@Open@@pfun@@TRAIN@@BLK@Close s1
                                                                                             s2))
                   (and (elem@Open@@pfun@@TRAIN@@BLK@Close x
                                                           s1)
                        (not (elem@Open@@pfun@@TRAIN@@BLK@Close x
                                                                s2))))))

(assert (forall ( (x (pfun TRAIN
                           BLK))
                  (s1 (set (pfun TRAIN
                                 BLK)))
                  (s2 (set (pfun TRAIN
                                 BLK))) )
                (= (elem@Open@@pfun@@TRAIN@@BLK@Close x
                                                      (intersect@Open@@pfun@@TRAIN@@BLK@Close s1
                                                                                              s2))
                   (and (elem@Open@@pfun@@TRAIN@@BLK@Close x
                                                           s1)
                        (elem@Open@@pfun@@TRAIN@@BLK@Close x
                                                           s2)))))

(assert (forall ( (x (pfun TRAIN
                           BLK))
                  (s1 (set (pfun TRAIN
                                 BLK)))
                  (s2 (set (pfun TRAIN
                                 BLK))) )
                (= (elem@Open@@pfun@@TRAIN@@BLK@Close x
                                                      (bunion@Open@@pfun@@TRAIN@@BLK@Close s1
                                                                                           s2))
                   (or (elem@Open@@pfun@@TRAIN@@BLK@Close x
                                                          s1)
                       (elem@Open@@pfun@@TRAIN@@BLK@Close x
                                                          s2)))))

(assert (forall ( (x (pfun TRAIN
                           BLK))
                  (s1 (set (pfun TRAIN
                                 BLK)))
                  (s2 (set (pfun TRAIN
                                 BLK))) )
                (not (elem@Open@@pfun@@TRAIN@@BLK@Close x
                                                        empty-set@Open@@pfun@@TRAIN@@BLK@Close))))

(assert (and (not (= ent
                     ext))
             (not (elem@@BLK ent
                             PLF))
             (not (elem@@BLK ext
                             PLF))))

(assert (forall ( (p BLK) )
                (=> true
                    (= (not (= p
                               ext))
                       (elem@@BLK p
                                  (bunion@@BLK (mk-set@@BLK ent)
                                               PLF))))))

(assert (forall ( (p BLK) )
                (=> true
                    (= (not (= p
                               ent))
                       (elem@@BLK p
                                  (bunion@@BLK (mk-set@@BLK ext)
                                               PLF))))))

(assert (forall ( (p BLK) )
                (=> true
                    (= (or (= p
                              ent)
                           (= p
                              ext))
                       (not (elem@@BLK p
                                       PLF))))))

(assert (= BLK
           (bunion@@BLK (bunion@@BLK (mk-set@@BLK ent)
                                     (mk-set@@BLK ext))
                        PLF)))

(assert (= loc
           empty-fun@@TRAIN@@BLK))

(assert (= in
           empty-set@@TRAIN))

(assert (not (= (dom@@TRAIN@@BLK loc)
                in)))

(check-sat-using (or-else (then qe smt) (then skip smt) (then (using-params simplify :expand-power true) smt)))

(pop)
(echo "> train0/SKIP/CO/co0")
(push)
(declare-sort BLK 0)
(declare-sort LOC 0)
(declare-sort TRAIN 0)
(define-sort pfun (a b) (Array a b))
(declare-sort set 1)
(declare-const PLF (set BLK))
(declare-const BLK (set BLK))
(declare-const LOC (set LOC))
(declare-const TRAIN (set TRAIN))
(declare-const ent BLK)
(declare-const ext BLK)
(declare-const in (set TRAIN))
(declare-const in@prime (set TRAIN))
(declare-const loc (pfun TRAIN BLK))
(declare-const loc@prime (pfun TRAIN BLK))
(declare-const p BLK)
(declare-const q BLK)
(declare-const t TRAIN)
(declare-const t_0 TRAIN)
(declare-const t_1 TRAIN)
(declare-const t_2 TRAIN)
(declare-const t_3 TRAIN)
(declare-fun apply@@TRAIN@@BLK ((pfun TRAIN BLK) TRAIN) BLK)
(declare-fun dom-rest@@TRAIN@@BLK ((set TRAIN) (pfun TRAIN BLK)) (pfun TRAIN BLK))
(declare-fun dom-subt@@TRAIN@@BLK ((set TRAIN) (pfun TRAIN BLK)) (pfun TRAIN BLK))
(declare-fun dom@@TRAIN@@BLK ((pfun TRAIN BLK)) (set TRAIN))
(declare-fun elem@@BLK (BLK (set BLK)) Bool)
(declare-fun elem@@LOC (LOC (set LOC)) Bool)
(declare-fun elem@@TRAIN (TRAIN (set TRAIN)) Bool)
(declare-fun elem@Open@@pfun@@TRAIN@@BLK@Close ((pfun TRAIN BLK) (set (pfun TRAIN BLK))) Bool)
(declare-fun empty-fun@@TRAIN@@BLK () (pfun TRAIN BLK))
(declare-fun empty-set@@BLK () (set BLK))
(declare-fun empty-set@@LOC () (set LOC))
(declare-fun empty-set@@TRAIN () (set TRAIN))
(declare-fun empty-set@Open@@pfun@@TRAIN@@BLK@Close () (set (pfun TRAIN BLK)))
(declare-fun intersect@@BLK ((set BLK) (set BLK)) (set BLK))
(declare-fun intersect@@LOC ((set LOC) (set LOC)) (set LOC))
(declare-fun intersect@@TRAIN ((set TRAIN) (set TRAIN)) (set TRAIN))
(declare-fun intersect@Open@@pfun@@TRAIN@@BLK@Close ((set (pfun TRAIN BLK)) (set (pfun TRAIN BLK))) (set (pfun TRAIN BLK)))
(declare-fun mk-fun@@TRAIN@@BLK (TRAIN BLK) (pfun TRAIN BLK))
(declare-fun mk-set@@BLK (BLK) (set BLK))
(declare-fun mk-set@@LOC (LOC) (set LOC))
(declare-fun mk-set@@TRAIN (TRAIN) (set TRAIN))
(declare-fun mk-set@Open@@pfun@@TRAIN@@BLK@Close ((pfun TRAIN BLK)) (set (pfun TRAIN BLK)))
(declare-fun ovl@@TRAIN@@BLK ((pfun TRAIN BLK) (pfun TRAIN BLK)) (pfun TRAIN BLK))
(declare-fun set-diff@@BLK ((set BLK) (set BLK)) (set BLK))
(declare-fun set-diff@@LOC ((set LOC) (set LOC)) (set LOC))
(declare-fun set-diff@@TRAIN ((set TRAIN) (set TRAIN)) (set TRAIN))
(declare-fun set-diff@Open@@pfun@@TRAIN@@BLK@Close ((set (pfun TRAIN BLK)) (set (pfun TRAIN BLK))) (set (pfun TRAIN BLK)))
(declare-fun tfun@@TRAIN@@BLK ((set TRAIN) (set BLK)) (set (pfun TRAIN BLK)))
(declare-fun bunion@@BLK ((set BLK) (set BLK)) (set BLK))
(declare-fun bunion@@LOC ((set LOC) (set LOC)) (set LOC))
(declare-fun bunion@@TRAIN ((set TRAIN) (set TRAIN)) (set TRAIN))
(declare-fun bunion@Open@@pfun@@TRAIN@@BLK@Close ((set (pfun TRAIN BLK)) (set (pfun TRAIN BLK))) (set (pfun TRAIN BLK)))
(assert (forall ( (x BLK)
                  (y BLK) )
                (= (elem@@BLK x
                              (mk-set@@BLK y))
                   (= x
                      y))))

(assert (forall ( (x BLK)
                  (s1 (set BLK))
                  (s2 (set BLK)) )
                (= (elem@@BLK x
                              (set-diff@@BLK s1
                                             s2))
                   (and (elem@@BLK x
                                   s1)
                        (not (elem@@BLK x
                                        s2))))))

(assert (forall ( (x BLK)
                  (s1 (set BLK))
                  (s2 (set BLK)) )
                (= (elem@@BLK x
                              (intersect@@BLK s1
                                              s2))
                   (and (elem@@BLK x
                                   s1)
                        (elem@@BLK x
                                   s2)))))

(assert (forall ( (x BLK)
                  (s1 (set BLK))
                  (s2 (set BLK)) )
                (= (elem@@BLK x
                              (bunion@@BLK s1
                                           s2))
                   (or (elem@@BLK x
                                  s1)
                       (elem@@BLK x
                                  s2)))))

(assert (forall ( (x BLK)
                  (s1 (set BLK))
                  (s2 (set BLK)) )
                (not (elem@@BLK x
                                empty-set@@BLK))))

(assert (forall ( (x LOC)
                  (y LOC) )
                (= (elem@@LOC x
                              (mk-set@@LOC y))
                   (= x
                      y))))

(assert (forall ( (x LOC)
                  (s1 (set LOC))
                  (s2 (set LOC)) )
                (= (elem@@LOC x
                              (set-diff@@LOC s1
                                             s2))
                   (and (elem@@LOC x
                                   s1)
                        (not (elem@@LOC x
                                        s2))))))

(assert (forall ( (x LOC)
                  (s1 (set LOC))
                  (s2 (set LOC)) )
                (= (elem@@LOC x
                              (intersect@@LOC s1
                                              s2))
                   (and (elem@@LOC x
                                   s1)
                        (elem@@LOC x
                                   s2)))))

(assert (forall ( (x LOC)
                  (s1 (set LOC))
                  (s2 (set LOC)) )
                (= (elem@@LOC x
                              (bunion@@LOC s1
                                           s2))
                   (or (elem@@LOC x
                                  s1)
                       (elem@@LOC x
                                  s2)))))

(assert (forall ( (x LOC)
                  (s1 (set LOC))
                  (s2 (set LOC)) )
                (not (elem@@LOC x
                                empty-set@@LOC))))

(assert (forall ( (x TRAIN)
                  (y TRAIN) )
                (= (elem@@TRAIN x
                                (mk-set@@TRAIN y))
                   (= x
                      y))))

(assert (forall ( (x TRAIN)
                  (s1 (set TRAIN))
                  (s2 (set TRAIN)) )
                (= (elem@@TRAIN x
                                (set-diff@@TRAIN s1
                                                 s2))
                   (and (elem@@TRAIN x
                                     s1)
                        (not (elem@@TRAIN x
                                          s2))))))

(assert (forall ( (x TRAIN)
                  (s1 (set TRAIN))
                  (s2 (set TRAIN)) )
                (= (elem@@TRAIN x
                                (intersect@@TRAIN s1
                                                  s2))
                   (and (elem@@TRAIN x
                                     s1)
                        (elem@@TRAIN x
                                     s2)))))

(assert (forall ( (x TRAIN)
                  (s1 (set TRAIN))
                  (s2 (set TRAIN)) )
                (= (elem@@TRAIN x
                                (bunion@@TRAIN s1
                                               s2))
                   (or (elem@@TRAIN x
                                    s1)
                       (elem@@TRAIN x
                                    s2)))))

(assert (forall ( (x TRAIN)
                  (s1 (set TRAIN))
                  (s2 (set TRAIN)) )
                (not (elem@@TRAIN x
                                  empty-set@@TRAIN))))

(assert (forall ( (f1 (pfun TRAIN
                            BLK))
                  (f2 (pfun TRAIN
                            BLK)) )
                (= (bunion@@TRAIN (dom@@TRAIN@@BLK f1)
                                  (dom@@TRAIN@@BLK f2))
                   (dom@@TRAIN@@BLK (ovl@@TRAIN@@BLK f1
                                                     f2)))))

(assert (= (dom@@TRAIN@@BLK empty-fun@@TRAIN@@BLK)
           empty-set@@TRAIN))

(assert (forall ( (x TRAIN)
                  (y BLK) )
                (= (dom@@TRAIN@@BLK (mk-fun@@TRAIN@@BLK x
                                                        y))
                   (mk-set@@TRAIN x))))

(assert (forall ( (f1 (pfun TRAIN
                            BLK))
                  (f2 (pfun TRAIN
                            BLK))
                  (x TRAIN) )
                (=> (elem@@TRAIN x
                                 (dom@@TRAIN@@BLK f2))
                    (= (select (ovl@@TRAIN@@BLK f1
                                                f2)
                               x)
                       (select f2
                               x)))))

(assert (forall ( (f1 (pfun TRAIN
                            BLK))
                  (f2 (pfun TRAIN
                            BLK))
                  (x TRAIN) )
                (=> (elem@@TRAIN x
                                 (set-diff@@TRAIN (dom@@TRAIN@@BLK f1)
                                                  (dom@@TRAIN@@BLK f2)))
                    (= (select (ovl@@TRAIN@@BLK f1
                                                f2)
                               x)
                       (select f1
                               x)))))

(assert (forall ( (f1 (pfun TRAIN
                            BLK))
                  (s1 (set TRAIN)) )
                (= (dom@@TRAIN@@BLK (dom-subt@@TRAIN@@BLK s1
                                                          f1))
                   (set-diff@@TRAIN (dom@@TRAIN@@BLK f1)
                                    s1))))

(assert (forall ( (x TRAIN)
                  (y BLK) )
                (= (select (mk-fun@@TRAIN@@BLK x
                                               y)
                           x)
                   y)))

(assert (forall ( (f1 (pfun TRAIN
                            BLK))
                  (s1 (set TRAIN))
                  (x TRAIN) )
                (=> (elem@@TRAIN x
                                 (intersect@@TRAIN s1
                                                   (dom@@TRAIN@@BLK f1)))
                    (= (select (dom-rest@@TRAIN@@BLK s1
                                                     f1)
                               x)
                       (select f1
                               x)))))

(assert (forall ( (f1 (pfun TRAIN
                            BLK))
                  (s1 (set TRAIN))
                  (x TRAIN) )
                (=> (elem@@TRAIN x
                                 (set-diff@@TRAIN (dom@@TRAIN@@BLK f1)
                                                  s1))
                    (= (select (dom-subt@@TRAIN@@BLK s1
                                                     f1)
                               x)
                       (select f1
                               x)))))

(assert (forall ( (x (pfun TRAIN
                           BLK))
                  (y (pfun TRAIN
                           BLK)) )
                (= (elem@Open@@pfun@@TRAIN@@BLK@Close x
                                                      (mk-set@Open@@pfun@@TRAIN@@BLK@Close y))
                   (= x
                      y))))

(assert (forall ( (x (pfun TRAIN
                           BLK))
                  (s1 (set (pfun TRAIN
                                 BLK)))
                  (s2 (set (pfun TRAIN
                                 BLK))) )
                (= (elem@Open@@pfun@@TRAIN@@BLK@Close x
                                                      (set-diff@Open@@pfun@@TRAIN@@BLK@Close s1
                                                                                             s2))
                   (and (elem@Open@@pfun@@TRAIN@@BLK@Close x
                                                           s1)
                        (not (elem@Open@@pfun@@TRAIN@@BLK@Close x
                                                                s2))))))

(assert (forall ( (x (pfun TRAIN
                           BLK))
                  (s1 (set (pfun TRAIN
                                 BLK)))
                  (s2 (set (pfun TRAIN
                                 BLK))) )
                (= (elem@Open@@pfun@@TRAIN@@BLK@Close x
                                                      (intersect@Open@@pfun@@TRAIN@@BLK@Close s1
                                                                                              s2))
                   (and (elem@Open@@pfun@@TRAIN@@BLK@Close x
                                                           s1)
                        (elem@Open@@pfun@@TRAIN@@BLK@Close x
                                                           s2)))))

(assert (forall ( (x (pfun TRAIN
                           BLK))
                  (s1 (set (pfun TRAIN
                                 BLK)))
                  (s2 (set (pfun TRAIN
                                 BLK))) )
                (= (elem@Open@@pfun@@TRAIN@@BLK@Close x
                                                      (bunion@Open@@pfun@@TRAIN@@BLK@Close s1
                                                                                           s2))
                   (or (elem@Open@@pfun@@TRAIN@@BLK@Close x
                                                          s1)
                       (elem@Open@@pfun@@TRAIN@@BLK@Close x
                                                          s2)))))

(assert (forall ( (x (pfun TRAIN
                           BLK))
                  (s1 (set (pfun TRAIN
                                 BLK)))
                  (s2 (set (pfun TRAIN
                                 BLK))) )
                (not (elem@Open@@pfun@@TRAIN@@BLK@Close x
                                                        empty-set@Open@@pfun@@TRAIN@@BLK@Close))))

(assert (and (not (= ent
                     ext))
             (not (elem@@BLK ent
                             PLF))
             (not (elem@@BLK ext
                             PLF))))

(assert (forall ( (p BLK) )
                (=> true
                    (= (not (= p
                               ext))
                       (elem@@BLK p
                                  (bunion@@BLK (mk-set@@BLK ent)
                                               PLF))))))

(assert (forall ( (p BLK) )
                (=> true
                    (= (not (= p
                               ent))
                       (elem@@BLK p
                                  (bunion@@BLK (mk-set@@BLK ext)
                                               PLF))))))

(assert (forall ( (p BLK) )
                (=> true
                    (= (or (= p
                              ent)
                           (= p
                              ext))
                       (not (elem@@BLK p
                                       PLF))))))

(assert (= BLK
           (bunion@@BLK (bunion@@BLK (mk-set@@BLK ent)
                                     (mk-set@@BLK ext))
                        PLF)))

(assert (forall ( (t TRAIN) )
                (=> (elem@@TRAIN t
                                 in)
                    (elem@@BLK (select loc
                                       t)
                               BLK))))

(assert (= (dom@@TRAIN@@BLK loc)
           in))

(assert (= in@prime
           in))

(assert (= loc@prime
           loc))

(assert (not (forall ( (t TRAIN) )
                     (=> (and (not (elem@@TRAIN t
                                                in))
                              (elem@@TRAIN t
                                           in@prime))
                         (= (select loc@prime
                                    t)
                            ent)))))

(check-sat-using (or-else (then qe smt) (then skip smt) (then (using-params simplify :expand-power true) smt)))

(pop)
(echo "> train0/SKIP/CO/co1")
(push)
(declare-sort BLK 0)
(declare-sort LOC 0)
(declare-sort TRAIN 0)
(define-sort pfun (a b) (Array a b))
(declare-sort set 1)
(declare-const PLF (set BLK))
(declare-const BLK (set BLK))
(declare-const LOC (set LOC))
(declare-const TRAIN (set TRAIN))
(declare-const ent BLK)
(declare-const ext BLK)
(declare-const in (set TRAIN))
(declare-const in@prime (set TRAIN))
(declare-const loc (pfun TRAIN BLK))
(declare-const loc@prime (pfun TRAIN BLK))
(declare-const p BLK)
(declare-const q BLK)
(declare-const t TRAIN)
(declare-const t_0 TRAIN)
(declare-const t_1 TRAIN)
(declare-const t_2 TRAIN)
(declare-const t_3 TRAIN)
(declare-fun apply@@TRAIN@@BLK ((pfun TRAIN BLK) TRAIN) BLK)
(declare-fun dom-rest@@TRAIN@@BLK ((set TRAIN) (pfun TRAIN BLK)) (pfun TRAIN BLK))
(declare-fun dom-subt@@TRAIN@@BLK ((set TRAIN) (pfun TRAIN BLK)) (pfun TRAIN BLK))
(declare-fun dom@@TRAIN@@BLK ((pfun TRAIN BLK)) (set TRAIN))
(declare-fun elem@@BLK (BLK (set BLK)) Bool)
(declare-fun elem@@LOC (LOC (set LOC)) Bool)
(declare-fun elem@@TRAIN (TRAIN (set TRAIN)) Bool)
(declare-fun elem@Open@@pfun@@TRAIN@@BLK@Close ((pfun TRAIN BLK) (set (pfun TRAIN BLK))) Bool)
(declare-fun empty-fun@@TRAIN@@BLK () (pfun TRAIN BLK))
(declare-fun empty-set@@BLK () (set BLK))
(declare-fun empty-set@@LOC () (set LOC))
(declare-fun empty-set@@TRAIN () (set TRAIN))
(declare-fun empty-set@Open@@pfun@@TRAIN@@BLK@Close () (set (pfun TRAIN BLK)))
(declare-fun intersect@@BLK ((set BLK) (set BLK)) (set BLK))
(declare-fun intersect@@LOC ((set LOC) (set LOC)) (set LOC))
(declare-fun intersect@@TRAIN ((set TRAIN) (set TRAIN)) (set TRAIN))
(declare-fun intersect@Open@@pfun@@TRAIN@@BLK@Close ((set (pfun TRAIN BLK)) (set (pfun TRAIN BLK))) (set (pfun TRAIN BLK)))
(declare-fun mk-fun@@TRAIN@@BLK (TRAIN BLK) (pfun TRAIN BLK))
(declare-fun mk-set@@BLK (BLK) (set BLK))
(declare-fun mk-set@@LOC (LOC) (set LOC))
(declare-fun mk-set@@TRAIN (TRAIN) (set TRAIN))
(declare-fun mk-set@Open@@pfun@@TRAIN@@BLK@Close ((pfun TRAIN BLK)) (set (pfun TRAIN BLK)))
(declare-fun ovl@@TRAIN@@BLK ((pfun TRAIN BLK) (pfun TRAIN BLK)) (pfun TRAIN BLK))
(declare-fun set-diff@@BLK ((set BLK) (set BLK)) (set BLK))
(declare-fun set-diff@@LOC ((set LOC) (set LOC)) (set LOC))
(declare-fun set-diff@@TRAIN ((set TRAIN) (set TRAIN)) (set TRAIN))
(declare-fun set-diff@Open@@pfun@@TRAIN@@BLK@Close ((set (pfun TRAIN BLK)) (set (pfun TRAIN BLK))) (set (pfun TRAIN BLK)))
(declare-fun tfun@@TRAIN@@BLK ((set TRAIN) (set BLK)) (set (pfun TRAIN BLK)))
(declare-fun bunion@@BLK ((set BLK) (set BLK)) (set BLK))
(declare-fun bunion@@LOC ((set LOC) (set LOC)) (set LOC))
(declare-fun bunion@@TRAIN ((set TRAIN) (set TRAIN)) (set TRAIN))
(declare-fun bunion@Open@@pfun@@TRAIN@@BLK@Close ((set (pfun TRAIN BLK)) (set (pfun TRAIN BLK))) (set (pfun TRAIN BLK)))
(assert (forall ( (x BLK)
                  (y BLK) )
                (= (elem@@BLK x
                              (mk-set@@BLK y))
                   (= x
                      y))))

(assert (forall ( (x BLK)
                  (s1 (set BLK))
                  (s2 (set BLK)) )
                (= (elem@@BLK x
                              (set-diff@@BLK s1
                                             s2))
                   (and (elem@@BLK x
                                   s1)
                        (not (elem@@BLK x
                                        s2))))))

(assert (forall ( (x BLK)
                  (s1 (set BLK))
                  (s2 (set BLK)) )
                (= (elem@@BLK x
                              (intersect@@BLK s1
                                              s2))
                   (and (elem@@BLK x
                                   s1)
                        (elem@@BLK x
                                   s2)))))

(assert (forall ( (x BLK)
                  (s1 (set BLK))
                  (s2 (set BLK)) )
                (= (elem@@BLK x
                              (bunion@@BLK s1
                                           s2))
                   (or (elem@@BLK x
                                  s1)
                       (elem@@BLK x
                                  s2)))))

(assert (forall ( (x BLK)
                  (s1 (set BLK))
                  (s2 (set BLK)) )
                (not (elem@@BLK x
                                empty-set@@BLK))))

(assert (forall ( (x LOC)
                  (y LOC) )
                (= (elem@@LOC x
                              (mk-set@@LOC y))
                   (= x
                      y))))

(assert (forall ( (x LOC)
                  (s1 (set LOC))
                  (s2 (set LOC)) )
                (= (elem@@LOC x
                              (set-diff@@LOC s1
                                             s2))
                   (and (elem@@LOC x
                                   s1)
                        (not (elem@@LOC x
                                        s2))))))

(assert (forall ( (x LOC)
                  (s1 (set LOC))
                  (s2 (set LOC)) )
                (= (elem@@LOC x
                              (intersect@@LOC s1
                                              s2))
                   (and (elem@@LOC x
                                   s1)
                        (elem@@LOC x
                                   s2)))))

(assert (forall ( (x LOC)
                  (s1 (set LOC))
                  (s2 (set LOC)) )
                (= (elem@@LOC x
                              (bunion@@LOC s1
                                           s2))
                   (or (elem@@LOC x
                                  s1)
                       (elem@@LOC x
                                  s2)))))

(assert (forall ( (x LOC)
                  (s1 (set LOC))
                  (s2 (set LOC)) )
                (not (elem@@LOC x
                                empty-set@@LOC))))

(assert (forall ( (x TRAIN)
                  (y TRAIN) )
                (= (elem@@TRAIN x
                                (mk-set@@TRAIN y))
                   (= x
                      y))))

(assert (forall ( (x TRAIN)
                  (s1 (set TRAIN))
                  (s2 (set TRAIN)) )
                (= (elem@@TRAIN x
                                (set-diff@@TRAIN s1
                                                 s2))
                   (and (elem@@TRAIN x
                                     s1)
                        (not (elem@@TRAIN x
                                          s2))))))

(assert (forall ( (x TRAIN)
                  (s1 (set TRAIN))
                  (s2 (set TRAIN)) )
                (= (elem@@TRAIN x
                                (intersect@@TRAIN s1
                                                  s2))
                   (and (elem@@TRAIN x
                                     s1)
                        (elem@@TRAIN x
                                     s2)))))

(assert (forall ( (x TRAIN)
                  (s1 (set TRAIN))
                  (s2 (set TRAIN)) )
                (= (elem@@TRAIN x
                                (bunion@@TRAIN s1
                                               s2))
                   (or (elem@@TRAIN x
                                    s1)
                       (elem@@TRAIN x
                                    s2)))))

(assert (forall ( (x TRAIN)
                  (s1 (set TRAIN))
                  (s2 (set TRAIN)) )
                (not (elem@@TRAIN x
                                  empty-set@@TRAIN))))

(assert (forall ( (f1 (pfun TRAIN
                            BLK))
                  (f2 (pfun TRAIN
                            BLK)) )
                (= (bunion@@TRAIN (dom@@TRAIN@@BLK f1)
                                  (dom@@TRAIN@@BLK f2))
                   (dom@@TRAIN@@BLK (ovl@@TRAIN@@BLK f1
                                                     f2)))))

(assert (= (dom@@TRAIN@@BLK empty-fun@@TRAIN@@BLK)
           empty-set@@TRAIN))

(assert (forall ( (x TRAIN)
                  (y BLK) )
                (= (dom@@TRAIN@@BLK (mk-fun@@TRAIN@@BLK x
                                                        y))
                   (mk-set@@TRAIN x))))

(assert (forall ( (f1 (pfun TRAIN
                            BLK))
                  (f2 (pfun TRAIN
                            BLK))
                  (x TRAIN) )
                (=> (elem@@TRAIN x
                                 (dom@@TRAIN@@BLK f2))
                    (= (select (ovl@@TRAIN@@BLK f1
                                                f2)
                               x)
                       (select f2
                               x)))))

(assert (forall ( (f1 (pfun TRAIN
                            BLK))
                  (f2 (pfun TRAIN
                            BLK))
                  (x TRAIN) )
                (=> (elem@@TRAIN x
                                 (set-diff@@TRAIN (dom@@TRAIN@@BLK f1)
                                                  (dom@@TRAIN@@BLK f2)))
                    (= (select (ovl@@TRAIN@@BLK f1
                                                f2)
                               x)
                       (select f1
                               x)))))

(assert (forall ( (f1 (pfun TRAIN
                            BLK))
                  (s1 (set TRAIN)) )
                (= (dom@@TRAIN@@BLK (dom-subt@@TRAIN@@BLK s1
                                                          f1))
                   (set-diff@@TRAIN (dom@@TRAIN@@BLK f1)
                                    s1))))

(assert (forall ( (x TRAIN)
                  (y BLK) )
                (= (select (mk-fun@@TRAIN@@BLK x
                                               y)
                           x)
                   y)))

(assert (forall ( (f1 (pfun TRAIN
                            BLK))
                  (s1 (set TRAIN))
                  (x TRAIN) )
                (=> (elem@@TRAIN x
                                 (intersect@@TRAIN s1
                                                   (dom@@TRAIN@@BLK f1)))
                    (= (select (dom-rest@@TRAIN@@BLK s1
                                                     f1)
                               x)
                       (select f1
                               x)))))

(assert (forall ( (f1 (pfun TRAIN
                            BLK))
                  (s1 (set TRAIN))
                  (x TRAIN) )
                (=> (elem@@TRAIN x
                                 (set-diff@@TRAIN (dom@@TRAIN@@BLK f1)
                                                  s1))
                    (= (select (dom-subt@@TRAIN@@BLK s1
                                                     f1)
                               x)
                       (select f1
                               x)))))

(assert (forall ( (x (pfun TRAIN
                           BLK))
                  (y (pfun TRAIN
                           BLK)) )
                (= (elem@Open@@pfun@@TRAIN@@BLK@Close x
                                                      (mk-set@Open@@pfun@@TRAIN@@BLK@Close y))
                   (= x
                      y))))

(assert (forall ( (x (pfun TRAIN
                           BLK))
                  (s1 (set (pfun TRAIN
                                 BLK)))
                  (s2 (set (pfun TRAIN
                                 BLK))) )
                (= (elem@Open@@pfun@@TRAIN@@BLK@Close x
                                                      (set-diff@Open@@pfun@@TRAIN@@BLK@Close s1
                                                                                             s2))
                   (and (elem@Open@@pfun@@TRAIN@@BLK@Close x
                                                           s1)
                        (not (elem@Open@@pfun@@TRAIN@@BLK@Close x
                                                                s2))))))

(assert (forall ( (x (pfun TRAIN
                           BLK))
                  (s1 (set (pfun TRAIN
                                 BLK)))
                  (s2 (set (pfun TRAIN
                                 BLK))) )
                (= (elem@Open@@pfun@@TRAIN@@BLK@Close x
                                                      (intersect@Open@@pfun@@TRAIN@@BLK@Close s1
                                                                                              s2))
                   (and (elem@Open@@pfun@@TRAIN@@BLK@Close x
                                                           s1)
                        (elem@Open@@pfun@@TRAIN@@BLK@Close x
                                                           s2)))))

(assert (forall ( (x (pfun TRAIN
                           BLK))
                  (s1 (set (pfun TRAIN
                                 BLK)))
                  (s2 (set (pfun TRAIN
                                 BLK))) )
                (= (elem@Open@@pfun@@TRAIN@@BLK@Close x
                                                      (bunion@Open@@pfun@@TRAIN@@BLK@Close s1
                                                                                           s2))
                   (or (elem@Open@@pfun@@TRAIN@@BLK@Close x
                                                          s1)
                       (elem@Open@@pfun@@TRAIN@@BLK@Close x
                                                          s2)))))

(assert (forall ( (x (pfun TRAIN
                           BLK))
                  (s1 (set (pfun TRAIN
                                 BLK)))
                  (s2 (set (pfun TRAIN
                                 BLK))) )
                (not (elem@Open@@pfun@@TRAIN@@BLK@Close x
                                                        empty-set@Open@@pfun@@TRAIN@@BLK@Close))))

(assert (and (not (= ent
                     ext))
             (not (elem@@BLK ent
                             PLF))
             (not (elem@@BLK ext
                             PLF))))

(assert (forall ( (p BLK) )
                (=> true
                    (= (not (= p
                               ext))
                       (elem@@BLK p
                                  (bunion@@BLK (mk-set@@BLK ent)
                                               PLF))))))

(assert (forall ( (p BLK) )
                (=> true
                    (= (not (= p
                               ent))
                       (elem@@BLK p
                                  (bunion@@BLK (mk-set@@BLK ext)
                                               PLF))))))

(assert (forall ( (p BLK) )
                (=> true
                    (= (or (= p
                              ent)
                           (= p
                              ext))
                       (not (elem@@BLK p
                                       PLF))))))

(assert (= BLK
           (bunion@@BLK (bunion@@BLK (mk-set@@BLK ent)
                                     (mk-set@@BLK ext))
                        PLF)))

(assert (forall ( (t TRAIN) )
                (=> (elem@@TRAIN t
                                 in)
                    (elem@@BLK (select loc
                                       t)
                               BLK))))

(assert (= (dom@@TRAIN@@BLK loc)
           in))

(assert (= in@prime
           in))

(assert (= loc@prime
           loc))

(assert (not (forall ( (t TRAIN) )
                     (=> (and (elem@@TRAIN t
                                           in)
                              (= (select loc
                                         t)
                                 ent)
                              (not (elem@@BLK (select loc
                                                      t)
                                              PLF)))
                         (and (elem@@TRAIN t
                                           in@prime)
                              (or (elem@@BLK (select loc@prime
                                                     t)
                                             PLF)
                                  (= (select loc@prime
                                             t)
                                     ent)))))))

(check-sat-using (or-else (then qe smt) (then skip smt) (then (using-params simplify :expand-power true) smt)))

(pop)
(echo "> train0/enter/CO/co0/case 1/goal (292,1)")
(push)
(declare-sort BLK 0)
(declare-sort LOC 0)
(declare-sort TRAIN 0)
(define-sort pfun (a b) (Array a b))
(declare-sort set 1)
(declare-const PLF (set BLK))
(declare-const BLK (set BLK))
(declare-const LOC (set LOC))
(declare-const TRAIN (set TRAIN))
(declare-const ent BLK)
(declare-const ext BLK)
(declare-const in (set TRAIN))
(declare-const in@prime (set TRAIN))
(declare-const loc (pfun TRAIN BLK))
(declare-const loc@prime (pfun TRAIN BLK))
(declare-const p BLK)
(declare-const q BLK)
(declare-const t TRAIN)
(declare-const t_0 TRAIN)
(declare-const t_1 TRAIN)
(declare-const t_2 TRAIN)
(declare-const t_3 TRAIN)
(declare-fun apply@@TRAIN@@BLK ((pfun TRAIN BLK) TRAIN) BLK)
(declare-fun dom-rest@@TRAIN@@BLK ((set TRAIN) (pfun TRAIN BLK)) (pfun TRAIN BLK))
(declare-fun dom-subt@@TRAIN@@BLK ((set TRAIN) (pfun TRAIN BLK)) (pfun TRAIN BLK))
(declare-fun dom@@TRAIN@@BLK ((pfun TRAIN BLK)) (set TRAIN))
(declare-fun elem@@BLK (BLK (set BLK)) Bool)
(declare-fun elem@@LOC (LOC (set LOC)) Bool)
(declare-fun elem@@TRAIN (TRAIN (set TRAIN)) Bool)
(declare-fun elem@Open@@pfun@@TRAIN@@BLK@Close ((pfun TRAIN BLK) (set (pfun TRAIN BLK))) Bool)
(declare-fun empty-fun@@TRAIN@@BLK () (pfun TRAIN BLK))
(declare-fun empty-set@@BLK () (set BLK))
(declare-fun empty-set@@LOC () (set LOC))
(declare-fun empty-set@@TRAIN () (set TRAIN))
(declare-fun empty-set@Open@@pfun@@TRAIN@@BLK@Close () (set (pfun TRAIN BLK)))
(declare-fun intersect@@BLK ((set BLK) (set BLK)) (set BLK))
(declare-fun intersect@@LOC ((set LOC) (set LOC)) (set LOC))
(declare-fun intersect@@TRAIN ((set TRAIN) (set TRAIN)) (set TRAIN))
(declare-fun intersect@Open@@pfun@@TRAIN@@BLK@Close ((set (pfun TRAIN BLK)) (set (pfun TRAIN BLK))) (set (pfun TRAIN BLK)))
(declare-fun mk-fun@@TRAIN@@BLK (TRAIN BLK) (pfun TRAIN BLK))
(declare-fun mk-set@@BLK (BLK) (set BLK))
(declare-fun mk-set@@LOC (LOC) (set LOC))
(declare-fun mk-set@@TRAIN (TRAIN) (set TRAIN))
(declare-fun mk-set@Open@@pfun@@TRAIN@@BLK@Close ((pfun TRAIN BLK)) (set (pfun TRAIN BLK)))
(declare-fun ovl@@TRAIN@@BLK ((pfun TRAIN BLK) (pfun TRAIN BLK)) (pfun TRAIN BLK))
(declare-fun set-diff@@BLK ((set BLK) (set BLK)) (set BLK))
(declare-fun set-diff@@LOC ((set LOC) (set LOC)) (set LOC))
(declare-fun set-diff@@TRAIN ((set TRAIN) (set TRAIN)) (set TRAIN))
(declare-fun set-diff@Open@@pfun@@TRAIN@@BLK@Close ((set (pfun TRAIN BLK)) (set (pfun TRAIN BLK))) (set (pfun TRAIN BLK)))
(declare-fun tfun@@TRAIN@@BLK ((set TRAIN) (set BLK)) (set (pfun TRAIN BLK)))
(declare-fun bunion@@BLK ((set BLK) (set BLK)) (set BLK))
(declare-fun bunion@@LOC ((set LOC) (set LOC)) (set LOC))
(declare-fun bunion@@TRAIN ((set TRAIN) (set TRAIN)) (set TRAIN))
(declare-fun bunion@Open@@pfun@@TRAIN@@BLK@Close ((set (pfun TRAIN BLK)) (set (pfun TRAIN BLK))) (set (pfun TRAIN BLK)))
(assert (= (=> (and (not (elem@@TRAIN t_0
                                      in))
                    (elem@@TRAIN t_0
                                 in@prime))
               (= (select loc@prime
                          t_0)
                  ent))
           true))

(assert (not (=> (and (not (elem@@TRAIN t_0
                                        in))
                      (elem@@TRAIN t_0
                                   in@prime))
                 (= (select loc@prime
                            t_0)
                    ent))))

(check-sat-using (or-else (then qe smt) (then skip smt) (then (using-params simplify :expand-power true) smt)))

(pop)
(echo "> train0/enter/CO/co0/case 1/hypotheses (292,1)")
(push)
(declare-sort BLK 0)
(declare-sort LOC 0)
(declare-sort TRAIN 0)
(define-sort pfun (a b) (Array a b))
(declare-sort set 1)
(declare-const PLF (set BLK))
(declare-const BLK (set BLK))
(declare-const LOC (set LOC))
(declare-const TRAIN (set TRAIN))
(declare-const ent BLK)
(declare-const ext BLK)
(declare-const in (set TRAIN))
(declare-const in@prime (set TRAIN))
(declare-const loc (pfun TRAIN BLK))
(declare-const loc@prime (pfun TRAIN BLK))
(declare-const p BLK)
(declare-const q BLK)
(declare-const t TRAIN)
(declare-const t_0 TRAIN)
(declare-const t_1 TRAIN)
(declare-const t_2 TRAIN)
(declare-const t_3 TRAIN)
(declare-fun apply@@TRAIN@@BLK ((pfun TRAIN BLK) TRAIN) BLK)
(declare-fun dom-rest@@TRAIN@@BLK ((set TRAIN) (pfun TRAIN BLK)) (pfun TRAIN BLK))
(declare-fun dom-subt@@TRAIN@@BLK ((set TRAIN) (pfun TRAIN BLK)) (pfun TRAIN BLK))
(declare-fun dom@@TRAIN@@BLK ((pfun TRAIN BLK)) (set TRAIN))
(declare-fun elem@@BLK (BLK (set BLK)) Bool)
(declare-fun elem@@LOC (LOC (set LOC)) Bool)
(declare-fun elem@@TRAIN (TRAIN (set TRAIN)) Bool)
(declare-fun elem@Open@@pfun@@TRAIN@@BLK@Close ((pfun TRAIN BLK) (set (pfun TRAIN BLK))) Bool)
(declare-fun empty-fun@@TRAIN@@BLK () (pfun TRAIN BLK))
(declare-fun empty-set@@BLK () (set BLK))
(declare-fun empty-set@@LOC () (set LOC))
(declare-fun empty-set@@TRAIN () (set TRAIN))
(declare-fun empty-set@Open@@pfun@@TRAIN@@BLK@Close () (set (pfun TRAIN BLK)))
(declare-fun intersect@@BLK ((set BLK) (set BLK)) (set BLK))
(declare-fun intersect@@LOC ((set LOC) (set LOC)) (set LOC))
(declare-fun intersect@@TRAIN ((set TRAIN) (set TRAIN)) (set TRAIN))
(declare-fun intersect@Open@@pfun@@TRAIN@@BLK@Close ((set (pfun TRAIN BLK)) (set (pfun TRAIN BLK))) (set (pfun TRAIN BLK)))
(declare-fun mk-fun@@TRAIN@@BLK (TRAIN BLK) (pfun TRAIN BLK))
(declare-fun mk-set@@BLK (BLK) (set BLK))
(declare-fun mk-set@@LOC (LOC) (set LOC))
(declare-fun mk-set@@TRAIN (TRAIN) (set TRAIN))
(declare-fun mk-set@Open@@pfun@@TRAIN@@BLK@Close ((pfun TRAIN BLK)) (set (pfun TRAIN BLK)))
(declare-fun ovl@@TRAIN@@BLK ((pfun TRAIN BLK) (pfun TRAIN BLK)) (pfun TRAIN BLK))
(declare-fun set-diff@@BLK ((set BLK) (set BLK)) (set BLK))
(declare-fun set-diff@@LOC ((set LOC) (set LOC)) (set LOC))
(declare-fun set-diff@@TRAIN ((set TRAIN) (set TRAIN)) (set TRAIN))
(declare-fun set-diff@Open@@pfun@@TRAIN@@BLK@Close ((set (pfun TRAIN BLK)) (set (pfun TRAIN BLK))) (set (pfun TRAIN BLK)))
(declare-fun tfun@@TRAIN@@BLK ((set TRAIN) (set BLK)) (set (pfun TRAIN BLK)))
(declare-fun bunion@@BLK ((set BLK) (set BLK)) (set BLK))
(declare-fun bunion@@LOC ((set LOC) (set LOC)) (set LOC))
(declare-fun bunion@@TRAIN ((set TRAIN) (set TRAIN)) (set TRAIN))
(declare-fun bunion@Open@@pfun@@TRAIN@@BLK@Close ((set (pfun TRAIN BLK)) (set (pfun TRAIN BLK))) (set (pfun TRAIN BLK)))
(assert (= t_0
           t))

(assert (forall ( (x BLK)
                  (y BLK) )
                (= (elem@@BLK x
                              (mk-set@@BLK y))
                   (= x
                      y))))

(assert (forall ( (x BLK)
                  (s1 (set BLK))
                  (s2 (set BLK)) )
                (= (elem@@BLK x
                              (set-diff@@BLK s1
                                             s2))
                   (and (elem@@BLK x
                                   s1)
                        (not (elem@@BLK x
                                        s2))))))

(assert (forall ( (x BLK)
                  (s1 (set BLK))
                  (s2 (set BLK)) )
                (= (elem@@BLK x
                              (intersect@@BLK s1
                                              s2))
                   (and (elem@@BLK x
                                   s1)
                        (elem@@BLK x
                                   s2)))))

(assert (forall ( (x BLK)
                  (s1 (set BLK))
                  (s2 (set BLK)) )
                (= (elem@@BLK x
                              (bunion@@BLK s1
                                           s2))
                   (or (elem@@BLK x
                                  s1)
                       (elem@@BLK x
                                  s2)))))

(assert (forall ( (x BLK)
                  (s1 (set BLK))
                  (s2 (set BLK)) )
                (not (elem@@BLK x
                                empty-set@@BLK))))

(assert (forall ( (x LOC)
                  (y LOC) )
                (= (elem@@LOC x
                              (mk-set@@LOC y))
                   (= x
                      y))))

(assert (forall ( (x LOC)
                  (s1 (set LOC))
                  (s2 (set LOC)) )
                (= (elem@@LOC x
                              (set-diff@@LOC s1
                                             s2))
                   (and (elem@@LOC x
                                   s1)
                        (not (elem@@LOC x
                                        s2))))))

(assert (forall ( (x LOC)
                  (s1 (set LOC))
                  (s2 (set LOC)) )
                (= (elem@@LOC x
                              (intersect@@LOC s1
                                              s2))
                   (and (elem@@LOC x
                                   s1)
                        (elem@@LOC x
                                   s2)))))

(assert (forall ( (x LOC)
                  (s1 (set LOC))
                  (s2 (set LOC)) )
                (= (elem@@LOC x
                              (bunion@@LOC s1
                                           s2))
                   (or (elem@@LOC x
                                  s1)
                       (elem@@LOC x
                                  s2)))))

(assert (forall ( (x LOC)
                  (s1 (set LOC))
                  (s2 (set LOC)) )
                (not (elem@@LOC x
                                empty-set@@LOC))))

(assert (forall ( (x TRAIN)
                  (y TRAIN) )
                (= (elem@@TRAIN x
                                (mk-set@@TRAIN y))
                   (= x
                      y))))

(assert (forall ( (x TRAIN)
                  (s1 (set TRAIN))
                  (s2 (set TRAIN)) )
                (= (elem@@TRAIN x
                                (set-diff@@TRAIN s1
                                                 s2))
                   (and (elem@@TRAIN x
                                     s1)
                        (not (elem@@TRAIN x
                                          s2))))))

(assert (forall ( (x TRAIN)
                  (s1 (set TRAIN))
                  (s2 (set TRAIN)) )
                (= (elem@@TRAIN x
                                (intersect@@TRAIN s1
                                                  s2))
                   (and (elem@@TRAIN x
                                     s1)
                        (elem@@TRAIN x
                                     s2)))))

(assert (forall ( (x TRAIN)
                  (s1 (set TRAIN))
                  (s2 (set TRAIN)) )
                (= (elem@@TRAIN x
                                (bunion@@TRAIN s1
                                               s2))
                   (or (elem@@TRAIN x
                                    s1)
                       (elem@@TRAIN x
                                    s2)))))

(assert (forall ( (x TRAIN)
                  (s1 (set TRAIN))
                  (s2 (set TRAIN)) )
                (not (elem@@TRAIN x
                                  empty-set@@TRAIN))))

(assert (forall ( (f1 (pfun TRAIN
                            BLK))
                  (f2 (pfun TRAIN
                            BLK)) )
                (= (bunion@@TRAIN (dom@@TRAIN@@BLK f1)
                                  (dom@@TRAIN@@BLK f2))
                   (dom@@TRAIN@@BLK (ovl@@TRAIN@@BLK f1
                                                     f2)))))

(assert (= (dom@@TRAIN@@BLK empty-fun@@TRAIN@@BLK)
           empty-set@@TRAIN))

(assert (forall ( (x TRAIN)
                  (y BLK) )
                (= (dom@@TRAIN@@BLK (mk-fun@@TRAIN@@BLK x
                                                        y))
                   (mk-set@@TRAIN x))))

(assert (forall ( (f1 (pfun TRAIN
                            BLK))
                  (f2 (pfun TRAIN
                            BLK))
                  (x TRAIN) )
                (=> (elem@@TRAIN x
                                 (dom@@TRAIN@@BLK f2))
                    (= (select (ovl@@TRAIN@@BLK f1
                                                f2)
                               x)
                       (select f2
                               x)))))

(assert (forall ( (f1 (pfun TRAIN
                            BLK))
                  (f2 (pfun TRAIN
                            BLK))
                  (x TRAIN) )
                (=> (elem@@TRAIN x
                                 (set-diff@@TRAIN (dom@@TRAIN@@BLK f1)
                                                  (dom@@TRAIN@@BLK f2)))
                    (= (select (ovl@@TRAIN@@BLK f1
                                                f2)
                               x)
                       (select f1
                               x)))))

(assert (forall ( (f1 (pfun TRAIN
                            BLK))
                  (s1 (set TRAIN)) )
                (= (dom@@TRAIN@@BLK (dom-subt@@TRAIN@@BLK s1
                                                          f1))
                   (set-diff@@TRAIN (dom@@TRAIN@@BLK f1)
                                    s1))))

(assert (forall ( (x TRAIN)
                  (y BLK) )
                (= (select (mk-fun@@TRAIN@@BLK x
                                               y)
                           x)
                   y)))

(assert (forall ( (f1 (pfun TRAIN
                            BLK))
                  (s1 (set TRAIN))
                  (x TRAIN) )
                (=> (elem@@TRAIN x
                                 (intersect@@TRAIN s1
                                                   (dom@@TRAIN@@BLK f1)))
                    (= (select (dom-rest@@TRAIN@@BLK s1
                                                     f1)
                               x)
                       (select f1
                               x)))))

(assert (forall ( (f1 (pfun TRAIN
                            BLK))
                  (s1 (set TRAIN))
                  (x TRAIN) )
                (=> (elem@@TRAIN x
                                 (set-diff@@TRAIN (dom@@TRAIN@@BLK f1)
                                                  s1))
                    (= (select (dom-subt@@TRAIN@@BLK s1
                                                     f1)
                               x)
                       (select f1
                               x)))))

(assert (forall ( (x (pfun TRAIN
                           BLK))
                  (y (pfun TRAIN
                           BLK)) )
                (= (elem@Open@@pfun@@TRAIN@@BLK@Close x
                                                      (mk-set@Open@@pfun@@TRAIN@@BLK@Close y))
                   (= x
                      y))))

(assert (forall ( (x (pfun TRAIN
                           BLK))
                  (s1 (set (pfun TRAIN
                                 BLK)))
                  (s2 (set (pfun TRAIN
                                 BLK))) )
                (= (elem@Open@@pfun@@TRAIN@@BLK@Close x
                                                      (set-diff@Open@@pfun@@TRAIN@@BLK@Close s1
                                                                                             s2))
                   (and (elem@Open@@pfun@@TRAIN@@BLK@Close x
                                                           s1)
                        (not (elem@Open@@pfun@@TRAIN@@BLK@Close x
                                                                s2))))))

(assert (forall ( (x (pfun TRAIN
                           BLK))
                  (s1 (set (pfun TRAIN
                                 BLK)))
                  (s2 (set (pfun TRAIN
                                 BLK))) )
                (= (elem@Open@@pfun@@TRAIN@@BLK@Close x
                                                      (intersect@Open@@pfun@@TRAIN@@BLK@Close s1
                                                                                              s2))
                   (and (elem@Open@@pfun@@TRAIN@@BLK@Close x
                                                           s1)
                        (elem@Open@@pfun@@TRAIN@@BLK@Close x
                                                           s2)))))

(assert (forall ( (x (pfun TRAIN
                           BLK))
                  (s1 (set (pfun TRAIN
                                 BLK)))
                  (s2 (set (pfun TRAIN
                                 BLK))) )
                (= (elem@Open@@pfun@@TRAIN@@BLK@Close x
                                                      (bunion@Open@@pfun@@TRAIN@@BLK@Close s1
                                                                                           s2))
                   (or (elem@Open@@pfun@@TRAIN@@BLK@Close x
                                                          s1)
                       (elem@Open@@pfun@@TRAIN@@BLK@Close x
                                                          s2)))))

(assert (forall ( (x (pfun TRAIN
                           BLK))
                  (s1 (set (pfun TRAIN
                                 BLK)))
                  (s2 (set (pfun TRAIN
                                 BLK))) )
                (not (elem@Open@@pfun@@TRAIN@@BLK@Close x
                                                        empty-set@Open@@pfun@@TRAIN@@BLK@Close))))

(assert (and (not (= ent
                     ext))
             (not (elem@@BLK ent
                             PLF))
             (not (elem@@BLK ext
                             PLF))))

(assert (forall ( (p BLK) )
                (=> true
                    (= (not (= p
                               ext))
                       (elem@@BLK p
                                  (bunion@@BLK (mk-set@@BLK ent)
                                               PLF))))))

(assert (forall ( (p BLK) )
                (=> true
                    (= (not (= p
                               ent))
                       (elem@@BLK p
                                  (bunion@@BLK (mk-set@@BLK ext)
                                               PLF))))))

(assert (forall ( (p BLK) )
                (=> true
                    (= (or (= p
                              ent)
                           (= p
                              ext))
                       (not (elem@@BLK p
                                       PLF))))))

(assert (= BLK
           (bunion@@BLK (bunion@@BLK (mk-set@@BLK ent)
                                     (mk-set@@BLK ext))
                        PLF)))

(assert (forall ( (t TRAIN) )
                (=> (elem@@TRAIN t
                                 in)
                    (elem@@BLK (select loc
                                       t)
                               BLK))))

(assert (= (dom@@TRAIN@@BLK loc)
           in))

(assert (not (elem@@TRAIN t
                          in)))

(assert (= in@prime
           (bunion@@TRAIN in
                          (mk-set@@TRAIN t))))

(assert (= loc@prime
           (ovl@@TRAIN@@BLK loc
                            (mk-fun@@TRAIN@@BLK t
                                                ent))))

(assert (not (and (= t_0
                     t)
                  (= in@prime
                     (bunion@@TRAIN in
                                    (mk-set@@TRAIN t)))
                  (= loc@prime
                     (ovl@@TRAIN@@BLK loc
                                      (mk-fun@@TRAIN@@BLK t
                                                          ent))))))

(check-sat-using (or-else (then qe smt) (then skip smt) (then (using-params simplify :expand-power true) smt)))

(pop)
(echo "> train0/enter/CO/co0/case 1/relation (292,1)")
(push)
(declare-sort BLK 0)
(declare-sort LOC 0)
(declare-sort TRAIN 0)
(define-sort pfun (a b) (Array a b))
(declare-sort set 1)
(declare-const PLF (set BLK))
(declare-const BLK (set BLK))
(declare-const LOC (set LOC))
(declare-const TRAIN (set TRAIN))
(declare-const ent BLK)
(declare-const ext BLK)
(declare-const in (set TRAIN))
(declare-const in@prime (set TRAIN))
(declare-const loc (pfun TRAIN BLK))
(declare-const loc@prime (pfun TRAIN BLK))
(declare-const p BLK)
(declare-const q BLK)
(declare-const t TRAIN)
(declare-const t_0 TRAIN)
(declare-const t_1 TRAIN)
(declare-const t_2 TRAIN)
(declare-const t_3 TRAIN)
(declare-fun apply@@TRAIN@@BLK ((pfun TRAIN BLK) TRAIN) BLK)
(declare-fun dom-rest@@TRAIN@@BLK ((set TRAIN) (pfun TRAIN BLK)) (pfun TRAIN BLK))
(declare-fun dom-subt@@TRAIN@@BLK ((set TRAIN) (pfun TRAIN BLK)) (pfun TRAIN BLK))
(declare-fun dom@@TRAIN@@BLK ((pfun TRAIN BLK)) (set TRAIN))
(declare-fun elem@@BLK (BLK (set BLK)) Bool)
(declare-fun elem@@LOC (LOC (set LOC)) Bool)
(declare-fun elem@@TRAIN (TRAIN (set TRAIN)) Bool)
(declare-fun elem@Open@@pfun@@TRAIN@@BLK@Close ((pfun TRAIN BLK) (set (pfun TRAIN BLK))) Bool)
(declare-fun empty-fun@@TRAIN@@BLK () (pfun TRAIN BLK))
(declare-fun empty-set@@BLK () (set BLK))
(declare-fun empty-set@@LOC () (set LOC))
(declare-fun empty-set@@TRAIN () (set TRAIN))
(declare-fun empty-set@Open@@pfun@@TRAIN@@BLK@Close () (set (pfun TRAIN BLK)))
(declare-fun intersect@@BLK ((set BLK) (set BLK)) (set BLK))
(declare-fun intersect@@LOC ((set LOC) (set LOC)) (set LOC))
(declare-fun intersect@@TRAIN ((set TRAIN) (set TRAIN)) (set TRAIN))
(declare-fun intersect@Open@@pfun@@TRAIN@@BLK@Close ((set (pfun TRAIN BLK)) (set (pfun TRAIN BLK))) (set (pfun TRAIN BLK)))
(declare-fun mk-fun@@TRAIN@@BLK (TRAIN BLK) (pfun TRAIN BLK))
(declare-fun mk-set@@BLK (BLK) (set BLK))
(declare-fun mk-set@@LOC (LOC) (set LOC))
(declare-fun mk-set@@TRAIN (TRAIN) (set TRAIN))
(declare-fun mk-set@Open@@pfun@@TRAIN@@BLK@Close ((pfun TRAIN BLK)) (set (pfun TRAIN BLK)))
(declare-fun ovl@@TRAIN@@BLK ((pfun TRAIN BLK) (pfun TRAIN BLK)) (pfun TRAIN BLK))
(declare-fun set-diff@@BLK ((set BLK) (set BLK)) (set BLK))
(declare-fun set-diff@@LOC ((set LOC) (set LOC)) (set LOC))
(declare-fun set-diff@@TRAIN ((set TRAIN) (set TRAIN)) (set TRAIN))
(declare-fun set-diff@Open@@pfun@@TRAIN@@BLK@Close ((set (pfun TRAIN BLK)) (set (pfun TRAIN BLK))) (set (pfun TRAIN BLK)))
(declare-fun tfun@@TRAIN@@BLK ((set TRAIN) (set BLK)) (set (pfun TRAIN BLK)))
(declare-fun bunion@@BLK ((set BLK) (set BLK)) (set BLK))
(declare-fun bunion@@LOC ((set LOC) (set LOC)) (set LOC))
(declare-fun bunion@@TRAIN ((set TRAIN) (set TRAIN)) (set TRAIN))
(declare-fun bunion@Open@@pfun@@TRAIN@@BLK@Close ((set (pfun TRAIN BLK)) (set (pfun TRAIN BLK))) (set (pfun TRAIN BLK)))
(assert (= (=> (and (not (elem@@TRAIN t_0
                                      in))
                    (elem@@TRAIN t_0
                                 in@prime))
               (= (select loc@prime
                          t_0)
                  ent))
           (=> (not (elem@@TRAIN t
                                 in))
               (= (select loc@prime
                          t)
                  ent))))

(assert (= (=> (not (elem@@TRAIN t
                                 in))
               (= (select loc@prime
                          t)
                  ent))
           true))

(assert (forall ( (x BLK)
                  (y BLK) )
                (= (elem@@BLK x
                              (mk-set@@BLK y))
                   (= x
                      y))))

(assert (forall ( (x BLK)
                  (s1 (set BLK))
                  (s2 (set BLK)) )
                (= (elem@@BLK x
                              (set-diff@@BLK s1
                                             s2))
                   (and (elem@@BLK x
                                   s1)
                        (not (elem@@BLK x
                                        s2))))))

(assert (forall ( (x BLK)
                  (s1 (set BLK))
                  (s2 (set BLK)) )
                (= (elem@@BLK x
                              (intersect@@BLK s1
                                              s2))
                   (and (elem@@BLK x
                                   s1)
                        (elem@@BLK x
                                   s2)))))

(assert (forall ( (x BLK)
                  (s1 (set BLK))
                  (s2 (set BLK)) )
                (= (elem@@BLK x
                              (bunion@@BLK s1
                                           s2))
                   (or (elem@@BLK x
                                  s1)
                       (elem@@BLK x
                                  s2)))))

(assert (forall ( (x BLK)
                  (s1 (set BLK))
                  (s2 (set BLK)) )
                (not (elem@@BLK x
                                empty-set@@BLK))))

(assert (forall ( (x LOC)
                  (y LOC) )
                (= (elem@@LOC x
                              (mk-set@@LOC y))
                   (= x
                      y))))

(assert (forall ( (x LOC)
                  (s1 (set LOC))
                  (s2 (set LOC)) )
                (= (elem@@LOC x
                              (set-diff@@LOC s1
                                             s2))
                   (and (elem@@LOC x
                                   s1)
                        (not (elem@@LOC x
                                        s2))))))

(assert (forall ( (x LOC)
                  (s1 (set LOC))
                  (s2 (set LOC)) )
                (= (elem@@LOC x
                              (intersect@@LOC s1
                                              s2))
                   (and (elem@@LOC x
                                   s1)
                        (elem@@LOC x
                                   s2)))))

(assert (forall ( (x LOC)
                  (s1 (set LOC))
                  (s2 (set LOC)) )
                (= (elem@@LOC x
                              (bunion@@LOC s1
                                           s2))
                   (or (elem@@LOC x
                                  s1)
                       (elem@@LOC x
                                  s2)))))

(assert (forall ( (x LOC)
                  (s1 (set LOC))
                  (s2 (set LOC)) )
                (not (elem@@LOC x
                                empty-set@@LOC))))

(assert (forall ( (x TRAIN)
                  (y TRAIN) )
                (= (elem@@TRAIN x
                                (mk-set@@TRAIN y))
                   (= x
                      y))))

(assert (forall ( (x TRAIN)
                  (s1 (set TRAIN))
                  (s2 (set TRAIN)) )
                (= (elem@@TRAIN x
                                (set-diff@@TRAIN s1
                                                 s2))
                   (and (elem@@TRAIN x
                                     s1)
                        (not (elem@@TRAIN x
                                          s2))))))

(assert (forall ( (x TRAIN)
                  (s1 (set TRAIN))
                  (s2 (set TRAIN)) )
                (= (elem@@TRAIN x
                                (intersect@@TRAIN s1
                                                  s2))
                   (and (elem@@TRAIN x
                                     s1)
                        (elem@@TRAIN x
                                     s2)))))

(assert (forall ( (x TRAIN)
                  (s1 (set TRAIN))
                  (s2 (set TRAIN)) )
                (= (elem@@TRAIN x
                                (bunion@@TRAIN s1
                                               s2))
                   (or (elem@@TRAIN x
                                    s1)
                       (elem@@TRAIN x
                                    s2)))))

(assert (forall ( (x TRAIN)
                  (s1 (set TRAIN))
                  (s2 (set TRAIN)) )
                (not (elem@@TRAIN x
                                  empty-set@@TRAIN))))

(assert (forall ( (f1 (pfun TRAIN
                            BLK))
                  (f2 (pfun TRAIN
                            BLK)) )
                (= (bunion@@TRAIN (dom@@TRAIN@@BLK f1)
                                  (dom@@TRAIN@@BLK f2))
                   (dom@@TRAIN@@BLK (ovl@@TRAIN@@BLK f1
                                                     f2)))))

(assert (= (dom@@TRAIN@@BLK empty-fun@@TRAIN@@BLK)
           empty-set@@TRAIN))

(assert (forall ( (x TRAIN)
                  (y BLK) )
                (= (dom@@TRAIN@@BLK (mk-fun@@TRAIN@@BLK x
                                                        y))
                   (mk-set@@TRAIN x))))

(assert (forall ( (f1 (pfun TRAIN
                            BLK))
                  (f2 (pfun TRAIN
                            BLK))
                  (x TRAIN) )
                (=> (elem@@TRAIN x
                                 (dom@@TRAIN@@BLK f2))
                    (= (select (ovl@@TRAIN@@BLK f1
                                                f2)
                               x)
                       (select f2
                               x)))))

(assert (forall ( (f1 (pfun TRAIN
                            BLK))
                  (f2 (pfun TRAIN
                            BLK))
                  (x TRAIN) )
                (=> (elem@@TRAIN x
                                 (set-diff@@TRAIN (dom@@TRAIN@@BLK f1)
                                                  (dom@@TRAIN@@BLK f2)))
                    (= (select (ovl@@TRAIN@@BLK f1
                                                f2)
                               x)
                       (select f1
                               x)))))

(assert (forall ( (f1 (pfun TRAIN
                            BLK))
                  (s1 (set TRAIN)) )
                (= (dom@@TRAIN@@BLK (dom-subt@@TRAIN@@BLK s1
                                                          f1))
                   (set-diff@@TRAIN (dom@@TRAIN@@BLK f1)
                                    s1))))

(assert (forall ( (x TRAIN)
                  (y BLK) )
                (= (select (mk-fun@@TRAIN@@BLK x
                                               y)
                           x)
                   y)))

(assert (forall ( (f1 (pfun TRAIN
                            BLK))
                  (s1 (set TRAIN))
                  (x TRAIN) )
                (=> (elem@@TRAIN x
                                 (intersect@@TRAIN s1
                                                   (dom@@TRAIN@@BLK f1)))
                    (= (select (dom-rest@@TRAIN@@BLK s1
                                                     f1)
                               x)
                       (select f1
                               x)))))

(assert (forall ( (f1 (pfun TRAIN
                            BLK))
                  (s1 (set TRAIN))
                  (x TRAIN) )
                (=> (elem@@TRAIN x
                                 (set-diff@@TRAIN (dom@@TRAIN@@BLK f1)
                                                  s1))
                    (= (select (dom-subt@@TRAIN@@BLK s1
                                                     f1)
                               x)
                       (select f1
                               x)))))

(assert (forall ( (x (pfun TRAIN
                           BLK))
                  (y (pfun TRAIN
                           BLK)) )
                (= (elem@Open@@pfun@@TRAIN@@BLK@Close x
                                                      (mk-set@Open@@pfun@@TRAIN@@BLK@Close y))
                   (= x
                      y))))

(assert (forall ( (x (pfun TRAIN
                           BLK))
                  (s1 (set (pfun TRAIN
                                 BLK)))
                  (s2 (set (pfun TRAIN
                                 BLK))) )
                (= (elem@Open@@pfun@@TRAIN@@BLK@Close x
                                                      (set-diff@Open@@pfun@@TRAIN@@BLK@Close s1
                                                                                             s2))
                   (and (elem@Open@@pfun@@TRAIN@@BLK@Close x
                                                           s1)
                        (not (elem@Open@@pfun@@TRAIN@@BLK@Close x
                                                                s2))))))

(assert (forall ( (x (pfun TRAIN
                           BLK))
                  (s1 (set (pfun TRAIN
                                 BLK)))
                  (s2 (set (pfun TRAIN
                                 BLK))) )
                (= (elem@Open@@pfun@@TRAIN@@BLK@Close x
                                                      (intersect@Open@@pfun@@TRAIN@@BLK@Close s1
                                                                                              s2))
                   (and (elem@Open@@pfun@@TRAIN@@BLK@Close x
                                                           s1)
                        (elem@Open@@pfun@@TRAIN@@BLK@Close x
                                                           s2)))))

(assert (forall ( (x (pfun TRAIN
                           BLK))
                  (s1 (set (pfun TRAIN
                                 BLK)))
                  (s2 (set (pfun TRAIN
                                 BLK))) )
                (= (elem@Open@@pfun@@TRAIN@@BLK@Close x
                                                      (bunion@Open@@pfun@@TRAIN@@BLK@Close s1
                                                                                           s2))
                   (or (elem@Open@@pfun@@TRAIN@@BLK@Close x
                                                          s1)
                       (elem@Open@@pfun@@TRAIN@@BLK@Close x
                                                          s2)))))

(assert (forall ( (x (pfun TRAIN
                           BLK))
                  (s1 (set (pfun TRAIN
                                 BLK)))
                  (s2 (set (pfun TRAIN
                                 BLK))) )
                (not (elem@Open@@pfun@@TRAIN@@BLK@Close x
                                                        empty-set@Open@@pfun@@TRAIN@@BLK@Close))))

(assert (and (not (= ent
                     ext))
             (not (elem@@BLK ent
                             PLF))
             (not (elem@@BLK ext
                             PLF))))

(assert (forall ( (p BLK) )
                (=> true
                    (= (not (= p
                               ext))
                       (elem@@BLK p
                                  (bunion@@BLK (mk-set@@BLK ent)
                                               PLF))))))

(assert (forall ( (p BLK) )
                (=> true
                    (= (not (= p
                               ent))
                       (elem@@BLK p
                                  (bunion@@BLK (mk-set@@BLK ext)
                                               PLF))))))

(assert (forall ( (p BLK) )
                (=> true
                    (= (or (= p
                              ent)
                           (= p
                              ext))
                       (not (elem@@BLK p
                                       PLF))))))

(assert (= BLK
           (bunion@@BLK (bunion@@BLK (mk-set@@BLK ent)
                                     (mk-set@@BLK ext))
                        PLF)))

(assert (not (= (=> (and (not (elem@@TRAIN t_0
                                           in))
                         (elem@@TRAIN t_0
                                      in@prime))
                    (= (select loc@prime
                               t_0)
                       ent))
                true)))

(check-sat-using (or-else (then qe smt) (then skip smt) (then (using-params simplify :expand-power true) smt)))

(pop)
(echo "> train0/enter/CO/co0/case 1/step (294,1)")
(push)
(declare-sort BLK 0)
(declare-sort LOC 0)
(declare-sort TRAIN 0)
(define-sort pfun (a b) (Array a b))
(declare-sort set 1)
(declare-const PLF (set BLK))
(declare-const BLK (set BLK))
(declare-const LOC (set LOC))
(declare-const TRAIN (set TRAIN))
(declare-const ent BLK)
(declare-const ext BLK)
(declare-const in (set TRAIN))
(declare-const in@prime (set TRAIN))
(declare-const loc (pfun TRAIN BLK))
(declare-const loc@prime (pfun TRAIN BLK))
(declare-const p BLK)
(declare-const q BLK)
(declare-const t TRAIN)
(declare-const t_0 TRAIN)
(declare-const t_1 TRAIN)
(declare-const t_2 TRAIN)
(declare-const t_3 TRAIN)
(declare-fun apply@@TRAIN@@BLK ((pfun TRAIN BLK) TRAIN) BLK)
(declare-fun dom-rest@@TRAIN@@BLK ((set TRAIN) (pfun TRAIN BLK)) (pfun TRAIN BLK))
(declare-fun dom-subt@@TRAIN@@BLK ((set TRAIN) (pfun TRAIN BLK)) (pfun TRAIN BLK))
(declare-fun dom@@TRAIN@@BLK ((pfun TRAIN BLK)) (set TRAIN))
(declare-fun elem@@BLK (BLK (set BLK)) Bool)
(declare-fun elem@@LOC (LOC (set LOC)) Bool)
(declare-fun elem@@TRAIN (TRAIN (set TRAIN)) Bool)
(declare-fun elem@Open@@pfun@@TRAIN@@BLK@Close ((pfun TRAIN BLK) (set (pfun TRAIN BLK))) Bool)
(declare-fun empty-fun@@TRAIN@@BLK () (pfun TRAIN BLK))
(declare-fun empty-set@@BLK () (set BLK))
(declare-fun empty-set@@LOC () (set LOC))
(declare-fun empty-set@@TRAIN () (set TRAIN))
(declare-fun empty-set@Open@@pfun@@TRAIN@@BLK@Close () (set (pfun TRAIN BLK)))
(declare-fun intersect@@BLK ((set BLK) (set BLK)) (set BLK))
(declare-fun intersect@@LOC ((set LOC) (set LOC)) (set LOC))
(declare-fun intersect@@TRAIN ((set TRAIN) (set TRAIN)) (set TRAIN))
(declare-fun intersect@Open@@pfun@@TRAIN@@BLK@Close ((set (pfun TRAIN BLK)) (set (pfun TRAIN BLK))) (set (pfun TRAIN BLK)))
(declare-fun mk-fun@@TRAIN@@BLK (TRAIN BLK) (pfun TRAIN BLK))
(declare-fun mk-set@@BLK (BLK) (set BLK))
(declare-fun mk-set@@LOC (LOC) (set LOC))
(declare-fun mk-set@@TRAIN (TRAIN) (set TRAIN))
(declare-fun mk-set@Open@@pfun@@TRAIN@@BLK@Close ((pfun TRAIN BLK)) (set (pfun TRAIN BLK)))
(declare-fun ovl@@TRAIN@@BLK ((pfun TRAIN BLK) (pfun TRAIN BLK)) (pfun TRAIN BLK))
(declare-fun set-diff@@BLK ((set BLK) (set BLK)) (set BLK))
(declare-fun set-diff@@LOC ((set LOC) (set LOC)) (set LOC))
(declare-fun set-diff@@TRAIN ((set TRAIN) (set TRAIN)) (set TRAIN))
(declare-fun set-diff@Open@@pfun@@TRAIN@@BLK@Close ((set (pfun TRAIN BLK)) (set (pfun TRAIN BLK))) (set (pfun TRAIN BLK)))
(declare-fun tfun@@TRAIN@@BLK ((set TRAIN) (set BLK)) (set (pfun TRAIN BLK)))
(declare-fun bunion@@BLK ((set BLK) (set BLK)) (set BLK))
(declare-fun bunion@@LOC ((set LOC) (set LOC)) (set LOC))
(declare-fun bunion@@TRAIN ((set TRAIN) (set TRAIN)) (set TRAIN))
(declare-fun bunion@Open@@pfun@@TRAIN@@BLK@Close ((set (pfun TRAIN BLK)) (set (pfun TRAIN BLK))) (set (pfun TRAIN BLK)))
(assert (= t_0
           t))

(assert (= in@prime
           (bunion@@TRAIN in
                          (mk-set@@TRAIN t))))

(assert (forall ( (x BLK)
                  (y BLK) )
                (= (elem@@BLK x
                              (mk-set@@BLK y))
                   (= x
                      y))))

(assert (forall ( (x BLK)
                  (s1 (set BLK))
                  (s2 (set BLK)) )
                (= (elem@@BLK x
                              (set-diff@@BLK s1
                                             s2))
                   (and (elem@@BLK x
                                   s1)
                        (not (elem@@BLK x
                                        s2))))))

(assert (forall ( (x BLK)
                  (s1 (set BLK))
                  (s2 (set BLK)) )
                (= (elem@@BLK x
                              (intersect@@BLK s1
                                              s2))
                   (and (elem@@BLK x
                                   s1)
                        (elem@@BLK x
                                   s2)))))

(assert (forall ( (x BLK)
                  (s1 (set BLK))
                  (s2 (set BLK)) )
                (= (elem@@BLK x
                              (bunion@@BLK s1
                                           s2))
                   (or (elem@@BLK x
                                  s1)
                       (elem@@BLK x
                                  s2)))))

(assert (forall ( (x BLK)
                  (s1 (set BLK))
                  (s2 (set BLK)) )
                (not (elem@@BLK x
                                empty-set@@BLK))))

(assert (forall ( (x LOC)
                  (y LOC) )
                (= (elem@@LOC x
                              (mk-set@@LOC y))
                   (= x
                      y))))

(assert (forall ( (x LOC)
                  (s1 (set LOC))
                  (s2 (set LOC)) )
                (= (elem@@LOC x
                              (set-diff@@LOC s1
                                             s2))
                   (and (elem@@LOC x
                                   s1)
                        (not (elem@@LOC x
                                        s2))))))

(assert (forall ( (x LOC)
                  (s1 (set LOC))
                  (s2 (set LOC)) )
                (= (elem@@LOC x
                              (intersect@@LOC s1
                                              s2))
                   (and (elem@@LOC x
                                   s1)
                        (elem@@LOC x
                                   s2)))))

(assert (forall ( (x LOC)
                  (s1 (set LOC))
                  (s2 (set LOC)) )
                (= (elem@@LOC x
                              (bunion@@LOC s1
                                           s2))
                   (or (elem@@LOC x
                                  s1)
                       (elem@@LOC x
                                  s2)))))

(assert (forall ( (x LOC)
                  (s1 (set LOC))
                  (s2 (set LOC)) )
                (not (elem@@LOC x
                                empty-set@@LOC))))

(assert (forall ( (x TRAIN)
                  (y TRAIN) )
                (= (elem@@TRAIN x
                                (mk-set@@TRAIN y))
                   (= x
                      y))))

(assert (forall ( (x TRAIN)
                  (s1 (set TRAIN))
                  (s2 (set TRAIN)) )
                (= (elem@@TRAIN x
                                (set-diff@@TRAIN s1
                                                 s2))
                   (and (elem@@TRAIN x
                                     s1)
                        (not (elem@@TRAIN x
                                          s2))))))

(assert (forall ( (x TRAIN)
                  (s1 (set TRAIN))
                  (s2 (set TRAIN)) )
                (= (elem@@TRAIN x
                                (intersect@@TRAIN s1
                                                  s2))
                   (and (elem@@TRAIN x
                                     s1)
                        (elem@@TRAIN x
                                     s2)))))

(assert (forall ( (x TRAIN)
                  (s1 (set TRAIN))
                  (s2 (set TRAIN)) )
                (= (elem@@TRAIN x
                                (bunion@@TRAIN s1
                                               s2))
                   (or (elem@@TRAIN x
                                    s1)
                       (elem@@TRAIN x
                                    s2)))))

(assert (forall ( (x TRAIN)
                  (s1 (set TRAIN))
                  (s2 (set TRAIN)) )
                (not (elem@@TRAIN x
                                  empty-set@@TRAIN))))

(assert (forall ( (f1 (pfun TRAIN
                            BLK))
                  (f2 (pfun TRAIN
                            BLK)) )
                (= (bunion@@TRAIN (dom@@TRAIN@@BLK f1)
                                  (dom@@TRAIN@@BLK f2))
                   (dom@@TRAIN@@BLK (ovl@@TRAIN@@BLK f1
                                                     f2)))))

(assert (= (dom@@TRAIN@@BLK empty-fun@@TRAIN@@BLK)
           empty-set@@TRAIN))

(assert (forall ( (x TRAIN)
                  (y BLK) )
                (= (dom@@TRAIN@@BLK (mk-fun@@TRAIN@@BLK x
                                                        y))
                   (mk-set@@TRAIN x))))

(assert (forall ( (f1 (pfun TRAIN
                            BLK))
                  (f2 (pfun TRAIN
                            BLK))
                  (x TRAIN) )
                (=> (elem@@TRAIN x
                                 (dom@@TRAIN@@BLK f2))
                    (= (select (ovl@@TRAIN@@BLK f1
                                                f2)
                               x)
                       (select f2
                               x)))))

(assert (forall ( (f1 (pfun TRAIN
                            BLK))
                  (f2 (pfun TRAIN
                            BLK))
                  (x TRAIN) )
                (=> (elem@@TRAIN x
                                 (set-diff@@TRAIN (dom@@TRAIN@@BLK f1)
                                                  (dom@@TRAIN@@BLK f2)))
                    (= (select (ovl@@TRAIN@@BLK f1
                                                f2)
                               x)
                       (select f1
                               x)))))

(assert (forall ( (f1 (pfun TRAIN
                            BLK))
                  (s1 (set TRAIN)) )
                (= (dom@@TRAIN@@BLK (dom-subt@@TRAIN@@BLK s1
                                                          f1))
                   (set-diff@@TRAIN (dom@@TRAIN@@BLK f1)
                                    s1))))

(assert (forall ( (x TRAIN)
                  (y BLK) )
                (= (select (mk-fun@@TRAIN@@BLK x
                                               y)
                           x)
                   y)))

(assert (forall ( (f1 (pfun TRAIN
                            BLK))
                  (s1 (set TRAIN))
                  (x TRAIN) )
                (=> (elem@@TRAIN x
                                 (intersect@@TRAIN s1
                                                   (dom@@TRAIN@@BLK f1)))
                    (= (select (dom-rest@@TRAIN@@BLK s1
                                                     f1)
                               x)
                       (select f1
                               x)))))

(assert (forall ( (f1 (pfun TRAIN
                            BLK))
                  (s1 (set TRAIN))
                  (x TRAIN) )
                (=> (elem@@TRAIN x
                                 (set-diff@@TRAIN (dom@@TRAIN@@BLK f1)
                                                  s1))
                    (= (select (dom-subt@@TRAIN@@BLK s1
                                                     f1)
                               x)
                       (select f1
                               x)))))

(assert (forall ( (x (pfun TRAIN
                           BLK))
                  (y (pfun TRAIN
                           BLK)) )
                (= (elem@Open@@pfun@@TRAIN@@BLK@Close x
                                                      (mk-set@Open@@pfun@@TRAIN@@BLK@Close y))
                   (= x
                      y))))

(assert (forall ( (x (pfun TRAIN
                           BLK))
                  (s1 (set (pfun TRAIN
                                 BLK)))
                  (s2 (set (pfun TRAIN
                                 BLK))) )
                (= (elem@Open@@pfun@@TRAIN@@BLK@Close x
                                                      (set-diff@Open@@pfun@@TRAIN@@BLK@Close s1
                                                                                             s2))
                   (and (elem@Open@@pfun@@TRAIN@@BLK@Close x
                                                           s1)
                        (not (elem@Open@@pfun@@TRAIN@@BLK@Close x
                                                                s2))))))

(assert (forall ( (x (pfun TRAIN
                           BLK))
                  (s1 (set (pfun TRAIN
                                 BLK)))
                  (s2 (set (pfun TRAIN
                                 BLK))) )
                (= (elem@Open@@pfun@@TRAIN@@BLK@Close x
                                                      (intersect@Open@@pfun@@TRAIN@@BLK@Close s1
                                                                                              s2))
                   (and (elem@Open@@pfun@@TRAIN@@BLK@Close x
                                                           s1)
                        (elem@Open@@pfun@@TRAIN@@BLK@Close x
                                                           s2)))))

(assert (forall ( (x (pfun TRAIN
                           BLK))
                  (s1 (set (pfun TRAIN
                                 BLK)))
                  (s2 (set (pfun TRAIN
                                 BLK))) )
                (= (elem@Open@@pfun@@TRAIN@@BLK@Close x
                                                      (bunion@Open@@pfun@@TRAIN@@BLK@Close s1
                                                                                           s2))
                   (or (elem@Open@@pfun@@TRAIN@@BLK@Close x
                                                          s1)
                       (elem@Open@@pfun@@TRAIN@@BLK@Close x
                                                          s2)))))

(assert (forall ( (x (pfun TRAIN
                           BLK))
                  (s1 (set (pfun TRAIN
                                 BLK)))
                  (s2 (set (pfun TRAIN
                                 BLK))) )
                (not (elem@Open@@pfun@@TRAIN@@BLK@Close x
                                                        empty-set@Open@@pfun@@TRAIN@@BLK@Close))))

(assert (and (not (= ent
                     ext))
             (not (elem@@BLK ent
                             PLF))
             (not (elem@@BLK ext
                             PLF))))

(assert (forall ( (p BLK) )
                (=> true
                    (= (not (= p
                               ext))
                       (elem@@BLK p
                                  (bunion@@BLK (mk-set@@BLK ent)
                                               PLF))))))

(assert (forall ( (p BLK) )
                (=> true
                    (= (not (= p
                               ent))
                       (elem@@BLK p
                                  (bunion@@BLK (mk-set@@BLK ext)
                                               PLF))))))

(assert (forall ( (p BLK) )
                (=> true
                    (= (or (= p
                              ent)
                           (= p
                              ext))
                       (not (elem@@BLK p
                                       PLF))))))

(assert (= BLK
           (bunion@@BLK (bunion@@BLK (mk-set@@BLK ent)
                                     (mk-set@@BLK ext))
                        PLF)))

(assert (not (= (=> (and (not (elem@@TRAIN t_0
                                           in))
                         (elem@@TRAIN t_0
                                      in@prime))
                    (= (select loc@prime
                               t_0)
                       ent))
                (=> (not (elem@@TRAIN t
                                      in))
                    (= (select loc@prime
                               t)
                       ent)))))

(check-sat-using (or-else (then qe smt) (then skip smt) (then (using-params simplify :expand-power true) smt)))

(pop)
(echo "> train0/enter/CO/co0/case 1/step (296,1)")
(push)
(declare-sort BLK 0)
(declare-sort LOC 0)
(declare-sort TRAIN 0)
(define-sort pfun (a b) (Array a b))
(declare-sort set 1)
(declare-const PLF (set BLK))
(declare-const BLK (set BLK))
(declare-const LOC (set LOC))
(declare-const TRAIN (set TRAIN))
(declare-const ent BLK)
(declare-const ext BLK)
(declare-const in (set TRAIN))
(declare-const in@prime (set TRAIN))
(declare-const loc (pfun TRAIN BLK))
(declare-const loc@prime (pfun TRAIN BLK))
(declare-const p BLK)
(declare-const q BLK)
(declare-const t TRAIN)
(declare-const t_0 TRAIN)
(declare-const t_1 TRAIN)
(declare-const t_2 TRAIN)
(declare-const t_3 TRAIN)
(declare-fun apply@@TRAIN@@BLK ((pfun TRAIN BLK) TRAIN) BLK)
(declare-fun dom-rest@@TRAIN@@BLK ((set TRAIN) (pfun TRAIN BLK)) (pfun TRAIN BLK))
(declare-fun dom-subt@@TRAIN@@BLK ((set TRAIN) (pfun TRAIN BLK)) (pfun TRAIN BLK))
(declare-fun dom@@TRAIN@@BLK ((pfun TRAIN BLK)) (set TRAIN))
(declare-fun elem@@BLK (BLK (set BLK)) Bool)
(declare-fun elem@@LOC (LOC (set LOC)) Bool)
(declare-fun elem@@TRAIN (TRAIN (set TRAIN)) Bool)
(declare-fun elem@Open@@pfun@@TRAIN@@BLK@Close ((pfun TRAIN BLK) (set (pfun TRAIN BLK))) Bool)
(declare-fun empty-fun@@TRAIN@@BLK () (pfun TRAIN BLK))
(declare-fun empty-set@@BLK () (set BLK))
(declare-fun empty-set@@LOC () (set LOC))
(declare-fun empty-set@@TRAIN () (set TRAIN))
(declare-fun empty-set@Open@@pfun@@TRAIN@@BLK@Close () (set (pfun TRAIN BLK)))
(declare-fun intersect@@BLK ((set BLK) (set BLK)) (set BLK))
(declare-fun intersect@@LOC ((set LOC) (set LOC)) (set LOC))
(declare-fun intersect@@TRAIN ((set TRAIN) (set TRAIN)) (set TRAIN))
(declare-fun intersect@Open@@pfun@@TRAIN@@BLK@Close ((set (pfun TRAIN BLK)) (set (pfun TRAIN BLK))) (set (pfun TRAIN BLK)))
(declare-fun mk-fun@@TRAIN@@BLK (TRAIN BLK) (pfun TRAIN BLK))
(declare-fun mk-set@@BLK (BLK) (set BLK))
(declare-fun mk-set@@LOC (LOC) (set LOC))
(declare-fun mk-set@@TRAIN (TRAIN) (set TRAIN))
(declare-fun mk-set@Open@@pfun@@TRAIN@@BLK@Close ((pfun TRAIN BLK)) (set (pfun TRAIN BLK)))
(declare-fun ovl@@TRAIN@@BLK ((pfun TRAIN BLK) (pfun TRAIN BLK)) (pfun TRAIN BLK))
(declare-fun set-diff@@BLK ((set BLK) (set BLK)) (set BLK))
(declare-fun set-diff@@LOC ((set LOC) (set LOC)) (set LOC))
(declare-fun set-diff@@TRAIN ((set TRAIN) (set TRAIN)) (set TRAIN))
(declare-fun set-diff@Open@@pfun@@TRAIN@@BLK@Close ((set (pfun TRAIN BLK)) (set (pfun TRAIN BLK))) (set (pfun TRAIN BLK)))
(declare-fun tfun@@TRAIN@@BLK ((set TRAIN) (set BLK)) (set (pfun TRAIN BLK)))
(declare-fun bunion@@BLK ((set BLK) (set BLK)) (set BLK))
(declare-fun bunion@@LOC ((set LOC) (set LOC)) (set LOC))
(declare-fun bunion@@TRAIN ((set TRAIN) (set TRAIN)) (set TRAIN))
(declare-fun bunion@Open@@pfun@@TRAIN@@BLK@Close ((set (pfun TRAIN BLK)) (set (pfun TRAIN BLK))) (set (pfun TRAIN BLK)))
(assert (= loc@prime
           (ovl@@TRAIN@@BLK loc
                            (mk-fun@@TRAIN@@BLK t
                                                ent))))

(assert (forall ( (x BLK)
                  (y BLK) )
                (= (elem@@BLK x
                              (mk-set@@BLK y))
                   (= x
                      y))))

(assert (forall ( (x BLK)
                  (s1 (set BLK))
                  (s2 (set BLK)) )
                (= (elem@@BLK x
                              (set-diff@@BLK s1
                                             s2))
                   (and (elem@@BLK x
                                   s1)
                        (not (elem@@BLK x
                                        s2))))))

(assert (forall ( (x BLK)
                  (s1 (set BLK))
                  (s2 (set BLK)) )
                (= (elem@@BLK x
                              (intersect@@BLK s1
                                              s2))
                   (and (elem@@BLK x
                                   s1)
                        (elem@@BLK x
                                   s2)))))

(assert (forall ( (x BLK)
                  (s1 (set BLK))
                  (s2 (set BLK)) )
                (= (elem@@BLK x
                              (bunion@@BLK s1
                                           s2))
                   (or (elem@@BLK x
                                  s1)
                       (elem@@BLK x
                                  s2)))))

(assert (forall ( (x BLK)
                  (s1 (set BLK))
                  (s2 (set BLK)) )
                (not (elem@@BLK x
                                empty-set@@BLK))))

(assert (forall ( (x LOC)
                  (y LOC) )
                (= (elem@@LOC x
                              (mk-set@@LOC y))
                   (= x
                      y))))

(assert (forall ( (x LOC)
                  (s1 (set LOC))
                  (s2 (set LOC)) )
                (= (elem@@LOC x
                              (set-diff@@LOC s1
                                             s2))
                   (and (elem@@LOC x
                                   s1)
                        (not (elem@@LOC x
                                        s2))))))

(assert (forall ( (x LOC)
                  (s1 (set LOC))
                  (s2 (set LOC)) )
                (= (elem@@LOC x
                              (intersect@@LOC s1
                                              s2))
                   (and (elem@@LOC x
                                   s1)
                        (elem@@LOC x
                                   s2)))))

(assert (forall ( (x LOC)
                  (s1 (set LOC))
                  (s2 (set LOC)) )
                (= (elem@@LOC x
                              (bunion@@LOC s1
                                           s2))
                   (or (elem@@LOC x
                                  s1)
                       (elem@@LOC x
                                  s2)))))

(assert (forall ( (x LOC)
                  (s1 (set LOC))
                  (s2 (set LOC)) )
                (not (elem@@LOC x
                                empty-set@@LOC))))

(assert (forall ( (x TRAIN)
                  (y TRAIN) )
                (= (elem@@TRAIN x
                                (mk-set@@TRAIN y))
                   (= x
                      y))))

(assert (forall ( (x TRAIN)
                  (s1 (set TRAIN))
                  (s2 (set TRAIN)) )
                (= (elem@@TRAIN x
                                (set-diff@@TRAIN s1
                                                 s2))
                   (and (elem@@TRAIN x
                                     s1)
                        (not (elem@@TRAIN x
                                          s2))))))

(assert (forall ( (x TRAIN)
                  (s1 (set TRAIN))
                  (s2 (set TRAIN)) )
                (= (elem@@TRAIN x
                                (intersect@@TRAIN s1
                                                  s2))
                   (and (elem@@TRAIN x
                                     s1)
                        (elem@@TRAIN x
                                     s2)))))

(assert (forall ( (x TRAIN)
                  (s1 (set TRAIN))
                  (s2 (set TRAIN)) )
                (= (elem@@TRAIN x
                                (bunion@@TRAIN s1
                                               s2))
                   (or (elem@@TRAIN x
                                    s1)
                       (elem@@TRAIN x
                                    s2)))))

(assert (forall ( (x TRAIN)
                  (s1 (set TRAIN))
                  (s2 (set TRAIN)) )
                (not (elem@@TRAIN x
                                  empty-set@@TRAIN))))

(assert (forall ( (f1 (pfun TRAIN
                            BLK))
                  (f2 (pfun TRAIN
                            BLK)) )
                (= (bunion@@TRAIN (dom@@TRAIN@@BLK f1)
                                  (dom@@TRAIN@@BLK f2))
                   (dom@@TRAIN@@BLK (ovl@@TRAIN@@BLK f1
                                                     f2)))))

(assert (= (dom@@TRAIN@@BLK empty-fun@@TRAIN@@BLK)
           empty-set@@TRAIN))

(assert (forall ( (x TRAIN)
                  (y BLK) )
                (= (dom@@TRAIN@@BLK (mk-fun@@TRAIN@@BLK x
                                                        y))
                   (mk-set@@TRAIN x))))

(assert (forall ( (f1 (pfun TRAIN
                            BLK))
                  (f2 (pfun TRAIN
                            BLK))
                  (x TRAIN) )
                (=> (elem@@TRAIN x
                                 (dom@@TRAIN@@BLK f2))
                    (= (select (ovl@@TRAIN@@BLK f1
                                                f2)
                               x)
                       (select f2
                               x)))))

(assert (forall ( (f1 (pfun TRAIN
                            BLK))
                  (f2 (pfun TRAIN
                            BLK))
                  (x TRAIN) )
                (=> (elem@@TRAIN x
                                 (set-diff@@TRAIN (dom@@TRAIN@@BLK f1)
                                                  (dom@@TRAIN@@BLK f2)))
                    (= (select (ovl@@TRAIN@@BLK f1
                                                f2)
                               x)
                       (select f1
                               x)))))

(assert (forall ( (f1 (pfun TRAIN
                            BLK))
                  (s1 (set TRAIN)) )
                (= (dom@@TRAIN@@BLK (dom-subt@@TRAIN@@BLK s1
                                                          f1))
                   (set-diff@@TRAIN (dom@@TRAIN@@BLK f1)
                                    s1))))

(assert (forall ( (x TRAIN)
                  (y BLK) )
                (= (select (mk-fun@@TRAIN@@BLK x
                                               y)
                           x)
                   y)))

(assert (forall ( (f1 (pfun TRAIN
                            BLK))
                  (s1 (set TRAIN))
                  (x TRAIN) )
                (=> (elem@@TRAIN x
                                 (intersect@@TRAIN s1
                                                   (dom@@TRAIN@@BLK f1)))
                    (= (select (dom-rest@@TRAIN@@BLK s1
                                                     f1)
                               x)
                       (select f1
                               x)))))

(assert (forall ( (f1 (pfun TRAIN
                            BLK))
                  (s1 (set TRAIN))
                  (x TRAIN) )
                (=> (elem@@TRAIN x
                                 (set-diff@@TRAIN (dom@@TRAIN@@BLK f1)
                                                  s1))
                    (= (select (dom-subt@@TRAIN@@BLK s1
                                                     f1)
                               x)
                       (select f1
                               x)))))

(assert (forall ( (x (pfun TRAIN
                           BLK))
                  (y (pfun TRAIN
                           BLK)) )
                (= (elem@Open@@pfun@@TRAIN@@BLK@Close x
                                                      (mk-set@Open@@pfun@@TRAIN@@BLK@Close y))
                   (= x
                      y))))

(assert (forall ( (x (pfun TRAIN
                           BLK))
                  (s1 (set (pfun TRAIN
                                 BLK)))
                  (s2 (set (pfun TRAIN
                                 BLK))) )
                (= (elem@Open@@pfun@@TRAIN@@BLK@Close x
                                                      (set-diff@Open@@pfun@@TRAIN@@BLK@Close s1
                                                                                             s2))
                   (and (elem@Open@@pfun@@TRAIN@@BLK@Close x
                                                           s1)
                        (not (elem@Open@@pfun@@TRAIN@@BLK@Close x
                                                                s2))))))

(assert (forall ( (x (pfun TRAIN
                           BLK))
                  (s1 (set (pfun TRAIN
                                 BLK)))
                  (s2 (set (pfun TRAIN
                                 BLK))) )
                (= (elem@Open@@pfun@@TRAIN@@BLK@Close x
                                                      (intersect@Open@@pfun@@TRAIN@@BLK@Close s1
                                                                                              s2))
                   (and (elem@Open@@pfun@@TRAIN@@BLK@Close x
                                                           s1)
                        (elem@Open@@pfun@@TRAIN@@BLK@Close x
                                                           s2)))))

(assert (forall ( (x (pfun TRAIN
                           BLK))
                  (s1 (set (pfun TRAIN
                                 BLK)))
                  (s2 (set (pfun TRAIN
                                 BLK))) )
                (= (elem@Open@@pfun@@TRAIN@@BLK@Close x
                                                      (bunion@Open@@pfun@@TRAIN@@BLK@Close s1
                                                                                           s2))
                   (or (elem@Open@@pfun@@TRAIN@@BLK@Close x
                                                          s1)
                       (elem@Open@@pfun@@TRAIN@@BLK@Close x
                                                          s2)))))

(assert (forall ( (x (pfun TRAIN
                           BLK))
                  (s1 (set (pfun TRAIN
                                 BLK)))
                  (s2 (set (pfun TRAIN
                                 BLK))) )
                (not (elem@Open@@pfun@@TRAIN@@BLK@Close x
                                                        empty-set@Open@@pfun@@TRAIN@@BLK@Close))))

(assert (and (not (= ent
                     ext))
             (not (elem@@BLK ent
                             PLF))
             (not (elem@@BLK ext
                             PLF))))

(assert (forall ( (p BLK) )
                (=> true
                    (= (not (= p
                               ext))
                       (elem@@BLK p
                                  (bunion@@BLK (mk-set@@BLK ent)
                                               PLF))))))

(assert (forall ( (p BLK) )
                (=> true
                    (= (not (= p
                               ent))
                       (elem@@BLK p
                                  (bunion@@BLK (mk-set@@BLK ext)
                                               PLF))))))

(assert (forall ( (p BLK) )
                (=> true
                    (= (or (= p
                              ent)
                           (= p
                              ext))
                       (not (elem@@BLK p
                                       PLF))))))

(assert (= BLK
           (bunion@@BLK (bunion@@BLK (mk-set@@BLK ent)
                                     (mk-set@@BLK ext))
                        PLF)))

(assert (not (= (=> (not (elem@@TRAIN t
                                      in))
                    (= (select loc@prime
                               t)
                       ent))
                true)))

(check-sat-using (or-else (then qe smt) (then skip smt) (then (using-params simplify :expand-power true) smt)))

(pop)
(echo "> train0/enter/CO/co0/case 2/goal (304,1)")
(push)
(declare-sort BLK 0)
(declare-sort LOC 0)
(declare-sort TRAIN 0)
(define-sort pfun (a b) (Array a b))
(declare-sort set 1)
(declare-const PLF (set BLK))
(declare-const BLK (set BLK))
(declare-const LOC (set LOC))
(declare-const TRAIN (set TRAIN))
(declare-const ent BLK)
(declare-const ext BLK)
(declare-const in (set TRAIN))
(declare-const in@prime (set TRAIN))
(declare-const loc (pfun TRAIN BLK))
(declare-const loc@prime (pfun TRAIN BLK))
(declare-const p BLK)
(declare-const q BLK)
(declare-const t TRAIN)
(declare-const t_0 TRAIN)
(declare-const t_1 TRAIN)
(declare-const t_2 TRAIN)
(declare-const t_3 TRAIN)
(declare-fun apply@@TRAIN@@BLK ((pfun TRAIN BLK) TRAIN) BLK)
(declare-fun dom-rest@@TRAIN@@BLK ((set TRAIN) (pfun TRAIN BLK)) (pfun TRAIN BLK))
(declare-fun dom-subt@@TRAIN@@BLK ((set TRAIN) (pfun TRAIN BLK)) (pfun TRAIN BLK))
(declare-fun dom@@TRAIN@@BLK ((pfun TRAIN BLK)) (set TRAIN))
(declare-fun elem@@BLK (BLK (set BLK)) Bool)
(declare-fun elem@@LOC (LOC (set LOC)) Bool)
(declare-fun elem@@TRAIN (TRAIN (set TRAIN)) Bool)
(declare-fun elem@Open@@pfun@@TRAIN@@BLK@Close ((pfun TRAIN BLK) (set (pfun TRAIN BLK))) Bool)
(declare-fun empty-fun@@TRAIN@@BLK () (pfun TRAIN BLK))
(declare-fun empty-set@@BLK () (set BLK))
(declare-fun empty-set@@LOC () (set LOC))
(declare-fun empty-set@@TRAIN () (set TRAIN))
(declare-fun empty-set@Open@@pfun@@TRAIN@@BLK@Close () (set (pfun TRAIN BLK)))
(declare-fun intersect@@BLK ((set BLK) (set BLK)) (set BLK))
(declare-fun intersect@@LOC ((set LOC) (set LOC)) (set LOC))
(declare-fun intersect@@TRAIN ((set TRAIN) (set TRAIN)) (set TRAIN))
(declare-fun intersect@Open@@pfun@@TRAIN@@BLK@Close ((set (pfun TRAIN BLK)) (set (pfun TRAIN BLK))) (set (pfun TRAIN BLK)))
(declare-fun mk-fun@@TRAIN@@BLK (TRAIN BLK) (pfun TRAIN BLK))
(declare-fun mk-set@@BLK (BLK) (set BLK))
(declare-fun mk-set@@LOC (LOC) (set LOC))
(declare-fun mk-set@@TRAIN (TRAIN) (set TRAIN))
(declare-fun mk-set@Open@@pfun@@TRAIN@@BLK@Close ((pfun TRAIN BLK)) (set (pfun TRAIN BLK)))
(declare-fun ovl@@TRAIN@@BLK ((pfun TRAIN BLK) (pfun TRAIN BLK)) (pfun TRAIN BLK))
(declare-fun set-diff@@BLK ((set BLK) (set BLK)) (set BLK))
(declare-fun set-diff@@LOC ((set LOC) (set LOC)) (set LOC))
(declare-fun set-diff@@TRAIN ((set TRAIN) (set TRAIN)) (set TRAIN))
(declare-fun set-diff@Open@@pfun@@TRAIN@@BLK@Close ((set (pfun TRAIN BLK)) (set (pfun TRAIN BLK))) (set (pfun TRAIN BLK)))
(declare-fun tfun@@TRAIN@@BLK ((set TRAIN) (set BLK)) (set (pfun TRAIN BLK)))
(declare-fun bunion@@BLK ((set BLK) (set BLK)) (set BLK))
(declare-fun bunion@@LOC ((set LOC) (set LOC)) (set LOC))
(declare-fun bunion@@TRAIN ((set TRAIN) (set TRAIN)) (set TRAIN))
(declare-fun bunion@Open@@pfun@@TRAIN@@BLK@Close ((set (pfun TRAIN BLK)) (set (pfun TRAIN BLK))) (set (pfun TRAIN BLK)))
(assert (=> (and (not (elem@@TRAIN t_0
                                   in))
                 (elem@@TRAIN t_0
                              in@prime))
            (= (select loc@prime
                       t_0)
               ent)))

(assert (not (=> (and (not (elem@@TRAIN t_0
                                        in))
                      (elem@@TRAIN t_0
                                   in@prime))
                 (= (select loc@prime
                            t_0)
                    ent))))

(check-sat-using (or-else (then qe smt) (then skip smt) (then (using-params simplify :expand-power true) smt)))

(pop)
(echo "> train0/enter/CO/co0/case 2/hypotheses (304,1)")
(push)
(declare-sort BLK 0)
(declare-sort LOC 0)
(declare-sort TRAIN 0)
(define-sort pfun (a b) (Array a b))
(declare-sort set 1)
(declare-const PLF (set BLK))
(declare-const BLK (set BLK))
(declare-const LOC (set LOC))
(declare-const TRAIN (set TRAIN))
(declare-const ent BLK)
(declare-const ext BLK)
(declare-const in (set TRAIN))
(declare-const in@prime (set TRAIN))
(declare-const loc (pfun TRAIN BLK))
(declare-const loc@prime (pfun TRAIN BLK))
(declare-const p BLK)
(declare-const q BLK)
(declare-const t TRAIN)
(declare-const t_0 TRAIN)
(declare-const t_1 TRAIN)
(declare-const t_2 TRAIN)
(declare-const t_3 TRAIN)
(declare-fun apply@@TRAIN@@BLK ((pfun TRAIN BLK) TRAIN) BLK)
(declare-fun dom-rest@@TRAIN@@BLK ((set TRAIN) (pfun TRAIN BLK)) (pfun TRAIN BLK))
(declare-fun dom-subt@@TRAIN@@BLK ((set TRAIN) (pfun TRAIN BLK)) (pfun TRAIN BLK))
(declare-fun dom@@TRAIN@@BLK ((pfun TRAIN BLK)) (set TRAIN))
(declare-fun elem@@BLK (BLK (set BLK)) Bool)
(declare-fun elem@@LOC (LOC (set LOC)) Bool)
(declare-fun elem@@TRAIN (TRAIN (set TRAIN)) Bool)
(declare-fun elem@Open@@pfun@@TRAIN@@BLK@Close ((pfun TRAIN BLK) (set (pfun TRAIN BLK))) Bool)
(declare-fun empty-fun@@TRAIN@@BLK () (pfun TRAIN BLK))
(declare-fun empty-set@@BLK () (set BLK))
(declare-fun empty-set@@LOC () (set LOC))
(declare-fun empty-set@@TRAIN () (set TRAIN))
(declare-fun empty-set@Open@@pfun@@TRAIN@@BLK@Close () (set (pfun TRAIN BLK)))
(declare-fun intersect@@BLK ((set BLK) (set BLK)) (set BLK))
(declare-fun intersect@@LOC ((set LOC) (set LOC)) (set LOC))
(declare-fun intersect@@TRAIN ((set TRAIN) (set TRAIN)) (set TRAIN))
(declare-fun intersect@Open@@pfun@@TRAIN@@BLK@Close ((set (pfun TRAIN BLK)) (set (pfun TRAIN BLK))) (set (pfun TRAIN BLK)))
(declare-fun mk-fun@@TRAIN@@BLK (TRAIN BLK) (pfun TRAIN BLK))
(declare-fun mk-set@@BLK (BLK) (set BLK))
(declare-fun mk-set@@LOC (LOC) (set LOC))
(declare-fun mk-set@@TRAIN (TRAIN) (set TRAIN))
(declare-fun mk-set@Open@@pfun@@TRAIN@@BLK@Close ((pfun TRAIN BLK)) (set (pfun TRAIN BLK)))
(declare-fun ovl@@TRAIN@@BLK ((pfun TRAIN BLK) (pfun TRAIN BLK)) (pfun TRAIN BLK))
(declare-fun set-diff@@BLK ((set BLK) (set BLK)) (set BLK))
(declare-fun set-diff@@LOC ((set LOC) (set LOC)) (set LOC))
(declare-fun set-diff@@TRAIN ((set TRAIN) (set TRAIN)) (set TRAIN))
(declare-fun set-diff@Open@@pfun@@TRAIN@@BLK@Close ((set (pfun TRAIN BLK)) (set (pfun TRAIN BLK))) (set (pfun TRAIN BLK)))
(declare-fun tfun@@TRAIN@@BLK ((set TRAIN) (set BLK)) (set (pfun TRAIN BLK)))
(declare-fun bunion@@BLK ((set BLK) (set BLK)) (set BLK))
(declare-fun bunion@@LOC ((set LOC) (set LOC)) (set LOC))
(declare-fun bunion@@TRAIN ((set TRAIN) (set TRAIN)) (set TRAIN))
(declare-fun bunion@Open@@pfun@@TRAIN@@BLK@Close ((set (pfun TRAIN BLK)) (set (pfun TRAIN BLK))) (set (pfun TRAIN BLK)))
(assert (not (= t_0
                t)))

(assert (forall ( (x BLK)
                  (y BLK) )
                (= (elem@@BLK x
                              (mk-set@@BLK y))
                   (= x
                      y))))

(assert (forall ( (x BLK)
                  (s1 (set BLK))
                  (s2 (set BLK)) )
                (= (elem@@BLK x
                              (set-diff@@BLK s1
                                             s2))
                   (and (elem@@BLK x
                                   s1)
                        (not (elem@@BLK x
                                        s2))))))

(assert (forall ( (x BLK)
                  (s1 (set BLK))
                  (s2 (set BLK)) )
                (= (elem@@BLK x
                              (intersect@@BLK s1
                                              s2))
                   (and (elem@@BLK x
                                   s1)
                        (elem@@BLK x
                                   s2)))))

(assert (forall ( (x BLK)
                  (s1 (set BLK))
                  (s2 (set BLK)) )
                (= (elem@@BLK x
                              (bunion@@BLK s1
                                           s2))
                   (or (elem@@BLK x
                                  s1)
                       (elem@@BLK x
                                  s2)))))

(assert (forall ( (x BLK)
                  (s1 (set BLK))
                  (s2 (set BLK)) )
                (not (elem@@BLK x
                                empty-set@@BLK))))

(assert (forall ( (x LOC)
                  (y LOC) )
                (= (elem@@LOC x
                              (mk-set@@LOC y))
                   (= x
                      y))))

(assert (forall ( (x LOC)
                  (s1 (set LOC))
                  (s2 (set LOC)) )
                (= (elem@@LOC x
                              (set-diff@@LOC s1
                                             s2))
                   (and (elem@@LOC x
                                   s1)
                        (not (elem@@LOC x
                                        s2))))))

(assert (forall ( (x LOC)
                  (s1 (set LOC))
                  (s2 (set LOC)) )
                (= (elem@@LOC x
                              (intersect@@LOC s1
                                              s2))
                   (and (elem@@LOC x
                                   s1)
                        (elem@@LOC x
                                   s2)))))

(assert (forall ( (x LOC)
                  (s1 (set LOC))
                  (s2 (set LOC)) )
                (= (elem@@LOC x
                              (bunion@@LOC s1
                                           s2))
                   (or (elem@@LOC x
                                  s1)
                       (elem@@LOC x
                                  s2)))))

(assert (forall ( (x LOC)
                  (s1 (set LOC))
                  (s2 (set LOC)) )
                (not (elem@@LOC x
                                empty-set@@LOC))))

(assert (forall ( (x TRAIN)
                  (y TRAIN) )
                (= (elem@@TRAIN x
                                (mk-set@@TRAIN y))
                   (= x
                      y))))

(assert (forall ( (x TRAIN)
                  (s1 (set TRAIN))
                  (s2 (set TRAIN)) )
                (= (elem@@TRAIN x
                                (set-diff@@TRAIN s1
                                                 s2))
                   (and (elem@@TRAIN x
                                     s1)
                        (not (elem@@TRAIN x
                                          s2))))))

(assert (forall ( (x TRAIN)
                  (s1 (set TRAIN))
                  (s2 (set TRAIN)) )
                (= (elem@@TRAIN x
                                (intersect@@TRAIN s1
                                                  s2))
                   (and (elem@@TRAIN x
                                     s1)
                        (elem@@TRAIN x
                                     s2)))))

(assert (forall ( (x TRAIN)
                  (s1 (set TRAIN))
                  (s2 (set TRAIN)) )
                (= (elem@@TRAIN x
                                (bunion@@TRAIN s1
                                               s2))
                   (or (elem@@TRAIN x
                                    s1)
                       (elem@@TRAIN x
                                    s2)))))

(assert (forall ( (x TRAIN)
                  (s1 (set TRAIN))
                  (s2 (set TRAIN)) )
                (not (elem@@TRAIN x
                                  empty-set@@TRAIN))))

(assert (forall ( (f1 (pfun TRAIN
                            BLK))
                  (f2 (pfun TRAIN
                            BLK)) )
                (= (bunion@@TRAIN (dom@@TRAIN@@BLK f1)
                                  (dom@@TRAIN@@BLK f2))
                   (dom@@TRAIN@@BLK (ovl@@TRAIN@@BLK f1
                                                     f2)))))

(assert (= (dom@@TRAIN@@BLK empty-fun@@TRAIN@@BLK)
           empty-set@@TRAIN))

(assert (forall ( (x TRAIN)
                  (y BLK) )
                (= (dom@@TRAIN@@BLK (mk-fun@@TRAIN@@BLK x
                                                        y))
                   (mk-set@@TRAIN x))))

(assert (forall ( (f1 (pfun TRAIN
                            BLK))
                  (f2 (pfun TRAIN
                            BLK))
                  (x TRAIN) )
                (=> (elem@@TRAIN x
                                 (dom@@TRAIN@@BLK f2))
                    (= (select (ovl@@TRAIN@@BLK f1
                                                f2)
                               x)
                       (select f2
                               x)))))

(assert (forall ( (f1 (pfun TRAIN
                            BLK))
                  (f2 (pfun TRAIN
                            BLK))
                  (x TRAIN) )
                (=> (elem@@TRAIN x
                                 (set-diff@@TRAIN (dom@@TRAIN@@BLK f1)
                                                  (dom@@TRAIN@@BLK f2)))
                    (= (select (ovl@@TRAIN@@BLK f1
                                                f2)
                               x)
                       (select f1
                               x)))))

(assert (forall ( (f1 (pfun TRAIN
                            BLK))
                  (s1 (set TRAIN)) )
                (= (dom@@TRAIN@@BLK (dom-subt@@TRAIN@@BLK s1
                                                          f1))
                   (set-diff@@TRAIN (dom@@TRAIN@@BLK f1)
                                    s1))))

(assert (forall ( (x TRAIN)
                  (y BLK) )
                (= (select (mk-fun@@TRAIN@@BLK x
                                               y)
                           x)
                   y)))

(assert (forall ( (f1 (pfun TRAIN
                            BLK))
                  (s1 (set TRAIN))
                  (x TRAIN) )
                (=> (elem@@TRAIN x
                                 (intersect@@TRAIN s1
                                                   (dom@@TRAIN@@BLK f1)))
                    (= (select (dom-rest@@TRAIN@@BLK s1
                                                     f1)
                               x)
                       (select f1
                               x)))))

(assert (forall ( (f1 (pfun TRAIN
                            BLK))
                  (s1 (set TRAIN))
                  (x TRAIN) )
                (=> (elem@@TRAIN x
                                 (set-diff@@TRAIN (dom@@TRAIN@@BLK f1)
                                                  s1))
                    (= (select (dom-subt@@TRAIN@@BLK s1
                                                     f1)
                               x)
                       (select f1
                               x)))))

(assert (forall ( (x (pfun TRAIN
                           BLK))
                  (y (pfun TRAIN
                           BLK)) )
                (= (elem@Open@@pfun@@TRAIN@@BLK@Close x
                                                      (mk-set@Open@@pfun@@TRAIN@@BLK@Close y))
                   (= x
                      y))))

(assert (forall ( (x (pfun TRAIN
                           BLK))
                  (s1 (set (pfun TRAIN
                                 BLK)))
                  (s2 (set (pfun TRAIN
                                 BLK))) )
                (= (elem@Open@@pfun@@TRAIN@@BLK@Close x
                                                      (set-diff@Open@@pfun@@TRAIN@@BLK@Close s1
                                                                                             s2))
                   (and (elem@Open@@pfun@@TRAIN@@BLK@Close x
                                                           s1)
                        (not (elem@Open@@pfun@@TRAIN@@BLK@Close x
                                                                s2))))))

(assert (forall ( (x (pfun TRAIN
                           BLK))
                  (s1 (set (pfun TRAIN
                                 BLK)))
                  (s2 (set (pfun TRAIN
                                 BLK))) )
                (= (elem@Open@@pfun@@TRAIN@@BLK@Close x
                                                      (intersect@Open@@pfun@@TRAIN@@BLK@Close s1
                                                                                              s2))
                   (and (elem@Open@@pfun@@TRAIN@@BLK@Close x
                                                           s1)
                        (elem@Open@@pfun@@TRAIN@@BLK@Close x
                                                           s2)))))

(assert (forall ( (x (pfun TRAIN
                           BLK))
                  (s1 (set (pfun TRAIN
                                 BLK)))
                  (s2 (set (pfun TRAIN
                                 BLK))) )
                (= (elem@Open@@pfun@@TRAIN@@BLK@Close x
                                                      (bunion@Open@@pfun@@TRAIN@@BLK@Close s1
                                                                                           s2))
                   (or (elem@Open@@pfun@@TRAIN@@BLK@Close x
                                                          s1)
                       (elem@Open@@pfun@@TRAIN@@BLK@Close x
                                                          s2)))))

(assert (forall ( (x (pfun TRAIN
                           BLK))
                  (s1 (set (pfun TRAIN
                                 BLK)))
                  (s2 (set (pfun TRAIN
                                 BLK))) )
                (not (elem@Open@@pfun@@TRAIN@@BLK@Close x
                                                        empty-set@Open@@pfun@@TRAIN@@BLK@Close))))

(assert (and (not (= ent
                     ext))
             (not (elem@@BLK ent
                             PLF))
             (not (elem@@BLK ext
                             PLF))))

(assert (forall ( (p BLK) )
                (=> true
                    (= (not (= p
                               ext))
                       (elem@@BLK p
                                  (bunion@@BLK (mk-set@@BLK ent)
                                               PLF))))))

(assert (forall ( (p BLK) )
                (=> true
                    (= (not (= p
                               ent))
                       (elem@@BLK p
                                  (bunion@@BLK (mk-set@@BLK ext)
                                               PLF))))))

(assert (forall ( (p BLK) )
                (=> true
                    (= (or (= p
                              ent)
                           (= p
                              ext))
                       (not (elem@@BLK p
                                       PLF))))))

(assert (= BLK
           (bunion@@BLK (bunion@@BLK (mk-set@@BLK ent)
                                     (mk-set@@BLK ext))
                        PLF)))

(assert (forall ( (t TRAIN) )
                (=> (elem@@TRAIN t
                                 in)
                    (elem@@BLK (select loc
                                       t)
                               BLK))))

(assert (= (dom@@TRAIN@@BLK loc)
           in))

(assert (not (elem@@TRAIN t
                          in)))

(assert (= in@prime
           (bunion@@TRAIN in
                          (mk-set@@TRAIN t))))

(assert (= loc@prime
           (ovl@@TRAIN@@BLK loc
                            (mk-fun@@TRAIN@@BLK t
                                                ent))))

(assert (not (and (= in@prime
                     (bunion@@TRAIN in
                                    (mk-set@@TRAIN t)))
                  (not (= t_0
                          t)))))

(check-sat-using (or-else (then qe smt) (then skip smt) (then (using-params simplify :expand-power true) smt)))

(pop)
(echo "> train0/enter/CO/co0/case 2/relation (304,1)")
(push)
(declare-sort BLK 0)
(declare-sort LOC 0)
(declare-sort TRAIN 0)
(define-sort pfun (a b) (Array a b))
(declare-sort set 1)
(declare-const PLF (set BLK))
(declare-const BLK (set BLK))
(declare-const LOC (set LOC))
(declare-const TRAIN (set TRAIN))
(declare-const ent BLK)
(declare-const ext BLK)
(declare-const in (set TRAIN))
(declare-const in@prime (set TRAIN))
(declare-const loc (pfun TRAIN BLK))
(declare-const loc@prime (pfun TRAIN BLK))
(declare-const p BLK)
(declare-const q BLK)
(declare-const t TRAIN)
(declare-const t_0 TRAIN)
(declare-const t_1 TRAIN)
(declare-const t_2 TRAIN)
(declare-const t_3 TRAIN)
(declare-fun apply@@TRAIN@@BLK ((pfun TRAIN BLK) TRAIN) BLK)
(declare-fun dom-rest@@TRAIN@@BLK ((set TRAIN) (pfun TRAIN BLK)) (pfun TRAIN BLK))
(declare-fun dom-subt@@TRAIN@@BLK ((set TRAIN) (pfun TRAIN BLK)) (pfun TRAIN BLK))
(declare-fun dom@@TRAIN@@BLK ((pfun TRAIN BLK)) (set TRAIN))
(declare-fun elem@@BLK (BLK (set BLK)) Bool)
(declare-fun elem@@LOC (LOC (set LOC)) Bool)
(declare-fun elem@@TRAIN (TRAIN (set TRAIN)) Bool)
(declare-fun elem@Open@@pfun@@TRAIN@@BLK@Close ((pfun TRAIN BLK) (set (pfun TRAIN BLK))) Bool)
(declare-fun empty-fun@@TRAIN@@BLK () (pfun TRAIN BLK))
(declare-fun empty-set@@BLK () (set BLK))
(declare-fun empty-set@@LOC () (set LOC))
(declare-fun empty-set@@TRAIN () (set TRAIN))
(declare-fun empty-set@Open@@pfun@@TRAIN@@BLK@Close () (set (pfun TRAIN BLK)))
(declare-fun intersect@@BLK ((set BLK) (set BLK)) (set BLK))
(declare-fun intersect@@LOC ((set LOC) (set LOC)) (set LOC))
(declare-fun intersect@@TRAIN ((set TRAIN) (set TRAIN)) (set TRAIN))
(declare-fun intersect@Open@@pfun@@TRAIN@@BLK@Close ((set (pfun TRAIN BLK)) (set (pfun TRAIN BLK))) (set (pfun TRAIN BLK)))
(declare-fun mk-fun@@TRAIN@@BLK (TRAIN BLK) (pfun TRAIN BLK))
(declare-fun mk-set@@BLK (BLK) (set BLK))
(declare-fun mk-set@@LOC (LOC) (set LOC))
(declare-fun mk-set@@TRAIN (TRAIN) (set TRAIN))
(declare-fun mk-set@Open@@pfun@@TRAIN@@BLK@Close ((pfun TRAIN BLK)) (set (pfun TRAIN BLK)))
(declare-fun ovl@@TRAIN@@BLK ((pfun TRAIN BLK) (pfun TRAIN BLK)) (pfun TRAIN BLK))
(declare-fun set-diff@@BLK ((set BLK) (set BLK)) (set BLK))
(declare-fun set-diff@@LOC ((set LOC) (set LOC)) (set LOC))
(declare-fun set-diff@@TRAIN ((set TRAIN) (set TRAIN)) (set TRAIN))
(declare-fun set-diff@Open@@pfun@@TRAIN@@BLK@Close ((set (pfun TRAIN BLK)) (set (pfun TRAIN BLK))) (set (pfun TRAIN BLK)))
(declare-fun tfun@@TRAIN@@BLK ((set TRAIN) (set BLK)) (set (pfun TRAIN BLK)))
(declare-fun bunion@@BLK ((set BLK) (set BLK)) (set BLK))
(declare-fun bunion@@LOC ((set LOC) (set LOC)) (set LOC))
(declare-fun bunion@@TRAIN ((set TRAIN) (set TRAIN)) (set TRAIN))
(declare-fun bunion@Open@@pfun@@TRAIN@@BLK@Close ((set (pfun TRAIN BLK)) (set (pfun TRAIN BLK))) (set (pfun TRAIN BLK)))
(assert (= (and (not (elem@@TRAIN t_0
                                  in))
                (elem@@TRAIN t_0
                             in@prime))
           (and (not (elem@@TRAIN t_0
                                  in))
                (elem@@TRAIN t_0
                             (bunion@@TRAIN in
                                            (mk-set@@TRAIN t))))))

(assert (= (and (not (elem@@TRAIN t_0
                                  in))
                (elem@@TRAIN t_0
                             (bunion@@TRAIN in
                                            (mk-set@@TRAIN t))))
           (and (not (elem@@TRAIN t_0
                                  in))
                (elem@@TRAIN t_0
                             in))))

(assert (= (and (not (elem@@TRAIN t_0
                                  in))
                (elem@@TRAIN t_0
                             in))
           false))

(assert (=> false
            (= (select loc@prime
                       t_0)
               ent)))

(assert (forall ( (x BLK)
                  (y BLK) )
                (= (elem@@BLK x
                              (mk-set@@BLK y))
                   (= x
                      y))))

(assert (forall ( (x BLK)
                  (s1 (set BLK))
                  (s2 (set BLK)) )
                (= (elem@@BLK x
                              (set-diff@@BLK s1
                                             s2))
                   (and (elem@@BLK x
                                   s1)
                        (not (elem@@BLK x
                                        s2))))))

(assert (forall ( (x BLK)
                  (s1 (set BLK))
                  (s2 (set BLK)) )
                (= (elem@@BLK x
                              (intersect@@BLK s1
                                              s2))
                   (and (elem@@BLK x
                                   s1)
                        (elem@@BLK x
                                   s2)))))

(assert (forall ( (x BLK)
                  (s1 (set BLK))
                  (s2 (set BLK)) )
                (= (elem@@BLK x
                              (bunion@@BLK s1
                                           s2))
                   (or (elem@@BLK x
                                  s1)
                       (elem@@BLK x
                                  s2)))))

(assert (forall ( (x BLK)
                  (s1 (set BLK))
                  (s2 (set BLK)) )
                (not (elem@@BLK x
                                empty-set@@BLK))))

(assert (forall ( (x LOC)
                  (y LOC) )
                (= (elem@@LOC x
                              (mk-set@@LOC y))
                   (= x
                      y))))

(assert (forall ( (x LOC)
                  (s1 (set LOC))
                  (s2 (set LOC)) )
                (= (elem@@LOC x
                              (set-diff@@LOC s1
                                             s2))
                   (and (elem@@LOC x
                                   s1)
                        (not (elem@@LOC x
                                        s2))))))

(assert (forall ( (x LOC)
                  (s1 (set LOC))
                  (s2 (set LOC)) )
                (= (elem@@LOC x
                              (intersect@@LOC s1
                                              s2))
                   (and (elem@@LOC x
                                   s1)
                        (elem@@LOC x
                                   s2)))))

(assert (forall ( (x LOC)
                  (s1 (set LOC))
                  (s2 (set LOC)) )
                (= (elem@@LOC x
                              (bunion@@LOC s1
                                           s2))
                   (or (elem@@LOC x
                                  s1)
                       (elem@@LOC x
                                  s2)))))

(assert (forall ( (x LOC)
                  (s1 (set LOC))
                  (s2 (set LOC)) )
                (not (elem@@LOC x
                                empty-set@@LOC))))

(assert (forall ( (x TRAIN)
                  (y TRAIN) )
                (= (elem@@TRAIN x
                                (mk-set@@TRAIN y))
                   (= x
                      y))))

(assert (forall ( (x TRAIN)
                  (s1 (set TRAIN))
                  (s2 (set TRAIN)) )
                (= (elem@@TRAIN x
                                (set-diff@@TRAIN s1
                                                 s2))
                   (and (elem@@TRAIN x
                                     s1)
                        (not (elem@@TRAIN x
                                          s2))))))

(assert (forall ( (x TRAIN)
                  (s1 (set TRAIN))
                  (s2 (set TRAIN)) )
                (= (elem@@TRAIN x
                                (intersect@@TRAIN s1
                                                  s2))
                   (and (elem@@TRAIN x
                                     s1)
                        (elem@@TRAIN x
                                     s2)))))

(assert (forall ( (x TRAIN)
                  (s1 (set TRAIN))
                  (s2 (set TRAIN)) )
                (= (elem@@TRAIN x
                                (bunion@@TRAIN s1
                                               s2))
                   (or (elem@@TRAIN x
                                    s1)
                       (elem@@TRAIN x
                                    s2)))))

(assert (forall ( (x TRAIN)
                  (s1 (set TRAIN))
                  (s2 (set TRAIN)) )
                (not (elem@@TRAIN x
                                  empty-set@@TRAIN))))

(assert (forall ( (f1 (pfun TRAIN
                            BLK))
                  (f2 (pfun TRAIN
                            BLK)) )
                (= (bunion@@TRAIN (dom@@TRAIN@@BLK f1)
                                  (dom@@TRAIN@@BLK f2))
                   (dom@@TRAIN@@BLK (ovl@@TRAIN@@BLK f1
                                                     f2)))))

(assert (= (dom@@TRAIN@@BLK empty-fun@@TRAIN@@BLK)
           empty-set@@TRAIN))

(assert (forall ( (x TRAIN)
                  (y BLK) )
                (= (dom@@TRAIN@@BLK (mk-fun@@TRAIN@@BLK x
                                                        y))
                   (mk-set@@TRAIN x))))

(assert (forall ( (f1 (pfun TRAIN
                            BLK))
                  (f2 (pfun TRAIN
                            BLK))
                  (x TRAIN) )
                (=> (elem@@TRAIN x
                                 (dom@@TRAIN@@BLK f2))
                    (= (select (ovl@@TRAIN@@BLK f1
                                                f2)
                               x)
                       (select f2
                               x)))))

(assert (forall ( (f1 (pfun TRAIN
                            BLK))
                  (f2 (pfun TRAIN
                            BLK))
                  (x TRAIN) )
                (=> (elem@@TRAIN x
                                 (set-diff@@TRAIN (dom@@TRAIN@@BLK f1)
                                                  (dom@@TRAIN@@BLK f2)))
                    (= (select (ovl@@TRAIN@@BLK f1
                                                f2)
                               x)
                       (select f1
                               x)))))

(assert (forall ( (f1 (pfun TRAIN
                            BLK))
                  (s1 (set TRAIN)) )
                (= (dom@@TRAIN@@BLK (dom-subt@@TRAIN@@BLK s1
                                                          f1))
                   (set-diff@@TRAIN (dom@@TRAIN@@BLK f1)
                                    s1))))

(assert (forall ( (x TRAIN)
                  (y BLK) )
                (= (select (mk-fun@@TRAIN@@BLK x
                                               y)
                           x)
                   y)))

(assert (forall ( (f1 (pfun TRAIN
                            BLK))
                  (s1 (set TRAIN))
                  (x TRAIN) )
                (=> (elem@@TRAIN x
                                 (intersect@@TRAIN s1
                                                   (dom@@TRAIN@@BLK f1)))
                    (= (select (dom-rest@@TRAIN@@BLK s1
                                                     f1)
                               x)
                       (select f1
                               x)))))

(assert (forall ( (f1 (pfun TRAIN
                            BLK))
                  (s1 (set TRAIN))
                  (x TRAIN) )
                (=> (elem@@TRAIN x
                                 (set-diff@@TRAIN (dom@@TRAIN@@BLK f1)
                                                  s1))
                    (= (select (dom-subt@@TRAIN@@BLK s1
                                                     f1)
                               x)
                       (select f1
                               x)))))

(assert (forall ( (x (pfun TRAIN
                           BLK))
                  (y (pfun TRAIN
                           BLK)) )
                (= (elem@Open@@pfun@@TRAIN@@BLK@Close x
                                                      (mk-set@Open@@pfun@@TRAIN@@BLK@Close y))
                   (= x
                      y))))

(assert (forall ( (x (pfun TRAIN
                           BLK))
                  (s1 (set (pfun TRAIN
                                 BLK)))
                  (s2 (set (pfun TRAIN
                                 BLK))) )
                (= (elem@Open@@pfun@@TRAIN@@BLK@Close x
                                                      (set-diff@Open@@pfun@@TRAIN@@BLK@Close s1
                                                                                             s2))
                   (and (elem@Open@@pfun@@TRAIN@@BLK@Close x
                                                           s1)
                        (not (elem@Open@@pfun@@TRAIN@@BLK@Close x
                                                                s2))))))

(assert (forall ( (x (pfun TRAIN
                           BLK))
                  (s1 (set (pfun TRAIN
                                 BLK)))
                  (s2 (set (pfun TRAIN
                                 BLK))) )
                (= (elem@Open@@pfun@@TRAIN@@BLK@Close x
                                                      (intersect@Open@@pfun@@TRAIN@@BLK@Close s1
                                                                                              s2))
                   (and (elem@Open@@pfun@@TRAIN@@BLK@Close x
                                                           s1)
                        (elem@Open@@pfun@@TRAIN@@BLK@Close x
                                                           s2)))))

(assert (forall ( (x (pfun TRAIN
                           BLK))
                  (s1 (set (pfun TRAIN
                                 BLK)))
                  (s2 (set (pfun TRAIN
                                 BLK))) )
                (= (elem@Open@@pfun@@TRAIN@@BLK@Close x
                                                      (bunion@Open@@pfun@@TRAIN@@BLK@Close s1
                                                                                           s2))
                   (or (elem@Open@@pfun@@TRAIN@@BLK@Close x
                                                          s1)
                       (elem@Open@@pfun@@TRAIN@@BLK@Close x
                                                          s2)))))

(assert (forall ( (x (pfun TRAIN
                           BLK))
                  (s1 (set (pfun TRAIN
                                 BLK)))
                  (s2 (set (pfun TRAIN
                                 BLK))) )
                (not (elem@Open@@pfun@@TRAIN@@BLK@Close x
                                                        empty-set@Open@@pfun@@TRAIN@@BLK@Close))))

(assert (and (not (= ent
                     ext))
             (not (elem@@BLK ent
                             PLF))
             (not (elem@@BLK ext
                             PLF))))

(assert (forall ( (p BLK) )
                (=> true
                    (= (not (= p
                               ext))
                       (elem@@BLK p
                                  (bunion@@BLK (mk-set@@BLK ent)
                                               PLF))))))

(assert (forall ( (p BLK) )
                (=> true
                    (= (not (= p
                               ent))
                       (elem@@BLK p
                                  (bunion@@BLK (mk-set@@BLK ext)
                                               PLF))))))

(assert (forall ( (p BLK) )
                (=> true
                    (= (or (= p
                              ent)
                           (= p
                              ext))
                       (not (elem@@BLK p
                                       PLF))))))

(assert (= BLK
           (bunion@@BLK (bunion@@BLK (mk-set@@BLK ent)
                                     (mk-set@@BLK ext))
                        PLF)))

(assert (not (=> (and (not (elem@@TRAIN t_0
                                        in))
                      (elem@@TRAIN t_0
                                   in@prime))
                 (= (select loc@prime
                            t_0)
                    ent))))

(check-sat-using (or-else (then qe smt) (then skip smt) (then (using-params simplify :expand-power true) smt)))

(pop)
(echo "> train0/enter/CO/co0/case 2/step (306,1)")
(push)
(declare-sort BLK 0)
(declare-sort LOC 0)
(declare-sort TRAIN 0)
(define-sort pfun (a b) (Array a b))
(declare-sort set 1)
(declare-const PLF (set BLK))
(declare-const BLK (set BLK))
(declare-const LOC (set LOC))
(declare-const TRAIN (set TRAIN))
(declare-const ent BLK)
(declare-const ext BLK)
(declare-const in (set TRAIN))
(declare-const in@prime (set TRAIN))
(declare-const loc (pfun TRAIN BLK))
(declare-const loc@prime (pfun TRAIN BLK))
(declare-const p BLK)
(declare-const q BLK)
(declare-const t TRAIN)
(declare-const t_0 TRAIN)
(declare-const t_1 TRAIN)
(declare-const t_2 TRAIN)
(declare-const t_3 TRAIN)
(declare-fun apply@@TRAIN@@BLK ((pfun TRAIN BLK) TRAIN) BLK)
(declare-fun dom-rest@@TRAIN@@BLK ((set TRAIN) (pfun TRAIN BLK)) (pfun TRAIN BLK))
(declare-fun dom-subt@@TRAIN@@BLK ((set TRAIN) (pfun TRAIN BLK)) (pfun TRAIN BLK))
(declare-fun dom@@TRAIN@@BLK ((pfun TRAIN BLK)) (set TRAIN))
(declare-fun elem@@BLK (BLK (set BLK)) Bool)
(declare-fun elem@@LOC (LOC (set LOC)) Bool)
(declare-fun elem@@TRAIN (TRAIN (set TRAIN)) Bool)
(declare-fun elem@Open@@pfun@@TRAIN@@BLK@Close ((pfun TRAIN BLK) (set (pfun TRAIN BLK))) Bool)
(declare-fun empty-fun@@TRAIN@@BLK () (pfun TRAIN BLK))
(declare-fun empty-set@@BLK () (set BLK))
(declare-fun empty-set@@LOC () (set LOC))
(declare-fun empty-set@@TRAIN () (set TRAIN))
(declare-fun empty-set@Open@@pfun@@TRAIN@@BLK@Close () (set (pfun TRAIN BLK)))
(declare-fun intersect@@BLK ((set BLK) (set BLK)) (set BLK))
(declare-fun intersect@@LOC ((set LOC) (set LOC)) (set LOC))
(declare-fun intersect@@TRAIN ((set TRAIN) (set TRAIN)) (set TRAIN))
(declare-fun intersect@Open@@pfun@@TRAIN@@BLK@Close ((set (pfun TRAIN BLK)) (set (pfun TRAIN BLK))) (set (pfun TRAIN BLK)))
(declare-fun mk-fun@@TRAIN@@BLK (TRAIN BLK) (pfun TRAIN BLK))
(declare-fun mk-set@@BLK (BLK) (set BLK))
(declare-fun mk-set@@LOC (LOC) (set LOC))
(declare-fun mk-set@@TRAIN (TRAIN) (set TRAIN))
(declare-fun mk-set@Open@@pfun@@TRAIN@@BLK@Close ((pfun TRAIN BLK)) (set (pfun TRAIN BLK)))
(declare-fun ovl@@TRAIN@@BLK ((pfun TRAIN BLK) (pfun TRAIN BLK)) (pfun TRAIN BLK))
(declare-fun set-diff@@BLK ((set BLK) (set BLK)) (set BLK))
(declare-fun set-diff@@LOC ((set LOC) (set LOC)) (set LOC))
(declare-fun set-diff@@TRAIN ((set TRAIN) (set TRAIN)) (set TRAIN))
(declare-fun set-diff@Open@@pfun@@TRAIN@@BLK@Close ((set (pfun TRAIN BLK)) (set (pfun TRAIN BLK))) (set (pfun TRAIN BLK)))
(declare-fun tfun@@TRAIN@@BLK ((set TRAIN) (set BLK)) (set (pfun TRAIN BLK)))
(declare-fun bunion@@BLK ((set BLK) (set BLK)) (set BLK))
(declare-fun bunion@@LOC ((set LOC) (set LOC)) (set LOC))
(declare-fun bunion@@TRAIN ((set TRAIN) (set TRAIN)) (set TRAIN))
(declare-fun bunion@Open@@pfun@@TRAIN@@BLK@Close ((set (pfun TRAIN BLK)) (set (pfun TRAIN BLK))) (set (pfun TRAIN BLK)))
(assert (= in@prime
           (bunion@@TRAIN in
                          (mk-set@@TRAIN t))))

(assert (forall ( (x BLK)
                  (y BLK) )
                (= (elem@@BLK x
                              (mk-set@@BLK y))
                   (= x
                      y))))

(assert (forall ( (x BLK)
                  (s1 (set BLK))
                  (s2 (set BLK)) )
                (= (elem@@BLK x
                              (set-diff@@BLK s1
                                             s2))
                   (and (elem@@BLK x
                                   s1)
                        (not (elem@@BLK x
                                        s2))))))

(assert (forall ( (x BLK)
                  (s1 (set BLK))
                  (s2 (set BLK)) )
                (= (elem@@BLK x
                              (intersect@@BLK s1
                                              s2))
                   (and (elem@@BLK x
                                   s1)
                        (elem@@BLK x
                                   s2)))))

(assert (forall ( (x BLK)
                  (s1 (set BLK))
                  (s2 (set BLK)) )
                (= (elem@@BLK x
                              (bunion@@BLK s1
                                           s2))
                   (or (elem@@BLK x
                                  s1)
                       (elem@@BLK x
                                  s2)))))

(assert (forall ( (x BLK)
                  (s1 (set BLK))
                  (s2 (set BLK)) )
                (not (elem@@BLK x
                                empty-set@@BLK))))

(assert (forall ( (x LOC)
                  (y LOC) )
                (= (elem@@LOC x
                              (mk-set@@LOC y))
                   (= x
                      y))))

(assert (forall ( (x LOC)
                  (s1 (set LOC))
                  (s2 (set LOC)) )
                (= (elem@@LOC x
                              (set-diff@@LOC s1
                                             s2))
                   (and (elem@@LOC x
                                   s1)
                        (not (elem@@LOC x
                                        s2))))))

(assert (forall ( (x LOC)
                  (s1 (set LOC))
                  (s2 (set LOC)) )
                (= (elem@@LOC x
                              (intersect@@LOC s1
                                              s2))
                   (and (elem@@LOC x
                                   s1)
                        (elem@@LOC x
                                   s2)))))

(assert (forall ( (x LOC)
                  (s1 (set LOC))
                  (s2 (set LOC)) )
                (= (elem@@LOC x
                              (bunion@@LOC s1
                                           s2))
                   (or (elem@@LOC x
                                  s1)
                       (elem@@LOC x
                                  s2)))))

(assert (forall ( (x LOC)
                  (s1 (set LOC))
                  (s2 (set LOC)) )
                (not (elem@@LOC x
                                empty-set@@LOC))))

(assert (forall ( (x TRAIN)
                  (y TRAIN) )
                (= (elem@@TRAIN x
                                (mk-set@@TRAIN y))
                   (= x
                      y))))

(assert (forall ( (x TRAIN)
                  (s1 (set TRAIN))
                  (s2 (set TRAIN)) )
                (= (elem@@TRAIN x
                                (set-diff@@TRAIN s1
                                                 s2))
                   (and (elem@@TRAIN x
                                     s1)
                        (not (elem@@TRAIN x
                                          s2))))))

(assert (forall ( (x TRAIN)
                  (s1 (set TRAIN))
                  (s2 (set TRAIN)) )
                (= (elem@@TRAIN x
                                (intersect@@TRAIN s1
                                                  s2))
                   (and (elem@@TRAIN x
                                     s1)
                        (elem@@TRAIN x
                                     s2)))))

(assert (forall ( (x TRAIN)
                  (s1 (set TRAIN))
                  (s2 (set TRAIN)) )
                (= (elem@@TRAIN x
                                (bunion@@TRAIN s1
                                               s2))
                   (or (elem@@TRAIN x
                                    s1)
                       (elem@@TRAIN x
                                    s2)))))

(assert (forall ( (x TRAIN)
                  (s1 (set TRAIN))
                  (s2 (set TRAIN)) )
                (not (elem@@TRAIN x
                                  empty-set@@TRAIN))))

(assert (forall ( (f1 (pfun TRAIN
                            BLK))
                  (f2 (pfun TRAIN
                            BLK)) )
                (= (bunion@@TRAIN (dom@@TRAIN@@BLK f1)
                                  (dom@@TRAIN@@BLK f2))
                   (dom@@TRAIN@@BLK (ovl@@TRAIN@@BLK f1
                                                     f2)))))

(assert (= (dom@@TRAIN@@BLK empty-fun@@TRAIN@@BLK)
           empty-set@@TRAIN))

(assert (forall ( (x TRAIN)
                  (y BLK) )
                (= (dom@@TRAIN@@BLK (mk-fun@@TRAIN@@BLK x
                                                        y))
                   (mk-set@@TRAIN x))))

(assert (forall ( (f1 (pfun TRAIN
                            BLK))
                  (f2 (pfun TRAIN
                            BLK))
                  (x TRAIN) )
                (=> (elem@@TRAIN x
                                 (dom@@TRAIN@@BLK f2))
                    (= (select (ovl@@TRAIN@@BLK f1
                                                f2)
                               x)
                       (select f2
                               x)))))

(assert (forall ( (f1 (pfun TRAIN
                            BLK))
                  (f2 (pfun TRAIN
                            BLK))
                  (x TRAIN) )
                (=> (elem@@TRAIN x
                                 (set-diff@@TRAIN (dom@@TRAIN@@BLK f1)
                                                  (dom@@TRAIN@@BLK f2)))
                    (= (select (ovl@@TRAIN@@BLK f1
                                                f2)
                               x)
                       (select f1
                               x)))))

(assert (forall ( (f1 (pfun TRAIN
                            BLK))
                  (s1 (set TRAIN)) )
                (= (dom@@TRAIN@@BLK (dom-subt@@TRAIN@@BLK s1
                                                          f1))
                   (set-diff@@TRAIN (dom@@TRAIN@@BLK f1)
                                    s1))))

(assert (forall ( (x TRAIN)
                  (y BLK) )
                (= (select (mk-fun@@TRAIN@@BLK x
                                               y)
                           x)
                   y)))

(assert (forall ( (f1 (pfun TRAIN
                            BLK))
                  (s1 (set TRAIN))
                  (x TRAIN) )
                (=> (elem@@TRAIN x
                                 (intersect@@TRAIN s1
                                                   (dom@@TRAIN@@BLK f1)))
                    (= (select (dom-rest@@TRAIN@@BLK s1
                                                     f1)
                               x)
                       (select f1
                               x)))))

(assert (forall ( (f1 (pfun TRAIN
                            BLK))
                  (s1 (set TRAIN))
                  (x TRAIN) )
                (=> (elem@@TRAIN x
                                 (set-diff@@TRAIN (dom@@TRAIN@@BLK f1)
                                                  s1))
                    (= (select (dom-subt@@TRAIN@@BLK s1
                                                     f1)
                               x)
                       (select f1
                               x)))))

(assert (forall ( (x (pfun TRAIN
                           BLK))
                  (y (pfun TRAIN
                           BLK)) )
                (= (elem@Open@@pfun@@TRAIN@@BLK@Close x
                                                      (mk-set@Open@@pfun@@TRAIN@@BLK@Close y))
                   (= x
                      y))))

(assert (forall ( (x (pfun TRAIN
                           BLK))
                  (s1 (set (pfun TRAIN
                                 BLK)))
                  (s2 (set (pfun TRAIN
                                 BLK))) )
                (= (elem@Open@@pfun@@TRAIN@@BLK@Close x
                                                      (set-diff@Open@@pfun@@TRAIN@@BLK@Close s1
                                                                                             s2))
                   (and (elem@Open@@pfun@@TRAIN@@BLK@Close x
                                                           s1)
                        (not (elem@Open@@pfun@@TRAIN@@BLK@Close x
                                                                s2))))))

(assert (forall ( (x (pfun TRAIN
                           BLK))
                  (s1 (set (pfun TRAIN
                                 BLK)))
                  (s2 (set (pfun TRAIN
                                 BLK))) )
                (= (elem@Open@@pfun@@TRAIN@@BLK@Close x
                                                      (intersect@Open@@pfun@@TRAIN@@BLK@Close s1
                                                                                              s2))
                   (and (elem@Open@@pfun@@TRAIN@@BLK@Close x
                                                           s1)
                        (elem@Open@@pfun@@TRAIN@@BLK@Close x
                                                           s2)))))

(assert (forall ( (x (pfun TRAIN
                           BLK))
                  (s1 (set (pfun TRAIN
                                 BLK)))
                  (s2 (set (pfun TRAIN
                                 BLK))) )
                (= (elem@Open@@pfun@@TRAIN@@BLK@Close x
                                                      (bunion@Open@@pfun@@TRAIN@@BLK@Close s1
                                                                                           s2))
                   (or (elem@Open@@pfun@@TRAIN@@BLK@Close x
                                                          s1)
                       (elem@Open@@pfun@@TRAIN@@BLK@Close x
                                                          s2)))))

(assert (forall ( (x (pfun TRAIN
                           BLK))
                  (s1 (set (pfun TRAIN
                                 BLK)))
                  (s2 (set (pfun TRAIN
                                 BLK))) )
                (not (elem@Open@@pfun@@TRAIN@@BLK@Close x
                                                        empty-set@Open@@pfun@@TRAIN@@BLK@Close))))

(assert (and (not (= ent
                     ext))
             (not (elem@@BLK ent
                             PLF))
             (not (elem@@BLK ext
                             PLF))))

(assert (forall ( (p BLK) )
                (=> true
                    (= (not (= p
                               ext))
                       (elem@@BLK p
                                  (bunion@@BLK (mk-set@@BLK ent)
                                               PLF))))))

(assert (forall ( (p BLK) )
                (=> true
                    (= (not (= p
                               ent))
                       (elem@@BLK p
                                  (bunion@@BLK (mk-set@@BLK ext)
                                               PLF))))))

(assert (forall ( (p BLK) )
                (=> true
                    (= (or (= p
                              ent)
                           (= p
                              ext))
                       (not (elem@@BLK p
                                       PLF))))))

(assert (= BLK
           (bunion@@BLK (bunion@@BLK (mk-set@@BLK ent)
                                     (mk-set@@BLK ext))
                        PLF)))

(assert (not (= (and (not (elem@@TRAIN t_0
                                       in))
                     (elem@@TRAIN t_0
                                  in@prime))
                (and (not (elem@@TRAIN t_0
                                       in))
                     (elem@@TRAIN t_0
                                  (bunion@@TRAIN in
                                                 (mk-set@@TRAIN t)))))))

(check-sat-using (or-else (then qe smt) (then skip smt) (then (using-params simplify :expand-power true) smt)))

(pop)
(echo "> train0/enter/CO/co0/case 2/step (308,1)")
(push)
(declare-sort BLK 0)
(declare-sort LOC 0)
(declare-sort TRAIN 0)
(define-sort pfun (a b) (Array a b))
(declare-sort set 1)
(declare-const PLF (set BLK))
(declare-const BLK (set BLK))
(declare-const LOC (set LOC))
(declare-const TRAIN (set TRAIN))
(declare-const ent BLK)
(declare-const ext BLK)
(declare-const in (set TRAIN))
(declare-const in@prime (set TRAIN))
(declare-const loc (pfun TRAIN BLK))
(declare-const loc@prime (pfun TRAIN BLK))
(declare-const p BLK)
(declare-const q BLK)
(declare-const t TRAIN)
(declare-const t_0 TRAIN)
(declare-const t_1 TRAIN)
(declare-const t_2 TRAIN)
(declare-const t_3 TRAIN)
(declare-fun apply@@TRAIN@@BLK ((pfun TRAIN BLK) TRAIN) BLK)
(declare-fun dom-rest@@TRAIN@@BLK ((set TRAIN) (pfun TRAIN BLK)) (pfun TRAIN BLK))
(declare-fun dom-subt@@TRAIN@@BLK ((set TRAIN) (pfun TRAIN BLK)) (pfun TRAIN BLK))
(declare-fun dom@@TRAIN@@BLK ((pfun TRAIN BLK)) (set TRAIN))
(declare-fun elem@@BLK (BLK (set BLK)) Bool)
(declare-fun elem@@LOC (LOC (set LOC)) Bool)
(declare-fun elem@@TRAIN (TRAIN (set TRAIN)) Bool)
(declare-fun elem@Open@@pfun@@TRAIN@@BLK@Close ((pfun TRAIN BLK) (set (pfun TRAIN BLK))) Bool)
(declare-fun empty-fun@@TRAIN@@BLK () (pfun TRAIN BLK))
(declare-fun empty-set@@BLK () (set BLK))
(declare-fun empty-set@@LOC () (set LOC))
(declare-fun empty-set@@TRAIN () (set TRAIN))
(declare-fun empty-set@Open@@pfun@@TRAIN@@BLK@Close () (set (pfun TRAIN BLK)))
(declare-fun intersect@@BLK ((set BLK) (set BLK)) (set BLK))
(declare-fun intersect@@LOC ((set LOC) (set LOC)) (set LOC))
(declare-fun intersect@@TRAIN ((set TRAIN) (set TRAIN)) (set TRAIN))
(declare-fun intersect@Open@@pfun@@TRAIN@@BLK@Close ((set (pfun TRAIN BLK)) (set (pfun TRAIN BLK))) (set (pfun TRAIN BLK)))
(declare-fun mk-fun@@TRAIN@@BLK (TRAIN BLK) (pfun TRAIN BLK))
(declare-fun mk-set@@BLK (BLK) (set BLK))
(declare-fun mk-set@@LOC (LOC) (set LOC))
(declare-fun mk-set@@TRAIN (TRAIN) (set TRAIN))
(declare-fun mk-set@Open@@pfun@@TRAIN@@BLK@Close ((pfun TRAIN BLK)) (set (pfun TRAIN BLK)))
(declare-fun ovl@@TRAIN@@BLK ((pfun TRAIN BLK) (pfun TRAIN BLK)) (pfun TRAIN BLK))
(declare-fun set-diff@@BLK ((set BLK) (set BLK)) (set BLK))
(declare-fun set-diff@@LOC ((set LOC) (set LOC)) (set LOC))
(declare-fun set-diff@@TRAIN ((set TRAIN) (set TRAIN)) (set TRAIN))
(declare-fun set-diff@Open@@pfun@@TRAIN@@BLK@Close ((set (pfun TRAIN BLK)) (set (pfun TRAIN BLK))) (set (pfun TRAIN BLK)))
(declare-fun tfun@@TRAIN@@BLK ((set TRAIN) (set BLK)) (set (pfun TRAIN BLK)))
(declare-fun bunion@@BLK ((set BLK) (set BLK)) (set BLK))
(declare-fun bunion@@LOC ((set LOC) (set LOC)) (set LOC))
(declare-fun bunion@@TRAIN ((set TRAIN) (set TRAIN)) (set TRAIN))
(declare-fun bunion@Open@@pfun@@TRAIN@@BLK@Close ((set (pfun TRAIN BLK)) (set (pfun TRAIN BLK))) (set (pfun TRAIN BLK)))
(assert (not (= t_0
                t)))

(assert (forall ( (x BLK)
                  (y BLK) )
                (= (elem@@BLK x
                              (mk-set@@BLK y))
                   (= x
                      y))))

(assert (forall ( (x BLK)
                  (s1 (set BLK))
                  (s2 (set BLK)) )
                (= (elem@@BLK x
                              (set-diff@@BLK s1
                                             s2))
                   (and (elem@@BLK x
                                   s1)
                        (not (elem@@BLK x
                                        s2))))))

(assert (forall ( (x BLK)
                  (s1 (set BLK))
                  (s2 (set BLK)) )
                (= (elem@@BLK x
                              (intersect@@BLK s1
                                              s2))
                   (and (elem@@BLK x
                                   s1)
                        (elem@@BLK x
                                   s2)))))

(assert (forall ( (x BLK)
                  (s1 (set BLK))
                  (s2 (set BLK)) )
                (= (elem@@BLK x
                              (bunion@@BLK s1
                                           s2))
                   (or (elem@@BLK x
                                  s1)
                       (elem@@BLK x
                                  s2)))))

(assert (forall ( (x BLK)
                  (s1 (set BLK))
                  (s2 (set BLK)) )
                (not (elem@@BLK x
                                empty-set@@BLK))))

(assert (forall ( (x LOC)
                  (y LOC) )
                (= (elem@@LOC x
                              (mk-set@@LOC y))
                   (= x
                      y))))

(assert (forall ( (x LOC)
                  (s1 (set LOC))
                  (s2 (set LOC)) )
                (= (elem@@LOC x
                              (set-diff@@LOC s1
                                             s2))
                   (and (elem@@LOC x
                                   s1)
                        (not (elem@@LOC x
                                        s2))))))

(assert (forall ( (x LOC)
                  (s1 (set LOC))
                  (s2 (set LOC)) )
                (= (elem@@LOC x
                              (intersect@@LOC s1
                                              s2))
                   (and (elem@@LOC x
                                   s1)
                        (elem@@LOC x
                                   s2)))))

(assert (forall ( (x LOC)
                  (s1 (set LOC))
                  (s2 (set LOC)) )
                (= (elem@@LOC x
                              (bunion@@LOC s1
                                           s2))
                   (or (elem@@LOC x
                                  s1)
                       (elem@@LOC x
                                  s2)))))

(assert (forall ( (x LOC)
                  (s1 (set LOC))
                  (s2 (set LOC)) )
                (not (elem@@LOC x
                                empty-set@@LOC))))

(assert (forall ( (x TRAIN)
                  (y TRAIN) )
                (= (elem@@TRAIN x
                                (mk-set@@TRAIN y))
                   (= x
                      y))))

(assert (forall ( (x TRAIN)
                  (s1 (set TRAIN))
                  (s2 (set TRAIN)) )
                (= (elem@@TRAIN x
                                (set-diff@@TRAIN s1
                                                 s2))
                   (and (elem@@TRAIN x
                                     s1)
                        (not (elem@@TRAIN x
                                          s2))))))

(assert (forall ( (x TRAIN)
                  (s1 (set TRAIN))
                  (s2 (set TRAIN)) )
                (= (elem@@TRAIN x
                                (intersect@@TRAIN s1
                                                  s2))
                   (and (elem@@TRAIN x
                                     s1)
                        (elem@@TRAIN x
                                     s2)))))

(assert (forall ( (x TRAIN)
                  (s1 (set TRAIN))
                  (s2 (set TRAIN)) )
                (= (elem@@TRAIN x
                                (bunion@@TRAIN s1
                                               s2))
                   (or (elem@@TRAIN x
                                    s1)
                       (elem@@TRAIN x
                                    s2)))))

(assert (forall ( (x TRAIN)
                  (s1 (set TRAIN))
                  (s2 (set TRAIN)) )
                (not (elem@@TRAIN x
                                  empty-set@@TRAIN))))

(assert (forall ( (f1 (pfun TRAIN
                            BLK))
                  (f2 (pfun TRAIN
                            BLK)) )
                (= (bunion@@TRAIN (dom@@TRAIN@@BLK f1)
                                  (dom@@TRAIN@@BLK f2))
                   (dom@@TRAIN@@BLK (ovl@@TRAIN@@BLK f1
                                                     f2)))))

(assert (= (dom@@TRAIN@@BLK empty-fun@@TRAIN@@BLK)
           empty-set@@TRAIN))

(assert (forall ( (x TRAIN)
                  (y BLK) )
                (= (dom@@TRAIN@@BLK (mk-fun@@TRAIN@@BLK x
                                                        y))
                   (mk-set@@TRAIN x))))

(assert (forall ( (f1 (pfun TRAIN
                            BLK))
                  (f2 (pfun TRAIN
                            BLK))
                  (x TRAIN) )
                (=> (elem@@TRAIN x
                                 (dom@@TRAIN@@BLK f2))
                    (= (select (ovl@@TRAIN@@BLK f1
                                                f2)
                               x)
                       (select f2
                               x)))))

(assert (forall ( (f1 (pfun TRAIN
                            BLK))
                  (f2 (pfun TRAIN
                            BLK))
                  (x TRAIN) )
                (=> (elem@@TRAIN x
                                 (set-diff@@TRAIN (dom@@TRAIN@@BLK f1)
                                                  (dom@@TRAIN@@BLK f2)))
                    (= (select (ovl@@TRAIN@@BLK f1
                                                f2)
                               x)
                       (select f1
                               x)))))

(assert (forall ( (f1 (pfun TRAIN
                            BLK))
                  (s1 (set TRAIN)) )
                (= (dom@@TRAIN@@BLK (dom-subt@@TRAIN@@BLK s1
                                                          f1))
                   (set-diff@@TRAIN (dom@@TRAIN@@BLK f1)
                                    s1))))

(assert (forall ( (x TRAIN)
                  (y BLK) )
                (= (select (mk-fun@@TRAIN@@BLK x
                                               y)
                           x)
                   y)))

(assert (forall ( (f1 (pfun TRAIN
                            BLK))
                  (s1 (set TRAIN))
                  (x TRAIN) )
                (=> (elem@@TRAIN x
                                 (intersect@@TRAIN s1
                                                   (dom@@TRAIN@@BLK f1)))
                    (= (select (dom-rest@@TRAIN@@BLK s1
                                                     f1)
                               x)
                       (select f1
                               x)))))

(assert (forall ( (f1 (pfun TRAIN
                            BLK))
                  (s1 (set TRAIN))
                  (x TRAIN) )
                (=> (elem@@TRAIN x
                                 (set-diff@@TRAIN (dom@@TRAIN@@BLK f1)
                                                  s1))
                    (= (select (dom-subt@@TRAIN@@BLK s1
                                                     f1)
                               x)
                       (select f1
                               x)))))

(assert (forall ( (x (pfun TRAIN
                           BLK))
                  (y (pfun TRAIN
                           BLK)) )
                (= (elem@Open@@pfun@@TRAIN@@BLK@Close x
                                                      (mk-set@Open@@pfun@@TRAIN@@BLK@Close y))
                   (= x
                      y))))

(assert (forall ( (x (pfun TRAIN
                           BLK))
                  (s1 (set (pfun TRAIN
                                 BLK)))
                  (s2 (set (pfun TRAIN
                                 BLK))) )
                (= (elem@Open@@pfun@@TRAIN@@BLK@Close x
                                                      (set-diff@Open@@pfun@@TRAIN@@BLK@Close s1
                                                                                             s2))
                   (and (elem@Open@@pfun@@TRAIN@@BLK@Close x
                                                           s1)
                        (not (elem@Open@@pfun@@TRAIN@@BLK@Close x
                                                                s2))))))

(assert (forall ( (x (pfun TRAIN
                           BLK))
                  (s1 (set (pfun TRAIN
                                 BLK)))
                  (s2 (set (pfun TRAIN
                                 BLK))) )
                (= (elem@Open@@pfun@@TRAIN@@BLK@Close x
                                                      (intersect@Open@@pfun@@TRAIN@@BLK@Close s1
                                                                                              s2))
                   (and (elem@Open@@pfun@@TRAIN@@BLK@Close x
                                                           s1)
                        (elem@Open@@pfun@@TRAIN@@BLK@Close x
                                                           s2)))))

(assert (forall ( (x (pfun TRAIN
                           BLK))
                  (s1 (set (pfun TRAIN
                                 BLK)))
                  (s2 (set (pfun TRAIN
                                 BLK))) )
                (= (elem@Open@@pfun@@TRAIN@@BLK@Close x
                                                      (bunion@Open@@pfun@@TRAIN@@BLK@Close s1
                                                                                           s2))
                   (or (elem@Open@@pfun@@TRAIN@@BLK@Close x
                                                          s1)
                       (elem@Open@@pfun@@TRAIN@@BLK@Close x
                                                          s2)))))

(assert (forall ( (x (pfun TRAIN
                           BLK))
                  (s1 (set (pfun TRAIN
                                 BLK)))
                  (s2 (set (pfun TRAIN
                                 BLK))) )
                (not (elem@Open@@pfun@@TRAIN@@BLK@Close x
                                                        empty-set@Open@@pfun@@TRAIN@@BLK@Close))))

(assert (and (not (= ent
                     ext))
             (not (elem@@BLK ent
                             PLF))
             (not (elem@@BLK ext
                             PLF))))

(assert (forall ( (p BLK) )
                (=> true
                    (= (not (= p
                               ext))
                       (elem@@BLK p
                                  (bunion@@BLK (mk-set@@BLK ent)
                                               PLF))))))

(assert (forall ( (p BLK) )
                (=> true
                    (= (not (= p
                               ent))
                       (elem@@BLK p
                                  (bunion@@BLK (mk-set@@BLK ext)
                                               PLF))))))

(assert (forall ( (p BLK) )
                (=> true
                    (= (or (= p
                              ent)
                           (= p
                              ext))
                       (not (elem@@BLK p
                                       PLF))))))

(assert (= BLK
           (bunion@@BLK (bunion@@BLK (mk-set@@BLK ent)
                                     (mk-set@@BLK ext))
                        PLF)))

(assert (not (= (and (not (elem@@TRAIN t_0
                                       in))
                     (elem@@TRAIN t_0
                                  (bunion@@TRAIN in
                                                 (mk-set@@TRAIN t))))
                (and (not (elem@@TRAIN t_0
                                       in))
                     (elem@@TRAIN t_0
                                  in)))))

(check-sat-using (or-else (then qe smt) (then skip smt) (then (using-params simplify :expand-power true) smt)))

(pop)
(echo "> train0/enter/CO/co0/case 2/step (310,1)")
(push)
(declare-sort BLK 0)
(declare-sort LOC 0)
(declare-sort TRAIN 0)
(define-sort pfun (a b) (Array a b))
(declare-sort set 1)
(declare-const PLF (set BLK))
(declare-const BLK (set BLK))
(declare-const LOC (set LOC))
(declare-const TRAIN (set TRAIN))
(declare-const ent BLK)
(declare-const ext BLK)
(declare-const in (set TRAIN))
(declare-const in@prime (set TRAIN))
(declare-const loc (pfun TRAIN BLK))
(declare-const loc@prime (pfun TRAIN BLK))
(declare-const p BLK)
(declare-const q BLK)
(declare-const t TRAIN)
(declare-const t_0 TRAIN)
(declare-const t_1 TRAIN)
(declare-const t_2 TRAIN)
(declare-const t_3 TRAIN)
(declare-fun apply@@TRAIN@@BLK ((pfun TRAIN BLK) TRAIN) BLK)
(declare-fun dom-rest@@TRAIN@@BLK ((set TRAIN) (pfun TRAIN BLK)) (pfun TRAIN BLK))
(declare-fun dom-subt@@TRAIN@@BLK ((set TRAIN) (pfun TRAIN BLK)) (pfun TRAIN BLK))
(declare-fun dom@@TRAIN@@BLK ((pfun TRAIN BLK)) (set TRAIN))
(declare-fun elem@@BLK (BLK (set BLK)) Bool)
(declare-fun elem@@LOC (LOC (set LOC)) Bool)
(declare-fun elem@@TRAIN (TRAIN (set TRAIN)) Bool)
(declare-fun elem@Open@@pfun@@TRAIN@@BLK@Close ((pfun TRAIN BLK) (set (pfun TRAIN BLK))) Bool)
(declare-fun empty-fun@@TRAIN@@BLK () (pfun TRAIN BLK))
(declare-fun empty-set@@BLK () (set BLK))
(declare-fun empty-set@@LOC () (set LOC))
(declare-fun empty-set@@TRAIN () (set TRAIN))
(declare-fun empty-set@Open@@pfun@@TRAIN@@BLK@Close () (set (pfun TRAIN BLK)))
(declare-fun intersect@@BLK ((set BLK) (set BLK)) (set BLK))
(declare-fun intersect@@LOC ((set LOC) (set LOC)) (set LOC))
(declare-fun intersect@@TRAIN ((set TRAIN) (set TRAIN)) (set TRAIN))
(declare-fun intersect@Open@@pfun@@TRAIN@@BLK@Close ((set (pfun TRAIN BLK)) (set (pfun TRAIN BLK))) (set (pfun TRAIN BLK)))
(declare-fun mk-fun@@TRAIN@@BLK (TRAIN BLK) (pfun TRAIN BLK))
(declare-fun mk-set@@BLK (BLK) (set BLK))
(declare-fun mk-set@@LOC (LOC) (set LOC))
(declare-fun mk-set@@TRAIN (TRAIN) (set TRAIN))
(declare-fun mk-set@Open@@pfun@@TRAIN@@BLK@Close ((pfun TRAIN BLK)) (set (pfun TRAIN BLK)))
(declare-fun ovl@@TRAIN@@BLK ((pfun TRAIN BLK) (pfun TRAIN BLK)) (pfun TRAIN BLK))
(declare-fun set-diff@@BLK ((set BLK) (set BLK)) (set BLK))
(declare-fun set-diff@@LOC ((set LOC) (set LOC)) (set LOC))
(declare-fun set-diff@@TRAIN ((set TRAIN) (set TRAIN)) (set TRAIN))
(declare-fun set-diff@Open@@pfun@@TRAIN@@BLK@Close ((set (pfun TRAIN BLK)) (set (pfun TRAIN BLK))) (set (pfun TRAIN BLK)))
(declare-fun tfun@@TRAIN@@BLK ((set TRAIN) (set BLK)) (set (pfun TRAIN BLK)))
(declare-fun bunion@@BLK ((set BLK) (set BLK)) (set BLK))
(declare-fun bunion@@LOC ((set LOC) (set LOC)) (set LOC))
(declare-fun bunion@@TRAIN ((set TRAIN) (set TRAIN)) (set TRAIN))
(declare-fun bunion@Open@@pfun@@TRAIN@@BLK@Close ((set (pfun TRAIN BLK)) (set (pfun TRAIN BLK))) (set (pfun TRAIN BLK)))
(assert (forall ( (x BLK)
                  (y BLK) )
                (= (elem@@BLK x
                              (mk-set@@BLK y))
                   (= x
                      y))))

(assert (forall ( (x BLK)
                  (s1 (set BLK))
                  (s2 (set BLK)) )
                (= (elem@@BLK x
                              (set-diff@@BLK s1
                                             s2))
                   (and (elem@@BLK x
                                   s1)
                        (not (elem@@BLK x
                                        s2))))))

(assert (forall ( (x BLK)
                  (s1 (set BLK))
                  (s2 (set BLK)) )
                (= (elem@@BLK x
                              (intersect@@BLK s1
                                              s2))
                   (and (elem@@BLK x
                                   s1)
                        (elem@@BLK x
                                   s2)))))

(assert (forall ( (x BLK)
                  (s1 (set BLK))
                  (s2 (set BLK)) )
                (= (elem@@BLK x
                              (bunion@@BLK s1
                                           s2))
                   (or (elem@@BLK x
                                  s1)
                       (elem@@BLK x
                                  s2)))))

(assert (forall ( (x BLK)
                  (s1 (set BLK))
                  (s2 (set BLK)) )
                (not (elem@@BLK x
                                empty-set@@BLK))))

(assert (forall ( (x LOC)
                  (y LOC) )
                (= (elem@@LOC x
                              (mk-set@@LOC y))
                   (= x
                      y))))

(assert (forall ( (x LOC)
                  (s1 (set LOC))
                  (s2 (set LOC)) )
                (= (elem@@LOC x
                              (set-diff@@LOC s1
                                             s2))
                   (and (elem@@LOC x
                                   s1)
                        (not (elem@@LOC x
                                        s2))))))

(assert (forall ( (x LOC)
                  (s1 (set LOC))
                  (s2 (set LOC)) )
                (= (elem@@LOC x
                              (intersect@@LOC s1
                                              s2))
                   (and (elem@@LOC x
                                   s1)
                        (elem@@LOC x
                                   s2)))))

(assert (forall ( (x LOC)
                  (s1 (set LOC))
                  (s2 (set LOC)) )
                (= (elem@@LOC x
                              (bunion@@LOC s1
                                           s2))
                   (or (elem@@LOC x
                                  s1)
                       (elem@@LOC x
                                  s2)))))

(assert (forall ( (x LOC)
                  (s1 (set LOC))
                  (s2 (set LOC)) )
                (not (elem@@LOC x
                                empty-set@@LOC))))

(assert (forall ( (x TRAIN)
                  (y TRAIN) )
                (= (elem@@TRAIN x
                                (mk-set@@TRAIN y))
                   (= x
                      y))))

(assert (forall ( (x TRAIN)
                  (s1 (set TRAIN))
                  (s2 (set TRAIN)) )
                (= (elem@@TRAIN x
                                (set-diff@@TRAIN s1
                                                 s2))
                   (and (elem@@TRAIN x
                                     s1)
                        (not (elem@@TRAIN x
                                          s2))))))

(assert (forall ( (x TRAIN)
                  (s1 (set TRAIN))
                  (s2 (set TRAIN)) )
                (= (elem@@TRAIN x
                                (intersect@@TRAIN s1
                                                  s2))
                   (and (elem@@TRAIN x
                                     s1)
                        (elem@@TRAIN x
                                     s2)))))

(assert (forall ( (x TRAIN)
                  (s1 (set TRAIN))
                  (s2 (set TRAIN)) )
                (= (elem@@TRAIN x
                                (bunion@@TRAIN s1
                                               s2))
                   (or (elem@@TRAIN x
                                    s1)
                       (elem@@TRAIN x
                                    s2)))))

(assert (forall ( (x TRAIN)
                  (s1 (set TRAIN))
                  (s2 (set TRAIN)) )
                (not (elem@@TRAIN x
                                  empty-set@@TRAIN))))

(assert (forall ( (f1 (pfun TRAIN
                            BLK))
                  (f2 (pfun TRAIN
                            BLK)) )
                (= (bunion@@TRAIN (dom@@TRAIN@@BLK f1)
                                  (dom@@TRAIN@@BLK f2))
                   (dom@@TRAIN@@BLK (ovl@@TRAIN@@BLK f1
                                                     f2)))))

(assert (= (dom@@TRAIN@@BLK empty-fun@@TRAIN@@BLK)
           empty-set@@TRAIN))

(assert (forall ( (x TRAIN)
                  (y BLK) )
                (= (dom@@TRAIN@@BLK (mk-fun@@TRAIN@@BLK x
                                                        y))
                   (mk-set@@TRAIN x))))

(assert (forall ( (f1 (pfun TRAIN
                            BLK))
                  (f2 (pfun TRAIN
                            BLK))
                  (x TRAIN) )
                (=> (elem@@TRAIN x
                                 (dom@@TRAIN@@BLK f2))
                    (= (select (ovl@@TRAIN@@BLK f1
                                                f2)
                               x)
                       (select f2
                               x)))))

(assert (forall ( (f1 (pfun TRAIN
                            BLK))
                  (f2 (pfun TRAIN
                            BLK))
                  (x TRAIN) )
                (=> (elem@@TRAIN x
                                 (set-diff@@TRAIN (dom@@TRAIN@@BLK f1)
                                                  (dom@@TRAIN@@BLK f2)))
                    (= (select (ovl@@TRAIN@@BLK f1
                                                f2)
                               x)
                       (select f1
                               x)))))

(assert (forall ( (f1 (pfun TRAIN
                            BLK))
                  (s1 (set TRAIN)) )
                (= (dom@@TRAIN@@BLK (dom-subt@@TRAIN@@BLK s1
                                                          f1))
                   (set-diff@@TRAIN (dom@@TRAIN@@BLK f1)
                                    s1))))

(assert (forall ( (x TRAIN)
                  (y BLK) )
                (= (select (mk-fun@@TRAIN@@BLK x
                                               y)
                           x)
                   y)))

(assert (forall ( (f1 (pfun TRAIN
                            BLK))
                  (s1 (set TRAIN))
                  (x TRAIN) )
                (=> (elem@@TRAIN x
                                 (intersect@@TRAIN s1
                                                   (dom@@TRAIN@@BLK f1)))
                    (= (select (dom-rest@@TRAIN@@BLK s1
                                                     f1)
                               x)
                       (select f1
                               x)))))

(assert (forall ( (f1 (pfun TRAIN
                            BLK))
                  (s1 (set TRAIN))
                  (x TRAIN) )
                (=> (elem@@TRAIN x
                                 (set-diff@@TRAIN (dom@@TRAIN@@BLK f1)
                                                  s1))
                    (= (select (dom-subt@@TRAIN@@BLK s1
                                                     f1)
                               x)
                       (select f1
                               x)))))

(assert (forall ( (x (pfun TRAIN
                           BLK))
                  (y (pfun TRAIN
                           BLK)) )
                (= (elem@Open@@pfun@@TRAIN@@BLK@Close x
                                                      (mk-set@Open@@pfun@@TRAIN@@BLK@Close y))
                   (= x
                      y))))

(assert (forall ( (x (pfun TRAIN
                           BLK))
                  (s1 (set (pfun TRAIN
                                 BLK)))
                  (s2 (set (pfun TRAIN
                                 BLK))) )
                (= (elem@Open@@pfun@@TRAIN@@BLK@Close x
                                                      (set-diff@Open@@pfun@@TRAIN@@BLK@Close s1
                                                                                             s2))
                   (and (elem@Open@@pfun@@TRAIN@@BLK@Close x
                                                           s1)
                        (not (elem@Open@@pfun@@TRAIN@@BLK@Close x
                                                                s2))))))

(assert (forall ( (x (pfun TRAIN
                           BLK))
                  (s1 (set (pfun TRAIN
                                 BLK)))
                  (s2 (set (pfun TRAIN
                                 BLK))) )
                (= (elem@Open@@pfun@@TRAIN@@BLK@Close x
                                                      (intersect@Open@@pfun@@TRAIN@@BLK@Close s1
                                                                                              s2))
                   (and (elem@Open@@pfun@@TRAIN@@BLK@Close x
                                                           s1)
                        (elem@Open@@pfun@@TRAIN@@BLK@Close x
                                                           s2)))))

(assert (forall ( (x (pfun TRAIN
                           BLK))
                  (s1 (set (pfun TRAIN
                                 BLK)))
                  (s2 (set (pfun TRAIN
                                 BLK))) )
                (= (elem@Open@@pfun@@TRAIN@@BLK@Close x
                                                      (bunion@Open@@pfun@@TRAIN@@BLK@Close s1
                                                                                           s2))
                   (or (elem@Open@@pfun@@TRAIN@@BLK@Close x
                                                          s1)
                       (elem@Open@@pfun@@TRAIN@@BLK@Close x
                                                          s2)))))

(assert (forall ( (x (pfun TRAIN
                           BLK))
                  (s1 (set (pfun TRAIN
                                 BLK)))
                  (s2 (set (pfun TRAIN
                                 BLK))) )
                (not (elem@Open@@pfun@@TRAIN@@BLK@Close x
                                                        empty-set@Open@@pfun@@TRAIN@@BLK@Close))))

(assert (and (not (= ent
                     ext))
             (not (elem@@BLK ent
                             PLF))
             (not (elem@@BLK ext
                             PLF))))

(assert (forall ( (p BLK) )
                (=> true
                    (= (not (= p
                               ext))
                       (elem@@BLK p
                                  (bunion@@BLK (mk-set@@BLK ent)
                                               PLF))))))

(assert (forall ( (p BLK) )
                (=> true
                    (= (not (= p
                               ent))
                       (elem@@BLK p
                                  (bunion@@BLK (mk-set@@BLK ext)
                                               PLF))))))

(assert (forall ( (p BLK) )
                (=> true
                    (= (or (= p
                              ent)
                           (= p
                              ext))
                       (not (elem@@BLK p
                                       PLF))))))

(assert (= BLK
           (bunion@@BLK (bunion@@BLK (mk-set@@BLK ent)
                                     (mk-set@@BLK ext))
                        PLF)))

(assert (not (= (and (not (elem@@TRAIN t_0
                                       in))
                     (elem@@TRAIN t_0
                                  in))
                false)))

(check-sat-using (or-else (then qe smt) (then skip smt) (then (using-params simplify :expand-power true) smt)))

(pop)
(echo "> train0/enter/CO/co0/case 2/step (312,1)")
(push)
(declare-sort BLK 0)
(declare-sort LOC 0)
(declare-sort TRAIN 0)
(define-sort pfun (a b) (Array a b))
(declare-sort set 1)
(declare-const PLF (set BLK))
(declare-const BLK (set BLK))
(declare-const LOC (set LOC))
(declare-const TRAIN (set TRAIN))
(declare-const ent BLK)
(declare-const ext BLK)
(declare-const in (set TRAIN))
(declare-const in@prime (set TRAIN))
(declare-const loc (pfun TRAIN BLK))
(declare-const loc@prime (pfun TRAIN BLK))
(declare-const p BLK)
(declare-const q BLK)
(declare-const t TRAIN)
(declare-const t_0 TRAIN)
(declare-const t_1 TRAIN)
(declare-const t_2 TRAIN)
(declare-const t_3 TRAIN)
(declare-fun apply@@TRAIN@@BLK ((pfun TRAIN BLK) TRAIN) BLK)
(declare-fun dom-rest@@TRAIN@@BLK ((set TRAIN) (pfun TRAIN BLK)) (pfun TRAIN BLK))
(declare-fun dom-subt@@TRAIN@@BLK ((set TRAIN) (pfun TRAIN BLK)) (pfun TRAIN BLK))
(declare-fun dom@@TRAIN@@BLK ((pfun TRAIN BLK)) (set TRAIN))
(declare-fun elem@@BLK (BLK (set BLK)) Bool)
(declare-fun elem@@LOC (LOC (set LOC)) Bool)
(declare-fun elem@@TRAIN (TRAIN (set TRAIN)) Bool)
(declare-fun elem@Open@@pfun@@TRAIN@@BLK@Close ((pfun TRAIN BLK) (set (pfun TRAIN BLK))) Bool)
(declare-fun empty-fun@@TRAIN@@BLK () (pfun TRAIN BLK))
(declare-fun empty-set@@BLK () (set BLK))
(declare-fun empty-set@@LOC () (set LOC))
(declare-fun empty-set@@TRAIN () (set TRAIN))
(declare-fun empty-set@Open@@pfun@@TRAIN@@BLK@Close () (set (pfun TRAIN BLK)))
(declare-fun intersect@@BLK ((set BLK) (set BLK)) (set BLK))
(declare-fun intersect@@LOC ((set LOC) (set LOC)) (set LOC))
(declare-fun intersect@@TRAIN ((set TRAIN) (set TRAIN)) (set TRAIN))
(declare-fun intersect@Open@@pfun@@TRAIN@@BLK@Close ((set (pfun TRAIN BLK)) (set (pfun TRAIN BLK))) (set (pfun TRAIN BLK)))
(declare-fun mk-fun@@TRAIN@@BLK (TRAIN BLK) (pfun TRAIN BLK))
(declare-fun mk-set@@BLK (BLK) (set BLK))
(declare-fun mk-set@@LOC (LOC) (set LOC))
(declare-fun mk-set@@TRAIN (TRAIN) (set TRAIN))
(declare-fun mk-set@Open@@pfun@@TRAIN@@BLK@Close ((pfun TRAIN BLK)) (set (pfun TRAIN BLK)))
(declare-fun ovl@@TRAIN@@BLK ((pfun TRAIN BLK) (pfun TRAIN BLK)) (pfun TRAIN BLK))
(declare-fun set-diff@@BLK ((set BLK) (set BLK)) (set BLK))
(declare-fun set-diff@@LOC ((set LOC) (set LOC)) (set LOC))
(declare-fun set-diff@@TRAIN ((set TRAIN) (set TRAIN)) (set TRAIN))
(declare-fun set-diff@Open@@pfun@@TRAIN@@BLK@Close ((set (pfun TRAIN BLK)) (set (pfun TRAIN BLK))) (set (pfun TRAIN BLK)))
(declare-fun tfun@@TRAIN@@BLK ((set TRAIN) (set BLK)) (set (pfun TRAIN BLK)))
(declare-fun bunion@@BLK ((set BLK) (set BLK)) (set BLK))
(declare-fun bunion@@LOC ((set LOC) (set LOC)) (set LOC))
(declare-fun bunion@@TRAIN ((set TRAIN) (set TRAIN)) (set TRAIN))
(declare-fun bunion@Open@@pfun@@TRAIN@@BLK@Close ((set (pfun TRAIN BLK)) (set (pfun TRAIN BLK))) (set (pfun TRAIN BLK)))
(assert (forall ( (x BLK)
                  (y BLK) )
                (= (elem@@BLK x
                              (mk-set@@BLK y))
                   (= x
                      y))))

(assert (forall ( (x BLK)
                  (s1 (set BLK))
                  (s2 (set BLK)) )
                (= (elem@@BLK x
                              (set-diff@@BLK s1
                                             s2))
                   (and (elem@@BLK x
                                   s1)
                        (not (elem@@BLK x
                                        s2))))))

(assert (forall ( (x BLK)
                  (s1 (set BLK))
                  (s2 (set BLK)) )
                (= (elem@@BLK x
                              (intersect@@BLK s1
                                              s2))
                   (and (elem@@BLK x
                                   s1)
                        (elem@@BLK x
                                   s2)))))

(assert (forall ( (x BLK)
                  (s1 (set BLK))
                  (s2 (set BLK)) )
                (= (elem@@BLK x
                              (bunion@@BLK s1
                                           s2))
                   (or (elem@@BLK x
                                  s1)
                       (elem@@BLK x
                                  s2)))))

(assert (forall ( (x BLK)
                  (s1 (set BLK))
                  (s2 (set BLK)) )
                (not (elem@@BLK x
                                empty-set@@BLK))))

(assert (forall ( (x LOC)
                  (y LOC) )
                (= (elem@@LOC x
                              (mk-set@@LOC y))
                   (= x
                      y))))

(assert (forall ( (x LOC)
                  (s1 (set LOC))
                  (s2 (set LOC)) )
                (= (elem@@LOC x
                              (set-diff@@LOC s1
                                             s2))
                   (and (elem@@LOC x
                                   s1)
                        (not (elem@@LOC x
                                        s2))))))

(assert (forall ( (x LOC)
                  (s1 (set LOC))
                  (s2 (set LOC)) )
                (= (elem@@LOC x
                              (intersect@@LOC s1
                                              s2))
                   (and (elem@@LOC x
                                   s1)
                        (elem@@LOC x
                                   s2)))))

(assert (forall ( (x LOC)
                  (s1 (set LOC))
                  (s2 (set LOC)) )
                (= (elem@@LOC x
                              (bunion@@LOC s1
                                           s2))
                   (or (elem@@LOC x
                                  s1)
                       (elem@@LOC x
                                  s2)))))

(assert (forall ( (x LOC)
                  (s1 (set LOC))
                  (s2 (set LOC)) )
                (not (elem@@LOC x
                                empty-set@@LOC))))

(assert (forall ( (x TRAIN)
                  (y TRAIN) )
                (= (elem@@TRAIN x
                                (mk-set@@TRAIN y))
                   (= x
                      y))))

(assert (forall ( (x TRAIN)
                  (s1 (set TRAIN))
                  (s2 (set TRAIN)) )
                (= (elem@@TRAIN x
                                (set-diff@@TRAIN s1
                                                 s2))
                   (and (elem@@TRAIN x
                                     s1)
                        (not (elem@@TRAIN x
                                          s2))))))

(assert (forall ( (x TRAIN)
                  (s1 (set TRAIN))
                  (s2 (set TRAIN)) )
                (= (elem@@TRAIN x
                                (intersect@@TRAIN s1
                                                  s2))
                   (and (elem@@TRAIN x
                                     s1)
                        (elem@@TRAIN x
                                     s2)))))

(assert (forall ( (x TRAIN)
                  (s1 (set TRAIN))
                  (s2 (set TRAIN)) )
                (= (elem@@TRAIN x
                                (bunion@@TRAIN s1
                                               s2))
                   (or (elem@@TRAIN x
                                    s1)
                       (elem@@TRAIN x
                                    s2)))))

(assert (forall ( (x TRAIN)
                  (s1 (set TRAIN))
                  (s2 (set TRAIN)) )
                (not (elem@@TRAIN x
                                  empty-set@@TRAIN))))

(assert (forall ( (f1 (pfun TRAIN
                            BLK))
                  (f2 (pfun TRAIN
                            BLK)) )
                (= (bunion@@TRAIN (dom@@TRAIN@@BLK f1)
                                  (dom@@TRAIN@@BLK f2))
                   (dom@@TRAIN@@BLK (ovl@@TRAIN@@BLK f1
                                                     f2)))))

(assert (= (dom@@TRAIN@@BLK empty-fun@@TRAIN@@BLK)
           empty-set@@TRAIN))

(assert (forall ( (x TRAIN)
                  (y BLK) )
                (= (dom@@TRAIN@@BLK (mk-fun@@TRAIN@@BLK x
                                                        y))
                   (mk-set@@TRAIN x))))

(assert (forall ( (f1 (pfun TRAIN
                            BLK))
                  (f2 (pfun TRAIN
                            BLK))
                  (x TRAIN) )
                (=> (elem@@TRAIN x
                                 (dom@@TRAIN@@BLK f2))
                    (= (select (ovl@@TRAIN@@BLK f1
                                                f2)
                               x)
                       (select f2
                               x)))))

(assert (forall ( (f1 (pfun TRAIN
                            BLK))
                  (f2 (pfun TRAIN
                            BLK))
                  (x TRAIN) )
                (=> (elem@@TRAIN x
                                 (set-diff@@TRAIN (dom@@TRAIN@@BLK f1)
                                                  (dom@@TRAIN@@BLK f2)))
                    (= (select (ovl@@TRAIN@@BLK f1
                                                f2)
                               x)
                       (select f1
                               x)))))

(assert (forall ( (f1 (pfun TRAIN
                            BLK))
                  (s1 (set TRAIN)) )
                (= (dom@@TRAIN@@BLK (dom-subt@@TRAIN@@BLK s1
                                                          f1))
                   (set-diff@@TRAIN (dom@@TRAIN@@BLK f1)
                                    s1))))

(assert (forall ( (x TRAIN)
                  (y BLK) )
                (= (select (mk-fun@@TRAIN@@BLK x
                                               y)
                           x)
                   y)))

(assert (forall ( (f1 (pfun TRAIN
                            BLK))
                  (s1 (set TRAIN))
                  (x TRAIN) )
                (=> (elem@@TRAIN x
                                 (intersect@@TRAIN s1
                                                   (dom@@TRAIN@@BLK f1)))
                    (= (select (dom-rest@@TRAIN@@BLK s1
                                                     f1)
                               x)
                       (select f1
                               x)))))

(assert (forall ( (f1 (pfun TRAIN
                            BLK))
                  (s1 (set TRAIN))
                  (x TRAIN) )
                (=> (elem@@TRAIN x
                                 (set-diff@@TRAIN (dom@@TRAIN@@BLK f1)
                                                  s1))
                    (= (select (dom-subt@@TRAIN@@BLK s1
                                                     f1)
                               x)
                       (select f1
                               x)))))

(assert (forall ( (x (pfun TRAIN
                           BLK))
                  (y (pfun TRAIN
                           BLK)) )
                (= (elem@Open@@pfun@@TRAIN@@BLK@Close x
                                                      (mk-set@Open@@pfun@@TRAIN@@BLK@Close y))
                   (= x
                      y))))

(assert (forall ( (x (pfun TRAIN
                           BLK))
                  (s1 (set (pfun TRAIN
                                 BLK)))
                  (s2 (set (pfun TRAIN
                                 BLK))) )
                (= (elem@Open@@pfun@@TRAIN@@BLK@Close x
                                                      (set-diff@Open@@pfun@@TRAIN@@BLK@Close s1
                                                                                             s2))
                   (and (elem@Open@@pfun@@TRAIN@@BLK@Close x
                                                           s1)
                        (not (elem@Open@@pfun@@TRAIN@@BLK@Close x
                                                                s2))))))

(assert (forall ( (x (pfun TRAIN
                           BLK))
                  (s1 (set (pfun TRAIN
                                 BLK)))
                  (s2 (set (pfun TRAIN
                                 BLK))) )
                (= (elem@Open@@pfun@@TRAIN@@BLK@Close x
                                                      (intersect@Open@@pfun@@TRAIN@@BLK@Close s1
                                                                                              s2))
                   (and (elem@Open@@pfun@@TRAIN@@BLK@Close x
                                                           s1)
                        (elem@Open@@pfun@@TRAIN@@BLK@Close x
                                                           s2)))))

(assert (forall ( (x (pfun TRAIN
                           BLK))
                  (s1 (set (pfun TRAIN
                                 BLK)))
                  (s2 (set (pfun TRAIN
                                 BLK))) )
                (= (elem@Open@@pfun@@TRAIN@@BLK@Close x
                                                      (bunion@Open@@pfun@@TRAIN@@BLK@Close s1
                                                                                           s2))
                   (or (elem@Open@@pfun@@TRAIN@@BLK@Close x
                                                          s1)
                       (elem@Open@@pfun@@TRAIN@@BLK@Close x
                                                          s2)))))

(assert (forall ( (x (pfun TRAIN
                           BLK))
                  (s1 (set (pfun TRAIN
                                 BLK)))
                  (s2 (set (pfun TRAIN
                                 BLK))) )
                (not (elem@Open@@pfun@@TRAIN@@BLK@Close x
                                                        empty-set@Open@@pfun@@TRAIN@@BLK@Close))))

(assert (and (not (= ent
                     ext))
             (not (elem@@BLK ent
                             PLF))
             (not (elem@@BLK ext
                             PLF))))

(assert (forall ( (p BLK) )
                (=> true
                    (= (not (= p
                               ext))
                       (elem@@BLK p
                                  (bunion@@BLK (mk-set@@BLK ent)
                                               PLF))))))

(assert (forall ( (p BLK) )
                (=> true
                    (= (not (= p
                               ent))
                       (elem@@BLK p
                                  (bunion@@BLK (mk-set@@BLK ext)
                                               PLF))))))

(assert (forall ( (p BLK) )
                (=> true
                    (= (or (= p
                              ent)
                           (= p
                              ext))
                       (not (elem@@BLK p
                                       PLF))))))

(assert (= BLK
           (bunion@@BLK (bunion@@BLK (mk-set@@BLK ent)
                                     (mk-set@@BLK ext))
                        PLF)))

(assert (not (=> false
                 (= (select loc@prime
                            t_0)
                    ent))))

(check-sat-using (or-else (then qe smt) (then skip smt) (then (using-params simplify :expand-power true) smt)))

(pop)
(echo "> train0/enter/CO/co0/completeness (289,1)")
(push)
(declare-sort BLK 0)
(declare-sort LOC 0)
(declare-sort TRAIN 0)
(define-sort pfun (a b) (Array a b))
(declare-sort set 1)
(declare-const PLF (set BLK))
(declare-const BLK (set BLK))
(declare-const LOC (set LOC))
(declare-const TRAIN (set TRAIN))
(declare-const ent BLK)
(declare-const ext BLK)
(declare-const in (set TRAIN))
(declare-const in@prime (set TRAIN))
(declare-const loc (pfun TRAIN BLK))
(declare-const loc@prime (pfun TRAIN BLK))
(declare-const p BLK)
(declare-const q BLK)
(declare-const t TRAIN)
(declare-const t_0 TRAIN)
(declare-const t_1 TRAIN)
(declare-const t_2 TRAIN)
(declare-const t_3 TRAIN)
(declare-fun apply@@TRAIN@@BLK ((pfun TRAIN BLK) TRAIN) BLK)
(declare-fun dom-rest@@TRAIN@@BLK ((set TRAIN) (pfun TRAIN BLK)) (pfun TRAIN BLK))
(declare-fun dom-subt@@TRAIN@@BLK ((set TRAIN) (pfun TRAIN BLK)) (pfun TRAIN BLK))
(declare-fun dom@@TRAIN@@BLK ((pfun TRAIN BLK)) (set TRAIN))
(declare-fun elem@@BLK (BLK (set BLK)) Bool)
(declare-fun elem@@LOC (LOC (set LOC)) Bool)
(declare-fun elem@@TRAIN (TRAIN (set TRAIN)) Bool)
(declare-fun elem@Open@@pfun@@TRAIN@@BLK@Close ((pfun TRAIN BLK) (set (pfun TRAIN BLK))) Bool)
(declare-fun empty-fun@@TRAIN@@BLK () (pfun TRAIN BLK))
(declare-fun empty-set@@BLK () (set BLK))
(declare-fun empty-set@@LOC () (set LOC))
(declare-fun empty-set@@TRAIN () (set TRAIN))
(declare-fun empty-set@Open@@pfun@@TRAIN@@BLK@Close () (set (pfun TRAIN BLK)))
(declare-fun intersect@@BLK ((set BLK) (set BLK)) (set BLK))
(declare-fun intersect@@LOC ((set LOC) (set LOC)) (set LOC))
(declare-fun intersect@@TRAIN ((set TRAIN) (set TRAIN)) (set TRAIN))
(declare-fun intersect@Open@@pfun@@TRAIN@@BLK@Close ((set (pfun TRAIN BLK)) (set (pfun TRAIN BLK))) (set (pfun TRAIN BLK)))
(declare-fun mk-fun@@TRAIN@@BLK (TRAIN BLK) (pfun TRAIN BLK))
(declare-fun mk-set@@BLK (BLK) (set BLK))
(declare-fun mk-set@@LOC (LOC) (set LOC))
(declare-fun mk-set@@TRAIN (TRAIN) (set TRAIN))
(declare-fun mk-set@Open@@pfun@@TRAIN@@BLK@Close ((pfun TRAIN BLK)) (set (pfun TRAIN BLK)))
(declare-fun ovl@@TRAIN@@BLK ((pfun TRAIN BLK) (pfun TRAIN BLK)) (pfun TRAIN BLK))
(declare-fun set-diff@@BLK ((set BLK) (set BLK)) (set BLK))
(declare-fun set-diff@@LOC ((set LOC) (set LOC)) (set LOC))
(declare-fun set-diff@@TRAIN ((set TRAIN) (set TRAIN)) (set TRAIN))
(declare-fun set-diff@Open@@pfun@@TRAIN@@BLK@Close ((set (pfun TRAIN BLK)) (set (pfun TRAIN BLK))) (set (pfun TRAIN BLK)))
(declare-fun tfun@@TRAIN@@BLK ((set TRAIN) (set BLK)) (set (pfun TRAIN BLK)))
(declare-fun bunion@@BLK ((set BLK) (set BLK)) (set BLK))
(declare-fun bunion@@LOC ((set LOC) (set LOC)) (set LOC))
(declare-fun bunion@@TRAIN ((set TRAIN) (set TRAIN)) (set TRAIN))
(declare-fun bunion@Open@@pfun@@TRAIN@@BLK@Close ((set (pfun TRAIN BLK)) (set (pfun TRAIN BLK))) (set (pfun TRAIN BLK)))
(assert (forall ( (x BLK)
                  (y BLK) )
                (= (elem@@BLK x
                              (mk-set@@BLK y))
                   (= x
                      y))))

(assert (forall ( (x BLK)
                  (s1 (set BLK))
                  (s2 (set BLK)) )
                (= (elem@@BLK x
                              (set-diff@@BLK s1
                                             s2))
                   (and (elem@@BLK x
                                   s1)
                        (not (elem@@BLK x
                                        s2))))))

(assert (forall ( (x BLK)
                  (s1 (set BLK))
                  (s2 (set BLK)) )
                (= (elem@@BLK x
                              (intersect@@BLK s1
                                              s2))
                   (and (elem@@BLK x
                                   s1)
                        (elem@@BLK x
                                   s2)))))

(assert (forall ( (x BLK)
                  (s1 (set BLK))
                  (s2 (set BLK)) )
                (= (elem@@BLK x
                              (bunion@@BLK s1
                                           s2))
                   (or (elem@@BLK x
                                  s1)
                       (elem@@BLK x
                                  s2)))))

(assert (forall ( (x BLK)
                  (s1 (set BLK))
                  (s2 (set BLK)) )
                (not (elem@@BLK x
                                empty-set@@BLK))))

(assert (forall ( (x LOC)
                  (y LOC) )
                (= (elem@@LOC x
                              (mk-set@@LOC y))
                   (= x
                      y))))

(assert (forall ( (x LOC)
                  (s1 (set LOC))
                  (s2 (set LOC)) )
                (= (elem@@LOC x
                              (set-diff@@LOC s1
                                             s2))
                   (and (elem@@LOC x
                                   s1)
                        (not (elem@@LOC x
                                        s2))))))

(assert (forall ( (x LOC)
                  (s1 (set LOC))
                  (s2 (set LOC)) )
                (= (elem@@LOC x
                              (intersect@@LOC s1
                                              s2))
                   (and (elem@@LOC x
                                   s1)
                        (elem@@LOC x
                                   s2)))))

(assert (forall ( (x LOC)
                  (s1 (set LOC))
                  (s2 (set LOC)) )
                (= (elem@@LOC x
                              (bunion@@LOC s1
                                           s2))
                   (or (elem@@LOC x
                                  s1)
                       (elem@@LOC x
                                  s2)))))

(assert (forall ( (x LOC)
                  (s1 (set LOC))
                  (s2 (set LOC)) )
                (not (elem@@LOC x
                                empty-set@@LOC))))

(assert (forall ( (x TRAIN)
                  (y TRAIN) )
                (= (elem@@TRAIN x
                                (mk-set@@TRAIN y))
                   (= x
                      y))))

(assert (forall ( (x TRAIN)
                  (s1 (set TRAIN))
                  (s2 (set TRAIN)) )
                (= (elem@@TRAIN x
                                (set-diff@@TRAIN s1
                                                 s2))
                   (and (elem@@TRAIN x
                                     s1)
                        (not (elem@@TRAIN x
                                          s2))))))

(assert (forall ( (x TRAIN)
                  (s1 (set TRAIN))
                  (s2 (set TRAIN)) )
                (= (elem@@TRAIN x
                                (intersect@@TRAIN s1
                                                  s2))
                   (and (elem@@TRAIN x
                                     s1)
                        (elem@@TRAIN x
                                     s2)))))

(assert (forall ( (x TRAIN)
                  (s1 (set TRAIN))
                  (s2 (set TRAIN)) )
                (= (elem@@TRAIN x
                                (bunion@@TRAIN s1
                                               s2))
                   (or (elem@@TRAIN x
                                    s1)
                       (elem@@TRAIN x
                                    s2)))))

(assert (forall ( (x TRAIN)
                  (s1 (set TRAIN))
                  (s2 (set TRAIN)) )
                (not (elem@@TRAIN x
                                  empty-set@@TRAIN))))

(assert (forall ( (f1 (pfun TRAIN
                            BLK))
                  (f2 (pfun TRAIN
                            BLK)) )
                (= (bunion@@TRAIN (dom@@TRAIN@@BLK f1)
                                  (dom@@TRAIN@@BLK f2))
                   (dom@@TRAIN@@BLK (ovl@@TRAIN@@BLK f1
                                                     f2)))))

(assert (= (dom@@TRAIN@@BLK empty-fun@@TRAIN@@BLK)
           empty-set@@TRAIN))

(assert (forall ( (x TRAIN)
                  (y BLK) )
                (= (dom@@TRAIN@@BLK (mk-fun@@TRAIN@@BLK x
                                                        y))
                   (mk-set@@TRAIN x))))

(assert (forall ( (f1 (pfun TRAIN
                            BLK))
                  (f2 (pfun TRAIN
                            BLK))
                  (x TRAIN) )
                (=> (elem@@TRAIN x
                                 (dom@@TRAIN@@BLK f2))
                    (= (select (ovl@@TRAIN@@BLK f1
                                                f2)
                               x)
                       (select f2
                               x)))))

(assert (forall ( (f1 (pfun TRAIN
                            BLK))
                  (f2 (pfun TRAIN
                            BLK))
                  (x TRAIN) )
                (=> (elem@@TRAIN x
                                 (set-diff@@TRAIN (dom@@TRAIN@@BLK f1)
                                                  (dom@@TRAIN@@BLK f2)))
                    (= (select (ovl@@TRAIN@@BLK f1
                                                f2)
                               x)
                       (select f1
                               x)))))

(assert (forall ( (f1 (pfun TRAIN
                            BLK))
                  (s1 (set TRAIN)) )
                (= (dom@@TRAIN@@BLK (dom-subt@@TRAIN@@BLK s1
                                                          f1))
                   (set-diff@@TRAIN (dom@@TRAIN@@BLK f1)
                                    s1))))

(assert (forall ( (x TRAIN)
                  (y BLK) )
                (= (select (mk-fun@@TRAIN@@BLK x
                                               y)
                           x)
                   y)))

(assert (forall ( (f1 (pfun TRAIN
                            BLK))
                  (s1 (set TRAIN))
                  (x TRAIN) )
                (=> (elem@@TRAIN x
                                 (intersect@@TRAIN s1
                                                   (dom@@TRAIN@@BLK f1)))
                    (= (select (dom-rest@@TRAIN@@BLK s1
                                                     f1)
                               x)
                       (select f1
                               x)))))

(assert (forall ( (f1 (pfun TRAIN
                            BLK))
                  (s1 (set TRAIN))
                  (x TRAIN) )
                (=> (elem@@TRAIN x
                                 (set-diff@@TRAIN (dom@@TRAIN@@BLK f1)
                                                  s1))
                    (= (select (dom-subt@@TRAIN@@BLK s1
                                                     f1)
                               x)
                       (select f1
                               x)))))

(assert (forall ( (x (pfun TRAIN
                           BLK))
                  (y (pfun TRAIN
                           BLK)) )
                (= (elem@Open@@pfun@@TRAIN@@BLK@Close x
                                                      (mk-set@Open@@pfun@@TRAIN@@BLK@Close y))
                   (= x
                      y))))

(assert (forall ( (x (pfun TRAIN
                           BLK))
                  (s1 (set (pfun TRAIN
                                 BLK)))
                  (s2 (set (pfun TRAIN
                                 BLK))) )
                (= (elem@Open@@pfun@@TRAIN@@BLK@Close x
                                                      (set-diff@Open@@pfun@@TRAIN@@BLK@Close s1
                                                                                             s2))
                   (and (elem@Open@@pfun@@TRAIN@@BLK@Close x
                                                           s1)
                        (not (elem@Open@@pfun@@TRAIN@@BLK@Close x
                                                                s2))))))

(assert (forall ( (x (pfun TRAIN
                           BLK))
                  (s1 (set (pfun TRAIN
                                 BLK)))
                  (s2 (set (pfun TRAIN
                                 BLK))) )
                (= (elem@Open@@pfun@@TRAIN@@BLK@Close x
                                                      (intersect@Open@@pfun@@TRAIN@@BLK@Close s1
                                                                                              s2))
                   (and (elem@Open@@pfun@@TRAIN@@BLK@Close x
                                                           s1)
                        (elem@Open@@pfun@@TRAIN@@BLK@Close x
                                                           s2)))))

(assert (forall ( (x (pfun TRAIN
                           BLK))
                  (s1 (set (pfun TRAIN
                                 BLK)))
                  (s2 (set (pfun TRAIN
                                 BLK))) )
                (= (elem@Open@@pfun@@TRAIN@@BLK@Close x
                                                      (bunion@Open@@pfun@@TRAIN@@BLK@Close s1
                                                                                           s2))
                   (or (elem@Open@@pfun@@TRAIN@@BLK@Close x
                                                          s1)
                       (elem@Open@@pfun@@TRAIN@@BLK@Close x
                                                          s2)))))

(assert (forall ( (x (pfun TRAIN
                           BLK))
                  (s1 (set (pfun TRAIN
                                 BLK)))
                  (s2 (set (pfun TRAIN
                                 BLK))) )
                (not (elem@Open@@pfun@@TRAIN@@BLK@Close x
                                                        empty-set@Open@@pfun@@TRAIN@@BLK@Close))))

(assert (and (not (= ent
                     ext))
             (not (elem@@BLK ent
                             PLF))
             (not (elem@@BLK ext
                             PLF))))

(assert (forall ( (p BLK) )
                (=> true
                    (= (not (= p
                               ext))
                       (elem@@BLK p
                                  (bunion@@BLK (mk-set@@BLK ent)
                                               PLF))))))

(assert (forall ( (p BLK) )
                (=> true
                    (= (not (= p
                               ent))
                       (elem@@BLK p
                                  (bunion@@BLK (mk-set@@BLK ext)
                                               PLF))))))

(assert (forall ( (p BLK) )
                (=> true
                    (= (or (= p
                              ent)
                           (= p
                              ext))
                       (not (elem@@BLK p
                                       PLF))))))

(assert (= BLK
           (bunion@@BLK (bunion@@BLK (mk-set@@BLK ent)
                                     (mk-set@@BLK ext))
                        PLF)))

(assert (forall ( (t TRAIN) )
                (=> (elem@@TRAIN t
                                 in)
                    (elem@@BLK (select loc
                                       t)
                               BLK))))

(assert (= (dom@@TRAIN@@BLK loc)
           in))

(assert (not (elem@@TRAIN t
                          in)))

(assert (= in@prime
           (bunion@@TRAIN in
                          (mk-set@@TRAIN t))))

(assert (= loc@prime
           (ovl@@TRAIN@@BLK loc
                            (mk-fun@@TRAIN@@BLK t
                                                ent))))

(assert (not (or (= t_0
                    t)
                 (not (= t_0
                         t)))))

(check-sat-using (or-else (then qe smt) (then skip smt) (then (using-params simplify :expand-power true) smt)))

(pop)
(echo "> train0/enter/CO/co1/completeness (215,1)")
(push)
(declare-sort BLK 0)
(declare-sort LOC 0)
(declare-sort TRAIN 0)
(define-sort pfun (a b) (Array a b))
(declare-sort set 1)
(declare-const PLF (set BLK))
(declare-const BLK (set BLK))
(declare-const LOC (set LOC))
(declare-const TRAIN (set TRAIN))
(declare-const ent BLK)
(declare-const ext BLK)
(declare-const in (set TRAIN))
(declare-const in@prime (set TRAIN))
(declare-const loc (pfun TRAIN BLK))
(declare-const loc@prime (pfun TRAIN BLK))
(declare-const p BLK)
(declare-const q BLK)
(declare-const t TRAIN)
(declare-const t_0 TRAIN)
(declare-const t_1 TRAIN)
(declare-const t_2 TRAIN)
(declare-const t_3 TRAIN)
(declare-fun apply@@TRAIN@@BLK ((pfun TRAIN BLK) TRAIN) BLK)
(declare-fun dom-rest@@TRAIN@@BLK ((set TRAIN) (pfun TRAIN BLK)) (pfun TRAIN BLK))
(declare-fun dom-subt@@TRAIN@@BLK ((set TRAIN) (pfun TRAIN BLK)) (pfun TRAIN BLK))
(declare-fun dom@@TRAIN@@BLK ((pfun TRAIN BLK)) (set TRAIN))
(declare-fun elem@@BLK (BLK (set BLK)) Bool)
(declare-fun elem@@LOC (LOC (set LOC)) Bool)
(declare-fun elem@@TRAIN (TRAIN (set TRAIN)) Bool)
(declare-fun elem@Open@@pfun@@TRAIN@@BLK@Close ((pfun TRAIN BLK) (set (pfun TRAIN BLK))) Bool)
(declare-fun empty-fun@@TRAIN@@BLK () (pfun TRAIN BLK))
(declare-fun empty-set@@BLK () (set BLK))
(declare-fun empty-set@@LOC () (set LOC))
(declare-fun empty-set@@TRAIN () (set TRAIN))
(declare-fun empty-set@Open@@pfun@@TRAIN@@BLK@Close () (set (pfun TRAIN BLK)))
(declare-fun intersect@@BLK ((set BLK) (set BLK)) (set BLK))
(declare-fun intersect@@LOC ((set LOC) (set LOC)) (set LOC))
(declare-fun intersect@@TRAIN ((set TRAIN) (set TRAIN)) (set TRAIN))
(declare-fun intersect@Open@@pfun@@TRAIN@@BLK@Close ((set (pfun TRAIN BLK)) (set (pfun TRAIN BLK))) (set (pfun TRAIN BLK)))
(declare-fun mk-fun@@TRAIN@@BLK (TRAIN BLK) (pfun TRAIN BLK))
(declare-fun mk-set@@BLK (BLK) (set BLK))
(declare-fun mk-set@@LOC (LOC) (set LOC))
(declare-fun mk-set@@TRAIN (TRAIN) (set TRAIN))
(declare-fun mk-set@Open@@pfun@@TRAIN@@BLK@Close ((pfun TRAIN BLK)) (set (pfun TRAIN BLK)))
(declare-fun ovl@@TRAIN@@BLK ((pfun TRAIN BLK) (pfun TRAIN BLK)) (pfun TRAIN BLK))
(declare-fun set-diff@@BLK ((set BLK) (set BLK)) (set BLK))
(declare-fun set-diff@@LOC ((set LOC) (set LOC)) (set LOC))
(declare-fun set-diff@@TRAIN ((set TRAIN) (set TRAIN)) (set TRAIN))
(declare-fun set-diff@Open@@pfun@@TRAIN@@BLK@Close ((set (pfun TRAIN BLK)) (set (pfun TRAIN BLK))) (set (pfun TRAIN BLK)))
(declare-fun tfun@@TRAIN@@BLK ((set TRAIN) (set BLK)) (set (pfun TRAIN BLK)))
(declare-fun bunion@@BLK ((set BLK) (set BLK)) (set BLK))
(declare-fun bunion@@LOC ((set LOC) (set LOC)) (set LOC))
(declare-fun bunion@@TRAIN ((set TRAIN) (set TRAIN)) (set TRAIN))
(declare-fun bunion@Open@@pfun@@TRAIN@@BLK@Close ((set (pfun TRAIN BLK)) (set (pfun TRAIN BLK))) (set (pfun TRAIN BLK)))
(assert (elem@@TRAIN t_0
                     in@prime))

(assert (= (select loc@prime
                   t_0)
           ent))

(assert (not (and (elem@@TRAIN t_0
                               in@prime)
                  (or (elem@@BLK (select loc@prime
                                         t_0)
                                 PLF)
                      (= (select loc@prime
                                 t_0)
                         ent)))))

(check-sat-using (or-else (then qe smt) (then skip smt) (then (using-params simplify :expand-power true) smt)))

(pop)
(echo "> train0/enter/CO/co1/new assumption (202,1)")
(push)
(declare-sort BLK 0)
(declare-sort LOC 0)
(declare-sort TRAIN 0)
(define-sort pfun (a b) (Array a b))
(declare-sort set 1)
(declare-const PLF (set BLK))
(declare-const BLK (set BLK))
(declare-const LOC (set LOC))
(declare-const TRAIN (set TRAIN))
(declare-const ent BLK)
(declare-const ext BLK)
(declare-const in (set TRAIN))
(declare-const in@prime (set TRAIN))
(declare-const loc (pfun TRAIN BLK))
(declare-const loc@prime (pfun TRAIN BLK))
(declare-const p BLK)
(declare-const q BLK)
(declare-const t TRAIN)
(declare-const t_0 TRAIN)
(declare-const t_1 TRAIN)
(declare-const t_2 TRAIN)
(declare-const t_3 TRAIN)
(declare-fun apply@@TRAIN@@BLK ((pfun TRAIN BLK) TRAIN) BLK)
(declare-fun dom-rest@@TRAIN@@BLK ((set TRAIN) (pfun TRAIN BLK)) (pfun TRAIN BLK))
(declare-fun dom-subt@@TRAIN@@BLK ((set TRAIN) (pfun TRAIN BLK)) (pfun TRAIN BLK))
(declare-fun dom@@TRAIN@@BLK ((pfun TRAIN BLK)) (set TRAIN))
(declare-fun elem@@BLK (BLK (set BLK)) Bool)
(declare-fun elem@@LOC (LOC (set LOC)) Bool)
(declare-fun elem@@TRAIN (TRAIN (set TRAIN)) Bool)
(declare-fun elem@Open@@pfun@@TRAIN@@BLK@Close ((pfun TRAIN BLK) (set (pfun TRAIN BLK))) Bool)
(declare-fun empty-fun@@TRAIN@@BLK () (pfun TRAIN BLK))
(declare-fun empty-set@@BLK () (set BLK))
(declare-fun empty-set@@LOC () (set LOC))
(declare-fun empty-set@@TRAIN () (set TRAIN))
(declare-fun empty-set@Open@@pfun@@TRAIN@@BLK@Close () (set (pfun TRAIN BLK)))
(declare-fun intersect@@BLK ((set BLK) (set BLK)) (set BLK))
(declare-fun intersect@@LOC ((set LOC) (set LOC)) (set LOC))
(declare-fun intersect@@TRAIN ((set TRAIN) (set TRAIN)) (set TRAIN))
(declare-fun intersect@Open@@pfun@@TRAIN@@BLK@Close ((set (pfun TRAIN BLK)) (set (pfun TRAIN BLK))) (set (pfun TRAIN BLK)))
(declare-fun mk-fun@@TRAIN@@BLK (TRAIN BLK) (pfun TRAIN BLK))
(declare-fun mk-set@@BLK (BLK) (set BLK))
(declare-fun mk-set@@LOC (LOC) (set LOC))
(declare-fun mk-set@@TRAIN (TRAIN) (set TRAIN))
(declare-fun mk-set@Open@@pfun@@TRAIN@@BLK@Close ((pfun TRAIN BLK)) (set (pfun TRAIN BLK)))
(declare-fun ovl@@TRAIN@@BLK ((pfun TRAIN BLK) (pfun TRAIN BLK)) (pfun TRAIN BLK))
(declare-fun set-diff@@BLK ((set BLK) (set BLK)) (set BLK))
(declare-fun set-diff@@LOC ((set LOC) (set LOC)) (set LOC))
(declare-fun set-diff@@TRAIN ((set TRAIN) (set TRAIN)) (set TRAIN))
(declare-fun set-diff@Open@@pfun@@TRAIN@@BLK@Close ((set (pfun TRAIN BLK)) (set (pfun TRAIN BLK))) (set (pfun TRAIN BLK)))
(declare-fun tfun@@TRAIN@@BLK ((set TRAIN) (set BLK)) (set (pfun TRAIN BLK)))
(declare-fun bunion@@BLK ((set BLK) (set BLK)) (set BLK))
(declare-fun bunion@@LOC ((set LOC) (set LOC)) (set LOC))
(declare-fun bunion@@TRAIN ((set TRAIN) (set TRAIN)) (set TRAIN))
(declare-fun bunion@Open@@pfun@@TRAIN@@BLK@Close ((set (pfun TRAIN BLK)) (set (pfun TRAIN BLK))) (set (pfun TRAIN BLK)))
(assert (not (=> (=> (and (elem@@TRAIN t_0
                                       in)
                          (= (select loc
                                     t_0)
                             ent))
                     (and (elem@@TRAIN t_0
                                       in@prime)
                          (or (elem@@BLK (select loc@prime
                                                 t_0)
                                         PLF)
                              (= (select loc@prime
                                         t_0)
                                 ent))))
                 (=> (and (elem@@TRAIN t_0
                                       in)
                          (= (select loc
                                     t_0)
                             ent)
                          (not (elem@@BLK (select loc
                                                  t_0)
                                          PLF)))
                     (and (elem@@TRAIN t_0
                                       in@prime)
                          (or (elem@@BLK (select loc@prime
                                                 t_0)
                                         PLF)
                              (= (select loc@prime
                                         t_0)
                                 ent)))))))

(check-sat-using (or-else (then qe smt) (then skip smt) (then (using-params simplify :expand-power true) smt)))

(pop)
(echo "> train0/enter/CO/co1/part 1/goal (219,2)")
(push)
(declare-sort BLK 0)
(declare-sort LOC 0)
(declare-sort TRAIN 0)
(define-sort pfun (a b) (Array a b))
(declare-sort set 1)
(declare-const PLF (set BLK))
(declare-const BLK (set BLK))
(declare-const LOC (set LOC))
(declare-const TRAIN (set TRAIN))
(declare-const ent BLK)
(declare-const ext BLK)
(declare-const in (set TRAIN))
(declare-const in@prime (set TRAIN))
(declare-const loc (pfun TRAIN BLK))
(declare-const loc@prime (pfun TRAIN BLK))
(declare-const p BLK)
(declare-const q BLK)
(declare-const t TRAIN)
(declare-const t_0 TRAIN)
(declare-const t_1 TRAIN)
(declare-const t_2 TRAIN)
(declare-const t_3 TRAIN)
(declare-fun apply@@TRAIN@@BLK ((pfun TRAIN BLK) TRAIN) BLK)
(declare-fun dom-rest@@TRAIN@@BLK ((set TRAIN) (pfun TRAIN BLK)) (pfun TRAIN BLK))
(declare-fun dom-subt@@TRAIN@@BLK ((set TRAIN) (pfun TRAIN BLK)) (pfun TRAIN BLK))
(declare-fun dom@@TRAIN@@BLK ((pfun TRAIN BLK)) (set TRAIN))
(declare-fun elem@@BLK (BLK (set BLK)) Bool)
(declare-fun elem@@LOC (LOC (set LOC)) Bool)
(declare-fun elem@@TRAIN (TRAIN (set TRAIN)) Bool)
(declare-fun elem@Open@@pfun@@TRAIN@@BLK@Close ((pfun TRAIN BLK) (set (pfun TRAIN BLK))) Bool)
(declare-fun empty-fun@@TRAIN@@BLK () (pfun TRAIN BLK))
(declare-fun empty-set@@BLK () (set BLK))
(declare-fun empty-set@@LOC () (set LOC))
(declare-fun empty-set@@TRAIN () (set TRAIN))
(declare-fun empty-set@Open@@pfun@@TRAIN@@BLK@Close () (set (pfun TRAIN BLK)))
(declare-fun intersect@@BLK ((set BLK) (set BLK)) (set BLK))
(declare-fun intersect@@LOC ((set LOC) (set LOC)) (set LOC))
(declare-fun intersect@@TRAIN ((set TRAIN) (set TRAIN)) (set TRAIN))
(declare-fun intersect@Open@@pfun@@TRAIN@@BLK@Close ((set (pfun TRAIN BLK)) (set (pfun TRAIN BLK))) (set (pfun TRAIN BLK)))
(declare-fun mk-fun@@TRAIN@@BLK (TRAIN BLK) (pfun TRAIN BLK))
(declare-fun mk-set@@BLK (BLK) (set BLK))
(declare-fun mk-set@@LOC (LOC) (set LOC))
(declare-fun mk-set@@TRAIN (TRAIN) (set TRAIN))
(declare-fun mk-set@Open@@pfun@@TRAIN@@BLK@Close ((pfun TRAIN BLK)) (set (pfun TRAIN BLK)))
(declare-fun ovl@@TRAIN@@BLK ((pfun TRAIN BLK) (pfun TRAIN BLK)) (pfun TRAIN BLK))
(declare-fun set-diff@@BLK ((set BLK) (set BLK)) (set BLK))
(declare-fun set-diff@@LOC ((set LOC) (set LOC)) (set LOC))
(declare-fun set-diff@@TRAIN ((set TRAIN) (set TRAIN)) (set TRAIN))
(declare-fun set-diff@Open@@pfun@@TRAIN@@BLK@Close ((set (pfun TRAIN BLK)) (set (pfun TRAIN BLK))) (set (pfun TRAIN BLK)))
(declare-fun tfun@@TRAIN@@BLK ((set TRAIN) (set BLK)) (set (pfun TRAIN BLK)))
(declare-fun bunion@@BLK ((set BLK) (set BLK)) (set BLK))
(declare-fun bunion@@LOC ((set LOC) (set LOC)) (set LOC))
(declare-fun bunion@@TRAIN ((set TRAIN) (set TRAIN)) (set TRAIN))
(declare-fun bunion@Open@@pfun@@TRAIN@@BLK@Close ((set (pfun TRAIN BLK)) (set (pfun TRAIN BLK))) (set (pfun TRAIN BLK)))
(assert (= (elem@@TRAIN t_0
                        in@prime)
           true))

(assert (not (elem@@TRAIN t_0
                          in@prime)))

(check-sat-using (or-else (then qe smt) (then skip smt) (then (using-params simplify :expand-power true) smt)))

(pop)
(echo "> train0/enter/CO/co1/part 1/hypotheses (219,2)")
(push)
(declare-sort BLK 0)
(declare-sort LOC 0)
(declare-sort TRAIN 0)
(define-sort pfun (a b) (Array a b))
(declare-sort set 1)
(declare-const PLF (set BLK))
(declare-const BLK (set BLK))
(declare-const LOC (set LOC))
(declare-const TRAIN (set TRAIN))
(declare-const ent BLK)
(declare-const ext BLK)
(declare-const in (set TRAIN))
(declare-const in@prime (set TRAIN))
(declare-const loc (pfun TRAIN BLK))
(declare-const loc@prime (pfun TRAIN BLK))
(declare-const p BLK)
(declare-const q BLK)
(declare-const t TRAIN)
(declare-const t_0 TRAIN)
(declare-const t_1 TRAIN)
(declare-const t_2 TRAIN)
(declare-const t_3 TRAIN)
(declare-fun apply@@TRAIN@@BLK ((pfun TRAIN BLK) TRAIN) BLK)
(declare-fun dom-rest@@TRAIN@@BLK ((set TRAIN) (pfun TRAIN BLK)) (pfun TRAIN BLK))
(declare-fun dom-subt@@TRAIN@@BLK ((set TRAIN) (pfun TRAIN BLK)) (pfun TRAIN BLK))
(declare-fun dom@@TRAIN@@BLK ((pfun TRAIN BLK)) (set TRAIN))
(declare-fun elem@@BLK (BLK (set BLK)) Bool)
(declare-fun elem@@LOC (LOC (set LOC)) Bool)
(declare-fun elem@@TRAIN (TRAIN (set TRAIN)) Bool)
(declare-fun elem@Open@@pfun@@TRAIN@@BLK@Close ((pfun TRAIN BLK) (set (pfun TRAIN BLK))) Bool)
(declare-fun empty-fun@@TRAIN@@BLK () (pfun TRAIN BLK))
(declare-fun empty-set@@BLK () (set BLK))
(declare-fun empty-set@@LOC () (set LOC))
(declare-fun empty-set@@TRAIN () (set TRAIN))
(declare-fun empty-set@Open@@pfun@@TRAIN@@BLK@Close () (set (pfun TRAIN BLK)))
(declare-fun intersect@@BLK ((set BLK) (set BLK)) (set BLK))
(declare-fun intersect@@LOC ((set LOC) (set LOC)) (set LOC))
(declare-fun intersect@@TRAIN ((set TRAIN) (set TRAIN)) (set TRAIN))
(declare-fun intersect@Open@@pfun@@TRAIN@@BLK@Close ((set (pfun TRAIN BLK)) (set (pfun TRAIN BLK))) (set (pfun TRAIN BLK)))
(declare-fun mk-fun@@TRAIN@@BLK (TRAIN BLK) (pfun TRAIN BLK))
(declare-fun mk-set@@BLK (BLK) (set BLK))
(declare-fun mk-set@@LOC (LOC) (set LOC))
(declare-fun mk-set@@TRAIN (TRAIN) (set TRAIN))
(declare-fun mk-set@Open@@pfun@@TRAIN@@BLK@Close ((pfun TRAIN BLK)) (set (pfun TRAIN BLK)))
(declare-fun ovl@@TRAIN@@BLK ((pfun TRAIN BLK) (pfun TRAIN BLK)) (pfun TRAIN BLK))
(declare-fun set-diff@@BLK ((set BLK) (set BLK)) (set BLK))
(declare-fun set-diff@@LOC ((set LOC) (set LOC)) (set LOC))
(declare-fun set-diff@@TRAIN ((set TRAIN) (set TRAIN)) (set TRAIN))
(declare-fun set-diff@Open@@pfun@@TRAIN@@BLK@Close ((set (pfun TRAIN BLK)) (set (pfun TRAIN BLK))) (set (pfun TRAIN BLK)))
(declare-fun tfun@@TRAIN@@BLK ((set TRAIN) (set BLK)) (set (pfun TRAIN BLK)))
(declare-fun bunion@@BLK ((set BLK) (set BLK)) (set BLK))
(declare-fun bunion@@LOC ((set LOC) (set LOC)) (set LOC))
(declare-fun bunion@@TRAIN ((set TRAIN) (set TRAIN)) (set TRAIN))
(declare-fun bunion@Open@@pfun@@TRAIN@@BLK@Close ((set (pfun TRAIN BLK)) (set (pfun TRAIN BLK))) (set (pfun TRAIN BLK)))
(assert (elem@@TRAIN t_0
                     in))

(assert (= (select loc
                   t_0)
           ent))

(assert (forall ( (x BLK)
                  (y BLK) )
                (= (elem@@BLK x
                              (mk-set@@BLK y))
                   (= x
                      y))))

(assert (forall ( (x BLK)
                  (s1 (set BLK))
                  (s2 (set BLK)) )
                (= (elem@@BLK x
                              (set-diff@@BLK s1
                                             s2))
                   (and (elem@@BLK x
                                   s1)
                        (not (elem@@BLK x
                                        s2))))))

(assert (forall ( (x BLK)
                  (s1 (set BLK))
                  (s2 (set BLK)) )
                (= (elem@@BLK x
                              (intersect@@BLK s1
                                              s2))
                   (and (elem@@BLK x
                                   s1)
                        (elem@@BLK x
                                   s2)))))

(assert (forall ( (x BLK)
                  (s1 (set BLK))
                  (s2 (set BLK)) )
                (= (elem@@BLK x
                              (bunion@@BLK s1
                                           s2))
                   (or (elem@@BLK x
                                  s1)
                       (elem@@BLK x
                                  s2)))))

(assert (forall ( (x BLK)
                  (s1 (set BLK))
                  (s2 (set BLK)) )
                (not (elem@@BLK x
                                empty-set@@BLK))))

(assert (forall ( (x LOC)
                  (y LOC) )
                (= (elem@@LOC x
                              (mk-set@@LOC y))
                   (= x
                      y))))

(assert (forall ( (x LOC)
                  (s1 (set LOC))
                  (s2 (set LOC)) )
                (= (elem@@LOC x
                              (set-diff@@LOC s1
                                             s2))
                   (and (elem@@LOC x
                                   s1)
                        (not (elem@@LOC x
                                        s2))))))

(assert (forall ( (x LOC)
                  (s1 (set LOC))
                  (s2 (set LOC)) )
                (= (elem@@LOC x
                              (intersect@@LOC s1
                                              s2))
                   (and (elem@@LOC x
                                   s1)
                        (elem@@LOC x
                                   s2)))))

(assert (forall ( (x LOC)
                  (s1 (set LOC))
                  (s2 (set LOC)) )
                (= (elem@@LOC x
                              (bunion@@LOC s1
                                           s2))
                   (or (elem@@LOC x
                                  s1)
                       (elem@@LOC x
                                  s2)))))

(assert (forall ( (x LOC)
                  (s1 (set LOC))
                  (s2 (set LOC)) )
                (not (elem@@LOC x
                                empty-set@@LOC))))

(assert (forall ( (x TRAIN)
                  (y TRAIN) )
                (= (elem@@TRAIN x
                                (mk-set@@TRAIN y))
                   (= x
                      y))))

(assert (forall ( (x TRAIN)
                  (s1 (set TRAIN))
                  (s2 (set TRAIN)) )
                (= (elem@@TRAIN x
                                (set-diff@@TRAIN s1
                                                 s2))
                   (and (elem@@TRAIN x
                                     s1)
                        (not (elem@@TRAIN x
                                          s2))))))

(assert (forall ( (x TRAIN)
                  (s1 (set TRAIN))
                  (s2 (set TRAIN)) )
                (= (elem@@TRAIN x
                                (intersect@@TRAIN s1
                                                  s2))
                   (and (elem@@TRAIN x
                                     s1)
                        (elem@@TRAIN x
                                     s2)))))

(assert (forall ( (x TRAIN)
                  (s1 (set TRAIN))
                  (s2 (set TRAIN)) )
                (= (elem@@TRAIN x
                                (bunion@@TRAIN s1
                                               s2))
                   (or (elem@@TRAIN x
                                    s1)
                       (elem@@TRAIN x
                                    s2)))))

(assert (forall ( (x TRAIN)
                  (s1 (set TRAIN))
                  (s2 (set TRAIN)) )
                (not (elem@@TRAIN x
                                  empty-set@@TRAIN))))

(assert (forall ( (f1 (pfun TRAIN
                            BLK))
                  (f2 (pfun TRAIN
                            BLK)) )
                (= (bunion@@TRAIN (dom@@TRAIN@@BLK f1)
                                  (dom@@TRAIN@@BLK f2))
                   (dom@@TRAIN@@BLK (ovl@@TRAIN@@BLK f1
                                                     f2)))))

(assert (= (dom@@TRAIN@@BLK empty-fun@@TRAIN@@BLK)
           empty-set@@TRAIN))

(assert (forall ( (x TRAIN)
                  (y BLK) )
                (= (dom@@TRAIN@@BLK (mk-fun@@TRAIN@@BLK x
                                                        y))
                   (mk-set@@TRAIN x))))

(assert (forall ( (f1 (pfun TRAIN
                            BLK))
                  (f2 (pfun TRAIN
                            BLK))
                  (x TRAIN) )
                (=> (elem@@TRAIN x
                                 (dom@@TRAIN@@BLK f2))
                    (= (select (ovl@@TRAIN@@BLK f1
                                                f2)
                               x)
                       (select f2
                               x)))))

(assert (forall ( (f1 (pfun TRAIN
                            BLK))
                  (f2 (pfun TRAIN
                            BLK))
                  (x TRAIN) )
                (=> (elem@@TRAIN x
                                 (set-diff@@TRAIN (dom@@TRAIN@@BLK f1)
                                                  (dom@@TRAIN@@BLK f2)))
                    (= (select (ovl@@TRAIN@@BLK f1
                                                f2)
                               x)
                       (select f1
                               x)))))

(assert (forall ( (f1 (pfun TRAIN
                            BLK))
                  (s1 (set TRAIN)) )
                (= (dom@@TRAIN@@BLK (dom-subt@@TRAIN@@BLK s1
                                                          f1))
                   (set-diff@@TRAIN (dom@@TRAIN@@BLK f1)
                                    s1))))

(assert (forall ( (x TRAIN)
                  (y BLK) )
                (= (select (mk-fun@@TRAIN@@BLK x
                                               y)
                           x)
                   y)))

(assert (forall ( (f1 (pfun TRAIN
                            BLK))
                  (s1 (set TRAIN))
                  (x TRAIN) )
                (=> (elem@@TRAIN x
                                 (intersect@@TRAIN s1
                                                   (dom@@TRAIN@@BLK f1)))
                    (= (select (dom-rest@@TRAIN@@BLK s1
                                                     f1)
                               x)
                       (select f1
                               x)))))

(assert (forall ( (f1 (pfun TRAIN
                            BLK))
                  (s1 (set TRAIN))
                  (x TRAIN) )
                (=> (elem@@TRAIN x
                                 (set-diff@@TRAIN (dom@@TRAIN@@BLK f1)
                                                  s1))
                    (= (select (dom-subt@@TRAIN@@BLK s1
                                                     f1)
                               x)
                       (select f1
                               x)))))

(assert (forall ( (x (pfun TRAIN
                           BLK))
                  (y (pfun TRAIN
                           BLK)) )
                (= (elem@Open@@pfun@@TRAIN@@BLK@Close x
                                                      (mk-set@Open@@pfun@@TRAIN@@BLK@Close y))
                   (= x
                      y))))

(assert (forall ( (x (pfun TRAIN
                           BLK))
                  (s1 (set (pfun TRAIN
                                 BLK)))
                  (s2 (set (pfun TRAIN
                                 BLK))) )
                (= (elem@Open@@pfun@@TRAIN@@BLK@Close x
                                                      (set-diff@Open@@pfun@@TRAIN@@BLK@Close s1
                                                                                             s2))
                   (and (elem@Open@@pfun@@TRAIN@@BLK@Close x
                                                           s1)
                        (not (elem@Open@@pfun@@TRAIN@@BLK@Close x
                                                                s2))))))

(assert (forall ( (x (pfun TRAIN
                           BLK))
                  (s1 (set (pfun TRAIN
                                 BLK)))
                  (s2 (set (pfun TRAIN
                                 BLK))) )
                (= (elem@Open@@pfun@@TRAIN@@BLK@Close x
                                                      (intersect@Open@@pfun@@TRAIN@@BLK@Close s1
                                                                                              s2))
                   (and (elem@Open@@pfun@@TRAIN@@BLK@Close x
                                                           s1)
                        (elem@Open@@pfun@@TRAIN@@BLK@Close x
                                                           s2)))))

(assert (forall ( (x (pfun TRAIN
                           BLK))
                  (s1 (set (pfun TRAIN
                                 BLK)))
                  (s2 (set (pfun TRAIN
                                 BLK))) )
                (= (elem@Open@@pfun@@TRAIN@@BLK@Close x
                                                      (bunion@Open@@pfun@@TRAIN@@BLK@Close s1
                                                                                           s2))
                   (or (elem@Open@@pfun@@TRAIN@@BLK@Close x
                                                          s1)
                       (elem@Open@@pfun@@TRAIN@@BLK@Close x
                                                          s2)))))

(assert (forall ( (x (pfun TRAIN
                           BLK))
                  (s1 (set (pfun TRAIN
                                 BLK)))
                  (s2 (set (pfun TRAIN
                                 BLK))) )
                (not (elem@Open@@pfun@@TRAIN@@BLK@Close x
                                                        empty-set@Open@@pfun@@TRAIN@@BLK@Close))))

(assert (and (not (= ent
                     ext))
             (not (elem@@BLK ent
                             PLF))
             (not (elem@@BLK ext
                             PLF))))

(assert (forall ( (p BLK) )
                (=> true
                    (= (not (= p
                               ext))
                       (elem@@BLK p
                                  (bunion@@BLK (mk-set@@BLK ent)
                                               PLF))))))

(assert (forall ( (p BLK) )
                (=> true
                    (= (not (= p
                               ent))
                       (elem@@BLK p
                                  (bunion@@BLK (mk-set@@BLK ext)
                                               PLF))))))

(assert (forall ( (p BLK) )
                (=> true
                    (= (or (= p
                              ent)
                           (= p
                              ext))
                       (not (elem@@BLK p
                                       PLF))))))

(assert (= BLK
           (bunion@@BLK (bunion@@BLK (mk-set@@BLK ent)
                                     (mk-set@@BLK ext))
                        PLF)))

(assert (forall ( (t TRAIN) )
                (=> (elem@@TRAIN t
                                 in)
                    (elem@@BLK (select loc
                                       t)
                               BLK))))

(assert (= (dom@@TRAIN@@BLK loc)
           in))

(assert (not (elem@@TRAIN t
                          in)))

(assert (= in@prime
           (bunion@@TRAIN in
                          (mk-set@@TRAIN t))))

(assert (= loc@prime
           (ovl@@TRAIN@@BLK loc
                            (mk-fun@@TRAIN@@BLK t
                                                ent))))

(assert (not (and (= in@prime
                     (bunion@@TRAIN in
                                    (mk-set@@TRAIN t)))
                  (elem@@TRAIN t_0
                               in))))

(check-sat-using (or-else (then qe smt) (then skip smt) (then (using-params simplify :expand-power true) smt)))

(pop)
(echo "> train0/enter/CO/co1/part 1/relation (219,2)")
(push)
(declare-sort BLK 0)
(declare-sort LOC 0)
(declare-sort TRAIN 0)
(define-sort pfun (a b) (Array a b))
(declare-sort set 1)
(declare-const PLF (set BLK))
(declare-const BLK (set BLK))
(declare-const LOC (set LOC))
(declare-const TRAIN (set TRAIN))
(declare-const ent BLK)
(declare-const ext BLK)
(declare-const in (set TRAIN))
(declare-const in@prime (set TRAIN))
(declare-const loc (pfun TRAIN BLK))
(declare-const loc@prime (pfun TRAIN BLK))
(declare-const p BLK)
(declare-const q BLK)
(declare-const t TRAIN)
(declare-const t_0 TRAIN)
(declare-const t_1 TRAIN)
(declare-const t_2 TRAIN)
(declare-const t_3 TRAIN)
(declare-fun apply@@TRAIN@@BLK ((pfun TRAIN BLK) TRAIN) BLK)
(declare-fun dom-rest@@TRAIN@@BLK ((set TRAIN) (pfun TRAIN BLK)) (pfun TRAIN BLK))
(declare-fun dom-subt@@TRAIN@@BLK ((set TRAIN) (pfun TRAIN BLK)) (pfun TRAIN BLK))
(declare-fun dom@@TRAIN@@BLK ((pfun TRAIN BLK)) (set TRAIN))
(declare-fun elem@@BLK (BLK (set BLK)) Bool)
(declare-fun elem@@LOC (LOC (set LOC)) Bool)
(declare-fun elem@@TRAIN (TRAIN (set TRAIN)) Bool)
(declare-fun elem@Open@@pfun@@TRAIN@@BLK@Close ((pfun TRAIN BLK) (set (pfun TRAIN BLK))) Bool)
(declare-fun empty-fun@@TRAIN@@BLK () (pfun TRAIN BLK))
(declare-fun empty-set@@BLK () (set BLK))
(declare-fun empty-set@@LOC () (set LOC))
(declare-fun empty-set@@TRAIN () (set TRAIN))
(declare-fun empty-set@Open@@pfun@@TRAIN@@BLK@Close () (set (pfun TRAIN BLK)))
(declare-fun intersect@@BLK ((set BLK) (set BLK)) (set BLK))
(declare-fun intersect@@LOC ((set LOC) (set LOC)) (set LOC))
(declare-fun intersect@@TRAIN ((set TRAIN) (set TRAIN)) (set TRAIN))
(declare-fun intersect@Open@@pfun@@TRAIN@@BLK@Close ((set (pfun TRAIN BLK)) (set (pfun TRAIN BLK))) (set (pfun TRAIN BLK)))
(declare-fun mk-fun@@TRAIN@@BLK (TRAIN BLK) (pfun TRAIN BLK))
(declare-fun mk-set@@BLK (BLK) (set BLK))
(declare-fun mk-set@@LOC (LOC) (set LOC))
(declare-fun mk-set@@TRAIN (TRAIN) (set TRAIN))
(declare-fun mk-set@Open@@pfun@@TRAIN@@BLK@Close ((pfun TRAIN BLK)) (set (pfun TRAIN BLK)))
(declare-fun ovl@@TRAIN@@BLK ((pfun TRAIN BLK) (pfun TRAIN BLK)) (pfun TRAIN BLK))
(declare-fun set-diff@@BLK ((set BLK) (set BLK)) (set BLK))
(declare-fun set-diff@@LOC ((set LOC) (set LOC)) (set LOC))
(declare-fun set-diff@@TRAIN ((set TRAIN) (set TRAIN)) (set TRAIN))
(declare-fun set-diff@Open@@pfun@@TRAIN@@BLK@Close ((set (pfun TRAIN BLK)) (set (pfun TRAIN BLK))) (set (pfun TRAIN BLK)))
(declare-fun tfun@@TRAIN@@BLK ((set TRAIN) (set BLK)) (set (pfun TRAIN BLK)))
(declare-fun bunion@@BLK ((set BLK) (set BLK)) (set BLK))
(declare-fun bunion@@LOC ((set LOC) (set LOC)) (set LOC))
(declare-fun bunion@@TRAIN ((set TRAIN) (set TRAIN)) (set TRAIN))
(declare-fun bunion@Open@@pfun@@TRAIN@@BLK@Close ((set (pfun TRAIN BLK)) (set (pfun TRAIN BLK))) (set (pfun TRAIN BLK)))
(assert (= (elem@@TRAIN t_0
                        in@prime)
           (elem@@TRAIN t_0
                        (bunion@@TRAIN in
                                       (mk-set@@TRAIN t)))))

(assert (= (elem@@TRAIN t_0
                        (bunion@@TRAIN in
                                       (mk-set@@TRAIN t)))
           true))

(assert (forall ( (x BLK)
                  (y BLK) )
                (= (elem@@BLK x
                              (mk-set@@BLK y))
                   (= x
                      y))))

(assert (forall ( (x BLK)
                  (s1 (set BLK))
                  (s2 (set BLK)) )
                (= (elem@@BLK x
                              (set-diff@@BLK s1
                                             s2))
                   (and (elem@@BLK x
                                   s1)
                        (not (elem@@BLK x
                                        s2))))))

(assert (forall ( (x BLK)
                  (s1 (set BLK))
                  (s2 (set BLK)) )
                (= (elem@@BLK x
                              (intersect@@BLK s1
                                              s2))
                   (and (elem@@BLK x
                                   s1)
                        (elem@@BLK x
                                   s2)))))

(assert (forall ( (x BLK)
                  (s1 (set BLK))
                  (s2 (set BLK)) )
                (= (elem@@BLK x
                              (bunion@@BLK s1
                                           s2))
                   (or (elem@@BLK x
                                  s1)
                       (elem@@BLK x
                                  s2)))))

(assert (forall ( (x BLK)
                  (s1 (set BLK))
                  (s2 (set BLK)) )
                (not (elem@@BLK x
                                empty-set@@BLK))))

(assert (forall ( (x LOC)
                  (y LOC) )
                (= (elem@@LOC x
                              (mk-set@@LOC y))
                   (= x
                      y))))

(assert (forall ( (x LOC)
                  (s1 (set LOC))
                  (s2 (set LOC)) )
                (= (elem@@LOC x
                              (set-diff@@LOC s1
                                             s2))
                   (and (elem@@LOC x
                                   s1)
                        (not (elem@@LOC x
                                        s2))))))

(assert (forall ( (x LOC)
                  (s1 (set LOC))
                  (s2 (set LOC)) )
                (= (elem@@LOC x
                              (intersect@@LOC s1
                                              s2))
                   (and (elem@@LOC x
                                   s1)
                        (elem@@LOC x
                                   s2)))))

(assert (forall ( (x LOC)
                  (s1 (set LOC))
                  (s2 (set LOC)) )
                (= (elem@@LOC x
                              (bunion@@LOC s1
                                           s2))
                   (or (elem@@LOC x
                                  s1)
                       (elem@@LOC x
                                  s2)))))

(assert (forall ( (x LOC)
                  (s1 (set LOC))
                  (s2 (set LOC)) )
                (not (elem@@LOC x
                                empty-set@@LOC))))

(assert (forall ( (x TRAIN)
                  (y TRAIN) )
                (= (elem@@TRAIN x
                                (mk-set@@TRAIN y))
                   (= x
                      y))))

(assert (forall ( (x TRAIN)
                  (s1 (set TRAIN))
                  (s2 (set TRAIN)) )
                (= (elem@@TRAIN x
                                (set-diff@@TRAIN s1
                                                 s2))
                   (and (elem@@TRAIN x
                                     s1)
                        (not (elem@@TRAIN x
                                          s2))))))

(assert (forall ( (x TRAIN)
                  (s1 (set TRAIN))
                  (s2 (set TRAIN)) )
                (= (elem@@TRAIN x
                                (intersect@@TRAIN s1
                                                  s2))
                   (and (elem@@TRAIN x
                                     s1)
                        (elem@@TRAIN x
                                     s2)))))

(assert (forall ( (x TRAIN)
                  (s1 (set TRAIN))
                  (s2 (set TRAIN)) )
                (= (elem@@TRAIN x
                                (bunion@@TRAIN s1
                                               s2))
                   (or (elem@@TRAIN x
                                    s1)
                       (elem@@TRAIN x
                                    s2)))))

(assert (forall ( (x TRAIN)
                  (s1 (set TRAIN))
                  (s2 (set TRAIN)) )
                (not (elem@@TRAIN x
                                  empty-set@@TRAIN))))

(assert (forall ( (f1 (pfun TRAIN
                            BLK))
                  (f2 (pfun TRAIN
                            BLK)) )
                (= (bunion@@TRAIN (dom@@TRAIN@@BLK f1)
                                  (dom@@TRAIN@@BLK f2))
                   (dom@@TRAIN@@BLK (ovl@@TRAIN@@BLK f1
                                                     f2)))))

(assert (= (dom@@TRAIN@@BLK empty-fun@@TRAIN@@BLK)
           empty-set@@TRAIN))

(assert (forall ( (x TRAIN)
                  (y BLK) )
                (= (dom@@TRAIN@@BLK (mk-fun@@TRAIN@@BLK x
                                                        y))
                   (mk-set@@TRAIN x))))

(assert (forall ( (f1 (pfun TRAIN
                            BLK))
                  (f2 (pfun TRAIN
                            BLK))
                  (x TRAIN) )
                (=> (elem@@TRAIN x
                                 (dom@@TRAIN@@BLK f2))
                    (= (select (ovl@@TRAIN@@BLK f1
                                                f2)
                               x)
                       (select f2
                               x)))))

(assert (forall ( (f1 (pfun TRAIN
                            BLK))
                  (f2 (pfun TRAIN
                            BLK))
                  (x TRAIN) )
                (=> (elem@@TRAIN x
                                 (set-diff@@TRAIN (dom@@TRAIN@@BLK f1)
                                                  (dom@@TRAIN@@BLK f2)))
                    (= (select (ovl@@TRAIN@@BLK f1
                                                f2)
                               x)
                       (select f1
                               x)))))

(assert (forall ( (f1 (pfun TRAIN
                            BLK))
                  (s1 (set TRAIN)) )
                (= (dom@@TRAIN@@BLK (dom-subt@@TRAIN@@BLK s1
                                                          f1))
                   (set-diff@@TRAIN (dom@@TRAIN@@BLK f1)
                                    s1))))

(assert (forall ( (x TRAIN)
                  (y BLK) )
                (= (select (mk-fun@@TRAIN@@BLK x
                                               y)
                           x)
                   y)))

(assert (forall ( (f1 (pfun TRAIN
                            BLK))
                  (s1 (set TRAIN))
                  (x TRAIN) )
                (=> (elem@@TRAIN x
                                 (intersect@@TRAIN s1
                                                   (dom@@TRAIN@@BLK f1)))
                    (= (select (dom-rest@@TRAIN@@BLK s1
                                                     f1)
                               x)
                       (select f1
                               x)))))

(assert (forall ( (f1 (pfun TRAIN
                            BLK))
                  (s1 (set TRAIN))
                  (x TRAIN) )
                (=> (elem@@TRAIN x
                                 (set-diff@@TRAIN (dom@@TRAIN@@BLK f1)
                                                  s1))
                    (= (select (dom-subt@@TRAIN@@BLK s1
                                                     f1)
                               x)
                       (select f1
                               x)))))

(assert (forall ( (x (pfun TRAIN
                           BLK))
                  (y (pfun TRAIN
                           BLK)) )
                (= (elem@Open@@pfun@@TRAIN@@BLK@Close x
                                                      (mk-set@Open@@pfun@@TRAIN@@BLK@Close y))
                   (= x
                      y))))

(assert (forall ( (x (pfun TRAIN
                           BLK))
                  (s1 (set (pfun TRAIN
                                 BLK)))
                  (s2 (set (pfun TRAIN
                                 BLK))) )
                (= (elem@Open@@pfun@@TRAIN@@BLK@Close x
                                                      (set-diff@Open@@pfun@@TRAIN@@BLK@Close s1
                                                                                             s2))
                   (and (elem@Open@@pfun@@TRAIN@@BLK@Close x
                                                           s1)
                        (not (elem@Open@@pfun@@TRAIN@@BLK@Close x
                                                                s2))))))

(assert (forall ( (x (pfun TRAIN
                           BLK))
                  (s1 (set (pfun TRAIN
                                 BLK)))
                  (s2 (set (pfun TRAIN
                                 BLK))) )
                (= (elem@Open@@pfun@@TRAIN@@BLK@Close x
                                                      (intersect@Open@@pfun@@TRAIN@@BLK@Close s1
                                                                                              s2))
                   (and (elem@Open@@pfun@@TRAIN@@BLK@Close x
                                                           s1)
                        (elem@Open@@pfun@@TRAIN@@BLK@Close x
                                                           s2)))))

(assert (forall ( (x (pfun TRAIN
                           BLK))
                  (s1 (set (pfun TRAIN
                                 BLK)))
                  (s2 (set (pfun TRAIN
                                 BLK))) )
                (= (elem@Open@@pfun@@TRAIN@@BLK@Close x
                                                      (bunion@Open@@pfun@@TRAIN@@BLK@Close s1
                                                                                           s2))
                   (or (elem@Open@@pfun@@TRAIN@@BLK@Close x
                                                          s1)
                       (elem@Open@@pfun@@TRAIN@@BLK@Close x
                                                          s2)))))

(assert (forall ( (x (pfun TRAIN
                           BLK))
                  (s1 (set (pfun TRAIN
                                 BLK)))
                  (s2 (set (pfun TRAIN
                                 BLK))) )
                (not (elem@Open@@pfun@@TRAIN@@BLK@Close x
                                                        empty-set@Open@@pfun@@TRAIN@@BLK@Close))))

(assert (and (not (= ent
                     ext))
             (not (elem@@BLK ent
                             PLF))
             (not (elem@@BLK ext
                             PLF))))

(assert (forall ( (p BLK) )
                (=> true
                    (= (not (= p
                               ext))
                       (elem@@BLK p
                                  (bunion@@BLK (mk-set@@BLK ent)
                                               PLF))))))

(assert (forall ( (p BLK) )
                (=> true
                    (= (not (= p
                               ent))
                       (elem@@BLK p
                                  (bunion@@BLK (mk-set@@BLK ext)
                                               PLF))))))

(assert (forall ( (p BLK) )
                (=> true
                    (= (or (= p
                              ent)
                           (= p
                              ext))
                       (not (elem@@BLK p
                                       PLF))))))

(assert (= BLK
           (bunion@@BLK (bunion@@BLK (mk-set@@BLK ent)
                                     (mk-set@@BLK ext))
                        PLF)))

(assert (not (= (elem@@TRAIN t_0
                             in@prime)
                true)))

(check-sat-using (or-else (then qe smt) (then skip smt) (then (using-params simplify :expand-power true) smt)))

(pop)
(echo "> train0/enter/CO/co1/part 1/step (221,2)")
(push)
(declare-sort BLK 0)
(declare-sort LOC 0)
(declare-sort TRAIN 0)
(define-sort pfun (a b) (Array a b))
(declare-sort set 1)
(declare-const PLF (set BLK))
(declare-const BLK (set BLK))
(declare-const LOC (set LOC))
(declare-const TRAIN (set TRAIN))
(declare-const ent BLK)
(declare-const ext BLK)
(declare-const in (set TRAIN))
(declare-const in@prime (set TRAIN))
(declare-const loc (pfun TRAIN BLK))
(declare-const loc@prime (pfun TRAIN BLK))
(declare-const p BLK)
(declare-const q BLK)
(declare-const t TRAIN)
(declare-const t_0 TRAIN)
(declare-const t_1 TRAIN)
(declare-const t_2 TRAIN)
(declare-const t_3 TRAIN)
(declare-fun apply@@TRAIN@@BLK ((pfun TRAIN BLK) TRAIN) BLK)
(declare-fun dom-rest@@TRAIN@@BLK ((set TRAIN) (pfun TRAIN BLK)) (pfun TRAIN BLK))
(declare-fun dom-subt@@TRAIN@@BLK ((set TRAIN) (pfun TRAIN BLK)) (pfun TRAIN BLK))
(declare-fun dom@@TRAIN@@BLK ((pfun TRAIN BLK)) (set TRAIN))
(declare-fun elem@@BLK (BLK (set BLK)) Bool)
(declare-fun elem@@LOC (LOC (set LOC)) Bool)
(declare-fun elem@@TRAIN (TRAIN (set TRAIN)) Bool)
(declare-fun elem@Open@@pfun@@TRAIN@@BLK@Close ((pfun TRAIN BLK) (set (pfun TRAIN BLK))) Bool)
(declare-fun empty-fun@@TRAIN@@BLK () (pfun TRAIN BLK))
(declare-fun empty-set@@BLK () (set BLK))
(declare-fun empty-set@@LOC () (set LOC))
(declare-fun empty-set@@TRAIN () (set TRAIN))
(declare-fun empty-set@Open@@pfun@@TRAIN@@BLK@Close () (set (pfun TRAIN BLK)))
(declare-fun intersect@@BLK ((set BLK) (set BLK)) (set BLK))
(declare-fun intersect@@LOC ((set LOC) (set LOC)) (set LOC))
(declare-fun intersect@@TRAIN ((set TRAIN) (set TRAIN)) (set TRAIN))
(declare-fun intersect@Open@@pfun@@TRAIN@@BLK@Close ((set (pfun TRAIN BLK)) (set (pfun TRAIN BLK))) (set (pfun TRAIN BLK)))
(declare-fun mk-fun@@TRAIN@@BLK (TRAIN BLK) (pfun TRAIN BLK))
(declare-fun mk-set@@BLK (BLK) (set BLK))
(declare-fun mk-set@@LOC (LOC) (set LOC))
(declare-fun mk-set@@TRAIN (TRAIN) (set TRAIN))
(declare-fun mk-set@Open@@pfun@@TRAIN@@BLK@Close ((pfun TRAIN BLK)) (set (pfun TRAIN BLK)))
(declare-fun ovl@@TRAIN@@BLK ((pfun TRAIN BLK) (pfun TRAIN BLK)) (pfun TRAIN BLK))
(declare-fun set-diff@@BLK ((set BLK) (set BLK)) (set BLK))
(declare-fun set-diff@@LOC ((set LOC) (set LOC)) (set LOC))
(declare-fun set-diff@@TRAIN ((set TRAIN) (set TRAIN)) (set TRAIN))
(declare-fun set-diff@Open@@pfun@@TRAIN@@BLK@Close ((set (pfun TRAIN BLK)) (set (pfun TRAIN BLK))) (set (pfun TRAIN BLK)))
(declare-fun tfun@@TRAIN@@BLK ((set TRAIN) (set BLK)) (set (pfun TRAIN BLK)))
(declare-fun bunion@@BLK ((set BLK) (set BLK)) (set BLK))
(declare-fun bunion@@LOC ((set LOC) (set LOC)) (set LOC))
(declare-fun bunion@@TRAIN ((set TRAIN) (set TRAIN)) (set TRAIN))
(declare-fun bunion@Open@@pfun@@TRAIN@@BLK@Close ((set (pfun TRAIN BLK)) (set (pfun TRAIN BLK))) (set (pfun TRAIN BLK)))
(assert (= in@prime
           (bunion@@TRAIN in
                          (mk-set@@TRAIN t))))

(assert (forall ( (x BLK)
                  (y BLK) )
                (= (elem@@BLK x
                              (mk-set@@BLK y))
                   (= x
                      y))))

(assert (forall ( (x BLK)
                  (s1 (set BLK))
                  (s2 (set BLK)) )
                (= (elem@@BLK x
                              (set-diff@@BLK s1
                                             s2))
                   (and (elem@@BLK x
                                   s1)
                        (not (elem@@BLK x
                                        s2))))))

(assert (forall ( (x BLK)
                  (s1 (set BLK))
                  (s2 (set BLK)) )
                (= (elem@@BLK x
                              (intersect@@BLK s1
                                              s2))
                   (and (elem@@BLK x
                                   s1)
                        (elem@@BLK x
                                   s2)))))

(assert (forall ( (x BLK)
                  (s1 (set BLK))
                  (s2 (set BLK)) )
                (= (elem@@BLK x
                              (bunion@@BLK s1
                                           s2))
                   (or (elem@@BLK x
                                  s1)
                       (elem@@BLK x
                                  s2)))))

(assert (forall ( (x BLK)
                  (s1 (set BLK))
                  (s2 (set BLK)) )
                (not (elem@@BLK x
                                empty-set@@BLK))))

(assert (forall ( (x LOC)
                  (y LOC) )
                (= (elem@@LOC x
                              (mk-set@@LOC y))
                   (= x
                      y))))

(assert (forall ( (x LOC)
                  (s1 (set LOC))
                  (s2 (set LOC)) )
                (= (elem@@LOC x
                              (set-diff@@LOC s1
                                             s2))
                   (and (elem@@LOC x
                                   s1)
                        (not (elem@@LOC x
                                        s2))))))

(assert (forall ( (x LOC)
                  (s1 (set LOC))
                  (s2 (set LOC)) )
                (= (elem@@LOC x
                              (intersect@@LOC s1
                                              s2))
                   (and (elem@@LOC x
                                   s1)
                        (elem@@LOC x
                                   s2)))))

(assert (forall ( (x LOC)
                  (s1 (set LOC))
                  (s2 (set LOC)) )
                (= (elem@@LOC x
                              (bunion@@LOC s1
                                           s2))
                   (or (elem@@LOC x
                                  s1)
                       (elem@@LOC x
                                  s2)))))

(assert (forall ( (x LOC)
                  (s1 (set LOC))
                  (s2 (set LOC)) )
                (not (elem@@LOC x
                                empty-set@@LOC))))

(assert (forall ( (x TRAIN)
                  (y TRAIN) )
                (= (elem@@TRAIN x
                                (mk-set@@TRAIN y))
                   (= x
                      y))))

(assert (forall ( (x TRAIN)
                  (s1 (set TRAIN))
                  (s2 (set TRAIN)) )
                (= (elem@@TRAIN x
                                (set-diff@@TRAIN s1
                                                 s2))
                   (and (elem@@TRAIN x
                                     s1)
                        (not (elem@@TRAIN x
                                          s2))))))

(assert (forall ( (x TRAIN)
                  (s1 (set TRAIN))
                  (s2 (set TRAIN)) )
                (= (elem@@TRAIN x
                                (intersect@@TRAIN s1
                                                  s2))
                   (and (elem@@TRAIN x
                                     s1)
                        (elem@@TRAIN x
                                     s2)))))

(assert (forall ( (x TRAIN)
                  (s1 (set TRAIN))
                  (s2 (set TRAIN)) )
                (= (elem@@TRAIN x
                                (bunion@@TRAIN s1
                                               s2))
                   (or (elem@@TRAIN x
                                    s1)
                       (elem@@TRAIN x
                                    s2)))))

(assert (forall ( (x TRAIN)
                  (s1 (set TRAIN))
                  (s2 (set TRAIN)) )
                (not (elem@@TRAIN x
                                  empty-set@@TRAIN))))

(assert (forall ( (f1 (pfun TRAIN
                            BLK))
                  (f2 (pfun TRAIN
                            BLK)) )
                (= (bunion@@TRAIN (dom@@TRAIN@@BLK f1)
                                  (dom@@TRAIN@@BLK f2))
                   (dom@@TRAIN@@BLK (ovl@@TRAIN@@BLK f1
                                                     f2)))))

(assert (= (dom@@TRAIN@@BLK empty-fun@@TRAIN@@BLK)
           empty-set@@TRAIN))

(assert (forall ( (x TRAIN)
                  (y BLK) )
                (= (dom@@TRAIN@@BLK (mk-fun@@TRAIN@@BLK x
                                                        y))
                   (mk-set@@TRAIN x))))

(assert (forall ( (f1 (pfun TRAIN
                            BLK))
                  (f2 (pfun TRAIN
                            BLK))
                  (x TRAIN) )
                (=> (elem@@TRAIN x
                                 (dom@@TRAIN@@BLK f2))
                    (= (select (ovl@@TRAIN@@BLK f1
                                                f2)
                               x)
                       (select f2
                               x)))))

(assert (forall ( (f1 (pfun TRAIN
                            BLK))
                  (f2 (pfun TRAIN
                            BLK))
                  (x TRAIN) )
                (=> (elem@@TRAIN x
                                 (set-diff@@TRAIN (dom@@TRAIN@@BLK f1)
                                                  (dom@@TRAIN@@BLK f2)))
                    (= (select (ovl@@TRAIN@@BLK f1
                                                f2)
                               x)
                       (select f1
                               x)))))

(assert (forall ( (f1 (pfun TRAIN
                            BLK))
                  (s1 (set TRAIN)) )
                (= (dom@@TRAIN@@BLK (dom-subt@@TRAIN@@BLK s1
                                                          f1))
                   (set-diff@@TRAIN (dom@@TRAIN@@BLK f1)
                                    s1))))

(assert (forall ( (x TRAIN)
                  (y BLK) )
                (= (select (mk-fun@@TRAIN@@BLK x
                                               y)
                           x)
                   y)))

(assert (forall ( (f1 (pfun TRAIN
                            BLK))
                  (s1 (set TRAIN))
                  (x TRAIN) )
                (=> (elem@@TRAIN x
                                 (intersect@@TRAIN s1
                                                   (dom@@TRAIN@@BLK f1)))
                    (= (select (dom-rest@@TRAIN@@BLK s1
                                                     f1)
                               x)
                       (select f1
                               x)))))

(assert (forall ( (f1 (pfun TRAIN
                            BLK))
                  (s1 (set TRAIN))
                  (x TRAIN) )
                (=> (elem@@TRAIN x
                                 (set-diff@@TRAIN (dom@@TRAIN@@BLK f1)
                                                  s1))
                    (= (select (dom-subt@@TRAIN@@BLK s1
                                                     f1)
                               x)
                       (select f1
                               x)))))

(assert (forall ( (x (pfun TRAIN
                           BLK))
                  (y (pfun TRAIN
                           BLK)) )
                (= (elem@Open@@pfun@@TRAIN@@BLK@Close x
                                                      (mk-set@Open@@pfun@@TRAIN@@BLK@Close y))
                   (= x
                      y))))

(assert (forall ( (x (pfun TRAIN
                           BLK))
                  (s1 (set (pfun TRAIN
                                 BLK)))
                  (s2 (set (pfun TRAIN
                                 BLK))) )
                (= (elem@Open@@pfun@@TRAIN@@BLK@Close x
                                                      (set-diff@Open@@pfun@@TRAIN@@BLK@Close s1
                                                                                             s2))
                   (and (elem@Open@@pfun@@TRAIN@@BLK@Close x
                                                           s1)
                        (not (elem@Open@@pfun@@TRAIN@@BLK@Close x
                                                                s2))))))

(assert (forall ( (x (pfun TRAIN
                           BLK))
                  (s1 (set (pfun TRAIN
                                 BLK)))
                  (s2 (set (pfun TRAIN
                                 BLK))) )
                (= (elem@Open@@pfun@@TRAIN@@BLK@Close x
                                                      (intersect@Open@@pfun@@TRAIN@@BLK@Close s1
                                                                                              s2))
                   (and (elem@Open@@pfun@@TRAIN@@BLK@Close x
                                                           s1)
                        (elem@Open@@pfun@@TRAIN@@BLK@Close x
                                                           s2)))))

(assert (forall ( (x (pfun TRAIN
                           BLK))
                  (s1 (set (pfun TRAIN
                                 BLK)))
                  (s2 (set (pfun TRAIN
                                 BLK))) )
                (= (elem@Open@@pfun@@TRAIN@@BLK@Close x
                                                      (bunion@Open@@pfun@@TRAIN@@BLK@Close s1
                                                                                           s2))
                   (or (elem@Open@@pfun@@TRAIN@@BLK@Close x
                                                          s1)
                       (elem@Open@@pfun@@TRAIN@@BLK@Close x
                                                          s2)))))

(assert (forall ( (x (pfun TRAIN
                           BLK))
                  (s1 (set (pfun TRAIN
                                 BLK)))
                  (s2 (set (pfun TRAIN
                                 BLK))) )
                (not (elem@Open@@pfun@@TRAIN@@BLK@Close x
                                                        empty-set@Open@@pfun@@TRAIN@@BLK@Close))))

(assert (and (not (= ent
                     ext))
             (not (elem@@BLK ent
                             PLF))
             (not (elem@@BLK ext
                             PLF))))

(assert (forall ( (p BLK) )
                (=> true
                    (= (not (= p
                               ext))
                       (elem@@BLK p
                                  (bunion@@BLK (mk-set@@BLK ent)
                                               PLF))))))

(assert (forall ( (p BLK) )
                (=> true
                    (= (not (= p
                               ent))
                       (elem@@BLK p
                                  (bunion@@BLK (mk-set@@BLK ext)
                                               PLF))))))

(assert (forall ( (p BLK) )
                (=> true
                    (= (or (= p
                              ent)
                           (= p
                              ext))
                       (not (elem@@BLK p
                                       PLF))))))

(assert (= BLK
           (bunion@@BLK (bunion@@BLK (mk-set@@BLK ent)
                                     (mk-set@@BLK ext))
                        PLF)))

(assert (not (= (elem@@TRAIN t_0
                             in@prime)
                (elem@@TRAIN t_0
                             (bunion@@TRAIN in
                                            (mk-set@@TRAIN t))))))

(check-sat-using (or-else (then qe smt) (then skip smt) (then (using-params simplify :expand-power true) smt)))

(pop)
(echo "> train0/enter/CO/co1/part 1/step (223,2)")
(push)
(declare-sort BLK 0)
(declare-sort LOC 0)
(declare-sort TRAIN 0)
(define-sort pfun (a b) (Array a b))
(declare-sort set 1)
(declare-const PLF (set BLK))
(declare-const BLK (set BLK))
(declare-const LOC (set LOC))
(declare-const TRAIN (set TRAIN))
(declare-const ent BLK)
(declare-const ext BLK)
(declare-const in (set TRAIN))
(declare-const in@prime (set TRAIN))
(declare-const loc (pfun TRAIN BLK))
(declare-const loc@prime (pfun TRAIN BLK))
(declare-const p BLK)
(declare-const q BLK)
(declare-const t TRAIN)
(declare-const t_0 TRAIN)
(declare-const t_1 TRAIN)
(declare-const t_2 TRAIN)
(declare-const t_3 TRAIN)
(declare-fun apply@@TRAIN@@BLK ((pfun TRAIN BLK) TRAIN) BLK)
(declare-fun dom-rest@@TRAIN@@BLK ((set TRAIN) (pfun TRAIN BLK)) (pfun TRAIN BLK))
(declare-fun dom-subt@@TRAIN@@BLK ((set TRAIN) (pfun TRAIN BLK)) (pfun TRAIN BLK))
(declare-fun dom@@TRAIN@@BLK ((pfun TRAIN BLK)) (set TRAIN))
(declare-fun elem@@BLK (BLK (set BLK)) Bool)
(declare-fun elem@@LOC (LOC (set LOC)) Bool)
(declare-fun elem@@TRAIN (TRAIN (set TRAIN)) Bool)
(declare-fun elem@Open@@pfun@@TRAIN@@BLK@Close ((pfun TRAIN BLK) (set (pfun TRAIN BLK))) Bool)
(declare-fun empty-fun@@TRAIN@@BLK () (pfun TRAIN BLK))
(declare-fun empty-set@@BLK () (set BLK))
(declare-fun empty-set@@LOC () (set LOC))
(declare-fun empty-set@@TRAIN () (set TRAIN))
(declare-fun empty-set@Open@@pfun@@TRAIN@@BLK@Close () (set (pfun TRAIN BLK)))
(declare-fun intersect@@BLK ((set BLK) (set BLK)) (set BLK))
(declare-fun intersect@@LOC ((set LOC) (set LOC)) (set LOC))
(declare-fun intersect@@TRAIN ((set TRAIN) (set TRAIN)) (set TRAIN))
(declare-fun intersect@Open@@pfun@@TRAIN@@BLK@Close ((set (pfun TRAIN BLK)) (set (pfun TRAIN BLK))) (set (pfun TRAIN BLK)))
(declare-fun mk-fun@@TRAIN@@BLK (TRAIN BLK) (pfun TRAIN BLK))
(declare-fun mk-set@@BLK (BLK) (set BLK))
(declare-fun mk-set@@LOC (LOC) (set LOC))
(declare-fun mk-set@@TRAIN (TRAIN) (set TRAIN))
(declare-fun mk-set@Open@@pfun@@TRAIN@@BLK@Close ((pfun TRAIN BLK)) (set (pfun TRAIN BLK)))
(declare-fun ovl@@TRAIN@@BLK ((pfun TRAIN BLK) (pfun TRAIN BLK)) (pfun TRAIN BLK))
(declare-fun set-diff@@BLK ((set BLK) (set BLK)) (set BLK))
(declare-fun set-diff@@LOC ((set LOC) (set LOC)) (set LOC))
(declare-fun set-diff@@TRAIN ((set TRAIN) (set TRAIN)) (set TRAIN))
(declare-fun set-diff@Open@@pfun@@TRAIN@@BLK@Close ((set (pfun TRAIN BLK)) (set (pfun TRAIN BLK))) (set (pfun TRAIN BLK)))
(declare-fun tfun@@TRAIN@@BLK ((set TRAIN) (set BLK)) (set (pfun TRAIN BLK)))
(declare-fun bunion@@BLK ((set BLK) (set BLK)) (set BLK))
(declare-fun bunion@@LOC ((set LOC) (set LOC)) (set LOC))
(declare-fun bunion@@TRAIN ((set TRAIN) (set TRAIN)) (set TRAIN))
(declare-fun bunion@Open@@pfun@@TRAIN@@BLK@Close ((set (pfun TRAIN BLK)) (set (pfun TRAIN BLK))) (set (pfun TRAIN BLK)))
(assert (elem@@TRAIN t_0
                     in))

(assert (forall ( (x BLK)
                  (y BLK) )
                (= (elem@@BLK x
                              (mk-set@@BLK y))
                   (= x
                      y))))

(assert (forall ( (x BLK)
                  (s1 (set BLK))
                  (s2 (set BLK)) )
                (= (elem@@BLK x
                              (set-diff@@BLK s1
                                             s2))
                   (and (elem@@BLK x
                                   s1)
                        (not (elem@@BLK x
                                        s2))))))

(assert (forall ( (x BLK)
                  (s1 (set BLK))
                  (s2 (set BLK)) )
                (= (elem@@BLK x
                              (intersect@@BLK s1
                                              s2))
                   (and (elem@@BLK x
                                   s1)
                        (elem@@BLK x
                                   s2)))))

(assert (forall ( (x BLK)
                  (s1 (set BLK))
                  (s2 (set BLK)) )
                (= (elem@@BLK x
                              (bunion@@BLK s1
                                           s2))
                   (or (elem@@BLK x
                                  s1)
                       (elem@@BLK x
                                  s2)))))

(assert (forall ( (x BLK)
                  (s1 (set BLK))
                  (s2 (set BLK)) )
                (not (elem@@BLK x
                                empty-set@@BLK))))

(assert (forall ( (x LOC)
                  (y LOC) )
                (= (elem@@LOC x
                              (mk-set@@LOC y))
                   (= x
                      y))))

(assert (forall ( (x LOC)
                  (s1 (set LOC))
                  (s2 (set LOC)) )
                (= (elem@@LOC x
                              (set-diff@@LOC s1
                                             s2))
                   (and (elem@@LOC x
                                   s1)
                        (not (elem@@LOC x
                                        s2))))))

(assert (forall ( (x LOC)
                  (s1 (set LOC))
                  (s2 (set LOC)) )
                (= (elem@@LOC x
                              (intersect@@LOC s1
                                              s2))
                   (and (elem@@LOC x
                                   s1)
                        (elem@@LOC x
                                   s2)))))

(assert (forall ( (x LOC)
                  (s1 (set LOC))
                  (s2 (set LOC)) )
                (= (elem@@LOC x
                              (bunion@@LOC s1
                                           s2))
                   (or (elem@@LOC x
                                  s1)
                       (elem@@LOC x
                                  s2)))))

(assert (forall ( (x LOC)
                  (s1 (set LOC))
                  (s2 (set LOC)) )
                (not (elem@@LOC x
                                empty-set@@LOC))))

(assert (forall ( (x TRAIN)
                  (y TRAIN) )
                (= (elem@@TRAIN x
                                (mk-set@@TRAIN y))
                   (= x
                      y))))

(assert (forall ( (x TRAIN)
                  (s1 (set TRAIN))
                  (s2 (set TRAIN)) )
                (= (elem@@TRAIN x
                                (set-diff@@TRAIN s1
                                                 s2))
                   (and (elem@@TRAIN x
                                     s1)
                        (not (elem@@TRAIN x
                                          s2))))))

(assert (forall ( (x TRAIN)
                  (s1 (set TRAIN))
                  (s2 (set TRAIN)) )
                (= (elem@@TRAIN x
                                (intersect@@TRAIN s1
                                                  s2))
                   (and (elem@@TRAIN x
                                     s1)
                        (elem@@TRAIN x
                                     s2)))))

(assert (forall ( (x TRAIN)
                  (s1 (set TRAIN))
                  (s2 (set TRAIN)) )
                (= (elem@@TRAIN x
                                (bunion@@TRAIN s1
                                               s2))
                   (or (elem@@TRAIN x
                                    s1)
                       (elem@@TRAIN x
                                    s2)))))

(assert (forall ( (x TRAIN)
                  (s1 (set TRAIN))
                  (s2 (set TRAIN)) )
                (not (elem@@TRAIN x
                                  empty-set@@TRAIN))))

(assert (forall ( (f1 (pfun TRAIN
                            BLK))
                  (f2 (pfun TRAIN
                            BLK)) )
                (= (bunion@@TRAIN (dom@@TRAIN@@BLK f1)
                                  (dom@@TRAIN@@BLK f2))
                   (dom@@TRAIN@@BLK (ovl@@TRAIN@@BLK f1
                                                     f2)))))

(assert (= (dom@@TRAIN@@BLK empty-fun@@TRAIN@@BLK)
           empty-set@@TRAIN))

(assert (forall ( (x TRAIN)
                  (y BLK) )
                (= (dom@@TRAIN@@BLK (mk-fun@@TRAIN@@BLK x
                                                        y))
                   (mk-set@@TRAIN x))))

(assert (forall ( (f1 (pfun TRAIN
                            BLK))
                  (f2 (pfun TRAIN
                            BLK))
                  (x TRAIN) )
                (=> (elem@@TRAIN x
                                 (dom@@TRAIN@@BLK f2))
                    (= (select (ovl@@TRAIN@@BLK f1
                                                f2)
                               x)
                       (select f2
                               x)))))

(assert (forall ( (f1 (pfun TRAIN
                            BLK))
                  (f2 (pfun TRAIN
                            BLK))
                  (x TRAIN) )
                (=> (elem@@TRAIN x
                                 (set-diff@@TRAIN (dom@@TRAIN@@BLK f1)
                                                  (dom@@TRAIN@@BLK f2)))
                    (= (select (ovl@@TRAIN@@BLK f1
                                                f2)
                               x)
                       (select f1
                               x)))))

(assert (forall ( (f1 (pfun TRAIN
                            BLK))
                  (s1 (set TRAIN)) )
                (= (dom@@TRAIN@@BLK (dom-subt@@TRAIN@@BLK s1
                                                          f1))
                   (set-diff@@TRAIN (dom@@TRAIN@@BLK f1)
                                    s1))))

(assert (forall ( (x TRAIN)
                  (y BLK) )
                (= (select (mk-fun@@TRAIN@@BLK x
                                               y)
                           x)
                   y)))

(assert (forall ( (f1 (pfun TRAIN
                            BLK))
                  (s1 (set TRAIN))
                  (x TRAIN) )
                (=> (elem@@TRAIN x
                                 (intersect@@TRAIN s1
                                                   (dom@@TRAIN@@BLK f1)))
                    (= (select (dom-rest@@TRAIN@@BLK s1
                                                     f1)
                               x)
                       (select f1
                               x)))))

(assert (forall ( (f1 (pfun TRAIN
                            BLK))
                  (s1 (set TRAIN))
                  (x TRAIN) )
                (=> (elem@@TRAIN x
                                 (set-diff@@TRAIN (dom@@TRAIN@@BLK f1)
                                                  s1))
                    (= (select (dom-subt@@TRAIN@@BLK s1
                                                     f1)
                               x)
                       (select f1
                               x)))))

(assert (forall ( (x (pfun TRAIN
                           BLK))
                  (y (pfun TRAIN
                           BLK)) )
                (= (elem@Open@@pfun@@TRAIN@@BLK@Close x
                                                      (mk-set@Open@@pfun@@TRAIN@@BLK@Close y))
                   (= x
                      y))))

(assert (forall ( (x (pfun TRAIN
                           BLK))
                  (s1 (set (pfun TRAIN
                                 BLK)))
                  (s2 (set (pfun TRAIN
                                 BLK))) )
                (= (elem@Open@@pfun@@TRAIN@@BLK@Close x
                                                      (set-diff@Open@@pfun@@TRAIN@@BLK@Close s1
                                                                                             s2))
                   (and (elem@Open@@pfun@@TRAIN@@BLK@Close x
                                                           s1)
                        (not (elem@Open@@pfun@@TRAIN@@BLK@Close x
                                                                s2))))))

(assert (forall ( (x (pfun TRAIN
                           BLK))
                  (s1 (set (pfun TRAIN
                                 BLK)))
                  (s2 (set (pfun TRAIN
                                 BLK))) )
                (= (elem@Open@@pfun@@TRAIN@@BLK@Close x
                                                      (intersect@Open@@pfun@@TRAIN@@BLK@Close s1
                                                                                              s2))
                   (and (elem@Open@@pfun@@TRAIN@@BLK@Close x
                                                           s1)
                        (elem@Open@@pfun@@TRAIN@@BLK@Close x
                                                           s2)))))

(assert (forall ( (x (pfun TRAIN
                           BLK))
                  (s1 (set (pfun TRAIN
                                 BLK)))
                  (s2 (set (pfun TRAIN
                                 BLK))) )
                (= (elem@Open@@pfun@@TRAIN@@BLK@Close x
                                                      (bunion@Open@@pfun@@TRAIN@@BLK@Close s1
                                                                                           s2))
                   (or (elem@Open@@pfun@@TRAIN@@BLK@Close x
                                                          s1)
                       (elem@Open@@pfun@@TRAIN@@BLK@Close x
                                                          s2)))))

(assert (forall ( (x (pfun TRAIN
                           BLK))
                  (s1 (set (pfun TRAIN
                                 BLK)))
                  (s2 (set (pfun TRAIN
                                 BLK))) )
                (not (elem@Open@@pfun@@TRAIN@@BLK@Close x
                                                        empty-set@Open@@pfun@@TRAIN@@BLK@Close))))

(assert (and (not (= ent
                     ext))
             (not (elem@@BLK ent
                             PLF))
             (not (elem@@BLK ext
                             PLF))))

(assert (forall ( (p BLK) )
                (=> true
                    (= (not (= p
                               ext))
                       (elem@@BLK p
                                  (bunion@@BLK (mk-set@@BLK ent)
                                               PLF))))))

(assert (forall ( (p BLK) )
                (=> true
                    (= (not (= p
                               ent))
                       (elem@@BLK p
                                  (bunion@@BLK (mk-set@@BLK ext)
                                               PLF))))))

(assert (forall ( (p BLK) )
                (=> true
                    (= (or (= p
                              ent)
                           (= p
                              ext))
                       (not (elem@@BLK p
                                       PLF))))))

(assert (= BLK
           (bunion@@BLK (bunion@@BLK (mk-set@@BLK ent)
                                     (mk-set@@BLK ext))
                        PLF)))

(assert (not (= (elem@@TRAIN t_0
                             (bunion@@TRAIN in
                                            (mk-set@@TRAIN t)))
                true)))

(check-sat-using (or-else (then qe smt) (then skip smt) (then (using-params simplify :expand-power true) smt)))

(pop)
(echo "> train0/enter/CO/co1/part 2/case 1/goal (233,2)")
(push)
(declare-sort BLK 0)
(declare-sort LOC 0)
(declare-sort TRAIN 0)
(define-sort pfun (a b) (Array a b))
(declare-sort set 1)
(declare-const PLF (set BLK))
(declare-const BLK (set BLK))
(declare-const LOC (set LOC))
(declare-const TRAIN (set TRAIN))
(declare-const ent BLK)
(declare-const ext BLK)
(declare-const in (set TRAIN))
(declare-const in@prime (set TRAIN))
(declare-const loc (pfun TRAIN BLK))
(declare-const loc@prime (pfun TRAIN BLK))
(declare-const p BLK)
(declare-const q BLK)
(declare-const t TRAIN)
(declare-const t_0 TRAIN)
(declare-const t_1 TRAIN)
(declare-const t_2 TRAIN)
(declare-const t_3 TRAIN)
(declare-fun apply@@TRAIN@@BLK ((pfun TRAIN BLK) TRAIN) BLK)
(declare-fun dom-rest@@TRAIN@@BLK ((set TRAIN) (pfun TRAIN BLK)) (pfun TRAIN BLK))
(declare-fun dom-subt@@TRAIN@@BLK ((set TRAIN) (pfun TRAIN BLK)) (pfun TRAIN BLK))
(declare-fun dom@@TRAIN@@BLK ((pfun TRAIN BLK)) (set TRAIN))
(declare-fun elem@@BLK (BLK (set BLK)) Bool)
(declare-fun elem@@LOC (LOC (set LOC)) Bool)
(declare-fun elem@@TRAIN (TRAIN (set TRAIN)) Bool)
(declare-fun elem@Open@@pfun@@TRAIN@@BLK@Close ((pfun TRAIN BLK) (set (pfun TRAIN BLK))) Bool)
(declare-fun empty-fun@@TRAIN@@BLK () (pfun TRAIN BLK))
(declare-fun empty-set@@BLK () (set BLK))
(declare-fun empty-set@@LOC () (set LOC))
(declare-fun empty-set@@TRAIN () (set TRAIN))
(declare-fun empty-set@Open@@pfun@@TRAIN@@BLK@Close () (set (pfun TRAIN BLK)))
(declare-fun intersect@@BLK ((set BLK) (set BLK)) (set BLK))
(declare-fun intersect@@LOC ((set LOC) (set LOC)) (set LOC))
(declare-fun intersect@@TRAIN ((set TRAIN) (set TRAIN)) (set TRAIN))
(declare-fun intersect@Open@@pfun@@TRAIN@@BLK@Close ((set (pfun TRAIN BLK)) (set (pfun TRAIN BLK))) (set (pfun TRAIN BLK)))
(declare-fun mk-fun@@TRAIN@@BLK (TRAIN BLK) (pfun TRAIN BLK))
(declare-fun mk-set@@BLK (BLK) (set BLK))
(declare-fun mk-set@@LOC (LOC) (set LOC))
(declare-fun mk-set@@TRAIN (TRAIN) (set TRAIN))
(declare-fun mk-set@Open@@pfun@@TRAIN@@BLK@Close ((pfun TRAIN BLK)) (set (pfun TRAIN BLK)))
(declare-fun ovl@@TRAIN@@BLK ((pfun TRAIN BLK) (pfun TRAIN BLK)) (pfun TRAIN BLK))
(declare-fun set-diff@@BLK ((set BLK) (set BLK)) (set BLK))
(declare-fun set-diff@@LOC ((set LOC) (set LOC)) (set LOC))
(declare-fun set-diff@@TRAIN ((set TRAIN) (set TRAIN)) (set TRAIN))
(declare-fun set-diff@Open@@pfun@@TRAIN@@BLK@Close ((set (pfun TRAIN BLK)) (set (pfun TRAIN BLK))) (set (pfun TRAIN BLK)))
(declare-fun tfun@@TRAIN@@BLK ((set TRAIN) (set BLK)) (set (pfun TRAIN BLK)))
(declare-fun bunion@@BLK ((set BLK) (set BLK)) (set BLK))
(declare-fun bunion@@LOC ((set LOC) (set LOC)) (set LOC))
(declare-fun bunion@@TRAIN ((set TRAIN) (set TRAIN)) (set TRAIN))
(declare-fun bunion@Open@@pfun@@TRAIN@@BLK@Close ((set (pfun TRAIN BLK)) (set (pfun TRAIN BLK))) (set (pfun TRAIN BLK)))
(assert (= (= (select loc@prime
                      t_0)
              ent)
           true))

(assert (not (= (select loc@prime
                        t_0)
                ent)))

(check-sat-using (or-else (then qe smt) (then skip smt) (then (using-params simplify :expand-power true) smt)))

(pop)
(echo "> train0/enter/CO/co1/part 2/case 1/hypotheses (233,2)")
(push)
(declare-sort BLK 0)
(declare-sort LOC 0)
(declare-sort TRAIN 0)
(define-sort pfun (a b) (Array a b))
(declare-sort set 1)
(declare-const PLF (set BLK))
(declare-const BLK (set BLK))
(declare-const LOC (set LOC))
(declare-const TRAIN (set TRAIN))
(declare-const ent BLK)
(declare-const ext BLK)
(declare-const in (set TRAIN))
(declare-const in@prime (set TRAIN))
(declare-const loc (pfun TRAIN BLK))
(declare-const loc@prime (pfun TRAIN BLK))
(declare-const p BLK)
(declare-const q BLK)
(declare-const t TRAIN)
(declare-const t_0 TRAIN)
(declare-const t_1 TRAIN)
(declare-const t_2 TRAIN)
(declare-const t_3 TRAIN)
(declare-fun apply@@TRAIN@@BLK ((pfun TRAIN BLK) TRAIN) BLK)
(declare-fun dom-rest@@TRAIN@@BLK ((set TRAIN) (pfun TRAIN BLK)) (pfun TRAIN BLK))
(declare-fun dom-subt@@TRAIN@@BLK ((set TRAIN) (pfun TRAIN BLK)) (pfun TRAIN BLK))
(declare-fun dom@@TRAIN@@BLK ((pfun TRAIN BLK)) (set TRAIN))
(declare-fun elem@@BLK (BLK (set BLK)) Bool)
(declare-fun elem@@LOC (LOC (set LOC)) Bool)
(declare-fun elem@@TRAIN (TRAIN (set TRAIN)) Bool)
(declare-fun elem@Open@@pfun@@TRAIN@@BLK@Close ((pfun TRAIN BLK) (set (pfun TRAIN BLK))) Bool)
(declare-fun empty-fun@@TRAIN@@BLK () (pfun TRAIN BLK))
(declare-fun empty-set@@BLK () (set BLK))
(declare-fun empty-set@@LOC () (set LOC))
(declare-fun empty-set@@TRAIN () (set TRAIN))
(declare-fun empty-set@Open@@pfun@@TRAIN@@BLK@Close () (set (pfun TRAIN BLK)))
(declare-fun intersect@@BLK ((set BLK) (set BLK)) (set BLK))
(declare-fun intersect@@LOC ((set LOC) (set LOC)) (set LOC))
(declare-fun intersect@@TRAIN ((set TRAIN) (set TRAIN)) (set TRAIN))
(declare-fun intersect@Open@@pfun@@TRAIN@@BLK@Close ((set (pfun TRAIN BLK)) (set (pfun TRAIN BLK))) (set (pfun TRAIN BLK)))
(declare-fun mk-fun@@TRAIN@@BLK (TRAIN BLK) (pfun TRAIN BLK))
(declare-fun mk-set@@BLK (BLK) (set BLK))
(declare-fun mk-set@@LOC (LOC) (set LOC))
(declare-fun mk-set@@TRAIN (TRAIN) (set TRAIN))
(declare-fun mk-set@Open@@pfun@@TRAIN@@BLK@Close ((pfun TRAIN BLK)) (set (pfun TRAIN BLK)))
(declare-fun ovl@@TRAIN@@BLK ((pfun TRAIN BLK) (pfun TRAIN BLK)) (pfun TRAIN BLK))
(declare-fun set-diff@@BLK ((set BLK) (set BLK)) (set BLK))
(declare-fun set-diff@@LOC ((set LOC) (set LOC)) (set LOC))
(declare-fun set-diff@@TRAIN ((set TRAIN) (set TRAIN)) (set TRAIN))
(declare-fun set-diff@Open@@pfun@@TRAIN@@BLK@Close ((set (pfun TRAIN BLK)) (set (pfun TRAIN BLK))) (set (pfun TRAIN BLK)))
(declare-fun tfun@@TRAIN@@BLK ((set TRAIN) (set BLK)) (set (pfun TRAIN BLK)))
(declare-fun bunion@@BLK ((set BLK) (set BLK)) (set BLK))
(declare-fun bunion@@LOC ((set LOC) (set LOC)) (set LOC))
(declare-fun bunion@@TRAIN ((set TRAIN) (set TRAIN)) (set TRAIN))
(declare-fun bunion@Open@@pfun@@TRAIN@@BLK@Close ((set (pfun TRAIN BLK)) (set (pfun TRAIN BLK))) (set (pfun TRAIN BLK)))
(assert (= t_0
           t))

(assert (elem@@TRAIN t_0
                     in))

(assert (= (select loc
                   t_0)
           ent))

(assert (forall ( (x BLK)
                  (y BLK) )
                (= (elem@@BLK x
                              (mk-set@@BLK y))
                   (= x
                      y))))

(assert (forall ( (x BLK)
                  (s1 (set BLK))
                  (s2 (set BLK)) )
                (= (elem@@BLK x
                              (set-diff@@BLK s1
                                             s2))
                   (and (elem@@BLK x
                                   s1)
                        (not (elem@@BLK x
                                        s2))))))

(assert (forall ( (x BLK)
                  (s1 (set BLK))
                  (s2 (set BLK)) )
                (= (elem@@BLK x
                              (intersect@@BLK s1
                                              s2))
                   (and (elem@@BLK x
                                   s1)
                        (elem@@BLK x
                                   s2)))))

(assert (forall ( (x BLK)
                  (s1 (set BLK))
                  (s2 (set BLK)) )
                (= (elem@@BLK x
                              (bunion@@BLK s1
                                           s2))
                   (or (elem@@BLK x
                                  s1)
                       (elem@@BLK x
                                  s2)))))

(assert (forall ( (x BLK)
                  (s1 (set BLK))
                  (s2 (set BLK)) )
                (not (elem@@BLK x
                                empty-set@@BLK))))

(assert (forall ( (x LOC)
                  (y LOC) )
                (= (elem@@LOC x
                              (mk-set@@LOC y))
                   (= x
                      y))))

(assert (forall ( (x LOC)
                  (s1 (set LOC))
                  (s2 (set LOC)) )
                (= (elem@@LOC x
                              (set-diff@@LOC s1
                                             s2))
                   (and (elem@@LOC x
                                   s1)
                        (not (elem@@LOC x
                                        s2))))))

(assert (forall ( (x LOC)
                  (s1 (set LOC))
                  (s2 (set LOC)) )
                (= (elem@@LOC x
                              (intersect@@LOC s1
                                              s2))
                   (and (elem@@LOC x
                                   s1)
                        (elem@@LOC x
                                   s2)))))

(assert (forall ( (x LOC)
                  (s1 (set LOC))
                  (s2 (set LOC)) )
                (= (elem@@LOC x
                              (bunion@@LOC s1
                                           s2))
                   (or (elem@@LOC x
                                  s1)
                       (elem@@LOC x
                                  s2)))))

(assert (forall ( (x LOC)
                  (s1 (set LOC))
                  (s2 (set LOC)) )
                (not (elem@@LOC x
                                empty-set@@LOC))))

(assert (forall ( (x TRAIN)
                  (y TRAIN) )
                (= (elem@@TRAIN x
                                (mk-set@@TRAIN y))
                   (= x
                      y))))

(assert (forall ( (x TRAIN)
                  (s1 (set TRAIN))
                  (s2 (set TRAIN)) )
                (= (elem@@TRAIN x
                                (set-diff@@TRAIN s1
                                                 s2))
                   (and (elem@@TRAIN x
                                     s1)
                        (not (elem@@TRAIN x
                                          s2))))))

(assert (forall ( (x TRAIN)
                  (s1 (set TRAIN))
                  (s2 (set TRAIN)) )
                (= (elem@@TRAIN x
                                (intersect@@TRAIN s1
                                                  s2))
                   (and (elem@@TRAIN x
                                     s1)
                        (elem@@TRAIN x
                                     s2)))))

(assert (forall ( (x TRAIN)
                  (s1 (set TRAIN))
                  (s2 (set TRAIN)) )
                (= (elem@@TRAIN x
                                (bunion@@TRAIN s1
                                               s2))
                   (or (elem@@TRAIN x
                                    s1)
                       (elem@@TRAIN x
                                    s2)))))

(assert (forall ( (x TRAIN)
                  (s1 (set TRAIN))
                  (s2 (set TRAIN)) )
                (not (elem@@TRAIN x
                                  empty-set@@TRAIN))))

(assert (forall ( (f1 (pfun TRAIN
                            BLK))
                  (f2 (pfun TRAIN
                            BLK)) )
                (= (bunion@@TRAIN (dom@@TRAIN@@BLK f1)
                                  (dom@@TRAIN@@BLK f2))
                   (dom@@TRAIN@@BLK (ovl@@TRAIN@@BLK f1
                                                     f2)))))

(assert (= (dom@@TRAIN@@BLK empty-fun@@TRAIN@@BLK)
           empty-set@@TRAIN))

(assert (forall ( (x TRAIN)
                  (y BLK) )
                (= (dom@@TRAIN@@BLK (mk-fun@@TRAIN@@BLK x
                                                        y))
                   (mk-set@@TRAIN x))))

(assert (forall ( (f1 (pfun TRAIN
                            BLK))
                  (f2 (pfun TRAIN
                            BLK))
                  (x TRAIN) )
                (=> (elem@@TRAIN x
                                 (dom@@TRAIN@@BLK f2))
                    (= (select (ovl@@TRAIN@@BLK f1
                                                f2)
                               x)
                       (select f2
                               x)))))

(assert (forall ( (f1 (pfun TRAIN
                            BLK))
                  (f2 (pfun TRAIN
                            BLK))
                  (x TRAIN) )
                (=> (elem@@TRAIN x
                                 (set-diff@@TRAIN (dom@@TRAIN@@BLK f1)
                                                  (dom@@TRAIN@@BLK f2)))
                    (= (select (ovl@@TRAIN@@BLK f1
                                                f2)
                               x)
                       (select f1
                               x)))))

(assert (forall ( (f1 (pfun TRAIN
                            BLK))
                  (s1 (set TRAIN)) )
                (= (dom@@TRAIN@@BLK (dom-subt@@TRAIN@@BLK s1
                                                          f1))
                   (set-diff@@TRAIN (dom@@TRAIN@@BLK f1)
                                    s1))))

(assert (forall ( (x TRAIN)
                  (y BLK) )
                (= (select (mk-fun@@TRAIN@@BLK x
                                               y)
                           x)
                   y)))

(assert (forall ( (f1 (pfun TRAIN
                            BLK))
                  (s1 (set TRAIN))
                  (x TRAIN) )
                (=> (elem@@TRAIN x
                                 (intersect@@TRAIN s1
                                                   (dom@@TRAIN@@BLK f1)))
                    (= (select (dom-rest@@TRAIN@@BLK s1
                                                     f1)
                               x)
                       (select f1
                               x)))))

(assert (forall ( (f1 (pfun TRAIN
                            BLK))
                  (s1 (set TRAIN))
                  (x TRAIN) )
                (=> (elem@@TRAIN x
                                 (set-diff@@TRAIN (dom@@TRAIN@@BLK f1)
                                                  s1))
                    (= (select (dom-subt@@TRAIN@@BLK s1
                                                     f1)
                               x)
                       (select f1
                               x)))))

(assert (forall ( (x (pfun TRAIN
                           BLK))
                  (y (pfun TRAIN
                           BLK)) )
                (= (elem@Open@@pfun@@TRAIN@@BLK@Close x
                                                      (mk-set@Open@@pfun@@TRAIN@@BLK@Close y))
                   (= x
                      y))))

(assert (forall ( (x (pfun TRAIN
                           BLK))
                  (s1 (set (pfun TRAIN
                                 BLK)))
                  (s2 (set (pfun TRAIN
                                 BLK))) )
                (= (elem@Open@@pfun@@TRAIN@@BLK@Close x
                                                      (set-diff@Open@@pfun@@TRAIN@@BLK@Close s1
                                                                                             s2))
                   (and (elem@Open@@pfun@@TRAIN@@BLK@Close x
                                                           s1)
                        (not (elem@Open@@pfun@@TRAIN@@BLK@Close x
                                                                s2))))))

(assert (forall ( (x (pfun TRAIN
                           BLK))
                  (s1 (set (pfun TRAIN
                                 BLK)))
                  (s2 (set (pfun TRAIN
                                 BLK))) )
                (= (elem@Open@@pfun@@TRAIN@@BLK@Close x
                                                      (intersect@Open@@pfun@@TRAIN@@BLK@Close s1
                                                                                              s2))
                   (and (elem@Open@@pfun@@TRAIN@@BLK@Close x
                                                           s1)
                        (elem@Open@@pfun@@TRAIN@@BLK@Close x
                                                           s2)))))

(assert (forall ( (x (pfun TRAIN
                           BLK))
                  (s1 (set (pfun TRAIN
                                 BLK)))
                  (s2 (set (pfun TRAIN
                                 BLK))) )
                (= (elem@Open@@pfun@@TRAIN@@BLK@Close x
                                                      (bunion@Open@@pfun@@TRAIN@@BLK@Close s1
                                                                                           s2))
                   (or (elem@Open@@pfun@@TRAIN@@BLK@Close x
                                                          s1)
                       (elem@Open@@pfun@@TRAIN@@BLK@Close x
                                                          s2)))))

(assert (forall ( (x (pfun TRAIN
                           BLK))
                  (s1 (set (pfun TRAIN
                                 BLK)))
                  (s2 (set (pfun TRAIN
                                 BLK))) )
                (not (elem@Open@@pfun@@TRAIN@@BLK@Close x
                                                        empty-set@Open@@pfun@@TRAIN@@BLK@Close))))

(assert (and (not (= ent
                     ext))
             (not (elem@@BLK ent
                             PLF))
             (not (elem@@BLK ext
                             PLF))))

(assert (forall ( (p BLK) )
                (=> true
                    (= (not (= p
                               ext))
                       (elem@@BLK p
                                  (bunion@@BLK (mk-set@@BLK ent)
                                               PLF))))))

(assert (forall ( (p BLK) )
                (=> true
                    (= (not (= p
                               ent))
                       (elem@@BLK p
                                  (bunion@@BLK (mk-set@@BLK ext)
                                               PLF))))))

(assert (forall ( (p BLK) )
                (=> true
                    (= (or (= p
                              ent)
                           (= p
                              ext))
                       (not (elem@@BLK p
                                       PLF))))))

(assert (= BLK
           (bunion@@BLK (bunion@@BLK (mk-set@@BLK ent)
                                     (mk-set@@BLK ext))
                        PLF)))

(assert (forall ( (t TRAIN) )
                (=> (elem@@TRAIN t
                                 in)
                    (elem@@BLK (select loc
                                       t)
                               BLK))))

(assert (= (dom@@TRAIN@@BLK loc)
           in))

(assert (not (elem@@TRAIN t
                          in)))

(assert (= in@prime
           (bunion@@TRAIN in
                          (mk-set@@TRAIN t))))

(assert (= loc@prime
           (ovl@@TRAIN@@BLK loc
                            (mk-fun@@TRAIN@@BLK t
                                                ent))))

(assert (not (and (= loc@prime
                     (ovl@@TRAIN@@BLK loc
                                      (mk-fun@@TRAIN@@BLK t
                                                          ent)))
                  (= t_0
                     t))))

(check-sat-using (or-else (then qe smt) (then skip smt) (then (using-params simplify :expand-power true) smt)))

(pop)
(echo "> train0/enter/CO/co1/part 2/case 1/relation (233,2)")
(push)
(declare-sort BLK 0)
(declare-sort LOC 0)
(declare-sort TRAIN 0)
(define-sort pfun (a b) (Array a b))
(declare-sort set 1)
(declare-const PLF (set BLK))
(declare-const BLK (set BLK))
(declare-const LOC (set LOC))
(declare-const TRAIN (set TRAIN))
(declare-const ent BLK)
(declare-const ext BLK)
(declare-const in (set TRAIN))
(declare-const in@prime (set TRAIN))
(declare-const loc (pfun TRAIN BLK))
(declare-const loc@prime (pfun TRAIN BLK))
(declare-const p BLK)
(declare-const q BLK)
(declare-const t TRAIN)
(declare-const t_0 TRAIN)
(declare-const t_1 TRAIN)
(declare-const t_2 TRAIN)
(declare-const t_3 TRAIN)
(declare-fun apply@@TRAIN@@BLK ((pfun TRAIN BLK) TRAIN) BLK)
(declare-fun dom-rest@@TRAIN@@BLK ((set TRAIN) (pfun TRAIN BLK)) (pfun TRAIN BLK))
(declare-fun dom-subt@@TRAIN@@BLK ((set TRAIN) (pfun TRAIN BLK)) (pfun TRAIN BLK))
(declare-fun dom@@TRAIN@@BLK ((pfun TRAIN BLK)) (set TRAIN))
(declare-fun elem@@BLK (BLK (set BLK)) Bool)
(declare-fun elem@@LOC (LOC (set LOC)) Bool)
(declare-fun elem@@TRAIN (TRAIN (set TRAIN)) Bool)
(declare-fun elem@Open@@pfun@@TRAIN@@BLK@Close ((pfun TRAIN BLK) (set (pfun TRAIN BLK))) Bool)
(declare-fun empty-fun@@TRAIN@@BLK () (pfun TRAIN BLK))
(declare-fun empty-set@@BLK () (set BLK))
(declare-fun empty-set@@LOC () (set LOC))
(declare-fun empty-set@@TRAIN () (set TRAIN))
(declare-fun empty-set@Open@@pfun@@TRAIN@@BLK@Close () (set (pfun TRAIN BLK)))
(declare-fun intersect@@BLK ((set BLK) (set BLK)) (set BLK))
(declare-fun intersect@@LOC ((set LOC) (set LOC)) (set LOC))
(declare-fun intersect@@TRAIN ((set TRAIN) (set TRAIN)) (set TRAIN))
(declare-fun intersect@Open@@pfun@@TRAIN@@BLK@Close ((set (pfun TRAIN BLK)) (set (pfun TRAIN BLK))) (set (pfun TRAIN BLK)))
(declare-fun mk-fun@@TRAIN@@BLK (TRAIN BLK) (pfun TRAIN BLK))
(declare-fun mk-set@@BLK (BLK) (set BLK))
(declare-fun mk-set@@LOC (LOC) (set LOC))
(declare-fun mk-set@@TRAIN (TRAIN) (set TRAIN))
(declare-fun mk-set@Open@@pfun@@TRAIN@@BLK@Close ((pfun TRAIN BLK)) (set (pfun TRAIN BLK)))
(declare-fun ovl@@TRAIN@@BLK ((pfun TRAIN BLK) (pfun TRAIN BLK)) (pfun TRAIN BLK))
(declare-fun set-diff@@BLK ((set BLK) (set BLK)) (set BLK))
(declare-fun set-diff@@LOC ((set LOC) (set LOC)) (set LOC))
(declare-fun set-diff@@TRAIN ((set TRAIN) (set TRAIN)) (set TRAIN))
(declare-fun set-diff@Open@@pfun@@TRAIN@@BLK@Close ((set (pfun TRAIN BLK)) (set (pfun TRAIN BLK))) (set (pfun TRAIN BLK)))
(declare-fun tfun@@TRAIN@@BLK ((set TRAIN) (set BLK)) (set (pfun TRAIN BLK)))
(declare-fun bunion@@BLK ((set BLK) (set BLK)) (set BLK))
(declare-fun bunion@@LOC ((set LOC) (set LOC)) (set LOC))
(declare-fun bunion@@TRAIN ((set TRAIN) (set TRAIN)) (set TRAIN))
(declare-fun bunion@Open@@pfun@@TRAIN@@BLK@Close ((set (pfun TRAIN BLK)) (set (pfun TRAIN BLK))) (set (pfun TRAIN BLK)))
(assert (= (= (select loc@prime
                      t_0)
              ent)
           (= (select (ovl@@TRAIN@@BLK loc
                                       (mk-fun@@TRAIN@@BLK t
                                                           ent))
                      t_0)
              ent)))

(assert (= (= (select (ovl@@TRAIN@@BLK loc
                                       (mk-fun@@TRAIN@@BLK t
                                                           ent))
                      t_0)
              ent)
           true))

(assert (forall ( (x BLK)
                  (y BLK) )
                (= (elem@@BLK x
                              (mk-set@@BLK y))
                   (= x
                      y))))

(assert (forall ( (x BLK)
                  (s1 (set BLK))
                  (s2 (set BLK)) )
                (= (elem@@BLK x
                              (set-diff@@BLK s1
                                             s2))
                   (and (elem@@BLK x
                                   s1)
                        (not (elem@@BLK x
                                        s2))))))

(assert (forall ( (x BLK)
                  (s1 (set BLK))
                  (s2 (set BLK)) )
                (= (elem@@BLK x
                              (intersect@@BLK s1
                                              s2))
                   (and (elem@@BLK x
                                   s1)
                        (elem@@BLK x
                                   s2)))))

(assert (forall ( (x BLK)
                  (s1 (set BLK))
                  (s2 (set BLK)) )
                (= (elem@@BLK x
                              (bunion@@BLK s1
                                           s2))
                   (or (elem@@BLK x
                                  s1)
                       (elem@@BLK x
                                  s2)))))

(assert (forall ( (x BLK)
                  (s1 (set BLK))
                  (s2 (set BLK)) )
                (not (elem@@BLK x
                                empty-set@@BLK))))

(assert (forall ( (x LOC)
                  (y LOC) )
                (= (elem@@LOC x
                              (mk-set@@LOC y))
                   (= x
                      y))))

(assert (forall ( (x LOC)
                  (s1 (set LOC))
                  (s2 (set LOC)) )
                (= (elem@@LOC x
                              (set-diff@@LOC s1
                                             s2))
                   (and (elem@@LOC x
                                   s1)
                        (not (elem@@LOC x
                                        s2))))))

(assert (forall ( (x LOC)
                  (s1 (set LOC))
                  (s2 (set LOC)) )
                (= (elem@@LOC x
                              (intersect@@LOC s1
                                              s2))
                   (and (elem@@LOC x
                                   s1)
                        (elem@@LOC x
                                   s2)))))

(assert (forall ( (x LOC)
                  (s1 (set LOC))
                  (s2 (set LOC)) )
                (= (elem@@LOC x
                              (bunion@@LOC s1
                                           s2))
                   (or (elem@@LOC x
                                  s1)
                       (elem@@LOC x
                                  s2)))))

(assert (forall ( (x LOC)
                  (s1 (set LOC))
                  (s2 (set LOC)) )
                (not (elem@@LOC x
                                empty-set@@LOC))))

(assert (forall ( (x TRAIN)
                  (y TRAIN) )
                (= (elem@@TRAIN x
                                (mk-set@@TRAIN y))
                   (= x
                      y))))

(assert (forall ( (x TRAIN)
                  (s1 (set TRAIN))
                  (s2 (set TRAIN)) )
                (= (elem@@TRAIN x
                                (set-diff@@TRAIN s1
                                                 s2))
                   (and (elem@@TRAIN x
                                     s1)
                        (not (elem@@TRAIN x
                                          s2))))))

(assert (forall ( (x TRAIN)
                  (s1 (set TRAIN))
                  (s2 (set TRAIN)) )
                (= (elem@@TRAIN x
                                (intersect@@TRAIN s1
                                                  s2))
                   (and (elem@@TRAIN x
                                     s1)
                        (elem@@TRAIN x
                                     s2)))))

(assert (forall ( (x TRAIN)
                  (s1 (set TRAIN))
                  (s2 (set TRAIN)) )
                (= (elem@@TRAIN x
                                (bunion@@TRAIN s1
                                               s2))
                   (or (elem@@TRAIN x
                                    s1)
                       (elem@@TRAIN x
                                    s2)))))

(assert (forall ( (x TRAIN)
                  (s1 (set TRAIN))
                  (s2 (set TRAIN)) )
                (not (elem@@TRAIN x
                                  empty-set@@TRAIN))))

(assert (forall ( (f1 (pfun TRAIN
                            BLK))
                  (f2 (pfun TRAIN
                            BLK)) )
                (= (bunion@@TRAIN (dom@@TRAIN@@BLK f1)
                                  (dom@@TRAIN@@BLK f2))
                   (dom@@TRAIN@@BLK (ovl@@TRAIN@@BLK f1
                                                     f2)))))

(assert (= (dom@@TRAIN@@BLK empty-fun@@TRAIN@@BLK)
           empty-set@@TRAIN))

(assert (forall ( (x TRAIN)
                  (y BLK) )
                (= (dom@@TRAIN@@BLK (mk-fun@@TRAIN@@BLK x
                                                        y))
                   (mk-set@@TRAIN x))))

(assert (forall ( (f1 (pfun TRAIN
                            BLK))
                  (f2 (pfun TRAIN
                            BLK))
                  (x TRAIN) )
                (=> (elem@@TRAIN x
                                 (dom@@TRAIN@@BLK f2))
                    (= (select (ovl@@TRAIN@@BLK f1
                                                f2)
                               x)
                       (select f2
                               x)))))

(assert (forall ( (f1 (pfun TRAIN
                            BLK))
                  (f2 (pfun TRAIN
                            BLK))
                  (x TRAIN) )
                (=> (elem@@TRAIN x
                                 (set-diff@@TRAIN (dom@@TRAIN@@BLK f1)
                                                  (dom@@TRAIN@@BLK f2)))
                    (= (select (ovl@@TRAIN@@BLK f1
                                                f2)
                               x)
                       (select f1
                               x)))))

(assert (forall ( (f1 (pfun TRAIN
                            BLK))
                  (s1 (set TRAIN)) )
                (= (dom@@TRAIN@@BLK (dom-subt@@TRAIN@@BLK s1
                                                          f1))
                   (set-diff@@TRAIN (dom@@TRAIN@@BLK f1)
                                    s1))))

(assert (forall ( (x TRAIN)
                  (y BLK) )
                (= (select (mk-fun@@TRAIN@@BLK x
                                               y)
                           x)
                   y)))

(assert (forall ( (f1 (pfun TRAIN
                            BLK))
                  (s1 (set TRAIN))
                  (x TRAIN) )
                (=> (elem@@TRAIN x
                                 (intersect@@TRAIN s1
                                                   (dom@@TRAIN@@BLK f1)))
                    (= (select (dom-rest@@TRAIN@@BLK s1
                                                     f1)
                               x)
                       (select f1
                               x)))))

(assert (forall ( (f1 (pfun TRAIN
                            BLK))
                  (s1 (set TRAIN))
                  (x TRAIN) )
                (=> (elem@@TRAIN x
                                 (set-diff@@TRAIN (dom@@TRAIN@@BLK f1)
                                                  s1))
                    (= (select (dom-subt@@TRAIN@@BLK s1
                                                     f1)
                               x)
                       (select f1
                               x)))))

(assert (forall ( (x (pfun TRAIN
                           BLK))
                  (y (pfun TRAIN
                           BLK)) )
                (= (elem@Open@@pfun@@TRAIN@@BLK@Close x
                                                      (mk-set@Open@@pfun@@TRAIN@@BLK@Close y))
                   (= x
                      y))))

(assert (forall ( (x (pfun TRAIN
                           BLK))
                  (s1 (set (pfun TRAIN
                                 BLK)))
                  (s2 (set (pfun TRAIN
                                 BLK))) )
                (= (elem@Open@@pfun@@TRAIN@@BLK@Close x
                                                      (set-diff@Open@@pfun@@TRAIN@@BLK@Close s1
                                                                                             s2))
                   (and (elem@Open@@pfun@@TRAIN@@BLK@Close x
                                                           s1)
                        (not (elem@Open@@pfun@@TRAIN@@BLK@Close x
                                                                s2))))))

(assert (forall ( (x (pfun TRAIN
                           BLK))
                  (s1 (set (pfun TRAIN
                                 BLK)))
                  (s2 (set (pfun TRAIN
                                 BLK))) )
                (= (elem@Open@@pfun@@TRAIN@@BLK@Close x
                                                      (intersect@Open@@pfun@@TRAIN@@BLK@Close s1
                                                                                              s2))
                   (and (elem@Open@@pfun@@TRAIN@@BLK@Close x
                                                           s1)
                        (elem@Open@@pfun@@TRAIN@@BLK@Close x
                                                           s2)))))

(assert (forall ( (x (pfun TRAIN
                           BLK))
                  (s1 (set (pfun TRAIN
                                 BLK)))
                  (s2 (set (pfun TRAIN
                                 BLK))) )
                (= (elem@Open@@pfun@@TRAIN@@BLK@Close x
                                                      (bunion@Open@@pfun@@TRAIN@@BLK@Close s1
                                                                                           s2))
                   (or (elem@Open@@pfun@@TRAIN@@BLK@Close x
                                                          s1)
                       (elem@Open@@pfun@@TRAIN@@BLK@Close x
                                                          s2)))))

(assert (forall ( (x (pfun TRAIN
                           BLK))
                  (s1 (set (pfun TRAIN
                                 BLK)))
                  (s2 (set (pfun TRAIN
                                 BLK))) )
                (not (elem@Open@@pfun@@TRAIN@@BLK@Close x
                                                        empty-set@Open@@pfun@@TRAIN@@BLK@Close))))

(assert (and (not (= ent
                     ext))
             (not (elem@@BLK ent
                             PLF))
             (not (elem@@BLK ext
                             PLF))))

(assert (forall ( (p BLK) )
                (=> true
                    (= (not (= p
                               ext))
                       (elem@@BLK p
                                  (bunion@@BLK (mk-set@@BLK ent)
                                               PLF))))))

(assert (forall ( (p BLK) )
                (=> true
                    (= (not (= p
                               ent))
                       (elem@@BLK p
                                  (bunion@@BLK (mk-set@@BLK ext)
                                               PLF))))))

(assert (forall ( (p BLK) )
                (=> true
                    (= (or (= p
                              ent)
                           (= p
                              ext))
                       (not (elem@@BLK p
                                       PLF))))))

(assert (= BLK
           (bunion@@BLK (bunion@@BLK (mk-set@@BLK ent)
                                     (mk-set@@BLK ext))
                        PLF)))

(assert (not (= (= (select loc@prime
                           t_0)
                   ent)
                true)))

(check-sat-using (or-else (then qe smt) (then skip smt) (then (using-params simplify :expand-power true) smt)))

(pop)
(echo "> train0/enter/CO/co1/part 2/case 1/step (235,2)")
(push)
(declare-sort BLK 0)
(declare-sort LOC 0)
(declare-sort TRAIN 0)
(define-sort pfun (a b) (Array a b))
(declare-sort set 1)
(declare-const PLF (set BLK))
(declare-const BLK (set BLK))
(declare-const LOC (set LOC))
(declare-const TRAIN (set TRAIN))
(declare-const ent BLK)
(declare-const ext BLK)
(declare-const in (set TRAIN))
(declare-const in@prime (set TRAIN))
(declare-const loc (pfun TRAIN BLK))
(declare-const loc@prime (pfun TRAIN BLK))
(declare-const p BLK)
(declare-const q BLK)
(declare-const t TRAIN)
(declare-const t_0 TRAIN)
(declare-const t_1 TRAIN)
(declare-const t_2 TRAIN)
(declare-const t_3 TRAIN)
(declare-fun apply@@TRAIN@@BLK ((pfun TRAIN BLK) TRAIN) BLK)
(declare-fun dom-rest@@TRAIN@@BLK ((set TRAIN) (pfun TRAIN BLK)) (pfun TRAIN BLK))
(declare-fun dom-subt@@TRAIN@@BLK ((set TRAIN) (pfun TRAIN BLK)) (pfun TRAIN BLK))
(declare-fun dom@@TRAIN@@BLK ((pfun TRAIN BLK)) (set TRAIN))
(declare-fun elem@@BLK (BLK (set BLK)) Bool)
(declare-fun elem@@LOC (LOC (set LOC)) Bool)
(declare-fun elem@@TRAIN (TRAIN (set TRAIN)) Bool)
(declare-fun elem@Open@@pfun@@TRAIN@@BLK@Close ((pfun TRAIN BLK) (set (pfun TRAIN BLK))) Bool)
(declare-fun empty-fun@@TRAIN@@BLK () (pfun TRAIN BLK))
(declare-fun empty-set@@BLK () (set BLK))
(declare-fun empty-set@@LOC () (set LOC))
(declare-fun empty-set@@TRAIN () (set TRAIN))
(declare-fun empty-set@Open@@pfun@@TRAIN@@BLK@Close () (set (pfun TRAIN BLK)))
(declare-fun intersect@@BLK ((set BLK) (set BLK)) (set BLK))
(declare-fun intersect@@LOC ((set LOC) (set LOC)) (set LOC))
(declare-fun intersect@@TRAIN ((set TRAIN) (set TRAIN)) (set TRAIN))
(declare-fun intersect@Open@@pfun@@TRAIN@@BLK@Close ((set (pfun TRAIN BLK)) (set (pfun TRAIN BLK))) (set (pfun TRAIN BLK)))
(declare-fun mk-fun@@TRAIN@@BLK (TRAIN BLK) (pfun TRAIN BLK))
(declare-fun mk-set@@BLK (BLK) (set BLK))
(declare-fun mk-set@@LOC (LOC) (set LOC))
(declare-fun mk-set@@TRAIN (TRAIN) (set TRAIN))
(declare-fun mk-set@Open@@pfun@@TRAIN@@BLK@Close ((pfun TRAIN BLK)) (set (pfun TRAIN BLK)))
(declare-fun ovl@@TRAIN@@BLK ((pfun TRAIN BLK) (pfun TRAIN BLK)) (pfun TRAIN BLK))
(declare-fun set-diff@@BLK ((set BLK) (set BLK)) (set BLK))
(declare-fun set-diff@@LOC ((set LOC) (set LOC)) (set LOC))
(declare-fun set-diff@@TRAIN ((set TRAIN) (set TRAIN)) (set TRAIN))
(declare-fun set-diff@Open@@pfun@@TRAIN@@BLK@Close ((set (pfun TRAIN BLK)) (set (pfun TRAIN BLK))) (set (pfun TRAIN BLK)))
(declare-fun tfun@@TRAIN@@BLK ((set TRAIN) (set BLK)) (set (pfun TRAIN BLK)))
(declare-fun bunion@@BLK ((set BLK) (set BLK)) (set BLK))
(declare-fun bunion@@LOC ((set LOC) (set LOC)) (set LOC))
(declare-fun bunion@@TRAIN ((set TRAIN) (set TRAIN)) (set TRAIN))
(declare-fun bunion@Open@@pfun@@TRAIN@@BLK@Close ((set (pfun TRAIN BLK)) (set (pfun TRAIN BLK))) (set (pfun TRAIN BLK)))
(assert (= loc@prime
           (ovl@@TRAIN@@BLK loc
                            (mk-fun@@TRAIN@@BLK t
                                                ent))))

(assert (forall ( (x BLK)
                  (y BLK) )
                (= (elem@@BLK x
                              (mk-set@@BLK y))
                   (= x
                      y))))

(assert (forall ( (x BLK)
                  (s1 (set BLK))
                  (s2 (set BLK)) )
                (= (elem@@BLK x
                              (set-diff@@BLK s1
                                             s2))
                   (and (elem@@BLK x
                                   s1)
                        (not (elem@@BLK x
                                        s2))))))

(assert (forall ( (x BLK)
                  (s1 (set BLK))
                  (s2 (set BLK)) )
                (= (elem@@BLK x
                              (intersect@@BLK s1
                                              s2))
                   (and (elem@@BLK x
                                   s1)
                        (elem@@BLK x
                                   s2)))))

(assert (forall ( (x BLK)
                  (s1 (set BLK))
                  (s2 (set BLK)) )
                (= (elem@@BLK x
                              (bunion@@BLK s1
                                           s2))
                   (or (elem@@BLK x
                                  s1)
                       (elem@@BLK x
                                  s2)))))

(assert (forall ( (x BLK)
                  (s1 (set BLK))
                  (s2 (set BLK)) )
                (not (elem@@BLK x
                                empty-set@@BLK))))

(assert (forall ( (x LOC)
                  (y LOC) )
                (= (elem@@LOC x
                              (mk-set@@LOC y))
                   (= x
                      y))))

(assert (forall ( (x LOC)
                  (s1 (set LOC))
                  (s2 (set LOC)) )
                (= (elem@@LOC x
                              (set-diff@@LOC s1
                                             s2))
                   (and (elem@@LOC x
                                   s1)
                        (not (elem@@LOC x
                                        s2))))))

(assert (forall ( (x LOC)
                  (s1 (set LOC))
                  (s2 (set LOC)) )
                (= (elem@@LOC x
                              (intersect@@LOC s1
                                              s2))
                   (and (elem@@LOC x
                                   s1)
                        (elem@@LOC x
                                   s2)))))

(assert (forall ( (x LOC)
                  (s1 (set LOC))
                  (s2 (set LOC)) )
                (= (elem@@LOC x
                              (bunion@@LOC s1
                                           s2))
                   (or (elem@@LOC x
                                  s1)
                       (elem@@LOC x
                                  s2)))))

(assert (forall ( (x LOC)
                  (s1 (set LOC))
                  (s2 (set LOC)) )
                (not (elem@@LOC x
                                empty-set@@LOC))))

(assert (forall ( (x TRAIN)
                  (y TRAIN) )
                (= (elem@@TRAIN x
                                (mk-set@@TRAIN y))
                   (= x
                      y))))

(assert (forall ( (x TRAIN)
                  (s1 (set TRAIN))
                  (s2 (set TRAIN)) )
                (= (elem@@TRAIN x
                                (set-diff@@TRAIN s1
                                                 s2))
                   (and (elem@@TRAIN x
                                     s1)
                        (not (elem@@TRAIN x
                                          s2))))))

(assert (forall ( (x TRAIN)
                  (s1 (set TRAIN))
                  (s2 (set TRAIN)) )
                (= (elem@@TRAIN x
                                (intersect@@TRAIN s1
                                                  s2))
                   (and (elem@@TRAIN x
                                     s1)
                        (elem@@TRAIN x
                                     s2)))))

(assert (forall ( (x TRAIN)
                  (s1 (set TRAIN))
                  (s2 (set TRAIN)) )
                (= (elem@@TRAIN x
                                (bunion@@TRAIN s1
                                               s2))
                   (or (elem@@TRAIN x
                                    s1)
                       (elem@@TRAIN x
                                    s2)))))

(assert (forall ( (x TRAIN)
                  (s1 (set TRAIN))
                  (s2 (set TRAIN)) )
                (not (elem@@TRAIN x
                                  empty-set@@TRAIN))))

(assert (forall ( (f1 (pfun TRAIN
                            BLK))
                  (f2 (pfun TRAIN
                            BLK)) )
                (= (bunion@@TRAIN (dom@@TRAIN@@BLK f1)
                                  (dom@@TRAIN@@BLK f2))
                   (dom@@TRAIN@@BLK (ovl@@TRAIN@@BLK f1
                                                     f2)))))

(assert (= (dom@@TRAIN@@BLK empty-fun@@TRAIN@@BLK)
           empty-set@@TRAIN))

(assert (forall ( (x TRAIN)
                  (y BLK) )
                (= (dom@@TRAIN@@BLK (mk-fun@@TRAIN@@BLK x
                                                        y))
                   (mk-set@@TRAIN x))))

(assert (forall ( (f1 (pfun TRAIN
                            BLK))
                  (f2 (pfun TRAIN
                            BLK))
                  (x TRAIN) )
                (=> (elem@@TRAIN x
                                 (dom@@TRAIN@@BLK f2))
                    (= (select (ovl@@TRAIN@@BLK f1
                                                f2)
                               x)
                       (select f2
                               x)))))

(assert (forall ( (f1 (pfun TRAIN
                            BLK))
                  (f2 (pfun TRAIN
                            BLK))
                  (x TRAIN) )
                (=> (elem@@TRAIN x
                                 (set-diff@@TRAIN (dom@@TRAIN@@BLK f1)
                                                  (dom@@TRAIN@@BLK f2)))
                    (= (select (ovl@@TRAIN@@BLK f1
                                                f2)
                               x)
                       (select f1
                               x)))))

(assert (forall ( (f1 (pfun TRAIN
                            BLK))
                  (s1 (set TRAIN)) )
                (= (dom@@TRAIN@@BLK (dom-subt@@TRAIN@@BLK s1
                                                          f1))
                   (set-diff@@TRAIN (dom@@TRAIN@@BLK f1)
                                    s1))))

(assert (forall ( (x TRAIN)
                  (y BLK) )
                (= (select (mk-fun@@TRAIN@@BLK x
                                               y)
                           x)
                   y)))

(assert (forall ( (f1 (pfun TRAIN
                            BLK))
                  (s1 (set TRAIN))
                  (x TRAIN) )
                (=> (elem@@TRAIN x
                                 (intersect@@TRAIN s1
                                                   (dom@@TRAIN@@BLK f1)))
                    (= (select (dom-rest@@TRAIN@@BLK s1
                                                     f1)
                               x)
                       (select f1
                               x)))))

(assert (forall ( (f1 (pfun TRAIN
                            BLK))
                  (s1 (set TRAIN))
                  (x TRAIN) )
                (=> (elem@@TRAIN x
                                 (set-diff@@TRAIN (dom@@TRAIN@@BLK f1)
                                                  s1))
                    (= (select (dom-subt@@TRAIN@@BLK s1
                                                     f1)
                               x)
                       (select f1
                               x)))))

(assert (forall ( (x (pfun TRAIN
                           BLK))
                  (y (pfun TRAIN
                           BLK)) )
                (= (elem@Open@@pfun@@TRAIN@@BLK@Close x
                                                      (mk-set@Open@@pfun@@TRAIN@@BLK@Close y))
                   (= x
                      y))))

(assert (forall ( (x (pfun TRAIN
                           BLK))
                  (s1 (set (pfun TRAIN
                                 BLK)))
                  (s2 (set (pfun TRAIN
                                 BLK))) )
                (= (elem@Open@@pfun@@TRAIN@@BLK@Close x
                                                      (set-diff@Open@@pfun@@TRAIN@@BLK@Close s1
                                                                                             s2))
                   (and (elem@Open@@pfun@@TRAIN@@BLK@Close x
                                                           s1)
                        (not (elem@Open@@pfun@@TRAIN@@BLK@Close x
                                                                s2))))))

(assert (forall ( (x (pfun TRAIN
                           BLK))
                  (s1 (set (pfun TRAIN
                                 BLK)))
                  (s2 (set (pfun TRAIN
                                 BLK))) )
                (= (elem@Open@@pfun@@TRAIN@@BLK@Close x
                                                      (intersect@Open@@pfun@@TRAIN@@BLK@Close s1
                                                                                              s2))
                   (and (elem@Open@@pfun@@TRAIN@@BLK@Close x
                                                           s1)
                        (elem@Open@@pfun@@TRAIN@@BLK@Close x
                                                           s2)))))

(assert (forall ( (x (pfun TRAIN
                           BLK))
                  (s1 (set (pfun TRAIN
                                 BLK)))
                  (s2 (set (pfun TRAIN
                                 BLK))) )
                (= (elem@Open@@pfun@@TRAIN@@BLK@Close x
                                                      (bunion@Open@@pfun@@TRAIN@@BLK@Close s1
                                                                                           s2))
                   (or (elem@Open@@pfun@@TRAIN@@BLK@Close x
                                                          s1)
                       (elem@Open@@pfun@@TRAIN@@BLK@Close x
                                                          s2)))))

(assert (forall ( (x (pfun TRAIN
                           BLK))
                  (s1 (set (pfun TRAIN
                                 BLK)))
                  (s2 (set (pfun TRAIN
                                 BLK))) )
                (not (elem@Open@@pfun@@TRAIN@@BLK@Close x
                                                        empty-set@Open@@pfun@@TRAIN@@BLK@Close))))

(assert (and (not (= ent
                     ext))
             (not (elem@@BLK ent
                             PLF))
             (not (elem@@BLK ext
                             PLF))))

(assert (forall ( (p BLK) )
                (=> true
                    (= (not (= p
                               ext))
                       (elem@@BLK p
                                  (bunion@@BLK (mk-set@@BLK ent)
                                               PLF))))))

(assert (forall ( (p BLK) )
                (=> true
                    (= (not (= p
                               ent))
                       (elem@@BLK p
                                  (bunion@@BLK (mk-set@@BLK ext)
                                               PLF))))))

(assert (forall ( (p BLK) )
                (=> true
                    (= (or (= p
                              ent)
                           (= p
                              ext))
                       (not (elem@@BLK p
                                       PLF))))))

(assert (= BLK
           (bunion@@BLK (bunion@@BLK (mk-set@@BLK ent)
                                     (mk-set@@BLK ext))
                        PLF)))

(assert (not (= (= (select loc@prime
                           t_0)
                   ent)
                (= (select (ovl@@TRAIN@@BLK loc
                                            (mk-fun@@TRAIN@@BLK t
                                                                ent))
                           t_0)
                   ent))))

(check-sat-using (or-else (then qe smt) (then skip smt) (then (using-params simplify :expand-power true) smt)))

(pop)
(echo "> train0/enter/CO/co1/part 2/case 1/step (237,2)")
(push)
(declare-sort BLK 0)
(declare-sort LOC 0)
(declare-sort TRAIN 0)
(define-sort pfun (a b) (Array a b))
(declare-sort set 1)
(declare-const PLF (set BLK))
(declare-const BLK (set BLK))
(declare-const LOC (set LOC))
(declare-const TRAIN (set TRAIN))
(declare-const ent BLK)
(declare-const ext BLK)
(declare-const in (set TRAIN))
(declare-const in@prime (set TRAIN))
(declare-const loc (pfun TRAIN BLK))
(declare-const loc@prime (pfun TRAIN BLK))
(declare-const p BLK)
(declare-const q BLK)
(declare-const t TRAIN)
(declare-const t_0 TRAIN)
(declare-const t_1 TRAIN)
(declare-const t_2 TRAIN)
(declare-const t_3 TRAIN)
(declare-fun apply@@TRAIN@@BLK ((pfun TRAIN BLK) TRAIN) BLK)
(declare-fun dom-rest@@TRAIN@@BLK ((set TRAIN) (pfun TRAIN BLK)) (pfun TRAIN BLK))
(declare-fun dom-subt@@TRAIN@@BLK ((set TRAIN) (pfun TRAIN BLK)) (pfun TRAIN BLK))
(declare-fun dom@@TRAIN@@BLK ((pfun TRAIN BLK)) (set TRAIN))
(declare-fun elem@@BLK (BLK (set BLK)) Bool)
(declare-fun elem@@LOC (LOC (set LOC)) Bool)
(declare-fun elem@@TRAIN (TRAIN (set TRAIN)) Bool)
(declare-fun elem@Open@@pfun@@TRAIN@@BLK@Close ((pfun TRAIN BLK) (set (pfun TRAIN BLK))) Bool)
(declare-fun empty-fun@@TRAIN@@BLK () (pfun TRAIN BLK))
(declare-fun empty-set@@BLK () (set BLK))
(declare-fun empty-set@@LOC () (set LOC))
(declare-fun empty-set@@TRAIN () (set TRAIN))
(declare-fun empty-set@Open@@pfun@@TRAIN@@BLK@Close () (set (pfun TRAIN BLK)))
(declare-fun intersect@@BLK ((set BLK) (set BLK)) (set BLK))
(declare-fun intersect@@LOC ((set LOC) (set LOC)) (set LOC))
(declare-fun intersect@@TRAIN ((set TRAIN) (set TRAIN)) (set TRAIN))
(declare-fun intersect@Open@@pfun@@TRAIN@@BLK@Close ((set (pfun TRAIN BLK)) (set (pfun TRAIN BLK))) (set (pfun TRAIN BLK)))
(declare-fun mk-fun@@TRAIN@@BLK (TRAIN BLK) (pfun TRAIN BLK))
(declare-fun mk-set@@BLK (BLK) (set BLK))
(declare-fun mk-set@@LOC (LOC) (set LOC))
(declare-fun mk-set@@TRAIN (TRAIN) (set TRAIN))
(declare-fun mk-set@Open@@pfun@@TRAIN@@BLK@Close ((pfun TRAIN BLK)) (set (pfun TRAIN BLK)))
(declare-fun ovl@@TRAIN@@BLK ((pfun TRAIN BLK) (pfun TRAIN BLK)) (pfun TRAIN BLK))
(declare-fun set-diff@@BLK ((set BLK) (set BLK)) (set BLK))
(declare-fun set-diff@@LOC ((set LOC) (set LOC)) (set LOC))
(declare-fun set-diff@@TRAIN ((set TRAIN) (set TRAIN)) (set TRAIN))
(declare-fun set-diff@Open@@pfun@@TRAIN@@BLK@Close ((set (pfun TRAIN BLK)) (set (pfun TRAIN BLK))) (set (pfun TRAIN BLK)))
(declare-fun tfun@@TRAIN@@BLK ((set TRAIN) (set BLK)) (set (pfun TRAIN BLK)))
(declare-fun bunion@@BLK ((set BLK) (set BLK)) (set BLK))
(declare-fun bunion@@LOC ((set LOC) (set LOC)) (set LOC))
(declare-fun bunion@@TRAIN ((set TRAIN) (set TRAIN)) (set TRAIN))
(declare-fun bunion@Open@@pfun@@TRAIN@@BLK@Close ((set (pfun TRAIN BLK)) (set (pfun TRAIN BLK))) (set (pfun TRAIN BLK)))
(assert (= t_0
           t))

(assert (forall ( (x BLK)
                  (y BLK) )
                (= (elem@@BLK x
                              (mk-set@@BLK y))
                   (= x
                      y))))

(assert (forall ( (x BLK)
                  (s1 (set BLK))
                  (s2 (set BLK)) )
                (= (elem@@BLK x
                              (set-diff@@BLK s1
                                             s2))
                   (and (elem@@BLK x
                                   s1)
                        (not (elem@@BLK x
                                        s2))))))

(assert (forall ( (x BLK)
                  (s1 (set BLK))
                  (s2 (set BLK)) )
                (= (elem@@BLK x
                              (intersect@@BLK s1
                                              s2))
                   (and (elem@@BLK x
                                   s1)
                        (elem@@BLK x
                                   s2)))))

(assert (forall ( (x BLK)
                  (s1 (set BLK))
                  (s2 (set BLK)) )
                (= (elem@@BLK x
                              (bunion@@BLK s1
                                           s2))
                   (or (elem@@BLK x
                                  s1)
                       (elem@@BLK x
                                  s2)))))

(assert (forall ( (x BLK)
                  (s1 (set BLK))
                  (s2 (set BLK)) )
                (not (elem@@BLK x
                                empty-set@@BLK))))

(assert (forall ( (x LOC)
                  (y LOC) )
                (= (elem@@LOC x
                              (mk-set@@LOC y))
                   (= x
                      y))))

(assert (forall ( (x LOC)
                  (s1 (set LOC))
                  (s2 (set LOC)) )
                (= (elem@@LOC x
                              (set-diff@@LOC s1
                                             s2))
                   (and (elem@@LOC x
                                   s1)
                        (not (elem@@LOC x
                                        s2))))))

(assert (forall ( (x LOC)
                  (s1 (set LOC))
                  (s2 (set LOC)) )
                (= (elem@@LOC x
                              (intersect@@LOC s1
                                              s2))
                   (and (elem@@LOC x
                                   s1)
                        (elem@@LOC x
                                   s2)))))

(assert (forall ( (x LOC)
                  (s1 (set LOC))
                  (s2 (set LOC)) )
                (= (elem@@LOC x
                              (bunion@@LOC s1
                                           s2))
                   (or (elem@@LOC x
                                  s1)
                       (elem@@LOC x
                                  s2)))))

(assert (forall ( (x LOC)
                  (s1 (set LOC))
                  (s2 (set LOC)) )
                (not (elem@@LOC x
                                empty-set@@LOC))))

(assert (forall ( (x TRAIN)
                  (y TRAIN) )
                (= (elem@@TRAIN x
                                (mk-set@@TRAIN y))
                   (= x
                      y))))

(assert (forall ( (x TRAIN)
                  (s1 (set TRAIN))
                  (s2 (set TRAIN)) )
                (= (elem@@TRAIN x
                                (set-diff@@TRAIN s1
                                                 s2))
                   (and (elem@@TRAIN x
                                     s1)
                        (not (elem@@TRAIN x
                                          s2))))))

(assert (forall ( (x TRAIN)
                  (s1 (set TRAIN))
                  (s2 (set TRAIN)) )
                (= (elem@@TRAIN x
                                (intersect@@TRAIN s1
                                                  s2))
                   (and (elem@@TRAIN x
                                     s1)
                        (elem@@TRAIN x
                                     s2)))))

(assert (forall ( (x TRAIN)
                  (s1 (set TRAIN))
                  (s2 (set TRAIN)) )
                (= (elem@@TRAIN x
                                (bunion@@TRAIN s1
                                               s2))
                   (or (elem@@TRAIN x
                                    s1)
                       (elem@@TRAIN x
                                    s2)))))

(assert (forall ( (x TRAIN)
                  (s1 (set TRAIN))
                  (s2 (set TRAIN)) )
                (not (elem@@TRAIN x
                                  empty-set@@TRAIN))))

(assert (forall ( (f1 (pfun TRAIN
                            BLK))
                  (f2 (pfun TRAIN
                            BLK)) )
                (= (bunion@@TRAIN (dom@@TRAIN@@BLK f1)
                                  (dom@@TRAIN@@BLK f2))
                   (dom@@TRAIN@@BLK (ovl@@TRAIN@@BLK f1
                                                     f2)))))

(assert (= (dom@@TRAIN@@BLK empty-fun@@TRAIN@@BLK)
           empty-set@@TRAIN))

(assert (forall ( (x TRAIN)
                  (y BLK) )
                (= (dom@@TRAIN@@BLK (mk-fun@@TRAIN@@BLK x
                                                        y))
                   (mk-set@@TRAIN x))))

(assert (forall ( (f1 (pfun TRAIN
                            BLK))
                  (f2 (pfun TRAIN
                            BLK))
                  (x TRAIN) )
                (=> (elem@@TRAIN x
                                 (dom@@TRAIN@@BLK f2))
                    (= (select (ovl@@TRAIN@@BLK f1
                                                f2)
                               x)
                       (select f2
                               x)))))

(assert (forall ( (f1 (pfun TRAIN
                            BLK))
                  (f2 (pfun TRAIN
                            BLK))
                  (x TRAIN) )
                (=> (elem@@TRAIN x
                                 (set-diff@@TRAIN (dom@@TRAIN@@BLK f1)
                                                  (dom@@TRAIN@@BLK f2)))
                    (= (select (ovl@@TRAIN@@BLK f1
                                                f2)
                               x)
                       (select f1
                               x)))))

(assert (forall ( (f1 (pfun TRAIN
                            BLK))
                  (s1 (set TRAIN)) )
                (= (dom@@TRAIN@@BLK (dom-subt@@TRAIN@@BLK s1
                                                          f1))
                   (set-diff@@TRAIN (dom@@TRAIN@@BLK f1)
                                    s1))))

(assert (forall ( (x TRAIN)
                  (y BLK) )
                (= (select (mk-fun@@TRAIN@@BLK x
                                               y)
                           x)
                   y)))

(assert (forall ( (f1 (pfun TRAIN
                            BLK))
                  (s1 (set TRAIN))
                  (x TRAIN) )
                (=> (elem@@TRAIN x
                                 (intersect@@TRAIN s1
                                                   (dom@@TRAIN@@BLK f1)))
                    (= (select (dom-rest@@TRAIN@@BLK s1
                                                     f1)
                               x)
                       (select f1
                               x)))))

(assert (forall ( (f1 (pfun TRAIN
                            BLK))
                  (s1 (set TRAIN))
                  (x TRAIN) )
                (=> (elem@@TRAIN x
                                 (set-diff@@TRAIN (dom@@TRAIN@@BLK f1)
                                                  s1))
                    (= (select (dom-subt@@TRAIN@@BLK s1
                                                     f1)
                               x)
                       (select f1
                               x)))))

(assert (forall ( (x (pfun TRAIN
                           BLK))
                  (y (pfun TRAIN
                           BLK)) )
                (= (elem@Open@@pfun@@TRAIN@@BLK@Close x
                                                      (mk-set@Open@@pfun@@TRAIN@@BLK@Close y))
                   (= x
                      y))))

(assert (forall ( (x (pfun TRAIN
                           BLK))
                  (s1 (set (pfun TRAIN
                                 BLK)))
                  (s2 (set (pfun TRAIN
                                 BLK))) )
                (= (elem@Open@@pfun@@TRAIN@@BLK@Close x
                                                      (set-diff@Open@@pfun@@TRAIN@@BLK@Close s1
                                                                                             s2))
                   (and (elem@Open@@pfun@@TRAIN@@BLK@Close x
                                                           s1)
                        (not (elem@Open@@pfun@@TRAIN@@BLK@Close x
                                                                s2))))))

(assert (forall ( (x (pfun TRAIN
                           BLK))
                  (s1 (set (pfun TRAIN
                                 BLK)))
                  (s2 (set (pfun TRAIN
                                 BLK))) )
                (= (elem@Open@@pfun@@TRAIN@@BLK@Close x
                                                      (intersect@Open@@pfun@@TRAIN@@BLK@Close s1
                                                                                              s2))
                   (and (elem@Open@@pfun@@TRAIN@@BLK@Close x
                                                           s1)
                        (elem@Open@@pfun@@TRAIN@@BLK@Close x
                                                           s2)))))

(assert (forall ( (x (pfun TRAIN
                           BLK))
                  (s1 (set (pfun TRAIN
                                 BLK)))
                  (s2 (set (pfun TRAIN
                                 BLK))) )
                (= (elem@Open@@pfun@@TRAIN@@BLK@Close x
                                                      (bunion@Open@@pfun@@TRAIN@@BLK@Close s1
                                                                                           s2))
                   (or (elem@Open@@pfun@@TRAIN@@BLK@Close x
                                                          s1)
                       (elem@Open@@pfun@@TRAIN@@BLK@Close x
                                                          s2)))))

(assert (forall ( (x (pfun TRAIN
                           BLK))
                  (s1 (set (pfun TRAIN
                                 BLK)))
                  (s2 (set (pfun TRAIN
                                 BLK))) )
                (not (elem@Open@@pfun@@TRAIN@@BLK@Close x
                                                        empty-set@Open@@pfun@@TRAIN@@BLK@Close))))

(assert (and (not (= ent
                     ext))
             (not (elem@@BLK ent
                             PLF))
             (not (elem@@BLK ext
                             PLF))))

(assert (forall ( (p BLK) )
                (=> true
                    (= (not (= p
                               ext))
                       (elem@@BLK p
                                  (bunion@@BLK (mk-set@@BLK ent)
                                               PLF))))))

(assert (forall ( (p BLK) )
                (=> true
                    (= (not (= p
                               ent))
                       (elem@@BLK p
                                  (bunion@@BLK (mk-set@@BLK ext)
                                               PLF))))))

(assert (forall ( (p BLK) )
                (=> true
                    (= (or (= p
                              ent)
                           (= p
                              ext))
                       (not (elem@@BLK p
                                       PLF))))))

(assert (= BLK
           (bunion@@BLK (bunion@@BLK (mk-set@@BLK ent)
                                     (mk-set@@BLK ext))
                        PLF)))

(assert (not (= (= (select (ovl@@TRAIN@@BLK loc
                                            (mk-fun@@TRAIN@@BLK t
                                                                ent))
                           t_0)
                   ent)
                true)))

(check-sat-using (or-else (then qe smt) (then skip smt) (then (using-params simplify :expand-power true) smt)))

(pop)
(echo "> train0/enter/CO/co1/part 2/case 2/goal (244,2)")
(push)
(declare-sort BLK 0)
(declare-sort LOC 0)
(declare-sort TRAIN 0)
(define-sort pfun (a b) (Array a b))
(declare-sort set 1)
(declare-const PLF (set BLK))
(declare-const BLK (set BLK))
(declare-const LOC (set LOC))
(declare-const TRAIN (set TRAIN))
(declare-const ent BLK)
(declare-const ext BLK)
(declare-const in (set TRAIN))
(declare-const in@prime (set TRAIN))
(declare-const loc (pfun TRAIN BLK))
(declare-const loc@prime (pfun TRAIN BLK))
(declare-const p BLK)
(declare-const q BLK)
(declare-const t TRAIN)
(declare-const t_0 TRAIN)
(declare-const t_1 TRAIN)
(declare-const t_2 TRAIN)
(declare-const t_3 TRAIN)
(declare-fun apply@@TRAIN@@BLK ((pfun TRAIN BLK) TRAIN) BLK)
(declare-fun dom-rest@@TRAIN@@BLK ((set TRAIN) (pfun TRAIN BLK)) (pfun TRAIN BLK))
(declare-fun dom-subt@@TRAIN@@BLK ((set TRAIN) (pfun TRAIN BLK)) (pfun TRAIN BLK))
(declare-fun dom@@TRAIN@@BLK ((pfun TRAIN BLK)) (set TRAIN))
(declare-fun elem@@BLK (BLK (set BLK)) Bool)
(declare-fun elem@@LOC (LOC (set LOC)) Bool)
(declare-fun elem@@TRAIN (TRAIN (set TRAIN)) Bool)
(declare-fun elem@Open@@pfun@@TRAIN@@BLK@Close ((pfun TRAIN BLK) (set (pfun TRAIN BLK))) Bool)
(declare-fun empty-fun@@TRAIN@@BLK () (pfun TRAIN BLK))
(declare-fun empty-set@@BLK () (set BLK))
(declare-fun empty-set@@LOC () (set LOC))
(declare-fun empty-set@@TRAIN () (set TRAIN))
(declare-fun empty-set@Open@@pfun@@TRAIN@@BLK@Close () (set (pfun TRAIN BLK)))
(declare-fun intersect@@BLK ((set BLK) (set BLK)) (set BLK))
(declare-fun intersect@@LOC ((set LOC) (set LOC)) (set LOC))
(declare-fun intersect@@TRAIN ((set TRAIN) (set TRAIN)) (set TRAIN))
(declare-fun intersect@Open@@pfun@@TRAIN@@BLK@Close ((set (pfun TRAIN BLK)) (set (pfun TRAIN BLK))) (set (pfun TRAIN BLK)))
(declare-fun mk-fun@@TRAIN@@BLK (TRAIN BLK) (pfun TRAIN BLK))
(declare-fun mk-set@@BLK (BLK) (set BLK))
(declare-fun mk-set@@LOC (LOC) (set LOC))
(declare-fun mk-set@@TRAIN (TRAIN) (set TRAIN))
(declare-fun mk-set@Open@@pfun@@TRAIN@@BLK@Close ((pfun TRAIN BLK)) (set (pfun TRAIN BLK)))
(declare-fun ovl@@TRAIN@@BLK ((pfun TRAIN BLK) (pfun TRAIN BLK)) (pfun TRAIN BLK))
(declare-fun set-diff@@BLK ((set BLK) (set BLK)) (set BLK))
(declare-fun set-diff@@LOC ((set LOC) (set LOC)) (set LOC))
(declare-fun set-diff@@TRAIN ((set TRAIN) (set TRAIN)) (set TRAIN))
(declare-fun set-diff@Open@@pfun@@TRAIN@@BLK@Close ((set (pfun TRAIN BLK)) (set (pfun TRAIN BLK))) (set (pfun TRAIN BLK)))
(declare-fun tfun@@TRAIN@@BLK ((set TRAIN) (set BLK)) (set (pfun TRAIN BLK)))
(declare-fun bunion@@BLK ((set BLK) (set BLK)) (set BLK))
(declare-fun bunion@@LOC ((set LOC) (set LOC)) (set LOC))
(declare-fun bunion@@TRAIN ((set TRAIN) (set TRAIN)) (set TRAIN))
(declare-fun bunion@Open@@pfun@@TRAIN@@BLK@Close ((set (pfun TRAIN BLK)) (set (pfun TRAIN BLK))) (set (pfun TRAIN BLK)))
(assert (= (= (select loc@prime
                      t_0)
              ent)
           true))

(assert (not (= (select loc@prime
                        t_0)
                ent)))

(check-sat-using (or-else (then qe smt) (then skip smt) (then (using-params simplify :expand-power true) smt)))

(pop)
(echo "> train0/enter/CO/co1/part 2/case 2/hypotheses (244,2)")
(push)
(declare-sort BLK 0)
(declare-sort LOC 0)
(declare-sort TRAIN 0)
(define-sort pfun (a b) (Array a b))
(declare-sort set 1)
(declare-const PLF (set BLK))
(declare-const BLK (set BLK))
(declare-const LOC (set LOC))
(declare-const TRAIN (set TRAIN))
(declare-const ent BLK)
(declare-const ext BLK)
(declare-const in (set TRAIN))
(declare-const in@prime (set TRAIN))
(declare-const loc (pfun TRAIN BLK))
(declare-const loc@prime (pfun TRAIN BLK))
(declare-const p BLK)
(declare-const q BLK)
(declare-const t TRAIN)
(declare-const t_0 TRAIN)
(declare-const t_1 TRAIN)
(declare-const t_2 TRAIN)
(declare-const t_3 TRAIN)
(declare-fun apply@@TRAIN@@BLK ((pfun TRAIN BLK) TRAIN) BLK)
(declare-fun dom-rest@@TRAIN@@BLK ((set TRAIN) (pfun TRAIN BLK)) (pfun TRAIN BLK))
(declare-fun dom-subt@@TRAIN@@BLK ((set TRAIN) (pfun TRAIN BLK)) (pfun TRAIN BLK))
(declare-fun dom@@TRAIN@@BLK ((pfun TRAIN BLK)) (set TRAIN))
(declare-fun elem@@BLK (BLK (set BLK)) Bool)
(declare-fun elem@@LOC (LOC (set LOC)) Bool)
(declare-fun elem@@TRAIN (TRAIN (set TRAIN)) Bool)
(declare-fun elem@Open@@pfun@@TRAIN@@BLK@Close ((pfun TRAIN BLK) (set (pfun TRAIN BLK))) Bool)
(declare-fun empty-fun@@TRAIN@@BLK () (pfun TRAIN BLK))
(declare-fun empty-set@@BLK () (set BLK))
(declare-fun empty-set@@LOC () (set LOC))
(declare-fun empty-set@@TRAIN () (set TRAIN))
(declare-fun empty-set@Open@@pfun@@TRAIN@@BLK@Close () (set (pfun TRAIN BLK)))
(declare-fun intersect@@BLK ((set BLK) (set BLK)) (set BLK))
(declare-fun intersect@@LOC ((set LOC) (set LOC)) (set LOC))
(declare-fun intersect@@TRAIN ((set TRAIN) (set TRAIN)) (set TRAIN))
(declare-fun intersect@Open@@pfun@@TRAIN@@BLK@Close ((set (pfun TRAIN BLK)) (set (pfun TRAIN BLK))) (set (pfun TRAIN BLK)))
(declare-fun mk-fun@@TRAIN@@BLK (TRAIN BLK) (pfun TRAIN BLK))
(declare-fun mk-set@@BLK (BLK) (set BLK))
(declare-fun mk-set@@LOC (LOC) (set LOC))
(declare-fun mk-set@@TRAIN (TRAIN) (set TRAIN))
(declare-fun mk-set@Open@@pfun@@TRAIN@@BLK@Close ((pfun TRAIN BLK)) (set (pfun TRAIN BLK)))
(declare-fun ovl@@TRAIN@@BLK ((pfun TRAIN BLK) (pfun TRAIN BLK)) (pfun TRAIN BLK))
(declare-fun set-diff@@BLK ((set BLK) (set BLK)) (set BLK))
(declare-fun set-diff@@LOC ((set LOC) (set LOC)) (set LOC))
(declare-fun set-diff@@TRAIN ((set TRAIN) (set TRAIN)) (set TRAIN))
(declare-fun set-diff@Open@@pfun@@TRAIN@@BLK@Close ((set (pfun TRAIN BLK)) (set (pfun TRAIN BLK))) (set (pfun TRAIN BLK)))
(declare-fun tfun@@TRAIN@@BLK ((set TRAIN) (set BLK)) (set (pfun TRAIN BLK)))
(declare-fun bunion@@BLK ((set BLK) (set BLK)) (set BLK))
(declare-fun bunion@@LOC ((set LOC) (set LOC)) (set LOC))
(declare-fun bunion@@TRAIN ((set TRAIN) (set TRAIN)) (set TRAIN))
(declare-fun bunion@Open@@pfun@@TRAIN@@BLK@Close ((set (pfun TRAIN BLK)) (set (pfun TRAIN BLK))) (set (pfun TRAIN BLK)))
(assert (not (= t_0
                t)))

(assert (elem@@TRAIN t_0
                     in))

(assert (= (select loc
                   t_0)
           ent))

(assert (forall ( (x BLK)
                  (y BLK) )
                (= (elem@@BLK x
                              (mk-set@@BLK y))
                   (= x
                      y))))

(assert (forall ( (x BLK)
                  (s1 (set BLK))
                  (s2 (set BLK)) )
                (= (elem@@BLK x
                              (set-diff@@BLK s1
                                             s2))
                   (and (elem@@BLK x
                                   s1)
                        (not (elem@@BLK x
                                        s2))))))

(assert (forall ( (x BLK)
                  (s1 (set BLK))
                  (s2 (set BLK)) )
                (= (elem@@BLK x
                              (intersect@@BLK s1
                                              s2))
                   (and (elem@@BLK x
                                   s1)
                        (elem@@BLK x
                                   s2)))))

(assert (forall ( (x BLK)
                  (s1 (set BLK))
                  (s2 (set BLK)) )
                (= (elem@@BLK x
                              (bunion@@BLK s1
                                           s2))
                   (or (elem@@BLK x
                                  s1)
                       (elem@@BLK x
                                  s2)))))

(assert (forall ( (x BLK)
                  (s1 (set BLK))
                  (s2 (set BLK)) )
                (not (elem@@BLK x
                                empty-set@@BLK))))

(assert (forall ( (x LOC)
                  (y LOC) )
                (= (elem@@LOC x
                              (mk-set@@LOC y))
                   (= x
                      y))))

(assert (forall ( (x LOC)
                  (s1 (set LOC))
                  (s2 (set LOC)) )
                (= (elem@@LOC x
                              (set-diff@@LOC s1
                                             s2))
                   (and (elem@@LOC x
                                   s1)
                        (not (elem@@LOC x
                                        s2))))))

(assert (forall ( (x LOC)
                  (s1 (set LOC))
                  (s2 (set LOC)) )
                (= (elem@@LOC x
                              (intersect@@LOC s1
                                              s2))
                   (and (elem@@LOC x
                                   s1)
                        (elem@@LOC x
                                   s2)))))

(assert (forall ( (x LOC)
                  (s1 (set LOC))
                  (s2 (set LOC)) )
                (= (elem@@LOC x
                              (bunion@@LOC s1
                                           s2))
                   (or (elem@@LOC x
                                  s1)
                       (elem@@LOC x
                                  s2)))))

(assert (forall ( (x LOC)
                  (s1 (set LOC))
                  (s2 (set LOC)) )
                (not (elem@@LOC x
                                empty-set@@LOC))))

(assert (forall ( (x TRAIN)
                  (y TRAIN) )
                (= (elem@@TRAIN x
                                (mk-set@@TRAIN y))
                   (= x
                      y))))

(assert (forall ( (x TRAIN)
                  (s1 (set TRAIN))
                  (s2 (set TRAIN)) )
                (= (elem@@TRAIN x
                                (set-diff@@TRAIN s1
                                                 s2))
                   (and (elem@@TRAIN x
                                     s1)
                        (not (elem@@TRAIN x
                                          s2))))))

(assert (forall ( (x TRAIN)
                  (s1 (set TRAIN))
                  (s2 (set TRAIN)) )
                (= (elem@@TRAIN x
                                (intersect@@TRAIN s1
                                                  s2))
                   (and (elem@@TRAIN x
                                     s1)
                        (elem@@TRAIN x
                                     s2)))))

(assert (forall ( (x TRAIN)
                  (s1 (set TRAIN))
                  (s2 (set TRAIN)) )
                (= (elem@@TRAIN x
                                (bunion@@TRAIN s1
                                               s2))
                   (or (elem@@TRAIN x
                                    s1)
                       (elem@@TRAIN x
                                    s2)))))

(assert (forall ( (x TRAIN)
                  (s1 (set TRAIN))
                  (s2 (set TRAIN)) )
                (not (elem@@TRAIN x
                                  empty-set@@TRAIN))))

(assert (forall ( (f1 (pfun TRAIN
                            BLK))
                  (f2 (pfun TRAIN
                            BLK)) )
                (= (bunion@@TRAIN (dom@@TRAIN@@BLK f1)
                                  (dom@@TRAIN@@BLK f2))
                   (dom@@TRAIN@@BLK (ovl@@TRAIN@@BLK f1
                                                     f2)))))

(assert (= (dom@@TRAIN@@BLK empty-fun@@TRAIN@@BLK)
           empty-set@@TRAIN))

(assert (forall ( (x TRAIN)
                  (y BLK) )
                (= (dom@@TRAIN@@BLK (mk-fun@@TRAIN@@BLK x
                                                        y))
                   (mk-set@@TRAIN x))))

(assert (forall ( (f1 (pfun TRAIN
                            BLK))
                  (f2 (pfun TRAIN
                            BLK))
                  (x TRAIN) )
                (=> (elem@@TRAIN x
                                 (dom@@TRAIN@@BLK f2))
                    (= (select (ovl@@TRAIN@@BLK f1
                                                f2)
                               x)
                       (select f2
                               x)))))

(assert (forall ( (f1 (pfun TRAIN
                            BLK))
                  (f2 (pfun TRAIN
                            BLK))
                  (x TRAIN) )
                (=> (elem@@TRAIN x
                                 (set-diff@@TRAIN (dom@@TRAIN@@BLK f1)
                                                  (dom@@TRAIN@@BLK f2)))
                    (= (select (ovl@@TRAIN@@BLK f1
                                                f2)
                               x)
                       (select f1
                               x)))))

(assert (forall ( (f1 (pfun TRAIN
                            BLK))
                  (s1 (set TRAIN)) )
                (= (dom@@TRAIN@@BLK (dom-subt@@TRAIN@@BLK s1
                                                          f1))
                   (set-diff@@TRAIN (dom@@TRAIN@@BLK f1)
                                    s1))))

(assert (forall ( (x TRAIN)
                  (y BLK) )
                (= (select (mk-fun@@TRAIN@@BLK x
                                               y)
                           x)
                   y)))

(assert (forall ( (f1 (pfun TRAIN
                            BLK))
                  (s1 (set TRAIN))
                  (x TRAIN) )
                (=> (elem@@TRAIN x
                                 (intersect@@TRAIN s1
                                                   (dom@@TRAIN@@BLK f1)))
                    (= (select (dom-rest@@TRAIN@@BLK s1
                                                     f1)
                               x)
                       (select f1
                               x)))))

(assert (forall ( (f1 (pfun TRAIN
                            BLK))
                  (s1 (set TRAIN))
                  (x TRAIN) )
                (=> (elem@@TRAIN x
                                 (set-diff@@TRAIN (dom@@TRAIN@@BLK f1)
                                                  s1))
                    (= (select (dom-subt@@TRAIN@@BLK s1
                                                     f1)
                               x)
                       (select f1
                               x)))))

(assert (forall ( (x (pfun TRAIN
                           BLK))
                  (y (pfun TRAIN
                           BLK)) )
                (= (elem@Open@@pfun@@TRAIN@@BLK@Close x
                                                      (mk-set@Open@@pfun@@TRAIN@@BLK@Close y))
                   (= x
                      y))))

(assert (forall ( (x (pfun TRAIN
                           BLK))
                  (s1 (set (pfun TRAIN
                                 BLK)))
                  (s2 (set (pfun TRAIN
                                 BLK))) )
                (= (elem@Open@@pfun@@TRAIN@@BLK@Close x
                                                      (set-diff@Open@@pfun@@TRAIN@@BLK@Close s1
                                                                                             s2))
                   (and (elem@Open@@pfun@@TRAIN@@BLK@Close x
                                                           s1)
                        (not (elem@Open@@pfun@@TRAIN@@BLK@Close x
                                                                s2))))))

(assert (forall ( (x (pfun TRAIN
                           BLK))
                  (s1 (set (pfun TRAIN
                                 BLK)))
                  (s2 (set (pfun TRAIN
                                 BLK))) )
                (= (elem@Open@@pfun@@TRAIN@@BLK@Close x
                                                      (intersect@Open@@pfun@@TRAIN@@BLK@Close s1
                                                                                              s2))
                   (and (elem@Open@@pfun@@TRAIN@@BLK@Close x
                                                           s1)
                        (elem@Open@@pfun@@TRAIN@@BLK@Close x
                                                           s2)))))

(assert (forall ( (x (pfun TRAIN
                           BLK))
                  (s1 (set (pfun TRAIN
                                 BLK)))
                  (s2 (set (pfun TRAIN
                                 BLK))) )
                (= (elem@Open@@pfun@@TRAIN@@BLK@Close x
                                                      (bunion@Open@@pfun@@TRAIN@@BLK@Close s1
                                                                                           s2))
                   (or (elem@Open@@pfun@@TRAIN@@BLK@Close x
                                                          s1)
                       (elem@Open@@pfun@@TRAIN@@BLK@Close x
                                                          s2)))))

(assert (forall ( (x (pfun TRAIN
                           BLK))
                  (s1 (set (pfun TRAIN
                                 BLK)))
                  (s2 (set (pfun TRAIN
                                 BLK))) )
                (not (elem@Open@@pfun@@TRAIN@@BLK@Close x
                                                        empty-set@Open@@pfun@@TRAIN@@BLK@Close))))

(assert (and (not (= ent
                     ext))
             (not (elem@@BLK ent
                             PLF))
             (not (elem@@BLK ext
                             PLF))))

(assert (forall ( (p BLK) )
                (=> true
                    (= (not (= p
                               ext))
                       (elem@@BLK p
                                  (bunion@@BLK (mk-set@@BLK ent)
                                               PLF))))))

(assert (forall ( (p BLK) )
                (=> true
                    (= (not (= p
                               ent))
                       (elem@@BLK p
                                  (bunion@@BLK (mk-set@@BLK ext)
                                               PLF))))))

(assert (forall ( (p BLK) )
                (=> true
                    (= (or (= p
                              ent)
                           (= p
                              ext))
                       (not (elem@@BLK p
                                       PLF))))))

(assert (= BLK
           (bunion@@BLK (bunion@@BLK (mk-set@@BLK ent)
                                     (mk-set@@BLK ext))
                        PLF)))

(assert (forall ( (t TRAIN) )
                (=> (elem@@TRAIN t
                                 in)
                    (elem@@BLK (select loc
                                       t)
                               BLK))))

(assert (= (dom@@TRAIN@@BLK loc)
           in))

(assert (not (elem@@TRAIN t
                          in)))

(assert (= in@prime
           (bunion@@TRAIN in
                          (mk-set@@TRAIN t))))

(assert (= loc@prime
           (ovl@@TRAIN@@BLK loc
                            (mk-fun@@TRAIN@@BLK t
                                                ent))))

(assert (not (and (= loc@prime
                     (ovl@@TRAIN@@BLK loc
                                      (mk-fun@@TRAIN@@BLK t
                                                          ent)))
                  (not (= t_0
                          t))
                  (= (select loc
                             t_0)
                     ent))))

(check-sat-using (or-else (then qe smt) (then skip smt) (then (using-params simplify :expand-power true) smt)))

(pop)
(echo "> train0/enter/CO/co1/part 2/case 2/relation (244,2)")
(push)
(declare-sort BLK 0)
(declare-sort LOC 0)
(declare-sort TRAIN 0)
(define-sort pfun (a b) (Array a b))
(declare-sort set 1)
(declare-const PLF (set BLK))
(declare-const BLK (set BLK))
(declare-const LOC (set LOC))
(declare-const TRAIN (set TRAIN))
(declare-const ent BLK)
(declare-const ext BLK)
(declare-const in (set TRAIN))
(declare-const in@prime (set TRAIN))
(declare-const loc (pfun TRAIN BLK))
(declare-const loc@prime (pfun TRAIN BLK))
(declare-const p BLK)
(declare-const q BLK)
(declare-const t TRAIN)
(declare-const t_0 TRAIN)
(declare-const t_1 TRAIN)
(declare-const t_2 TRAIN)
(declare-const t_3 TRAIN)
(declare-fun apply@@TRAIN@@BLK ((pfun TRAIN BLK) TRAIN) BLK)
(declare-fun dom-rest@@TRAIN@@BLK ((set TRAIN) (pfun TRAIN BLK)) (pfun TRAIN BLK))
(declare-fun dom-subt@@TRAIN@@BLK ((set TRAIN) (pfun TRAIN BLK)) (pfun TRAIN BLK))
(declare-fun dom@@TRAIN@@BLK ((pfun TRAIN BLK)) (set TRAIN))
(declare-fun elem@@BLK (BLK (set BLK)) Bool)
(declare-fun elem@@LOC (LOC (set LOC)) Bool)
(declare-fun elem@@TRAIN (TRAIN (set TRAIN)) Bool)
(declare-fun elem@Open@@pfun@@TRAIN@@BLK@Close ((pfun TRAIN BLK) (set (pfun TRAIN BLK))) Bool)
(declare-fun empty-fun@@TRAIN@@BLK () (pfun TRAIN BLK))
(declare-fun empty-set@@BLK () (set BLK))
(declare-fun empty-set@@LOC () (set LOC))
(declare-fun empty-set@@TRAIN () (set TRAIN))
(declare-fun empty-set@Open@@pfun@@TRAIN@@BLK@Close () (set (pfun TRAIN BLK)))
(declare-fun intersect@@BLK ((set BLK) (set BLK)) (set BLK))
(declare-fun intersect@@LOC ((set LOC) (set LOC)) (set LOC))
(declare-fun intersect@@TRAIN ((set TRAIN) (set TRAIN)) (set TRAIN))
(declare-fun intersect@Open@@pfun@@TRAIN@@BLK@Close ((set (pfun TRAIN BLK)) (set (pfun TRAIN BLK))) (set (pfun TRAIN BLK)))
(declare-fun mk-fun@@TRAIN@@BLK (TRAIN BLK) (pfun TRAIN BLK))
(declare-fun mk-set@@BLK (BLK) (set BLK))
(declare-fun mk-set@@LOC (LOC) (set LOC))
(declare-fun mk-set@@TRAIN (TRAIN) (set TRAIN))
(declare-fun mk-set@Open@@pfun@@TRAIN@@BLK@Close ((pfun TRAIN BLK)) (set (pfun TRAIN BLK)))
(declare-fun ovl@@TRAIN@@BLK ((pfun TRAIN BLK) (pfun TRAIN BLK)) (pfun TRAIN BLK))
(declare-fun set-diff@@BLK ((set BLK) (set BLK)) (set BLK))
(declare-fun set-diff@@LOC ((set LOC) (set LOC)) (set LOC))
(declare-fun set-diff@@TRAIN ((set TRAIN) (set TRAIN)) (set TRAIN))
(declare-fun set-diff@Open@@pfun@@TRAIN@@BLK@Close ((set (pfun TRAIN BLK)) (set (pfun TRAIN BLK))) (set (pfun TRAIN BLK)))
(declare-fun tfun@@TRAIN@@BLK ((set TRAIN) (set BLK)) (set (pfun TRAIN BLK)))
(declare-fun bunion@@BLK ((set BLK) (set BLK)) (set BLK))
(declare-fun bunion@@LOC ((set LOC) (set LOC)) (set LOC))
(declare-fun bunion@@TRAIN ((set TRAIN) (set TRAIN)) (set TRAIN))
(declare-fun bunion@Open@@pfun@@TRAIN@@BLK@Close ((set (pfun TRAIN BLK)) (set (pfun TRAIN BLK))) (set (pfun TRAIN BLK)))
(assert (= (= (select loc@prime
                      t_0)
              ent)
           (= (select (ovl@@TRAIN@@BLK loc
                                       (mk-fun@@TRAIN@@BLK t
                                                           ent))
                      t_0)
              ent)))

(assert (= (= (select (ovl@@TRAIN@@BLK loc
                                       (mk-fun@@TRAIN@@BLK t
                                                           ent))
                      t_0)
              ent)
           (= (select loc
                      t_0)
              ent)))

(assert (= (= (select loc
                      t_0)
              ent)
           true))

(assert (forall ( (x BLK)
                  (y BLK) )
                (= (elem@@BLK x
                              (mk-set@@BLK y))
                   (= x
                      y))))

(assert (forall ( (x BLK)
                  (s1 (set BLK))
                  (s2 (set BLK)) )
                (= (elem@@BLK x
                              (set-diff@@BLK s1
                                             s2))
                   (and (elem@@BLK x
                                   s1)
                        (not (elem@@BLK x
                                        s2))))))

(assert (forall ( (x BLK)
                  (s1 (set BLK))
                  (s2 (set BLK)) )
                (= (elem@@BLK x
                              (intersect@@BLK s1
                                              s2))
                   (and (elem@@BLK x
                                   s1)
                        (elem@@BLK x
                                   s2)))))

(assert (forall ( (x BLK)
                  (s1 (set BLK))
                  (s2 (set BLK)) )
                (= (elem@@BLK x
                              (bunion@@BLK s1
                                           s2))
                   (or (elem@@BLK x
                                  s1)
                       (elem@@BLK x
                                  s2)))))

(assert (forall ( (x BLK)
                  (s1 (set BLK))
                  (s2 (set BLK)) )
                (not (elem@@BLK x
                                empty-set@@BLK))))

(assert (forall ( (x LOC)
                  (y LOC) )
                (= (elem@@LOC x
                              (mk-set@@LOC y))
                   (= x
                      y))))

(assert (forall ( (x LOC)
                  (s1 (set LOC))
                  (s2 (set LOC)) )
                (= (elem@@LOC x
                              (set-diff@@LOC s1
                                             s2))
                   (and (elem@@LOC x
                                   s1)
                        (not (elem@@LOC x
                                        s2))))))

(assert (forall ( (x LOC)
                  (s1 (set LOC))
                  (s2 (set LOC)) )
                (= (elem@@LOC x
                              (intersect@@LOC s1
                                              s2))
                   (and (elem@@LOC x
                                   s1)
                        (elem@@LOC x
                                   s2)))))

(assert (forall ( (x LOC)
                  (s1 (set LOC))
                  (s2 (set LOC)) )
                (= (elem@@LOC x
                              (bunion@@LOC s1
                                           s2))
                   (or (elem@@LOC x
                                  s1)
                       (elem@@LOC x
                                  s2)))))

(assert (forall ( (x LOC)
                  (s1 (set LOC))
                  (s2 (set LOC)) )
                (not (elem@@LOC x
                                empty-set@@LOC))))

(assert (forall ( (x TRAIN)
                  (y TRAIN) )
                (= (elem@@TRAIN x
                                (mk-set@@TRAIN y))
                   (= x
                      y))))

(assert (forall ( (x TRAIN)
                  (s1 (set TRAIN))
                  (s2 (set TRAIN)) )
                (= (elem@@TRAIN x
                                (set-diff@@TRAIN s1
                                                 s2))
                   (and (elem@@TRAIN x
                                     s1)
                        (not (elem@@TRAIN x
                                          s2))))))

(assert (forall ( (x TRAIN)
                  (s1 (set TRAIN))
                  (s2 (set TRAIN)) )
                (= (elem@@TRAIN x
                                (intersect@@TRAIN s1
                                                  s2))
                   (and (elem@@TRAIN x
                                     s1)
                        (elem@@TRAIN x
                                     s2)))))

(assert (forall ( (x TRAIN)
                  (s1 (set TRAIN))
                  (s2 (set TRAIN)) )
                (= (elem@@TRAIN x
                                (bunion@@TRAIN s1
                                               s2))
                   (or (elem@@TRAIN x
                                    s1)
                       (elem@@TRAIN x
                                    s2)))))

(assert (forall ( (x TRAIN)
                  (s1 (set TRAIN))
                  (s2 (set TRAIN)) )
                (not (elem@@TRAIN x
                                  empty-set@@TRAIN))))

(assert (forall ( (f1 (pfun TRAIN
                            BLK))
                  (f2 (pfun TRAIN
                            BLK)) )
                (= (bunion@@TRAIN (dom@@TRAIN@@BLK f1)
                                  (dom@@TRAIN@@BLK f2))
                   (dom@@TRAIN@@BLK (ovl@@TRAIN@@BLK f1
                                                     f2)))))

(assert (= (dom@@TRAIN@@BLK empty-fun@@TRAIN@@BLK)
           empty-set@@TRAIN))

(assert (forall ( (x TRAIN)
                  (y BLK) )
                (= (dom@@TRAIN@@BLK (mk-fun@@TRAIN@@BLK x
                                                        y))
                   (mk-set@@TRAIN x))))

(assert (forall ( (f1 (pfun TRAIN
                            BLK))
                  (f2 (pfun TRAIN
                            BLK))
                  (x TRAIN) )
                (=> (elem@@TRAIN x
                                 (dom@@TRAIN@@BLK f2))
                    (= (select (ovl@@TRAIN@@BLK f1
                                                f2)
                               x)
                       (select f2
                               x)))))

(assert (forall ( (f1 (pfun TRAIN
                            BLK))
                  (f2 (pfun TRAIN
                            BLK))
                  (x TRAIN) )
                (=> (elem@@TRAIN x
                                 (set-diff@@TRAIN (dom@@TRAIN@@BLK f1)
                                                  (dom@@TRAIN@@BLK f2)))
                    (= (select (ovl@@TRAIN@@BLK f1
                                                f2)
                               x)
                       (select f1
                               x)))))

(assert (forall ( (f1 (pfun TRAIN
                            BLK))
                  (s1 (set TRAIN)) )
                (= (dom@@TRAIN@@BLK (dom-subt@@TRAIN@@BLK s1
                                                          f1))
                   (set-diff@@TRAIN (dom@@TRAIN@@BLK f1)
                                    s1))))

(assert (forall ( (x TRAIN)
                  (y BLK) )
                (= (select (mk-fun@@TRAIN@@BLK x
                                               y)
                           x)
                   y)))

(assert (forall ( (f1 (pfun TRAIN
                            BLK))
                  (s1 (set TRAIN))
                  (x TRAIN) )
                (=> (elem@@TRAIN x
                                 (intersect@@TRAIN s1
                                                   (dom@@TRAIN@@BLK f1)))
                    (= (select (dom-rest@@TRAIN@@BLK s1
                                                     f1)
                               x)
                       (select f1
                               x)))))

(assert (forall ( (f1 (pfun TRAIN
                            BLK))
                  (s1 (set TRAIN))
                  (x TRAIN) )
                (=> (elem@@TRAIN x
                                 (set-diff@@TRAIN (dom@@TRAIN@@BLK f1)
                                                  s1))
                    (= (select (dom-subt@@TRAIN@@BLK s1
                                                     f1)
                               x)
                       (select f1
                               x)))))

(assert (forall ( (x (pfun TRAIN
                           BLK))
                  (y (pfun TRAIN
                           BLK)) )
                (= (elem@Open@@pfun@@TRAIN@@BLK@Close x
                                                      (mk-set@Open@@pfun@@TRAIN@@BLK@Close y))
                   (= x
                      y))))

(assert (forall ( (x (pfun TRAIN
                           BLK))
                  (s1 (set (pfun TRAIN
                                 BLK)))
                  (s2 (set (pfun TRAIN
                                 BLK))) )
                (= (elem@Open@@pfun@@TRAIN@@BLK@Close x
                                                      (set-diff@Open@@pfun@@TRAIN@@BLK@Close s1
                                                                                             s2))
                   (and (elem@Open@@pfun@@TRAIN@@BLK@Close x
                                                           s1)
                        (not (elem@Open@@pfun@@TRAIN@@BLK@Close x
                                                                s2))))))

(assert (forall ( (x (pfun TRAIN
                           BLK))
                  (s1 (set (pfun TRAIN
                                 BLK)))
                  (s2 (set (pfun TRAIN
                                 BLK))) )
                (= (elem@Open@@pfun@@TRAIN@@BLK@Close x
                                                      (intersect@Open@@pfun@@TRAIN@@BLK@Close s1
                                                                                              s2))
                   (and (elem@Open@@pfun@@TRAIN@@BLK@Close x
                                                           s1)
                        (elem@Open@@pfun@@TRAIN@@BLK@Close x
                                                           s2)))))

(assert (forall ( (x (pfun TRAIN
                           BLK))
                  (s1 (set (pfun TRAIN
                                 BLK)))
                  (s2 (set (pfun TRAIN
                                 BLK))) )
                (= (elem@Open@@pfun@@TRAIN@@BLK@Close x
                                                      (bunion@Open@@pfun@@TRAIN@@BLK@Close s1
                                                                                           s2))
                   (or (elem@Open@@pfun@@TRAIN@@BLK@Close x
                                                          s1)
                       (elem@Open@@pfun@@TRAIN@@BLK@Close x
                                                          s2)))))

(assert (forall ( (x (pfun TRAIN
                           BLK))
                  (s1 (set (pfun TRAIN
                                 BLK)))
                  (s2 (set (pfun TRAIN
                                 BLK))) )
                (not (elem@Open@@pfun@@TRAIN@@BLK@Close x
                                                        empty-set@Open@@pfun@@TRAIN@@BLK@Close))))

(assert (and (not (= ent
                     ext))
             (not (elem@@BLK ent
                             PLF))
             (not (elem@@BLK ext
                             PLF))))

(assert (forall ( (p BLK) )
                (=> true
                    (= (not (= p
                               ext))
                       (elem@@BLK p
                                  (bunion@@BLK (mk-set@@BLK ent)
                                               PLF))))))

(assert (forall ( (p BLK) )
                (=> true
                    (= (not (= p
                               ent))
                       (elem@@BLK p
                                  (bunion@@BLK (mk-set@@BLK ext)
                                               PLF))))))

(assert (forall ( (p BLK) )
                (=> true
                    (= (or (= p
                              ent)
                           (= p
                              ext))
                       (not (elem@@BLK p
                                       PLF))))))

(assert (= BLK
           (bunion@@BLK (bunion@@BLK (mk-set@@BLK ent)
                                     (mk-set@@BLK ext))
                        PLF)))

(assert (not (= (= (select loc@prime
                           t_0)
                   ent)
                true)))

(check-sat-using (or-else (then qe smt) (then skip smt) (then (using-params simplify :expand-power true) smt)))

(pop)
(echo "> train0/enter/CO/co1/part 2/case 2/step (246,2)")
(push)
(declare-sort BLK 0)
(declare-sort LOC 0)
(declare-sort TRAIN 0)
(define-sort pfun (a b) (Array a b))
(declare-sort set 1)
(declare-const PLF (set BLK))
(declare-const BLK (set BLK))
(declare-const LOC (set LOC))
(declare-const TRAIN (set TRAIN))
(declare-const ent BLK)
(declare-const ext BLK)
(declare-const in (set TRAIN))
(declare-const in@prime (set TRAIN))
(declare-const loc (pfun TRAIN BLK))
(declare-const loc@prime (pfun TRAIN BLK))
(declare-const p BLK)
(declare-const q BLK)
(declare-const t TRAIN)
(declare-const t_0 TRAIN)
(declare-const t_1 TRAIN)
(declare-const t_2 TRAIN)
(declare-const t_3 TRAIN)
(declare-fun apply@@TRAIN@@BLK ((pfun TRAIN BLK) TRAIN) BLK)
(declare-fun dom-rest@@TRAIN@@BLK ((set TRAIN) (pfun TRAIN BLK)) (pfun TRAIN BLK))
(declare-fun dom-subt@@TRAIN@@BLK ((set TRAIN) (pfun TRAIN BLK)) (pfun TRAIN BLK))
(declare-fun dom@@TRAIN@@BLK ((pfun TRAIN BLK)) (set TRAIN))
(declare-fun elem@@BLK (BLK (set BLK)) Bool)
(declare-fun elem@@LOC (LOC (set LOC)) Bool)
(declare-fun elem@@TRAIN (TRAIN (set TRAIN)) Bool)
(declare-fun elem@Open@@pfun@@TRAIN@@BLK@Close ((pfun TRAIN BLK) (set (pfun TRAIN BLK))) Bool)
(declare-fun empty-fun@@TRAIN@@BLK () (pfun TRAIN BLK))
(declare-fun empty-set@@BLK () (set BLK))
(declare-fun empty-set@@LOC () (set LOC))
(declare-fun empty-set@@TRAIN () (set TRAIN))
(declare-fun empty-set@Open@@pfun@@TRAIN@@BLK@Close () (set (pfun TRAIN BLK)))
(declare-fun intersect@@BLK ((set BLK) (set BLK)) (set BLK))
(declare-fun intersect@@LOC ((set LOC) (set LOC)) (set LOC))
(declare-fun intersect@@TRAIN ((set TRAIN) (set TRAIN)) (set TRAIN))
(declare-fun intersect@Open@@pfun@@TRAIN@@BLK@Close ((set (pfun TRAIN BLK)) (set (pfun TRAIN BLK))) (set (pfun TRAIN BLK)))
(declare-fun mk-fun@@TRAIN@@BLK (TRAIN BLK) (pfun TRAIN BLK))
(declare-fun mk-set@@BLK (BLK) (set BLK))
(declare-fun mk-set@@LOC (LOC) (set LOC))
(declare-fun mk-set@@TRAIN (TRAIN) (set TRAIN))
(declare-fun mk-set@Open@@pfun@@TRAIN@@BLK@Close ((pfun TRAIN BLK)) (set (pfun TRAIN BLK)))
(declare-fun ovl@@TRAIN@@BLK ((pfun TRAIN BLK) (pfun TRAIN BLK)) (pfun TRAIN BLK))
(declare-fun set-diff@@BLK ((set BLK) (set BLK)) (set BLK))
(declare-fun set-diff@@LOC ((set LOC) (set LOC)) (set LOC))
(declare-fun set-diff@@TRAIN ((set TRAIN) (set TRAIN)) (set TRAIN))
(declare-fun set-diff@Open@@pfun@@TRAIN@@BLK@Close ((set (pfun TRAIN BLK)) (set (pfun TRAIN BLK))) (set (pfun TRAIN BLK)))
(declare-fun tfun@@TRAIN@@BLK ((set TRAIN) (set BLK)) (set (pfun TRAIN BLK)))
(declare-fun bunion@@BLK ((set BLK) (set BLK)) (set BLK))
(declare-fun bunion@@LOC ((set LOC) (set LOC)) (set LOC))
(declare-fun bunion@@TRAIN ((set TRAIN) (set TRAIN)) (set TRAIN))
(declare-fun bunion@Open@@pfun@@TRAIN@@BLK@Close ((set (pfun TRAIN BLK)) (set (pfun TRAIN BLK))) (set (pfun TRAIN BLK)))
(assert (= loc@prime
           (ovl@@TRAIN@@BLK loc
                            (mk-fun@@TRAIN@@BLK t
                                                ent))))

(assert (forall ( (x BLK)
                  (y BLK) )
                (= (elem@@BLK x
                              (mk-set@@BLK y))
                   (= x
                      y))))

(assert (forall ( (x BLK)
                  (s1 (set BLK))
                  (s2 (set BLK)) )
                (= (elem@@BLK x
                              (set-diff@@BLK s1
                                             s2))
                   (and (elem@@BLK x
                                   s1)
                        (not (elem@@BLK x
                                        s2))))))

(assert (forall ( (x BLK)
                  (s1 (set BLK))
                  (s2 (set BLK)) )
                (= (elem@@BLK x
                              (intersect@@BLK s1
                                              s2))
                   (and (elem@@BLK x
                                   s1)
                        (elem@@BLK x
                                   s2)))))

(assert (forall ( (x BLK)
                  (s1 (set BLK))
                  (s2 (set BLK)) )
                (= (elem@@BLK x
                              (bunion@@BLK s1
                                           s2))
                   (or (elem@@BLK x
                                  s1)
                       (elem@@BLK x
                                  s2)))))

(assert (forall ( (x BLK)
                  (s1 (set BLK))
                  (s2 (set BLK)) )
                (not (elem@@BLK x
                                empty-set@@BLK))))

(assert (forall ( (x LOC)
                  (y LOC) )
                (= (elem@@LOC x
                              (mk-set@@LOC y))
                   (= x
                      y))))

(assert (forall ( (x LOC)
                  (s1 (set LOC))
                  (s2 (set LOC)) )
                (= (elem@@LOC x
                              (set-diff@@LOC s1
                                             s2))
                   (and (elem@@LOC x
                                   s1)
                        (not (elem@@LOC x
                                        s2))))))

(assert (forall ( (x LOC)
                  (s1 (set LOC))
                  (s2 (set LOC)) )
                (= (elem@@LOC x
                              (intersect@@LOC s1
                                              s2))
                   (and (elem@@LOC x
                                   s1)
                        (elem@@LOC x
                                   s2)))))

(assert (forall ( (x LOC)
                  (s1 (set LOC))
                  (s2 (set LOC)) )
                (= (elem@@LOC x
                              (bunion@@LOC s1
                                           s2))
                   (or (elem@@LOC x
                                  s1)
                       (elem@@LOC x
                                  s2)))))

(assert (forall ( (x LOC)
                  (s1 (set LOC))
                  (s2 (set LOC)) )
                (not (elem@@LOC x
                                empty-set@@LOC))))

(assert (forall ( (x TRAIN)
                  (y TRAIN) )
                (= (elem@@TRAIN x
                                (mk-set@@TRAIN y))
                   (= x
                      y))))

(assert (forall ( (x TRAIN)
                  (s1 (set TRAIN))
                  (s2 (set TRAIN)) )
                (= (elem@@TRAIN x
                                (set-diff@@TRAIN s1
                                                 s2))
                   (and (elem@@TRAIN x
                                     s1)
                        (not (elem@@TRAIN x
                                          s2))))))

(assert (forall ( (x TRAIN)
                  (s1 (set TRAIN))
                  (s2 (set TRAIN)) )
                (= (elem@@TRAIN x
                                (intersect@@TRAIN s1
                                                  s2))
                   (and (elem@@TRAIN x
                                     s1)
                        (elem@@TRAIN x
                                     s2)))))

(assert (forall ( (x TRAIN)
                  (s1 (set TRAIN))
                  (s2 (set TRAIN)) )
                (= (elem@@TRAIN x
                                (bunion@@TRAIN s1
                                               s2))
                   (or (elem@@TRAIN x
                                    s1)
                       (elem@@TRAIN x
                                    s2)))))

(assert (forall ( (x TRAIN)
                  (s1 (set TRAIN))
                  (s2 (set TRAIN)) )
                (not (elem@@TRAIN x
                                  empty-set@@TRAIN))))

(assert (forall ( (f1 (pfun TRAIN
                            BLK))
                  (f2 (pfun TRAIN
                            BLK)) )
                (= (bunion@@TRAIN (dom@@TRAIN@@BLK f1)
                                  (dom@@TRAIN@@BLK f2))
                   (dom@@TRAIN@@BLK (ovl@@TRAIN@@BLK f1
                                                     f2)))))

(assert (= (dom@@TRAIN@@BLK empty-fun@@TRAIN@@BLK)
           empty-set@@TRAIN))

(assert (forall ( (x TRAIN)
                  (y BLK) )
                (= (dom@@TRAIN@@BLK (mk-fun@@TRAIN@@BLK x
                                                        y))
                   (mk-set@@TRAIN x))))

(assert (forall ( (f1 (pfun TRAIN
                            BLK))
                  (f2 (pfun TRAIN
                            BLK))
                  (x TRAIN) )
                (=> (elem@@TRAIN x
                                 (dom@@TRAIN@@BLK f2))
                    (= (select (ovl@@TRAIN@@BLK f1
                                                f2)
                               x)
                       (select f2
                               x)))))

(assert (forall ( (f1 (pfun TRAIN
                            BLK))
                  (f2 (pfun TRAIN
                            BLK))
                  (x TRAIN) )
                (=> (elem@@TRAIN x
                                 (set-diff@@TRAIN (dom@@TRAIN@@BLK f1)
                                                  (dom@@TRAIN@@BLK f2)))
                    (= (select (ovl@@TRAIN@@BLK f1
                                                f2)
                               x)
                       (select f1
                               x)))))

(assert (forall ( (f1 (pfun TRAIN
                            BLK))
                  (s1 (set TRAIN)) )
                (= (dom@@TRAIN@@BLK (dom-subt@@TRAIN@@BLK s1
                                                          f1))
                   (set-diff@@TRAIN (dom@@TRAIN@@BLK f1)
                                    s1))))

(assert (forall ( (x TRAIN)
                  (y BLK) )
                (= (select (mk-fun@@TRAIN@@BLK x
                                               y)
                           x)
                   y)))

(assert (forall ( (f1 (pfun TRAIN
                            BLK))
                  (s1 (set TRAIN))
                  (x TRAIN) )
                (=> (elem@@TRAIN x
                                 (intersect@@TRAIN s1
                                                   (dom@@TRAIN@@BLK f1)))
                    (= (select (dom-rest@@TRAIN@@BLK s1
                                                     f1)
                               x)
                       (select f1
                               x)))))

(assert (forall ( (f1 (pfun TRAIN
                            BLK))
                  (s1 (set TRAIN))
                  (x TRAIN) )
                (=> (elem@@TRAIN x
                                 (set-diff@@TRAIN (dom@@TRAIN@@BLK f1)
                                                  s1))
                    (= (select (dom-subt@@TRAIN@@BLK s1
                                                     f1)
                               x)
                       (select f1
                               x)))))

(assert (forall ( (x (pfun TRAIN
                           BLK))
                  (y (pfun TRAIN
                           BLK)) )
                (= (elem@Open@@pfun@@TRAIN@@BLK@Close x
                                                      (mk-set@Open@@pfun@@TRAIN@@BLK@Close y))
                   (= x
                      y))))

(assert (forall ( (x (pfun TRAIN
                           BLK))
                  (s1 (set (pfun TRAIN
                                 BLK)))
                  (s2 (set (pfun TRAIN
                                 BLK))) )
                (= (elem@Open@@pfun@@TRAIN@@BLK@Close x
                                                      (set-diff@Open@@pfun@@TRAIN@@BLK@Close s1
                                                                                             s2))
                   (and (elem@Open@@pfun@@TRAIN@@BLK@Close x
                                                           s1)
                        (not (elem@Open@@pfun@@TRAIN@@BLK@Close x
                                                                s2))))))

(assert (forall ( (x (pfun TRAIN
                           BLK))
                  (s1 (set (pfun TRAIN
                                 BLK)))
                  (s2 (set (pfun TRAIN
                                 BLK))) )
                (= (elem@Open@@pfun@@TRAIN@@BLK@Close x
                                                      (intersect@Open@@pfun@@TRAIN@@BLK@Close s1
                                                                                              s2))
                   (and (elem@Open@@pfun@@TRAIN@@BLK@Close x
                                                           s1)
                        (elem@Open@@pfun@@TRAIN@@BLK@Close x
                                                           s2)))))

(assert (forall ( (x (pfun TRAIN
                           BLK))
                  (s1 (set (pfun TRAIN
                                 BLK)))
                  (s2 (set (pfun TRAIN
                                 BLK))) )
                (= (elem@Open@@pfun@@TRAIN@@BLK@Close x
                                                      (bunion@Open@@pfun@@TRAIN@@BLK@Close s1
                                                                                           s2))
                   (or (elem@Open@@pfun@@TRAIN@@BLK@Close x
                                                          s1)
                       (elem@Open@@pfun@@TRAIN@@BLK@Close x
                                                          s2)))))

(assert (forall ( (x (pfun TRAIN
                           BLK))
                  (s1 (set (pfun TRAIN
                                 BLK)))
                  (s2 (set (pfun TRAIN
                                 BLK))) )
                (not (elem@Open@@pfun@@TRAIN@@BLK@Close x
                                                        empty-set@Open@@pfun@@TRAIN@@BLK@Close))))

(assert (and (not (= ent
                     ext))
             (not (elem@@BLK ent
                             PLF))
             (not (elem@@BLK ext
                             PLF))))

(assert (forall ( (p BLK) )
                (=> true
                    (= (not (= p
                               ext))
                       (elem@@BLK p
                                  (bunion@@BLK (mk-set@@BLK ent)
                                               PLF))))))

(assert (forall ( (p BLK) )
                (=> true
                    (= (not (= p
                               ent))
                       (elem@@BLK p
                                  (bunion@@BLK (mk-set@@BLK ext)
                                               PLF))))))

(assert (forall ( (p BLK) )
                (=> true
                    (= (or (= p
                              ent)
                           (= p
                              ext))
                       (not (elem@@BLK p
                                       PLF))))))

(assert (= BLK
           (bunion@@BLK (bunion@@BLK (mk-set@@BLK ent)
                                     (mk-set@@BLK ext))
                        PLF)))

(assert (not (= (= (select loc@prime
                           t_0)
                   ent)
                (= (select (ovl@@TRAIN@@BLK loc
                                            (mk-fun@@TRAIN@@BLK t
                                                                ent))
                           t_0)
                   ent))))

(check-sat-using (or-else (then qe smt) (then skip smt) (then (using-params simplify :expand-power true) smt)))

(pop)
(echo "> train0/enter/CO/co1/part 2/case 2/step (248,2)")
(push)
(declare-sort BLK 0)
(declare-sort LOC 0)
(declare-sort TRAIN 0)
(define-sort pfun (a b) (Array a b))
(declare-sort set 1)
(declare-const PLF (set BLK))
(declare-const BLK (set BLK))
(declare-const LOC (set LOC))
(declare-const TRAIN (set TRAIN))
(declare-const ent BLK)
(declare-const ext BLK)
(declare-const in (set TRAIN))
(declare-const in@prime (set TRAIN))
(declare-const loc (pfun TRAIN BLK))
(declare-const loc@prime (pfun TRAIN BLK))
(declare-const p BLK)
(declare-const q BLK)
(declare-const t TRAIN)
(declare-const t_0 TRAIN)
(declare-const t_1 TRAIN)
(declare-const t_2 TRAIN)
(declare-const t_3 TRAIN)
(declare-fun apply@@TRAIN@@BLK ((pfun TRAIN BLK) TRAIN) BLK)
(declare-fun dom-rest@@TRAIN@@BLK ((set TRAIN) (pfun TRAIN BLK)) (pfun TRAIN BLK))
(declare-fun dom-subt@@TRAIN@@BLK ((set TRAIN) (pfun TRAIN BLK)) (pfun TRAIN BLK))
(declare-fun dom@@TRAIN@@BLK ((pfun TRAIN BLK)) (set TRAIN))
(declare-fun elem@@BLK (BLK (set BLK)) Bool)
(declare-fun elem@@LOC (LOC (set LOC)) Bool)
(declare-fun elem@@TRAIN (TRAIN (set TRAIN)) Bool)
(declare-fun elem@Open@@pfun@@TRAIN@@BLK@Close ((pfun TRAIN BLK) (set (pfun TRAIN BLK))) Bool)
(declare-fun empty-fun@@TRAIN@@BLK () (pfun TRAIN BLK))
(declare-fun empty-set@@BLK () (set BLK))
(declare-fun empty-set@@LOC () (set LOC))
(declare-fun empty-set@@TRAIN () (set TRAIN))
(declare-fun empty-set@Open@@pfun@@TRAIN@@BLK@Close () (set (pfun TRAIN BLK)))
(declare-fun intersect@@BLK ((set BLK) (set BLK)) (set BLK))
(declare-fun intersect@@LOC ((set LOC) (set LOC)) (set LOC))
(declare-fun intersect@@TRAIN ((set TRAIN) (set TRAIN)) (set TRAIN))
(declare-fun intersect@Open@@pfun@@TRAIN@@BLK@Close ((set (pfun TRAIN BLK)) (set (pfun TRAIN BLK))) (set (pfun TRAIN BLK)))
(declare-fun mk-fun@@TRAIN@@BLK (TRAIN BLK) (pfun TRAIN BLK))
(declare-fun mk-set@@BLK (BLK) (set BLK))
(declare-fun mk-set@@LOC (LOC) (set LOC))
(declare-fun mk-set@@TRAIN (TRAIN) (set TRAIN))
(declare-fun mk-set@Open@@pfun@@TRAIN@@BLK@Close ((pfun TRAIN BLK)) (set (pfun TRAIN BLK)))
(declare-fun ovl@@TRAIN@@BLK ((pfun TRAIN BLK) (pfun TRAIN BLK)) (pfun TRAIN BLK))
(declare-fun set-diff@@BLK ((set BLK) (set BLK)) (set BLK))
(declare-fun set-diff@@LOC ((set LOC) (set LOC)) (set LOC))
(declare-fun set-diff@@TRAIN ((set TRAIN) (set TRAIN)) (set TRAIN))
(declare-fun set-diff@Open@@pfun@@TRAIN@@BLK@Close ((set (pfun TRAIN BLK)) (set (pfun TRAIN BLK))) (set (pfun TRAIN BLK)))
(declare-fun tfun@@TRAIN@@BLK ((set TRAIN) (set BLK)) (set (pfun TRAIN BLK)))
(declare-fun bunion@@BLK ((set BLK) (set BLK)) (set BLK))
(declare-fun bunion@@LOC ((set LOC) (set LOC)) (set LOC))
(declare-fun bunion@@TRAIN ((set TRAIN) (set TRAIN)) (set TRAIN))
(declare-fun bunion@Open@@pfun@@TRAIN@@BLK@Close ((set (pfun TRAIN BLK)) (set (pfun TRAIN BLK))) (set (pfun TRAIN BLK)))
(assert (not (= t_0
                t)))

(assert (forall ( (x BLK)
                  (y BLK) )
                (= (elem@@BLK x
                              (mk-set@@BLK y))
                   (= x
                      y))))

(assert (forall ( (x BLK)
                  (s1 (set BLK))
                  (s2 (set BLK)) )
                (= (elem@@BLK x
                              (set-diff@@BLK s1
                                             s2))
                   (and (elem@@BLK x
                                   s1)
                        (not (elem@@BLK x
                                        s2))))))

(assert (forall ( (x BLK)
                  (s1 (set BLK))
                  (s2 (set BLK)) )
                (= (elem@@BLK x
                              (intersect@@BLK s1
                                              s2))
                   (and (elem@@BLK x
                                   s1)
                        (elem@@BLK x
                                   s2)))))

(assert (forall ( (x BLK)
                  (s1 (set BLK))
                  (s2 (set BLK)) )
                (= (elem@@BLK x
                              (bunion@@BLK s1
                                           s2))
                   (or (elem@@BLK x
                                  s1)
                       (elem@@BLK x
                                  s2)))))

(assert (forall ( (x BLK)
                  (s1 (set BLK))
                  (s2 (set BLK)) )
                (not (elem@@BLK x
                                empty-set@@BLK))))

(assert (forall ( (x LOC)
                  (y LOC) )
                (= (elem@@LOC x
                              (mk-set@@LOC y))
                   (= x
                      y))))

(assert (forall ( (x LOC)
                  (s1 (set LOC))
                  (s2 (set LOC)) )
                (= (elem@@LOC x
                              (set-diff@@LOC s1
                                             s2))
                   (and (elem@@LOC x
                                   s1)
                        (not (elem@@LOC x
                                        s2))))))

(assert (forall ( (x LOC)
                  (s1 (set LOC))
                  (s2 (set LOC)) )
                (= (elem@@LOC x
                              (intersect@@LOC s1
                                              s2))
                   (and (elem@@LOC x
                                   s1)
                        (elem@@LOC x
                                   s2)))))

(assert (forall ( (x LOC)
                  (s1 (set LOC))
                  (s2 (set LOC)) )
                (= (elem@@LOC x
                              (bunion@@LOC s1
                                           s2))
                   (or (elem@@LOC x
                                  s1)
                       (elem@@LOC x
                                  s2)))))

(assert (forall ( (x LOC)
                  (s1 (set LOC))
                  (s2 (set LOC)) )
                (not (elem@@LOC x
                                empty-set@@LOC))))

(assert (forall ( (x TRAIN)
                  (y TRAIN) )
                (= (elem@@TRAIN x
                                (mk-set@@TRAIN y))
                   (= x
                      y))))

(assert (forall ( (x TRAIN)
                  (s1 (set TRAIN))
                  (s2 (set TRAIN)) )
                (= (elem@@TRAIN x
                                (set-diff@@TRAIN s1
                                                 s2))
                   (and (elem@@TRAIN x
                                     s1)
                        (not (elem@@TRAIN x
                                          s2))))))

(assert (forall ( (x TRAIN)
                  (s1 (set TRAIN))
                  (s2 (set TRAIN)) )
                (= (elem@@TRAIN x
                                (intersect@@TRAIN s1
                                                  s2))
                   (and (elem@@TRAIN x
                                     s1)
                        (elem@@TRAIN x
                                     s2)))))

(assert (forall ( (x TRAIN)
                  (s1 (set TRAIN))
                  (s2 (set TRAIN)) )
                (= (elem@@TRAIN x
                                (bunion@@TRAIN s1
                                               s2))
                   (or (elem@@TRAIN x
                                    s1)
                       (elem@@TRAIN x
                                    s2)))))

(assert (forall ( (x TRAIN)
                  (s1 (set TRAIN))
                  (s2 (set TRAIN)) )
                (not (elem@@TRAIN x
                                  empty-set@@TRAIN))))

(assert (forall ( (f1 (pfun TRAIN
                            BLK))
                  (f2 (pfun TRAIN
                            BLK)) )
                (= (bunion@@TRAIN (dom@@TRAIN@@BLK f1)
                                  (dom@@TRAIN@@BLK f2))
                   (dom@@TRAIN@@BLK (ovl@@TRAIN@@BLK f1
                                                     f2)))))

(assert (= (dom@@TRAIN@@BLK empty-fun@@TRAIN@@BLK)
           empty-set@@TRAIN))

(assert (forall ( (x TRAIN)
                  (y BLK) )
                (= (dom@@TRAIN@@BLK (mk-fun@@TRAIN@@BLK x
                                                        y))
                   (mk-set@@TRAIN x))))

(assert (forall ( (f1 (pfun TRAIN
                            BLK))
                  (f2 (pfun TRAIN
                            BLK))
                  (x TRAIN) )
                (=> (elem@@TRAIN x
                                 (dom@@TRAIN@@BLK f2))
                    (= (select (ovl@@TRAIN@@BLK f1
                                                f2)
                               x)
                       (select f2
                               x)))))

(assert (forall ( (f1 (pfun TRAIN
                            BLK))
                  (f2 (pfun TRAIN
                            BLK))
                  (x TRAIN) )
                (=> (elem@@TRAIN x
                                 (set-diff@@TRAIN (dom@@TRAIN@@BLK f1)
                                                  (dom@@TRAIN@@BLK f2)))
                    (= (select (ovl@@TRAIN@@BLK f1
                                                f2)
                               x)
                       (select f1
                               x)))))

(assert (forall ( (f1 (pfun TRAIN
                            BLK))
                  (s1 (set TRAIN)) )
                (= (dom@@TRAIN@@BLK (dom-subt@@TRAIN@@BLK s1
                                                          f1))
                   (set-diff@@TRAIN (dom@@TRAIN@@BLK f1)
                                    s1))))

(assert (forall ( (x TRAIN)
                  (y BLK) )
                (= (select (mk-fun@@TRAIN@@BLK x
                                               y)
                           x)
                   y)))

(assert (forall ( (f1 (pfun TRAIN
                            BLK))
                  (s1 (set TRAIN))
                  (x TRAIN) )
                (=> (elem@@TRAIN x
                                 (intersect@@TRAIN s1
                                                   (dom@@TRAIN@@BLK f1)))
                    (= (select (dom-rest@@TRAIN@@BLK s1
                                                     f1)
                               x)
                       (select f1
                               x)))))

(assert (forall ( (f1 (pfun TRAIN
                            BLK))
                  (s1 (set TRAIN))
                  (x TRAIN) )
                (=> (elem@@TRAIN x
                                 (set-diff@@TRAIN (dom@@TRAIN@@BLK f1)
                                                  s1))
                    (= (select (dom-subt@@TRAIN@@BLK s1
                                                     f1)
                               x)
                       (select f1
                               x)))))

(assert (forall ( (x (pfun TRAIN
                           BLK))
                  (y (pfun TRAIN
                           BLK)) )
                (= (elem@Open@@pfun@@TRAIN@@BLK@Close x
                                                      (mk-set@Open@@pfun@@TRAIN@@BLK@Close y))
                   (= x
                      y))))

(assert (forall ( (x (pfun TRAIN
                           BLK))
                  (s1 (set (pfun TRAIN
                                 BLK)))
                  (s2 (set (pfun TRAIN
                                 BLK))) )
                (= (elem@Open@@pfun@@TRAIN@@BLK@Close x
                                                      (set-diff@Open@@pfun@@TRAIN@@BLK@Close s1
                                                                                             s2))
                   (and (elem@Open@@pfun@@TRAIN@@BLK@Close x
                                                           s1)
                        (not (elem@Open@@pfun@@TRAIN@@BLK@Close x
                                                                s2))))))

(assert (forall ( (x (pfun TRAIN
                           BLK))
                  (s1 (set (pfun TRAIN
                                 BLK)))
                  (s2 (set (pfun TRAIN
                                 BLK))) )
                (= (elem@Open@@pfun@@TRAIN@@BLK@Close x
                                                      (intersect@Open@@pfun@@TRAIN@@BLK@Close s1
                                                                                              s2))
                   (and (elem@Open@@pfun@@TRAIN@@BLK@Close x
                                                           s1)
                        (elem@Open@@pfun@@TRAIN@@BLK@Close x
                                                           s2)))))

(assert (forall ( (x (pfun TRAIN
                           BLK))
                  (s1 (set (pfun TRAIN
                                 BLK)))
                  (s2 (set (pfun TRAIN
                                 BLK))) )
                (= (elem@Open@@pfun@@TRAIN@@BLK@Close x
                                                      (bunion@Open@@pfun@@TRAIN@@BLK@Close s1
                                                                                           s2))
                   (or (elem@Open@@pfun@@TRAIN@@BLK@Close x
                                                          s1)
                       (elem@Open@@pfun@@TRAIN@@BLK@Close x
                                                          s2)))))

(assert (forall ( (x (pfun TRAIN
                           BLK))
                  (s1 (set (pfun TRAIN
                                 BLK)))
                  (s2 (set (pfun TRAIN
                                 BLK))) )
                (not (elem@Open@@pfun@@TRAIN@@BLK@Close x
                                                        empty-set@Open@@pfun@@TRAIN@@BLK@Close))))

(assert (and (not (= ent
                     ext))
             (not (elem@@BLK ent
                             PLF))
             (not (elem@@BLK ext
                             PLF))))

(assert (forall ( (p BLK) )
                (=> true
                    (= (not (= p
                               ext))
                       (elem@@BLK p
                                  (bunion@@BLK (mk-set@@BLK ent)
                                               PLF))))))

(assert (forall ( (p BLK) )
                (=> true
                    (= (not (= p
                               ent))
                       (elem@@BLK p
                                  (bunion@@BLK (mk-set@@BLK ext)
                                               PLF))))))

(assert (forall ( (p BLK) )
                (=> true
                    (= (or (= p
                              ent)
                           (= p
                              ext))
                       (not (elem@@BLK p
                                       PLF))))))

(assert (= BLK
           (bunion@@BLK (bunion@@BLK (mk-set@@BLK ent)
                                     (mk-set@@BLK ext))
                        PLF)))

(assert (not (= (= (select (ovl@@TRAIN@@BLK loc
                                            (mk-fun@@TRAIN@@BLK t
                                                                ent))
                           t_0)
                   ent)
                (= (select loc
                           t_0)
                   ent))))

(check-sat-using (or-else (then qe smt) (then skip smt) (then (using-params simplify :expand-power true) smt)))

(pop)
(echo "> train0/enter/CO/co1/part 2/case 2/step (250,2)")
(push)
(declare-sort BLK 0)
(declare-sort LOC 0)
(declare-sort TRAIN 0)
(define-sort pfun (a b) (Array a b))
(declare-sort set 1)
(declare-const PLF (set BLK))
(declare-const BLK (set BLK))
(declare-const LOC (set LOC))
(declare-const TRAIN (set TRAIN))
(declare-const ent BLK)
(declare-const ext BLK)
(declare-const in (set TRAIN))
(declare-const in@prime (set TRAIN))
(declare-const loc (pfun TRAIN BLK))
(declare-const loc@prime (pfun TRAIN BLK))
(declare-const p BLK)
(declare-const q BLK)
(declare-const t TRAIN)
(declare-const t_0 TRAIN)
(declare-const t_1 TRAIN)
(declare-const t_2 TRAIN)
(declare-const t_3 TRAIN)
(declare-fun apply@@TRAIN@@BLK ((pfun TRAIN BLK) TRAIN) BLK)
(declare-fun dom-rest@@TRAIN@@BLK ((set TRAIN) (pfun TRAIN BLK)) (pfun TRAIN BLK))
(declare-fun dom-subt@@TRAIN@@BLK ((set TRAIN) (pfun TRAIN BLK)) (pfun TRAIN BLK))
(declare-fun dom@@TRAIN@@BLK ((pfun TRAIN BLK)) (set TRAIN))
(declare-fun elem@@BLK (BLK (set BLK)) Bool)
(declare-fun elem@@LOC (LOC (set LOC)) Bool)
(declare-fun elem@@TRAIN (TRAIN (set TRAIN)) Bool)
(declare-fun elem@Open@@pfun@@TRAIN@@BLK@Close ((pfun TRAIN BLK) (set (pfun TRAIN BLK))) Bool)
(declare-fun empty-fun@@TRAIN@@BLK () (pfun TRAIN BLK))
(declare-fun empty-set@@BLK () (set BLK))
(declare-fun empty-set@@LOC () (set LOC))
(declare-fun empty-set@@TRAIN () (set TRAIN))
(declare-fun empty-set@Open@@pfun@@TRAIN@@BLK@Close () (set (pfun TRAIN BLK)))
(declare-fun intersect@@BLK ((set BLK) (set BLK)) (set BLK))
(declare-fun intersect@@LOC ((set LOC) (set LOC)) (set LOC))
(declare-fun intersect@@TRAIN ((set TRAIN) (set TRAIN)) (set TRAIN))
(declare-fun intersect@Open@@pfun@@TRAIN@@BLK@Close ((set (pfun TRAIN BLK)) (set (pfun TRAIN BLK))) (set (pfun TRAIN BLK)))
(declare-fun mk-fun@@TRAIN@@BLK (TRAIN BLK) (pfun TRAIN BLK))
(declare-fun mk-set@@BLK (BLK) (set BLK))
(declare-fun mk-set@@LOC (LOC) (set LOC))
(declare-fun mk-set@@TRAIN (TRAIN) (set TRAIN))
(declare-fun mk-set@Open@@pfun@@TRAIN@@BLK@Close ((pfun TRAIN BLK)) (set (pfun TRAIN BLK)))
(declare-fun ovl@@TRAIN@@BLK ((pfun TRAIN BLK) (pfun TRAIN BLK)) (pfun TRAIN BLK))
(declare-fun set-diff@@BLK ((set BLK) (set BLK)) (set BLK))
(declare-fun set-diff@@LOC ((set LOC) (set LOC)) (set LOC))
(declare-fun set-diff@@TRAIN ((set TRAIN) (set TRAIN)) (set TRAIN))
(declare-fun set-diff@Open@@pfun@@TRAIN@@BLK@Close ((set (pfun TRAIN BLK)) (set (pfun TRAIN BLK))) (set (pfun TRAIN BLK)))
(declare-fun tfun@@TRAIN@@BLK ((set TRAIN) (set BLK)) (set (pfun TRAIN BLK)))
(declare-fun bunion@@BLK ((set BLK) (set BLK)) (set BLK))
(declare-fun bunion@@LOC ((set LOC) (set LOC)) (set LOC))
(declare-fun bunion@@TRAIN ((set TRAIN) (set TRAIN)) (set TRAIN))
(declare-fun bunion@Open@@pfun@@TRAIN@@BLK@Close ((set (pfun TRAIN BLK)) (set (pfun TRAIN BLK))) (set (pfun TRAIN BLK)))
(assert (= (select loc
                   t_0)
           ent))

(assert (forall ( (x BLK)
                  (y BLK) )
                (= (elem@@BLK x
                              (mk-set@@BLK y))
                   (= x
                      y))))

(assert (forall ( (x BLK)
                  (s1 (set BLK))
                  (s2 (set BLK)) )
                (= (elem@@BLK x
                              (set-diff@@BLK s1
                                             s2))
                   (and (elem@@BLK x
                                   s1)
                        (not (elem@@BLK x
                                        s2))))))

(assert (forall ( (x BLK)
                  (s1 (set BLK))
                  (s2 (set BLK)) )
                (= (elem@@BLK x
                              (intersect@@BLK s1
                                              s2))
                   (and (elem@@BLK x
                                   s1)
                        (elem@@BLK x
                                   s2)))))

(assert (forall ( (x BLK)
                  (s1 (set BLK))
                  (s2 (set BLK)) )
                (= (elem@@BLK x
                              (bunion@@BLK s1
                                           s2))
                   (or (elem@@BLK x
                                  s1)
                       (elem@@BLK x
                                  s2)))))

(assert (forall ( (x BLK)
                  (s1 (set BLK))
                  (s2 (set BLK)) )
                (not (elem@@BLK x
                                empty-set@@BLK))))

(assert (forall ( (x LOC)
                  (y LOC) )
                (= (elem@@LOC x
                              (mk-set@@LOC y))
                   (= x
                      y))))

(assert (forall ( (x LOC)
                  (s1 (set LOC))
                  (s2 (set LOC)) )
                (= (elem@@LOC x
                              (set-diff@@LOC s1
                                             s2))
                   (and (elem@@LOC x
                                   s1)
                        (not (elem@@LOC x
                                        s2))))))

(assert (forall ( (x LOC)
                  (s1 (set LOC))
                  (s2 (set LOC)) )
                (= (elem@@LOC x
                              (intersect@@LOC s1
                                              s2))
                   (and (elem@@LOC x
                                   s1)
                        (elem@@LOC x
                                   s2)))))

(assert (forall ( (x LOC)
                  (s1 (set LOC))
                  (s2 (set LOC)) )
                (= (elem@@LOC x
                              (bunion@@LOC s1
                                           s2))
                   (or (elem@@LOC x
                                  s1)
                       (elem@@LOC x
                                  s2)))))

(assert (forall ( (x LOC)
                  (s1 (set LOC))
                  (s2 (set LOC)) )
                (not (elem@@LOC x
                                empty-set@@LOC))))

(assert (forall ( (x TRAIN)
                  (y TRAIN) )
                (= (elem@@TRAIN x
                                (mk-set@@TRAIN y))
                   (= x
                      y))))

(assert (forall ( (x TRAIN)
                  (s1 (set TRAIN))
                  (s2 (set TRAIN)) )
                (= (elem@@TRAIN x
                                (set-diff@@TRAIN s1
                                                 s2))
                   (and (elem@@TRAIN x
                                     s1)
                        (not (elem@@TRAIN x
                                          s2))))))

(assert (forall ( (x TRAIN)
                  (s1 (set TRAIN))
                  (s2 (set TRAIN)) )
                (= (elem@@TRAIN x
                                (intersect@@TRAIN s1
                                                  s2))
                   (and (elem@@TRAIN x
                                     s1)
                        (elem@@TRAIN x
                                     s2)))))

(assert (forall ( (x TRAIN)
                  (s1 (set TRAIN))
                  (s2 (set TRAIN)) )
                (= (elem@@TRAIN x
                                (bunion@@TRAIN s1
                                               s2))
                   (or (elem@@TRAIN x
                                    s1)
                       (elem@@TRAIN x
                                    s2)))))

(assert (forall ( (x TRAIN)
                  (s1 (set TRAIN))
                  (s2 (set TRAIN)) )
                (not (elem@@TRAIN x
                                  empty-set@@TRAIN))))

(assert (forall ( (f1 (pfun TRAIN
                            BLK))
                  (f2 (pfun TRAIN
                            BLK)) )
                (= (bunion@@TRAIN (dom@@TRAIN@@BLK f1)
                                  (dom@@TRAIN@@BLK f2))
                   (dom@@TRAIN@@BLK (ovl@@TRAIN@@BLK f1
                                                     f2)))))

(assert (= (dom@@TRAIN@@BLK empty-fun@@TRAIN@@BLK)
           empty-set@@TRAIN))

(assert (forall ( (x TRAIN)
                  (y BLK) )
                (= (dom@@TRAIN@@BLK (mk-fun@@TRAIN@@BLK x
                                                        y))
                   (mk-set@@TRAIN x))))

(assert (forall ( (f1 (pfun TRAIN
                            BLK))
                  (f2 (pfun TRAIN
                            BLK))
                  (x TRAIN) )
                (=> (elem@@TRAIN x
                                 (dom@@TRAIN@@BLK f2))
                    (= (select (ovl@@TRAIN@@BLK f1
                                                f2)
                               x)
                       (select f2
                               x)))))

(assert (forall ( (f1 (pfun TRAIN
                            BLK))
                  (f2 (pfun TRAIN
                            BLK))
                  (x TRAIN) )
                (=> (elem@@TRAIN x
                                 (set-diff@@TRAIN (dom@@TRAIN@@BLK f1)
                                                  (dom@@TRAIN@@BLK f2)))
                    (= (select (ovl@@TRAIN@@BLK f1
                                                f2)
                               x)
                       (select f1
                               x)))))

(assert (forall ( (f1 (pfun TRAIN
                            BLK))
                  (s1 (set TRAIN)) )
                (= (dom@@TRAIN@@BLK (dom-subt@@TRAIN@@BLK s1
                                                          f1))
                   (set-diff@@TRAIN (dom@@TRAIN@@BLK f1)
                                    s1))))

(assert (forall ( (x TRAIN)
                  (y BLK) )
                (= (select (mk-fun@@TRAIN@@BLK x
                                               y)
                           x)
                   y)))

(assert (forall ( (f1 (pfun TRAIN
                            BLK))
                  (s1 (set TRAIN))
                  (x TRAIN) )
                (=> (elem@@TRAIN x
                                 (intersect@@TRAIN s1
                                                   (dom@@TRAIN@@BLK f1)))
                    (= (select (dom-rest@@TRAIN@@BLK s1
                                                     f1)
                               x)
                       (select f1
                               x)))))

(assert (forall ( (f1 (pfun TRAIN
                            BLK))
                  (s1 (set TRAIN))
                  (x TRAIN) )
                (=> (elem@@TRAIN x
                                 (set-diff@@TRAIN (dom@@TRAIN@@BLK f1)
                                                  s1))
                    (= (select (dom-subt@@TRAIN@@BLK s1
                                                     f1)
                               x)
                       (select f1
                               x)))))

(assert (forall ( (x (pfun TRAIN
                           BLK))
                  (y (pfun TRAIN
                           BLK)) )
                (= (elem@Open@@pfun@@TRAIN@@BLK@Close x
                                                      (mk-set@Open@@pfun@@TRAIN@@BLK@Close y))
                   (= x
                      y))))

(assert (forall ( (x (pfun TRAIN
                           BLK))
                  (s1 (set (pfun TRAIN
                                 BLK)))
                  (s2 (set (pfun TRAIN
                                 BLK))) )
                (= (elem@Open@@pfun@@TRAIN@@BLK@Close x
                                                      (set-diff@Open@@pfun@@TRAIN@@BLK@Close s1
                                                                                             s2))
                   (and (elem@Open@@pfun@@TRAIN@@BLK@Close x
                                                           s1)
                        (not (elem@Open@@pfun@@TRAIN@@BLK@Close x
                                                                s2))))))

(assert (forall ( (x (pfun TRAIN
                           BLK))
                  (s1 (set (pfun TRAIN
                                 BLK)))
                  (s2 (set (pfun TRAIN
                                 BLK))) )
                (= (elem@Open@@pfun@@TRAIN@@BLK@Close x
                                                      (intersect@Open@@pfun@@TRAIN@@BLK@Close s1
                                                                                              s2))
                   (and (elem@Open@@pfun@@TRAIN@@BLK@Close x
                                                           s1)
                        (elem@Open@@pfun@@TRAIN@@BLK@Close x
                                                           s2)))))

(assert (forall ( (x (pfun TRAIN
                           BLK))
                  (s1 (set (pfun TRAIN
                                 BLK)))
                  (s2 (set (pfun TRAIN
                                 BLK))) )
                (= (elem@Open@@pfun@@TRAIN@@BLK@Close x
                                                      (bunion@Open@@pfun@@TRAIN@@BLK@Close s1
                                                                                           s2))
                   (or (elem@Open@@pfun@@TRAIN@@BLK@Close x
                                                          s1)
                       (elem@Open@@pfun@@TRAIN@@BLK@Close x
                                                          s2)))))

(assert (forall ( (x (pfun TRAIN
                           BLK))
                  (s1 (set (pfun TRAIN
                                 BLK)))
                  (s2 (set (pfun TRAIN
                                 BLK))) )
                (not (elem@Open@@pfun@@TRAIN@@BLK@Close x
                                                        empty-set@Open@@pfun@@TRAIN@@BLK@Close))))

(assert (and (not (= ent
                     ext))
             (not (elem@@BLK ent
                             PLF))
             (not (elem@@BLK ext
                             PLF))))

(assert (forall ( (p BLK) )
                (=> true
                    (= (not (= p
                               ext))
                       (elem@@BLK p
                                  (bunion@@BLK (mk-set@@BLK ent)
                                               PLF))))))

(assert (forall ( (p BLK) )
                (=> true
                    (= (not (= p
                               ent))
                       (elem@@BLK p
                                  (bunion@@BLK (mk-set@@BLK ext)
                                               PLF))))))

(assert (forall ( (p BLK) )
                (=> true
                    (= (or (= p
                              ent)
                           (= p
                              ext))
                       (not (elem@@BLK p
                                       PLF))))))

(assert (= BLK
           (bunion@@BLK (bunion@@BLK (mk-set@@BLK ent)
                                     (mk-set@@BLK ext))
                        PLF)))

(assert (not (= (= (select loc
                           t_0)
                   ent)
                true)))

(check-sat-using (or-else (then qe smt) (then skip smt) (then (using-params simplify :expand-power true) smt)))

(pop)
(echo "> train0/enter/CO/co1/part 2/completeness (230,2)")
(push)
(declare-sort BLK 0)
(declare-sort LOC 0)
(declare-sort TRAIN 0)
(define-sort pfun (a b) (Array a b))
(declare-sort set 1)
(declare-const PLF (set BLK))
(declare-const BLK (set BLK))
(declare-const LOC (set LOC))
(declare-const TRAIN (set TRAIN))
(declare-const ent BLK)
(declare-const ext BLK)
(declare-const in (set TRAIN))
(declare-const in@prime (set TRAIN))
(declare-const loc (pfun TRAIN BLK))
(declare-const loc@prime (pfun TRAIN BLK))
(declare-const p BLK)
(declare-const q BLK)
(declare-const t TRAIN)
(declare-const t_0 TRAIN)
(declare-const t_1 TRAIN)
(declare-const t_2 TRAIN)
(declare-const t_3 TRAIN)
(declare-fun apply@@TRAIN@@BLK ((pfun TRAIN BLK) TRAIN) BLK)
(declare-fun dom-rest@@TRAIN@@BLK ((set TRAIN) (pfun TRAIN BLK)) (pfun TRAIN BLK))
(declare-fun dom-subt@@TRAIN@@BLK ((set TRAIN) (pfun TRAIN BLK)) (pfun TRAIN BLK))
(declare-fun dom@@TRAIN@@BLK ((pfun TRAIN BLK)) (set TRAIN))
(declare-fun elem@@BLK (BLK (set BLK)) Bool)
(declare-fun elem@@LOC (LOC (set LOC)) Bool)
(declare-fun elem@@TRAIN (TRAIN (set TRAIN)) Bool)
(declare-fun elem@Open@@pfun@@TRAIN@@BLK@Close ((pfun TRAIN BLK) (set (pfun TRAIN BLK))) Bool)
(declare-fun empty-fun@@TRAIN@@BLK () (pfun TRAIN BLK))
(declare-fun empty-set@@BLK () (set BLK))
(declare-fun empty-set@@LOC () (set LOC))
(declare-fun empty-set@@TRAIN () (set TRAIN))
(declare-fun empty-set@Open@@pfun@@TRAIN@@BLK@Close () (set (pfun TRAIN BLK)))
(declare-fun intersect@@BLK ((set BLK) (set BLK)) (set BLK))
(declare-fun intersect@@LOC ((set LOC) (set LOC)) (set LOC))
(declare-fun intersect@@TRAIN ((set TRAIN) (set TRAIN)) (set TRAIN))
(declare-fun intersect@Open@@pfun@@TRAIN@@BLK@Close ((set (pfun TRAIN BLK)) (set (pfun TRAIN BLK))) (set (pfun TRAIN BLK)))
(declare-fun mk-fun@@TRAIN@@BLK (TRAIN BLK) (pfun TRAIN BLK))
(declare-fun mk-set@@BLK (BLK) (set BLK))
(declare-fun mk-set@@LOC (LOC) (set LOC))
(declare-fun mk-set@@TRAIN (TRAIN) (set TRAIN))
(declare-fun mk-set@Open@@pfun@@TRAIN@@BLK@Close ((pfun TRAIN BLK)) (set (pfun TRAIN BLK)))
(declare-fun ovl@@TRAIN@@BLK ((pfun TRAIN BLK) (pfun TRAIN BLK)) (pfun TRAIN BLK))
(declare-fun set-diff@@BLK ((set BLK) (set BLK)) (set BLK))
(declare-fun set-diff@@LOC ((set LOC) (set LOC)) (set LOC))
(declare-fun set-diff@@TRAIN ((set TRAIN) (set TRAIN)) (set TRAIN))
(declare-fun set-diff@Open@@pfun@@TRAIN@@BLK@Close ((set (pfun TRAIN BLK)) (set (pfun TRAIN BLK))) (set (pfun TRAIN BLK)))
(declare-fun tfun@@TRAIN@@BLK ((set TRAIN) (set BLK)) (set (pfun TRAIN BLK)))
(declare-fun bunion@@BLK ((set BLK) (set BLK)) (set BLK))
(declare-fun bunion@@LOC ((set LOC) (set LOC)) (set LOC))
(declare-fun bunion@@TRAIN ((set TRAIN) (set TRAIN)) (set TRAIN))
(declare-fun bunion@Open@@pfun@@TRAIN@@BLK@Close ((set (pfun TRAIN BLK)) (set (pfun TRAIN BLK))) (set (pfun TRAIN BLK)))
(assert (elem@@TRAIN t_0
                     in))

(assert (= (select loc
                   t_0)
           ent))

(assert (forall ( (x BLK)
                  (y BLK) )
                (= (elem@@BLK x
                              (mk-set@@BLK y))
                   (= x
                      y))))

(assert (forall ( (x BLK)
                  (s1 (set BLK))
                  (s2 (set BLK)) )
                (= (elem@@BLK x
                              (set-diff@@BLK s1
                                             s2))
                   (and (elem@@BLK x
                                   s1)
                        (not (elem@@BLK x
                                        s2))))))

(assert (forall ( (x BLK)
                  (s1 (set BLK))
                  (s2 (set BLK)) )
                (= (elem@@BLK x
                              (intersect@@BLK s1
                                              s2))
                   (and (elem@@BLK x
                                   s1)
                        (elem@@BLK x
                                   s2)))))

(assert (forall ( (x BLK)
                  (s1 (set BLK))
                  (s2 (set BLK)) )
                (= (elem@@BLK x
                              (bunion@@BLK s1
                                           s2))
                   (or (elem@@BLK x
                                  s1)
                       (elem@@BLK x
                                  s2)))))

(assert (forall ( (x BLK)
                  (s1 (set BLK))
                  (s2 (set BLK)) )
                (not (elem@@BLK x
                                empty-set@@BLK))))

(assert (forall ( (x LOC)
                  (y LOC) )
                (= (elem@@LOC x
                              (mk-set@@LOC y))
                   (= x
                      y))))

(assert (forall ( (x LOC)
                  (s1 (set LOC))
                  (s2 (set LOC)) )
                (= (elem@@LOC x
                              (set-diff@@LOC s1
                                             s2))
                   (and (elem@@LOC x
                                   s1)
                        (not (elem@@LOC x
                                        s2))))))

(assert (forall ( (x LOC)
                  (s1 (set LOC))
                  (s2 (set LOC)) )
                (= (elem@@LOC x
                              (intersect@@LOC s1
                                              s2))
                   (and (elem@@LOC x
                                   s1)
                        (elem@@LOC x
                                   s2)))))

(assert (forall ( (x LOC)
                  (s1 (set LOC))
                  (s2 (set LOC)) )
                (= (elem@@LOC x
                              (bunion@@LOC s1
                                           s2))
                   (or (elem@@LOC x
                                  s1)
                       (elem@@LOC x
                                  s2)))))

(assert (forall ( (x LOC)
                  (s1 (set LOC))
                  (s2 (set LOC)) )
                (not (elem@@LOC x
                                empty-set@@LOC))))

(assert (forall ( (x TRAIN)
                  (y TRAIN) )
                (= (elem@@TRAIN x
                                (mk-set@@TRAIN y))
                   (= x
                      y))))

(assert (forall ( (x TRAIN)
                  (s1 (set TRAIN))
                  (s2 (set TRAIN)) )
                (= (elem@@TRAIN x
                                (set-diff@@TRAIN s1
                                                 s2))
                   (and (elem@@TRAIN x
                                     s1)
                        (not (elem@@TRAIN x
                                          s2))))))

(assert (forall ( (x TRAIN)
                  (s1 (set TRAIN))
                  (s2 (set TRAIN)) )
                (= (elem@@TRAIN x
                                (intersect@@TRAIN s1
                                                  s2))
                   (and (elem@@TRAIN x
                                     s1)
                        (elem@@TRAIN x
                                     s2)))))

(assert (forall ( (x TRAIN)
                  (s1 (set TRAIN))
                  (s2 (set TRAIN)) )
                (= (elem@@TRAIN x
                                (bunion@@TRAIN s1
                                               s2))
                   (or (elem@@TRAIN x
                                    s1)
                       (elem@@TRAIN x
                                    s2)))))

(assert (forall ( (x TRAIN)
                  (s1 (set TRAIN))
                  (s2 (set TRAIN)) )
                (not (elem@@TRAIN x
                                  empty-set@@TRAIN))))

(assert (forall ( (f1 (pfun TRAIN
                            BLK))
                  (f2 (pfun TRAIN
                            BLK)) )
                (= (bunion@@TRAIN (dom@@TRAIN@@BLK f1)
                                  (dom@@TRAIN@@BLK f2))
                   (dom@@TRAIN@@BLK (ovl@@TRAIN@@BLK f1
                                                     f2)))))

(assert (= (dom@@TRAIN@@BLK empty-fun@@TRAIN@@BLK)
           empty-set@@TRAIN))

(assert (forall ( (x TRAIN)
                  (y BLK) )
                (= (dom@@TRAIN@@BLK (mk-fun@@TRAIN@@BLK x
                                                        y))
                   (mk-set@@TRAIN x))))

(assert (forall ( (f1 (pfun TRAIN
                            BLK))
                  (f2 (pfun TRAIN
                            BLK))
                  (x TRAIN) )
                (=> (elem@@TRAIN x
                                 (dom@@TRAIN@@BLK f2))
                    (= (select (ovl@@TRAIN@@BLK f1
                                                f2)
                               x)
                       (select f2
                               x)))))

(assert (forall ( (f1 (pfun TRAIN
                            BLK))
                  (f2 (pfun TRAIN
                            BLK))
                  (x TRAIN) )
                (=> (elem@@TRAIN x
                                 (set-diff@@TRAIN (dom@@TRAIN@@BLK f1)
                                                  (dom@@TRAIN@@BLK f2)))
                    (= (select (ovl@@TRAIN@@BLK f1
                                                f2)
                               x)
                       (select f1
                               x)))))

(assert (forall ( (f1 (pfun TRAIN
                            BLK))
                  (s1 (set TRAIN)) )
                (= (dom@@TRAIN@@BLK (dom-subt@@TRAIN@@BLK s1
                                                          f1))
                   (set-diff@@TRAIN (dom@@TRAIN@@BLK f1)
                                    s1))))

(assert (forall ( (x TRAIN)
                  (y BLK) )
                (= (select (mk-fun@@TRAIN@@BLK x
                                               y)
                           x)
                   y)))

(assert (forall ( (f1 (pfun TRAIN
                            BLK))
                  (s1 (set TRAIN))
                  (x TRAIN) )
                (=> (elem@@TRAIN x
                                 (intersect@@TRAIN s1
                                                   (dom@@TRAIN@@BLK f1)))
                    (= (select (dom-rest@@TRAIN@@BLK s1
                                                     f1)
                               x)
                       (select f1
                               x)))))

(assert (forall ( (f1 (pfun TRAIN
                            BLK))
                  (s1 (set TRAIN))
                  (x TRAIN) )
                (=> (elem@@TRAIN x
                                 (set-diff@@TRAIN (dom@@TRAIN@@BLK f1)
                                                  s1))
                    (= (select (dom-subt@@TRAIN@@BLK s1
                                                     f1)
                               x)
                       (select f1
                               x)))))

(assert (forall ( (x (pfun TRAIN
                           BLK))
                  (y (pfun TRAIN
                           BLK)) )
                (= (elem@Open@@pfun@@TRAIN@@BLK@Close x
                                                      (mk-set@Open@@pfun@@TRAIN@@BLK@Close y))
                   (= x
                      y))))

(assert (forall ( (x (pfun TRAIN
                           BLK))
                  (s1 (set (pfun TRAIN
                                 BLK)))
                  (s2 (set (pfun TRAIN
                                 BLK))) )
                (= (elem@Open@@pfun@@TRAIN@@BLK@Close x
                                                      (set-diff@Open@@pfun@@TRAIN@@BLK@Close s1
                                                                                             s2))
                   (and (elem@Open@@pfun@@TRAIN@@BLK@Close x
                                                           s1)
                        (not (elem@Open@@pfun@@TRAIN@@BLK@Close x
                                                                s2))))))

(assert (forall ( (x (pfun TRAIN
                           BLK))
                  (s1 (set (pfun TRAIN
                                 BLK)))
                  (s2 (set (pfun TRAIN
                                 BLK))) )
                (= (elem@Open@@pfun@@TRAIN@@BLK@Close x
                                                      (intersect@Open@@pfun@@TRAIN@@BLK@Close s1
                                                                                              s2))
                   (and (elem@Open@@pfun@@TRAIN@@BLK@Close x
                                                           s1)
                        (elem@Open@@pfun@@TRAIN@@BLK@Close x
                                                           s2)))))

(assert (forall ( (x (pfun TRAIN
                           BLK))
                  (s1 (set (pfun TRAIN
                                 BLK)))
                  (s2 (set (pfun TRAIN
                                 BLK))) )
                (= (elem@Open@@pfun@@TRAIN@@BLK@Close x
                                                      (bunion@Open@@pfun@@TRAIN@@BLK@Close s1
                                                                                           s2))
                   (or (elem@Open@@pfun@@TRAIN@@BLK@Close x
                                                          s1)
                       (elem@Open@@pfun@@TRAIN@@BLK@Close x
                                                          s2)))))

(assert (forall ( (x (pfun TRAIN
                           BLK))
                  (s1 (set (pfun TRAIN
                                 BLK)))
                  (s2 (set (pfun TRAIN
                                 BLK))) )
                (not (elem@Open@@pfun@@TRAIN@@BLK@Close x
                                                        empty-set@Open@@pfun@@TRAIN@@BLK@Close))))

(assert (and (not (= ent
                     ext))
             (not (elem@@BLK ent
                             PLF))
             (not (elem@@BLK ext
                             PLF))))

(assert (forall ( (p BLK) )
                (=> true
                    (= (not (= p
                               ext))
                       (elem@@BLK p
                                  (bunion@@BLK (mk-set@@BLK ent)
                                               PLF))))))

(assert (forall ( (p BLK) )
                (=> true
                    (= (not (= p
                               ent))
                       (elem@@BLK p
                                  (bunion@@BLK (mk-set@@BLK ext)
                                               PLF))))))

(assert (forall ( (p BLK) )
                (=> true
                    (= (or (= p
                              ent)
                           (= p
                              ext))
                       (not (elem@@BLK p
                                       PLF))))))

(assert (= BLK
           (bunion@@BLK (bunion@@BLK (mk-set@@BLK ent)
                                     (mk-set@@BLK ext))
                        PLF)))

(assert (forall ( (t TRAIN) )
                (=> (elem@@TRAIN t
                                 in)
                    (elem@@BLK (select loc
                                       t)
                               BLK))))

(assert (= (dom@@TRAIN@@BLK loc)
           in))

(assert (not (elem@@TRAIN t
                          in)))

(assert (= in@prime
           (bunion@@TRAIN in
                          (mk-set@@TRAIN t))))

(assert (= loc@prime
           (ovl@@TRAIN@@BLK loc
                            (mk-fun@@TRAIN@@BLK t
                                                ent))))

(assert (not (or (= t_0
                    t)
                 (not (= t_0
                         t)))))

(check-sat-using (or-else (then qe smt) (then skip smt) (then (using-params simplify :expand-power true) smt)))

(pop)
(echo "> train0/enter/FIS")
(push)
(declare-sort BLK 0)
(declare-sort LOC 0)
(declare-sort TRAIN 0)
(define-sort pfun (a b) (Array a b))
(declare-sort set 1)
(declare-const PLF (set BLK))
(declare-const BLK (set BLK))
(declare-const LOC (set LOC))
(declare-const TRAIN (set TRAIN))
(declare-const ent BLK)
(declare-const ext BLK)
(declare-const in (set TRAIN))
(declare-const loc (pfun TRAIN BLK))
(declare-const p BLK)
(declare-const q BLK)
(declare-const t TRAIN)
(declare-const t_0 TRAIN)
(declare-const t_1 TRAIN)
(declare-const t_2 TRAIN)
(declare-const t_3 TRAIN)
(declare-fun apply@@TRAIN@@BLK ((pfun TRAIN BLK) TRAIN) BLK)
(declare-fun dom-rest@@TRAIN@@BLK ((set TRAIN) (pfun TRAIN BLK)) (pfun TRAIN BLK))
(declare-fun dom-subt@@TRAIN@@BLK ((set TRAIN) (pfun TRAIN BLK)) (pfun TRAIN BLK))
(declare-fun dom@@TRAIN@@BLK ((pfun TRAIN BLK)) (set TRAIN))
(declare-fun elem@@BLK (BLK (set BLK)) Bool)
(declare-fun elem@@LOC (LOC (set LOC)) Bool)
(declare-fun elem@@TRAIN (TRAIN (set TRAIN)) Bool)
(declare-fun elem@Open@@pfun@@TRAIN@@BLK@Close ((pfun TRAIN BLK) (set (pfun TRAIN BLK))) Bool)
(declare-fun empty-fun@@TRAIN@@BLK () (pfun TRAIN BLK))
(declare-fun empty-set@@BLK () (set BLK))
(declare-fun empty-set@@LOC () (set LOC))
(declare-fun empty-set@@TRAIN () (set TRAIN))
(declare-fun empty-set@Open@@pfun@@TRAIN@@BLK@Close () (set (pfun TRAIN BLK)))
(declare-fun intersect@@BLK ((set BLK) (set BLK)) (set BLK))
(declare-fun intersect@@LOC ((set LOC) (set LOC)) (set LOC))
(declare-fun intersect@@TRAIN ((set TRAIN) (set TRAIN)) (set TRAIN))
(declare-fun intersect@Open@@pfun@@TRAIN@@BLK@Close ((set (pfun TRAIN BLK)) (set (pfun TRAIN BLK))) (set (pfun TRAIN BLK)))
(declare-fun mk-fun@@TRAIN@@BLK (TRAIN BLK) (pfun TRAIN BLK))
(declare-fun mk-set@@BLK (BLK) (set BLK))
(declare-fun mk-set@@LOC (LOC) (set LOC))
(declare-fun mk-set@@TRAIN (TRAIN) (set TRAIN))
(declare-fun mk-set@Open@@pfun@@TRAIN@@BLK@Close ((pfun TRAIN BLK)) (set (pfun TRAIN BLK)))
(declare-fun ovl@@TRAIN@@BLK ((pfun TRAIN BLK) (pfun TRAIN BLK)) (pfun TRAIN BLK))
(declare-fun set-diff@@BLK ((set BLK) (set BLK)) (set BLK))
(declare-fun set-diff@@LOC ((set LOC) (set LOC)) (set LOC))
(declare-fun set-diff@@TRAIN ((set TRAIN) (set TRAIN)) (set TRAIN))
(declare-fun set-diff@Open@@pfun@@TRAIN@@BLK@Close ((set (pfun TRAIN BLK)) (set (pfun TRAIN BLK))) (set (pfun TRAIN BLK)))
(declare-fun tfun@@TRAIN@@BLK ((set TRAIN) (set BLK)) (set (pfun TRAIN BLK)))
(declare-fun bunion@@BLK ((set BLK) (set BLK)) (set BLK))
(declare-fun bunion@@LOC ((set LOC) (set LOC)) (set LOC))
(declare-fun bunion@@TRAIN ((set TRAIN) (set TRAIN)) (set TRAIN))
(declare-fun bunion@Open@@pfun@@TRAIN@@BLK@Close ((set (pfun TRAIN BLK)) (set (pfun TRAIN BLK))) (set (pfun TRAIN BLK)))
(assert (forall ( (x BLK)
                  (y BLK) )
                (= (elem@@BLK x
                              (mk-set@@BLK y))
                   (= x
                      y))))

(assert (forall ( (x BLK)
                  (s1 (set BLK))
                  (s2 (set BLK)) )
                (= (elem@@BLK x
                              (set-diff@@BLK s1
                                             s2))
                   (and (elem@@BLK x
                                   s1)
                        (not (elem@@BLK x
                                        s2))))))

(assert (forall ( (x BLK)
                  (s1 (set BLK))
                  (s2 (set BLK)) )
                (= (elem@@BLK x
                              (intersect@@BLK s1
                                              s2))
                   (and (elem@@BLK x
                                   s1)
                        (elem@@BLK x
                                   s2)))))

(assert (forall ( (x BLK)
                  (s1 (set BLK))
                  (s2 (set BLK)) )
                (= (elem@@BLK x
                              (bunion@@BLK s1
                                           s2))
                   (or (elem@@BLK x
                                  s1)
                       (elem@@BLK x
                                  s2)))))

(assert (forall ( (x BLK)
                  (s1 (set BLK))
                  (s2 (set BLK)) )
                (not (elem@@BLK x
                                empty-set@@BLK))))

(assert (forall ( (x LOC)
                  (y LOC) )
                (= (elem@@LOC x
                              (mk-set@@LOC y))
                   (= x
                      y))))

(assert (forall ( (x LOC)
                  (s1 (set LOC))
                  (s2 (set LOC)) )
                (= (elem@@LOC x
                              (set-diff@@LOC s1
                                             s2))
                   (and (elem@@LOC x
                                   s1)
                        (not (elem@@LOC x
                                        s2))))))

(assert (forall ( (x LOC)
                  (s1 (set LOC))
                  (s2 (set LOC)) )
                (= (elem@@LOC x
                              (intersect@@LOC s1
                                              s2))
                   (and (elem@@LOC x
                                   s1)
                        (elem@@LOC x
                                   s2)))))

(assert (forall ( (x LOC)
                  (s1 (set LOC))
                  (s2 (set LOC)) )
                (= (elem@@LOC x
                              (bunion@@LOC s1
                                           s2))
                   (or (elem@@LOC x
                                  s1)
                       (elem@@LOC x
                                  s2)))))

(assert (forall ( (x LOC)
                  (s1 (set LOC))
                  (s2 (set LOC)) )
                (not (elem@@LOC x
                                empty-set@@LOC))))

(assert (forall ( (x TRAIN)
                  (y TRAIN) )
                (= (elem@@TRAIN x
                                (mk-set@@TRAIN y))
                   (= x
                      y))))

(assert (forall ( (x TRAIN)
                  (s1 (set TRAIN))
                  (s2 (set TRAIN)) )
                (= (elem@@TRAIN x
                                (set-diff@@TRAIN s1
                                                 s2))
                   (and (elem@@TRAIN x
                                     s1)
                        (not (elem@@TRAIN x
                                          s2))))))

(assert (forall ( (x TRAIN)
                  (s1 (set TRAIN))
                  (s2 (set TRAIN)) )
                (= (elem@@TRAIN x
                                (intersect@@TRAIN s1
                                                  s2))
                   (and (elem@@TRAIN x
                                     s1)
                        (elem@@TRAIN x
                                     s2)))))

(assert (forall ( (x TRAIN)
                  (s1 (set TRAIN))
                  (s2 (set TRAIN)) )
                (= (elem@@TRAIN x
                                (bunion@@TRAIN s1
                                               s2))
                   (or (elem@@TRAIN x
                                    s1)
                       (elem@@TRAIN x
                                    s2)))))

(assert (forall ( (x TRAIN)
                  (s1 (set TRAIN))
                  (s2 (set TRAIN)) )
                (not (elem@@TRAIN x
                                  empty-set@@TRAIN))))

(assert (forall ( (f1 (pfun TRAIN
                            BLK))
                  (f2 (pfun TRAIN
                            BLK)) )
                (= (bunion@@TRAIN (dom@@TRAIN@@BLK f1)
                                  (dom@@TRAIN@@BLK f2))
                   (dom@@TRAIN@@BLK (ovl@@TRAIN@@BLK f1
                                                     f2)))))

(assert (= (dom@@TRAIN@@BLK empty-fun@@TRAIN@@BLK)
           empty-set@@TRAIN))

(assert (forall ( (x TRAIN)
                  (y BLK) )
                (= (dom@@TRAIN@@BLK (mk-fun@@TRAIN@@BLK x
                                                        y))
                   (mk-set@@TRAIN x))))

(assert (forall ( (f1 (pfun TRAIN
                            BLK))
                  (f2 (pfun TRAIN
                            BLK))
                  (x TRAIN) )
                (=> (elem@@TRAIN x
                                 (dom@@TRAIN@@BLK f2))
                    (= (select (ovl@@TRAIN@@BLK f1
                                                f2)
                               x)
                       (select f2
                               x)))))

(assert (forall ( (f1 (pfun TRAIN
                            BLK))
                  (f2 (pfun TRAIN
                            BLK))
                  (x TRAIN) )
                (=> (elem@@TRAIN x
                                 (set-diff@@TRAIN (dom@@TRAIN@@BLK f1)
                                                  (dom@@TRAIN@@BLK f2)))
                    (= (select (ovl@@TRAIN@@BLK f1
                                                f2)
                               x)
                       (select f1
                               x)))))

(assert (forall ( (f1 (pfun TRAIN
                            BLK))
                  (s1 (set TRAIN)) )
                (= (dom@@TRAIN@@BLK (dom-subt@@TRAIN@@BLK s1
                                                          f1))
                   (set-diff@@TRAIN (dom@@TRAIN@@BLK f1)
                                    s1))))

(assert (forall ( (x TRAIN)
                  (y BLK) )
                (= (select (mk-fun@@TRAIN@@BLK x
                                               y)
                           x)
                   y)))

(assert (forall ( (f1 (pfun TRAIN
                            BLK))
                  (s1 (set TRAIN))
                  (x TRAIN) )
                (=> (elem@@TRAIN x
                                 (intersect@@TRAIN s1
                                                   (dom@@TRAIN@@BLK f1)))
                    (= (select (dom-rest@@TRAIN@@BLK s1
                                                     f1)
                               x)
                       (select f1
                               x)))))

(assert (forall ( (f1 (pfun TRAIN
                            BLK))
                  (s1 (set TRAIN))
                  (x TRAIN) )
                (=> (elem@@TRAIN x
                                 (set-diff@@TRAIN (dom@@TRAIN@@BLK f1)
                                                  s1))
                    (= (select (dom-subt@@TRAIN@@BLK s1
                                                     f1)
                               x)
                       (select f1
                               x)))))

(assert (forall ( (x (pfun TRAIN
                           BLK))
                  (y (pfun TRAIN
                           BLK)) )
                (= (elem@Open@@pfun@@TRAIN@@BLK@Close x
                                                      (mk-set@Open@@pfun@@TRAIN@@BLK@Close y))
                   (= x
                      y))))

(assert (forall ( (x (pfun TRAIN
                           BLK))
                  (s1 (set (pfun TRAIN
                                 BLK)))
                  (s2 (set (pfun TRAIN
                                 BLK))) )
                (= (elem@Open@@pfun@@TRAIN@@BLK@Close x
                                                      (set-diff@Open@@pfun@@TRAIN@@BLK@Close s1
                                                                                             s2))
                   (and (elem@Open@@pfun@@TRAIN@@BLK@Close x
                                                           s1)
                        (not (elem@Open@@pfun@@TRAIN@@BLK@Close x
                                                                s2))))))

(assert (forall ( (x (pfun TRAIN
                           BLK))
                  (s1 (set (pfun TRAIN
                                 BLK)))
                  (s2 (set (pfun TRAIN
                                 BLK))) )
                (= (elem@Open@@pfun@@TRAIN@@BLK@Close x
                                                      (intersect@Open@@pfun@@TRAIN@@BLK@Close s1
                                                                                              s2))
                   (and (elem@Open@@pfun@@TRAIN@@BLK@Close x
                                                           s1)
                        (elem@Open@@pfun@@TRAIN@@BLK@Close x
                                                           s2)))))

(assert (forall ( (x (pfun TRAIN
                           BLK))
                  (s1 (set (pfun TRAIN
                                 BLK)))
                  (s2 (set (pfun TRAIN
                                 BLK))) )
                (= (elem@Open@@pfun@@TRAIN@@BLK@Close x
                                                      (bunion@Open@@pfun@@TRAIN@@BLK@Close s1
                                                                                           s2))
                   (or (elem@Open@@pfun@@TRAIN@@BLK@Close x
                                                          s1)
                       (elem@Open@@pfun@@TRAIN@@BLK@Close x
                                                          s2)))))

(assert (forall ( (x (pfun TRAIN
                           BLK))
                  (s1 (set (pfun TRAIN
                                 BLK)))
                  (s2 (set (pfun TRAIN
                                 BLK))) )
                (not (elem@Open@@pfun@@TRAIN@@BLK@Close x
                                                        empty-set@Open@@pfun@@TRAIN@@BLK@Close))))

(assert (and (not (= ent
                     ext))
             (not (elem@@BLK ent
                             PLF))
             (not (elem@@BLK ext
                             PLF))))

(assert (forall ( (p BLK) )
                (=> true
                    (= (not (= p
                               ext))
                       (elem@@BLK p
                                  (bunion@@BLK (mk-set@@BLK ent)
                                               PLF))))))

(assert (forall ( (p BLK) )
                (=> true
                    (= (not (= p
                               ent))
                       (elem@@BLK p
                                  (bunion@@BLK (mk-set@@BLK ext)
                                               PLF))))))

(assert (forall ( (p BLK) )
                (=> true
                    (= (or (= p
                              ent)
                           (= p
                              ext))
                       (not (elem@@BLK p
                                       PLF))))))

(assert (= BLK
           (bunion@@BLK (bunion@@BLK (mk-set@@BLK ent)
                                     (mk-set@@BLK ext))
                        PLF)))

(assert (forall ( (t TRAIN) )
                (=> (elem@@TRAIN t
                                 in)
                    (elem@@BLK (select loc
                                       t)
                               BLK))))

(assert (= (dom@@TRAIN@@BLK loc)
           in))

(assert (not (elem@@TRAIN t
                          in)))

(assert (not (exists ( (in@prime (set TRAIN))
                       (loc@prime (pfun TRAIN
                                        BLK)) )
                     (and (= in@prime
                             (bunion@@TRAIN in
                                            (mk-set@@TRAIN t)))
                          (= loc@prime
                             (ovl@@TRAIN@@BLK loc
                                              (mk-fun@@TRAIN@@BLK t
                                                                  ent)))))))

(check-sat-using (or-else (then qe smt) (then skip smt) (then (using-params simplify :expand-power true) smt)))

(pop)
(echo "> train0/enter/INV/inv1")
(push)
(declare-sort BLK 0)
(declare-sort LOC 0)
(declare-sort TRAIN 0)
(define-sort pfun (a b) (Array a b))
(declare-sort set 1)
(declare-const PLF (set BLK))
(declare-const BLK (set BLK))
(declare-const LOC (set LOC))
(declare-const TRAIN (set TRAIN))
(declare-const ent BLK)
(declare-const ext BLK)
(declare-const in (set TRAIN))
(declare-const in@prime (set TRAIN))
(declare-const loc (pfun TRAIN BLK))
(declare-const loc@prime (pfun TRAIN BLK))
(declare-const p BLK)
(declare-const q BLK)
(declare-const t TRAIN)
(declare-const t_0 TRAIN)
(declare-const t_1 TRAIN)
(declare-const t_2 TRAIN)
(declare-const t_3 TRAIN)
(declare-fun apply@@TRAIN@@BLK ((pfun TRAIN BLK) TRAIN) BLK)
(declare-fun dom-rest@@TRAIN@@BLK ((set TRAIN) (pfun TRAIN BLK)) (pfun TRAIN BLK))
(declare-fun dom-subt@@TRAIN@@BLK ((set TRAIN) (pfun TRAIN BLK)) (pfun TRAIN BLK))
(declare-fun dom@@TRAIN@@BLK ((pfun TRAIN BLK)) (set TRAIN))
(declare-fun elem@@BLK (BLK (set BLK)) Bool)
(declare-fun elem@@LOC (LOC (set LOC)) Bool)
(declare-fun elem@@TRAIN (TRAIN (set TRAIN)) Bool)
(declare-fun elem@Open@@pfun@@TRAIN@@BLK@Close ((pfun TRAIN BLK) (set (pfun TRAIN BLK))) Bool)
(declare-fun empty-fun@@TRAIN@@BLK () (pfun TRAIN BLK))
(declare-fun empty-set@@BLK () (set BLK))
(declare-fun empty-set@@LOC () (set LOC))
(declare-fun empty-set@@TRAIN () (set TRAIN))
(declare-fun empty-set@Open@@pfun@@TRAIN@@BLK@Close () (set (pfun TRAIN BLK)))
(declare-fun intersect@@BLK ((set BLK) (set BLK)) (set BLK))
(declare-fun intersect@@LOC ((set LOC) (set LOC)) (set LOC))
(declare-fun intersect@@TRAIN ((set TRAIN) (set TRAIN)) (set TRAIN))
(declare-fun intersect@Open@@pfun@@TRAIN@@BLK@Close ((set (pfun TRAIN BLK)) (set (pfun TRAIN BLK))) (set (pfun TRAIN BLK)))
(declare-fun mk-fun@@TRAIN@@BLK (TRAIN BLK) (pfun TRAIN BLK))
(declare-fun mk-set@@BLK (BLK) (set BLK))
(declare-fun mk-set@@LOC (LOC) (set LOC))
(declare-fun mk-set@@TRAIN (TRAIN) (set TRAIN))
(declare-fun mk-set@Open@@pfun@@TRAIN@@BLK@Close ((pfun TRAIN BLK)) (set (pfun TRAIN BLK)))
(declare-fun ovl@@TRAIN@@BLK ((pfun TRAIN BLK) (pfun TRAIN BLK)) (pfun TRAIN BLK))
(declare-fun set-diff@@BLK ((set BLK) (set BLK)) (set BLK))
(declare-fun set-diff@@LOC ((set LOC) (set LOC)) (set LOC))
(declare-fun set-diff@@TRAIN ((set TRAIN) (set TRAIN)) (set TRAIN))
(declare-fun set-diff@Open@@pfun@@TRAIN@@BLK@Close ((set (pfun TRAIN BLK)) (set (pfun TRAIN BLK))) (set (pfun TRAIN BLK)))
(declare-fun tfun@@TRAIN@@BLK ((set TRAIN) (set BLK)) (set (pfun TRAIN BLK)))
(declare-fun bunion@@BLK ((set BLK) (set BLK)) (set BLK))
(declare-fun bunion@@LOC ((set LOC) (set LOC)) (set LOC))
(declare-fun bunion@@TRAIN ((set TRAIN) (set TRAIN)) (set TRAIN))
(declare-fun bunion@Open@@pfun@@TRAIN@@BLK@Close ((set (pfun TRAIN BLK)) (set (pfun TRAIN BLK))) (set (pfun TRAIN BLK)))
(assert (forall ( (x BLK)
                  (y BLK) )
                (= (elem@@BLK x
                              (mk-set@@BLK y))
                   (= x
                      y))))

(assert (forall ( (x BLK)
                  (s1 (set BLK))
                  (s2 (set BLK)) )
                (= (elem@@BLK x
                              (set-diff@@BLK s1
                                             s2))
                   (and (elem@@BLK x
                                   s1)
                        (not (elem@@BLK x
                                        s2))))))

(assert (forall ( (x BLK)
                  (s1 (set BLK))
                  (s2 (set BLK)) )
                (= (elem@@BLK x
                              (intersect@@BLK s1
                                              s2))
                   (and (elem@@BLK x
                                   s1)
                        (elem@@BLK x
                                   s2)))))

(assert (forall ( (x BLK)
                  (s1 (set BLK))
                  (s2 (set BLK)) )
                (= (elem@@BLK x
                              (bunion@@BLK s1
                                           s2))
                   (or (elem@@BLK x
                                  s1)
                       (elem@@BLK x
                                  s2)))))

(assert (forall ( (x BLK)
                  (s1 (set BLK))
                  (s2 (set BLK)) )
                (not (elem@@BLK x
                                empty-set@@BLK))))

(assert (forall ( (x LOC)
                  (y LOC) )
                (= (elem@@LOC x
                              (mk-set@@LOC y))
                   (= x
                      y))))

(assert (forall ( (x LOC)
                  (s1 (set LOC))
                  (s2 (set LOC)) )
                (= (elem@@LOC x
                              (set-diff@@LOC s1
                                             s2))
                   (and (elem@@LOC x
                                   s1)
                        (not (elem@@LOC x
                                        s2))))))

(assert (forall ( (x LOC)
                  (s1 (set LOC))
                  (s2 (set LOC)) )
                (= (elem@@LOC x
                              (intersect@@LOC s1
                                              s2))
                   (and (elem@@LOC x
                                   s1)
                        (elem@@LOC x
                                   s2)))))

(assert (forall ( (x LOC)
                  (s1 (set LOC))
                  (s2 (set LOC)) )
                (= (elem@@LOC x
                              (bunion@@LOC s1
                                           s2))
                   (or (elem@@LOC x
                                  s1)
                       (elem@@LOC x
                                  s2)))))

(assert (forall ( (x LOC)
                  (s1 (set LOC))
                  (s2 (set LOC)) )
                (not (elem@@LOC x
                                empty-set@@LOC))))

(assert (forall ( (x TRAIN)
                  (y TRAIN) )
                (= (elem@@TRAIN x
                                (mk-set@@TRAIN y))
                   (= x
                      y))))

(assert (forall ( (x TRAIN)
                  (s1 (set TRAIN))
                  (s2 (set TRAIN)) )
                (= (elem@@TRAIN x
                                (set-diff@@TRAIN s1
                                                 s2))
                   (and (elem@@TRAIN x
                                     s1)
                        (not (elem@@TRAIN x
                                          s2))))))

(assert (forall ( (x TRAIN)
                  (s1 (set TRAIN))
                  (s2 (set TRAIN)) )
                (= (elem@@TRAIN x
                                (intersect@@TRAIN s1
                                                  s2))
                   (and (elem@@TRAIN x
                                     s1)
                        (elem@@TRAIN x
                                     s2)))))

(assert (forall ( (x TRAIN)
                  (s1 (set TRAIN))
                  (s2 (set TRAIN)) )
                (= (elem@@TRAIN x
                                (bunion@@TRAIN s1
                                               s2))
                   (or (elem@@TRAIN x
                                    s1)
                       (elem@@TRAIN x
                                    s2)))))

(assert (forall ( (x TRAIN)
                  (s1 (set TRAIN))
                  (s2 (set TRAIN)) )
                (not (elem@@TRAIN x
                                  empty-set@@TRAIN))))

(assert (forall ( (f1 (pfun TRAIN
                            BLK))
                  (f2 (pfun TRAIN
                            BLK)) )
                (= (bunion@@TRAIN (dom@@TRAIN@@BLK f1)
                                  (dom@@TRAIN@@BLK f2))
                   (dom@@TRAIN@@BLK (ovl@@TRAIN@@BLK f1
                                                     f2)))))

(assert (= (dom@@TRAIN@@BLK empty-fun@@TRAIN@@BLK)
           empty-set@@TRAIN))

(assert (forall ( (x TRAIN)
                  (y BLK) )
                (= (dom@@TRAIN@@BLK (mk-fun@@TRAIN@@BLK x
                                                        y))
                   (mk-set@@TRAIN x))))

(assert (forall ( (f1 (pfun TRAIN
                            BLK))
                  (f2 (pfun TRAIN
                            BLK))
                  (x TRAIN) )
                (=> (elem@@TRAIN x
                                 (dom@@TRAIN@@BLK f2))
                    (= (select (ovl@@TRAIN@@BLK f1
                                                f2)
                               x)
                       (select f2
                               x)))))

(assert (forall ( (f1 (pfun TRAIN
                            BLK))
                  (f2 (pfun TRAIN
                            BLK))
                  (x TRAIN) )
                (=> (elem@@TRAIN x
                                 (set-diff@@TRAIN (dom@@TRAIN@@BLK f1)
                                                  (dom@@TRAIN@@BLK f2)))
                    (= (select (ovl@@TRAIN@@BLK f1
                                                f2)
                               x)
                       (select f1
                               x)))))

(assert (forall ( (f1 (pfun TRAIN
                            BLK))
                  (s1 (set TRAIN)) )
                (= (dom@@TRAIN@@BLK (dom-subt@@TRAIN@@BLK s1
                                                          f1))
                   (set-diff@@TRAIN (dom@@TRAIN@@BLK f1)
                                    s1))))

(assert (forall ( (x TRAIN)
                  (y BLK) )
                (= (select (mk-fun@@TRAIN@@BLK x
                                               y)
                           x)
                   y)))

(assert (forall ( (f1 (pfun TRAIN
                            BLK))
                  (s1 (set TRAIN))
                  (x TRAIN) )
                (=> (elem@@TRAIN x
                                 (intersect@@TRAIN s1
                                                   (dom@@TRAIN@@BLK f1)))
                    (= (select (dom-rest@@TRAIN@@BLK s1
                                                     f1)
                               x)
                       (select f1
                               x)))))

(assert (forall ( (f1 (pfun TRAIN
                            BLK))
                  (s1 (set TRAIN))
                  (x TRAIN) )
                (=> (elem@@TRAIN x
                                 (set-diff@@TRAIN (dom@@TRAIN@@BLK f1)
                                                  s1))
                    (= (select (dom-subt@@TRAIN@@BLK s1
                                                     f1)
                               x)
                       (select f1
                               x)))))

(assert (forall ( (x (pfun TRAIN
                           BLK))
                  (y (pfun TRAIN
                           BLK)) )
                (= (elem@Open@@pfun@@TRAIN@@BLK@Close x
                                                      (mk-set@Open@@pfun@@TRAIN@@BLK@Close y))
                   (= x
                      y))))

(assert (forall ( (x (pfun TRAIN
                           BLK))
                  (s1 (set (pfun TRAIN
                                 BLK)))
                  (s2 (set (pfun TRAIN
                                 BLK))) )
                (= (elem@Open@@pfun@@TRAIN@@BLK@Close x
                                                      (set-diff@Open@@pfun@@TRAIN@@BLK@Close s1
                                                                                             s2))
                   (and (elem@Open@@pfun@@TRAIN@@BLK@Close x
                                                           s1)
                        (not (elem@Open@@pfun@@TRAIN@@BLK@Close x
                                                                s2))))))

(assert (forall ( (x (pfun TRAIN
                           BLK))
                  (s1 (set (pfun TRAIN
                                 BLK)))
                  (s2 (set (pfun TRAIN
                                 BLK))) )
                (= (elem@Open@@pfun@@TRAIN@@BLK@Close x
                                                      (intersect@Open@@pfun@@TRAIN@@BLK@Close s1
                                                                                              s2))
                   (and (elem@Open@@pfun@@TRAIN@@BLK@Close x
                                                           s1)
                        (elem@Open@@pfun@@TRAIN@@BLK@Close x
                                                           s2)))))

(assert (forall ( (x (pfun TRAIN
                           BLK))
                  (s1 (set (pfun TRAIN
                                 BLK)))
                  (s2 (set (pfun TRAIN
                                 BLK))) )
                (= (elem@Open@@pfun@@TRAIN@@BLK@Close x
                                                      (bunion@Open@@pfun@@TRAIN@@BLK@Close s1
                                                                                           s2))
                   (or (elem@Open@@pfun@@TRAIN@@BLK@Close x
                                                          s1)
                       (elem@Open@@pfun@@TRAIN@@BLK@Close x
                                                          s2)))))

(assert (forall ( (x (pfun TRAIN
                           BLK))
                  (s1 (set (pfun TRAIN
                                 BLK)))
                  (s2 (set (pfun TRAIN
                                 BLK))) )
                (not (elem@Open@@pfun@@TRAIN@@BLK@Close x
                                                        empty-set@Open@@pfun@@TRAIN@@BLK@Close))))

(assert (and (not (= ent
                     ext))
             (not (elem@@BLK ent
                             PLF))
             (not (elem@@BLK ext
                             PLF))))

(assert (forall ( (p BLK) )
                (=> true
                    (= (not (= p
                               ext))
                       (elem@@BLK p
                                  (bunion@@BLK (mk-set@@BLK ent)
                                               PLF))))))

(assert (forall ( (p BLK) )
                (=> true
                    (= (not (= p
                               ent))
                       (elem@@BLK p
                                  (bunion@@BLK (mk-set@@BLK ext)
                                               PLF))))))

(assert (forall ( (p BLK) )
                (=> true
                    (= (or (= p
                              ent)
                           (= p
                              ext))
                       (not (elem@@BLK p
                                       PLF))))))

(assert (= BLK
           (bunion@@BLK (bunion@@BLK (mk-set@@BLK ent)
                                     (mk-set@@BLK ext))
                        PLF)))

(assert (forall ( (t TRAIN) )
                (=> (elem@@TRAIN t
                                 in)
                    (elem@@BLK (select loc
                                       t)
                               BLK))))

(assert (= (dom@@TRAIN@@BLK loc)
           in))

(assert (not (elem@@TRAIN t
                          in)))

(assert (= in@prime
           (bunion@@TRAIN in
                          (mk-set@@TRAIN t))))

(assert (= loc@prime
           (ovl@@TRAIN@@BLK loc
                            (mk-fun@@TRAIN@@BLK t
                                                ent))))

(assert (not (forall ( (t TRAIN) )
                     (=> (elem@@TRAIN t
                                      in@prime)
                         (elem@@BLK (select loc@prime
                                            t)
                                    BLK)))))

(check-sat-using (or-else (then qe smt) (then skip smt) (then (using-params simplify :expand-power true) smt)))

(pop)
(echo "> train0/enter/INV/inv2/goal (77,1)")
(push)
(declare-sort BLK 0)
(declare-sort LOC 0)
(declare-sort TRAIN 0)
(define-sort pfun (a b) (Array a b))
(declare-sort set 1)
(declare-const PLF (set BLK))
(declare-const BLK (set BLK))
(declare-const LOC (set LOC))
(declare-const TRAIN (set TRAIN))
(declare-const ent BLK)
(declare-const ext BLK)
(declare-const in (set TRAIN))
(declare-const in@prime (set TRAIN))
(declare-const loc (pfun TRAIN BLK))
(declare-const loc@prime (pfun TRAIN BLK))
(declare-const p BLK)
(declare-const q BLK)
(declare-const t TRAIN)
(declare-const t_0 TRAIN)
(declare-const t_1 TRAIN)
(declare-const t_2 TRAIN)
(declare-const t_3 TRAIN)
(declare-fun apply@@TRAIN@@BLK ((pfun TRAIN BLK) TRAIN) BLK)
(declare-fun dom-rest@@TRAIN@@BLK ((set TRAIN) (pfun TRAIN BLK)) (pfun TRAIN BLK))
(declare-fun dom-subt@@TRAIN@@BLK ((set TRAIN) (pfun TRAIN BLK)) (pfun TRAIN BLK))
(declare-fun dom@@TRAIN@@BLK ((pfun TRAIN BLK)) (set TRAIN))
(declare-fun elem@@BLK (BLK (set BLK)) Bool)
(declare-fun elem@@LOC (LOC (set LOC)) Bool)
(declare-fun elem@@TRAIN (TRAIN (set TRAIN)) Bool)
(declare-fun elem@Open@@pfun@@TRAIN@@BLK@Close ((pfun TRAIN BLK) (set (pfun TRAIN BLK))) Bool)
(declare-fun empty-fun@@TRAIN@@BLK () (pfun TRAIN BLK))
(declare-fun empty-set@@BLK () (set BLK))
(declare-fun empty-set@@LOC () (set LOC))
(declare-fun empty-set@@TRAIN () (set TRAIN))
(declare-fun empty-set@Open@@pfun@@TRAIN@@BLK@Close () (set (pfun TRAIN BLK)))
(declare-fun intersect@@BLK ((set BLK) (set BLK)) (set BLK))
(declare-fun intersect@@LOC ((set LOC) (set LOC)) (set LOC))
(declare-fun intersect@@TRAIN ((set TRAIN) (set TRAIN)) (set TRAIN))
(declare-fun intersect@Open@@pfun@@TRAIN@@BLK@Close ((set (pfun TRAIN BLK)) (set (pfun TRAIN BLK))) (set (pfun TRAIN BLK)))
(declare-fun mk-fun@@TRAIN@@BLK (TRAIN BLK) (pfun TRAIN BLK))
(declare-fun mk-set@@BLK (BLK) (set BLK))
(declare-fun mk-set@@LOC (LOC) (set LOC))
(declare-fun mk-set@@TRAIN (TRAIN) (set TRAIN))
(declare-fun mk-set@Open@@pfun@@TRAIN@@BLK@Close ((pfun TRAIN BLK)) (set (pfun TRAIN BLK)))
(declare-fun ovl@@TRAIN@@BLK ((pfun TRAIN BLK) (pfun TRAIN BLK)) (pfun TRAIN BLK))
(declare-fun set-diff@@BLK ((set BLK) (set BLK)) (set BLK))
(declare-fun set-diff@@LOC ((set LOC) (set LOC)) (set LOC))
(declare-fun set-diff@@TRAIN ((set TRAIN) (set TRAIN)) (set TRAIN))
(declare-fun set-diff@Open@@pfun@@TRAIN@@BLK@Close ((set (pfun TRAIN BLK)) (set (pfun TRAIN BLK))) (set (pfun TRAIN BLK)))
(declare-fun tfun@@TRAIN@@BLK ((set TRAIN) (set BLK)) (set (pfun TRAIN BLK)))
(declare-fun bunion@@BLK ((set BLK) (set BLK)) (set BLK))
(declare-fun bunion@@LOC ((set LOC) (set LOC)) (set LOC))
(declare-fun bunion@@TRAIN ((set TRAIN) (set TRAIN)) (set TRAIN))
(declare-fun bunion@Open@@pfun@@TRAIN@@BLK@Close ((set (pfun TRAIN BLK)) (set (pfun TRAIN BLK))) (set (pfun TRAIN BLK)))
(assert (= in@prime
           (dom@@TRAIN@@BLK loc@prime)))

(assert (not (= (dom@@TRAIN@@BLK loc@prime)
                in@prime)))

(check-sat-using (or-else (then qe smt) (then skip smt) (then (using-params simplify :expand-power true) smt)))

(pop)
(echo "> train0/enter/INV/inv2/hypotheses (77,1)")
(push)
(declare-sort BLK 0)
(declare-sort LOC 0)
(declare-sort TRAIN 0)
(define-sort pfun (a b) (Array a b))
(declare-sort set 1)
(declare-const PLF (set BLK))
(declare-const BLK (set BLK))
(declare-const LOC (set LOC))
(declare-const TRAIN (set TRAIN))
(declare-const ent BLK)
(declare-const ext BLK)
(declare-const in (set TRAIN))
(declare-const in@prime (set TRAIN))
(declare-const loc (pfun TRAIN BLK))
(declare-const loc@prime (pfun TRAIN BLK))
(declare-const p BLK)
(declare-const q BLK)
(declare-const t TRAIN)
(declare-const t_0 TRAIN)
(declare-const t_1 TRAIN)
(declare-const t_2 TRAIN)
(declare-const t_3 TRAIN)
(declare-fun apply@@TRAIN@@BLK ((pfun TRAIN BLK) TRAIN) BLK)
(declare-fun dom-rest@@TRAIN@@BLK ((set TRAIN) (pfun TRAIN BLK)) (pfun TRAIN BLK))
(declare-fun dom-subt@@TRAIN@@BLK ((set TRAIN) (pfun TRAIN BLK)) (pfun TRAIN BLK))
(declare-fun dom@@TRAIN@@BLK ((pfun TRAIN BLK)) (set TRAIN))
(declare-fun elem@@BLK (BLK (set BLK)) Bool)
(declare-fun elem@@LOC (LOC (set LOC)) Bool)
(declare-fun elem@@TRAIN (TRAIN (set TRAIN)) Bool)
(declare-fun elem@Open@@pfun@@TRAIN@@BLK@Close ((pfun TRAIN BLK) (set (pfun TRAIN BLK))) Bool)
(declare-fun empty-fun@@TRAIN@@BLK () (pfun TRAIN BLK))
(declare-fun empty-set@@BLK () (set BLK))
(declare-fun empty-set@@LOC () (set LOC))
(declare-fun empty-set@@TRAIN () (set TRAIN))
(declare-fun empty-set@Open@@pfun@@TRAIN@@BLK@Close () (set (pfun TRAIN BLK)))
(declare-fun intersect@@BLK ((set BLK) (set BLK)) (set BLK))
(declare-fun intersect@@LOC ((set LOC) (set LOC)) (set LOC))
(declare-fun intersect@@TRAIN ((set TRAIN) (set TRAIN)) (set TRAIN))
(declare-fun intersect@Open@@pfun@@TRAIN@@BLK@Close ((set (pfun TRAIN BLK)) (set (pfun TRAIN BLK))) (set (pfun TRAIN BLK)))
(declare-fun mk-fun@@TRAIN@@BLK (TRAIN BLK) (pfun TRAIN BLK))
(declare-fun mk-set@@BLK (BLK) (set BLK))
(declare-fun mk-set@@LOC (LOC) (set LOC))
(declare-fun mk-set@@TRAIN (TRAIN) (set TRAIN))
(declare-fun mk-set@Open@@pfun@@TRAIN@@BLK@Close ((pfun TRAIN BLK)) (set (pfun TRAIN BLK)))
(declare-fun ovl@@TRAIN@@BLK ((pfun TRAIN BLK) (pfun TRAIN BLK)) (pfun TRAIN BLK))
(declare-fun set-diff@@BLK ((set BLK) (set BLK)) (set BLK))
(declare-fun set-diff@@LOC ((set LOC) (set LOC)) (set LOC))
(declare-fun set-diff@@TRAIN ((set TRAIN) (set TRAIN)) (set TRAIN))
(declare-fun set-diff@Open@@pfun@@TRAIN@@BLK@Close ((set (pfun TRAIN BLK)) (set (pfun TRAIN BLK))) (set (pfun TRAIN BLK)))
(declare-fun tfun@@TRAIN@@BLK ((set TRAIN) (set BLK)) (set (pfun TRAIN BLK)))
(declare-fun bunion@@BLK ((set BLK) (set BLK)) (set BLK))
(declare-fun bunion@@LOC ((set LOC) (set LOC)) (set LOC))
(declare-fun bunion@@TRAIN ((set TRAIN) (set TRAIN)) (set TRAIN))
(declare-fun bunion@Open@@pfun@@TRAIN@@BLK@Close ((set (pfun TRAIN BLK)) (set (pfun TRAIN BLK))) (set (pfun TRAIN BLK)))
(assert (forall ( (x BLK)
                  (y BLK) )
                (= (elem@@BLK x
                              (mk-set@@BLK y))
                   (= x
                      y))))

(assert (forall ( (x BLK)
                  (s1 (set BLK))
                  (s2 (set BLK)) )
                (= (elem@@BLK x
                              (set-diff@@BLK s1
                                             s2))
                   (and (elem@@BLK x
                                   s1)
                        (not (elem@@BLK x
                                        s2))))))

(assert (forall ( (x BLK)
                  (s1 (set BLK))
                  (s2 (set BLK)) )
                (= (elem@@BLK x
                              (intersect@@BLK s1
                                              s2))
                   (and (elem@@BLK x
                                   s1)
                        (elem@@BLK x
                                   s2)))))

(assert (forall ( (x BLK)
                  (s1 (set BLK))
                  (s2 (set BLK)) )
                (= (elem@@BLK x
                              (bunion@@BLK s1
                                           s2))
                   (or (elem@@BLK x
                                  s1)
                       (elem@@BLK x
                                  s2)))))

(assert (forall ( (x BLK)
                  (s1 (set BLK))
                  (s2 (set BLK)) )
                (not (elem@@BLK x
                                empty-set@@BLK))))

(assert (forall ( (x LOC)
                  (y LOC) )
                (= (elem@@LOC x
                              (mk-set@@LOC y))
                   (= x
                      y))))

(assert (forall ( (x LOC)
                  (s1 (set LOC))
                  (s2 (set LOC)) )
                (= (elem@@LOC x
                              (set-diff@@LOC s1
                                             s2))
                   (and (elem@@LOC x
                                   s1)
                        (not (elem@@LOC x
                                        s2))))))

(assert (forall ( (x LOC)
                  (s1 (set LOC))
                  (s2 (set LOC)) )
                (= (elem@@LOC x
                              (intersect@@LOC s1
                                              s2))
                   (and (elem@@LOC x
                                   s1)
                        (elem@@LOC x
                                   s2)))))

(assert (forall ( (x LOC)
                  (s1 (set LOC))
                  (s2 (set LOC)) )
                (= (elem@@LOC x
                              (bunion@@LOC s1
                                           s2))
                   (or (elem@@LOC x
                                  s1)
                       (elem@@LOC x
                                  s2)))))

(assert (forall ( (x LOC)
                  (s1 (set LOC))
                  (s2 (set LOC)) )
                (not (elem@@LOC x
                                empty-set@@LOC))))

(assert (forall ( (x TRAIN)
                  (y TRAIN) )
                (= (elem@@TRAIN x
                                (mk-set@@TRAIN y))
                   (= x
                      y))))

(assert (forall ( (x TRAIN)
                  (s1 (set TRAIN))
                  (s2 (set TRAIN)) )
                (= (elem@@TRAIN x
                                (set-diff@@TRAIN s1
                                                 s2))
                   (and (elem@@TRAIN x
                                     s1)
                        (not (elem@@TRAIN x
                                          s2))))))

(assert (forall ( (x TRAIN)
                  (s1 (set TRAIN))
                  (s2 (set TRAIN)) )
                (= (elem@@TRAIN x
                                (intersect@@TRAIN s1
                                                  s2))
                   (and (elem@@TRAIN x
                                     s1)
                        (elem@@TRAIN x
                                     s2)))))

(assert (forall ( (x TRAIN)
                  (s1 (set TRAIN))
                  (s2 (set TRAIN)) )
                (= (elem@@TRAIN x
                                (bunion@@TRAIN s1
                                               s2))
                   (or (elem@@TRAIN x
                                    s1)
                       (elem@@TRAIN x
                                    s2)))))

(assert (forall ( (x TRAIN)
                  (s1 (set TRAIN))
                  (s2 (set TRAIN)) )
                (not (elem@@TRAIN x
                                  empty-set@@TRAIN))))

(assert (forall ( (f1 (pfun TRAIN
                            BLK))
                  (f2 (pfun TRAIN
                            BLK)) )
                (= (bunion@@TRAIN (dom@@TRAIN@@BLK f1)
                                  (dom@@TRAIN@@BLK f2))
                   (dom@@TRAIN@@BLK (ovl@@TRAIN@@BLK f1
                                                     f2)))))

(assert (= (dom@@TRAIN@@BLK empty-fun@@TRAIN@@BLK)
           empty-set@@TRAIN))

(assert (forall ( (x TRAIN)
                  (y BLK) )
                (= (dom@@TRAIN@@BLK (mk-fun@@TRAIN@@BLK x
                                                        y))
                   (mk-set@@TRAIN x))))

(assert (forall ( (f1 (pfun TRAIN
                            BLK))
                  (f2 (pfun TRAIN
                            BLK))
                  (x TRAIN) )
                (=> (elem@@TRAIN x
                                 (dom@@TRAIN@@BLK f2))
                    (= (select (ovl@@TRAIN@@BLK f1
                                                f2)
                               x)
                       (select f2
                               x)))))

(assert (forall ( (f1 (pfun TRAIN
                            BLK))
                  (f2 (pfun TRAIN
                            BLK))
                  (x TRAIN) )
                (=> (elem@@TRAIN x
                                 (set-diff@@TRAIN (dom@@TRAIN@@BLK f1)
                                                  (dom@@TRAIN@@BLK f2)))
                    (= (select (ovl@@TRAIN@@BLK f1
                                                f2)
                               x)
                       (select f1
                               x)))))

(assert (forall ( (f1 (pfun TRAIN
                            BLK))
                  (s1 (set TRAIN)) )
                (= (dom@@TRAIN@@BLK (dom-subt@@TRAIN@@BLK s1
                                                          f1))
                   (set-diff@@TRAIN (dom@@TRAIN@@BLK f1)
                                    s1))))

(assert (forall ( (x TRAIN)
                  (y BLK) )
                (= (select (mk-fun@@TRAIN@@BLK x
                                               y)
                           x)
                   y)))

(assert (forall ( (f1 (pfun TRAIN
                            BLK))
                  (s1 (set TRAIN))
                  (x TRAIN) )
                (=> (elem@@TRAIN x
                                 (intersect@@TRAIN s1
                                                   (dom@@TRAIN@@BLK f1)))
                    (= (select (dom-rest@@TRAIN@@BLK s1
                                                     f1)
                               x)
                       (select f1
                               x)))))

(assert (forall ( (f1 (pfun TRAIN
                            BLK))
                  (s1 (set TRAIN))
                  (x TRAIN) )
                (=> (elem@@TRAIN x
                                 (set-diff@@TRAIN (dom@@TRAIN@@BLK f1)
                                                  s1))
                    (= (select (dom-subt@@TRAIN@@BLK s1
                                                     f1)
                               x)
                       (select f1
                               x)))))

(assert (forall ( (x (pfun TRAIN
                           BLK))
                  (y (pfun TRAIN
                           BLK)) )
                (= (elem@Open@@pfun@@TRAIN@@BLK@Close x
                                                      (mk-set@Open@@pfun@@TRAIN@@BLK@Close y))
                   (= x
                      y))))

(assert (forall ( (x (pfun TRAIN
                           BLK))
                  (s1 (set (pfun TRAIN
                                 BLK)))
                  (s2 (set (pfun TRAIN
                                 BLK))) )
                (= (elem@Open@@pfun@@TRAIN@@BLK@Close x
                                                      (set-diff@Open@@pfun@@TRAIN@@BLK@Close s1
                                                                                             s2))
                   (and (elem@Open@@pfun@@TRAIN@@BLK@Close x
                                                           s1)
                        (not (elem@Open@@pfun@@TRAIN@@BLK@Close x
                                                                s2))))))

(assert (forall ( (x (pfun TRAIN
                           BLK))
                  (s1 (set (pfun TRAIN
                                 BLK)))
                  (s2 (set (pfun TRAIN
                                 BLK))) )
                (= (elem@Open@@pfun@@TRAIN@@BLK@Close x
                                                      (intersect@Open@@pfun@@TRAIN@@BLK@Close s1
                                                                                              s2))
                   (and (elem@Open@@pfun@@TRAIN@@BLK@Close x
                                                           s1)
                        (elem@Open@@pfun@@TRAIN@@BLK@Close x
                                                           s2)))))

(assert (forall ( (x (pfun TRAIN
                           BLK))
                  (s1 (set (pfun TRAIN
                                 BLK)))
                  (s2 (set (pfun TRAIN
                                 BLK))) )
                (= (elem@Open@@pfun@@TRAIN@@BLK@Close x
                                                      (bunion@Open@@pfun@@TRAIN@@BLK@Close s1
                                                                                           s2))
                   (or (elem@Open@@pfun@@TRAIN@@BLK@Close x
                                                          s1)
                       (elem@Open@@pfun@@TRAIN@@BLK@Close x
                                                          s2)))))

(assert (forall ( (x (pfun TRAIN
                           BLK))
                  (s1 (set (pfun TRAIN
                                 BLK)))
                  (s2 (set (pfun TRAIN
                                 BLK))) )
                (not (elem@Open@@pfun@@TRAIN@@BLK@Close x
                                                        empty-set@Open@@pfun@@TRAIN@@BLK@Close))))

(assert (and (not (= ent
                     ext))
             (not (elem@@BLK ent
                             PLF))
             (not (elem@@BLK ext
                             PLF))))

(assert (forall ( (p BLK) )
                (=> true
                    (= (not (= p
                               ext))
                       (elem@@BLK p
                                  (bunion@@BLK (mk-set@@BLK ent)
                                               PLF))))))

(assert (forall ( (p BLK) )
                (=> true
                    (= (not (= p
                               ent))
                       (elem@@BLK p
                                  (bunion@@BLK (mk-set@@BLK ext)
                                               PLF))))))

(assert (forall ( (p BLK) )
                (=> true
                    (= (or (= p
                              ent)
                           (= p
                              ext))
                       (not (elem@@BLK p
                                       PLF))))))

(assert (= BLK
           (bunion@@BLK (bunion@@BLK (mk-set@@BLK ent)
                                     (mk-set@@BLK ext))
                        PLF)))

(assert (forall ( (t TRAIN) )
                (=> (elem@@TRAIN t
                                 in)
                    (elem@@BLK (select loc
                                       t)
                               BLK))))

(assert (= (dom@@TRAIN@@BLK loc)
           in))

(assert (not (elem@@TRAIN t
                          in)))

(assert (= in@prime
           (bunion@@TRAIN in
                          (mk-set@@TRAIN t))))

(assert (= loc@prime
           (ovl@@TRAIN@@BLK loc
                            (mk-fun@@TRAIN@@BLK t
                                                ent))))

(assert (not (and (= in@prime
                     (bunion@@TRAIN in
                                    (mk-set@@TRAIN t)))
                  (= (dom@@TRAIN@@BLK loc)
                     in)
                  (= loc@prime
                     (ovl@@TRAIN@@BLK loc
                                      (mk-fun@@TRAIN@@BLK t
                                                          ent))))))

(check-sat-using (or-else (then qe smt) (then skip smt) (then (using-params simplify :expand-power true) smt)))

(pop)
(echo "> train0/enter/INV/inv2/relation (77,1)")
(push)
(declare-sort BLK 0)
(declare-sort LOC 0)
(declare-sort TRAIN 0)
(define-sort pfun (a b) (Array a b))
(declare-sort set 1)
(declare-const PLF (set BLK))
(declare-const BLK (set BLK))
(declare-const LOC (set LOC))
(declare-const TRAIN (set TRAIN))
(declare-const ent BLK)
(declare-const ext BLK)
(declare-const in (set TRAIN))
(declare-const in@prime (set TRAIN))
(declare-const loc (pfun TRAIN BLK))
(declare-const loc@prime (pfun TRAIN BLK))
(declare-const p BLK)
(declare-const q BLK)
(declare-const t TRAIN)
(declare-const t_0 TRAIN)
(declare-const t_1 TRAIN)
(declare-const t_2 TRAIN)
(declare-const t_3 TRAIN)
(declare-fun apply@@TRAIN@@BLK ((pfun TRAIN BLK) TRAIN) BLK)
(declare-fun dom-rest@@TRAIN@@BLK ((set TRAIN) (pfun TRAIN BLK)) (pfun TRAIN BLK))
(declare-fun dom-subt@@TRAIN@@BLK ((set TRAIN) (pfun TRAIN BLK)) (pfun TRAIN BLK))
(declare-fun dom@@TRAIN@@BLK ((pfun TRAIN BLK)) (set TRAIN))
(declare-fun elem@@BLK (BLK (set BLK)) Bool)
(declare-fun elem@@LOC (LOC (set LOC)) Bool)
(declare-fun elem@@TRAIN (TRAIN (set TRAIN)) Bool)
(declare-fun elem@Open@@pfun@@TRAIN@@BLK@Close ((pfun TRAIN BLK) (set (pfun TRAIN BLK))) Bool)
(declare-fun empty-fun@@TRAIN@@BLK () (pfun TRAIN BLK))
(declare-fun empty-set@@BLK () (set BLK))
(declare-fun empty-set@@LOC () (set LOC))
(declare-fun empty-set@@TRAIN () (set TRAIN))
(declare-fun empty-set@Open@@pfun@@TRAIN@@BLK@Close () (set (pfun TRAIN BLK)))
(declare-fun intersect@@BLK ((set BLK) (set BLK)) (set BLK))
(declare-fun intersect@@LOC ((set LOC) (set LOC)) (set LOC))
(declare-fun intersect@@TRAIN ((set TRAIN) (set TRAIN)) (set TRAIN))
(declare-fun intersect@Open@@pfun@@TRAIN@@BLK@Close ((set (pfun TRAIN BLK)) (set (pfun TRAIN BLK))) (set (pfun TRAIN BLK)))
(declare-fun mk-fun@@TRAIN@@BLK (TRAIN BLK) (pfun TRAIN BLK))
(declare-fun mk-set@@BLK (BLK) (set BLK))
(declare-fun mk-set@@LOC (LOC) (set LOC))
(declare-fun mk-set@@TRAIN (TRAIN) (set TRAIN))
(declare-fun mk-set@Open@@pfun@@TRAIN@@BLK@Close ((pfun TRAIN BLK)) (set (pfun TRAIN BLK)))
(declare-fun ovl@@TRAIN@@BLK ((pfun TRAIN BLK) (pfun TRAIN BLK)) (pfun TRAIN BLK))
(declare-fun set-diff@@BLK ((set BLK) (set BLK)) (set BLK))
(declare-fun set-diff@@LOC ((set LOC) (set LOC)) (set LOC))
(declare-fun set-diff@@TRAIN ((set TRAIN) (set TRAIN)) (set TRAIN))
(declare-fun set-diff@Open@@pfun@@TRAIN@@BLK@Close ((set (pfun TRAIN BLK)) (set (pfun TRAIN BLK))) (set (pfun TRAIN BLK)))
(declare-fun tfun@@TRAIN@@BLK ((set TRAIN) (set BLK)) (set (pfun TRAIN BLK)))
(declare-fun bunion@@BLK ((set BLK) (set BLK)) (set BLK))
(declare-fun bunion@@LOC ((set LOC) (set LOC)) (set LOC))
(declare-fun bunion@@TRAIN ((set TRAIN) (set TRAIN)) (set TRAIN))
(declare-fun bunion@Open@@pfun@@TRAIN@@BLK@Close ((set (pfun TRAIN BLK)) (set (pfun TRAIN BLK))) (set (pfun TRAIN BLK)))
(assert (= in@prime
           (bunion@@TRAIN in
                          (mk-set@@TRAIN t))))

(assert (= (bunion@@TRAIN in
                          (mk-set@@TRAIN t))
           (bunion@@TRAIN (dom@@TRAIN@@BLK loc)
                          (mk-set@@TRAIN t))))

(assert (= (bunion@@TRAIN (dom@@TRAIN@@BLK loc)
                          (mk-set@@TRAIN t))
           (bunion@@TRAIN (dom@@TRAIN@@BLK loc)
                          (dom@@TRAIN@@BLK (mk-fun@@TRAIN@@BLK t
                                                               ent)))))

(assert (= (bunion@@TRAIN (dom@@TRAIN@@BLK loc)
                          (dom@@TRAIN@@BLK (mk-fun@@TRAIN@@BLK t
                                                               ent)))
           (dom@@TRAIN@@BLK (ovl@@TRAIN@@BLK loc
                                             (mk-fun@@TRAIN@@BLK t
                                                                 ent)))))

(assert (= (dom@@TRAIN@@BLK (ovl@@TRAIN@@BLK loc
                                             (mk-fun@@TRAIN@@BLK t
                                                                 ent)))
           (dom@@TRAIN@@BLK loc@prime)))

(assert (forall ( (x BLK)
                  (y BLK) )
                (= (elem@@BLK x
                              (mk-set@@BLK y))
                   (= x
                      y))))

(assert (forall ( (x BLK)
                  (s1 (set BLK))
                  (s2 (set BLK)) )
                (= (elem@@BLK x
                              (set-diff@@BLK s1
                                             s2))
                   (and (elem@@BLK x
                                   s1)
                        (not (elem@@BLK x
                                        s2))))))

(assert (forall ( (x BLK)
                  (s1 (set BLK))
                  (s2 (set BLK)) )
                (= (elem@@BLK x
                              (intersect@@BLK s1
                                              s2))
                   (and (elem@@BLK x
                                   s1)
                        (elem@@BLK x
                                   s2)))))

(assert (forall ( (x BLK)
                  (s1 (set BLK))
                  (s2 (set BLK)) )
                (= (elem@@BLK x
                              (bunion@@BLK s1
                                           s2))
                   (or (elem@@BLK x
                                  s1)
                       (elem@@BLK x
                                  s2)))))

(assert (forall ( (x BLK)
                  (s1 (set BLK))
                  (s2 (set BLK)) )
                (not (elem@@BLK x
                                empty-set@@BLK))))

(assert (forall ( (x LOC)
                  (y LOC) )
                (= (elem@@LOC x
                              (mk-set@@LOC y))
                   (= x
                      y))))

(assert (forall ( (x LOC)
                  (s1 (set LOC))
                  (s2 (set LOC)) )
                (= (elem@@LOC x
                              (set-diff@@LOC s1
                                             s2))
                   (and (elem@@LOC x
                                   s1)
                        (not (elem@@LOC x
                                        s2))))))

(assert (forall ( (x LOC)
                  (s1 (set LOC))
                  (s2 (set LOC)) )
                (= (elem@@LOC x
                              (intersect@@LOC s1
                                              s2))
                   (and (elem@@LOC x
                                   s1)
                        (elem@@LOC x
                                   s2)))))

(assert (forall ( (x LOC)
                  (s1 (set LOC))
                  (s2 (set LOC)) )
                (= (elem@@LOC x
                              (bunion@@LOC s1
                                           s2))
                   (or (elem@@LOC x
                                  s1)
                       (elem@@LOC x
                                  s2)))))

(assert (forall ( (x LOC)
                  (s1 (set LOC))
                  (s2 (set LOC)) )
                (not (elem@@LOC x
                                empty-set@@LOC))))

(assert (forall ( (x TRAIN)
                  (y TRAIN) )
                (= (elem@@TRAIN x
                                (mk-set@@TRAIN y))
                   (= x
                      y))))

(assert (forall ( (x TRAIN)
                  (s1 (set TRAIN))
                  (s2 (set TRAIN)) )
                (= (elem@@TRAIN x
                                (set-diff@@TRAIN s1
                                                 s2))
                   (and (elem@@TRAIN x
                                     s1)
                        (not (elem@@TRAIN x
                                          s2))))))

(assert (forall ( (x TRAIN)
                  (s1 (set TRAIN))
                  (s2 (set TRAIN)) )
                (= (elem@@TRAIN x
                                (intersect@@TRAIN s1
                                                  s2))
                   (and (elem@@TRAIN x
                                     s1)
                        (elem@@TRAIN x
                                     s2)))))

(assert (forall ( (x TRAIN)
                  (s1 (set TRAIN))
                  (s2 (set TRAIN)) )
                (= (elem@@TRAIN x
                                (bunion@@TRAIN s1
                                               s2))
                   (or (elem@@TRAIN x
                                    s1)
                       (elem@@TRAIN x
                                    s2)))))

(assert (forall ( (x TRAIN)
                  (s1 (set TRAIN))
                  (s2 (set TRAIN)) )
                (not (elem@@TRAIN x
                                  empty-set@@TRAIN))))

(assert (forall ( (f1 (pfun TRAIN
                            BLK))
                  (f2 (pfun TRAIN
                            BLK)) )
                (= (bunion@@TRAIN (dom@@TRAIN@@BLK f1)
                                  (dom@@TRAIN@@BLK f2))
                   (dom@@TRAIN@@BLK (ovl@@TRAIN@@BLK f1
                                                     f2)))))

(assert (= (dom@@TRAIN@@BLK empty-fun@@TRAIN@@BLK)
           empty-set@@TRAIN))

(assert (forall ( (x TRAIN)
                  (y BLK) )
                (= (dom@@TRAIN@@BLK (mk-fun@@TRAIN@@BLK x
                                                        y))
                   (mk-set@@TRAIN x))))

(assert (forall ( (f1 (pfun TRAIN
                            BLK))
                  (f2 (pfun TRAIN
                            BLK))
                  (x TRAIN) )
                (=> (elem@@TRAIN x
                                 (dom@@TRAIN@@BLK f2))
                    (= (select (ovl@@TRAIN@@BLK f1
                                                f2)
                               x)
                       (select f2
                               x)))))

(assert (forall ( (f1 (pfun TRAIN
                            BLK))
                  (f2 (pfun TRAIN
                            BLK))
                  (x TRAIN) )
                (=> (elem@@TRAIN x
                                 (set-diff@@TRAIN (dom@@TRAIN@@BLK f1)
                                                  (dom@@TRAIN@@BLK f2)))
                    (= (select (ovl@@TRAIN@@BLK f1
                                                f2)
                               x)
                       (select f1
                               x)))))

(assert (forall ( (f1 (pfun TRAIN
                            BLK))
                  (s1 (set TRAIN)) )
                (= (dom@@TRAIN@@BLK (dom-subt@@TRAIN@@BLK s1
                                                          f1))
                   (set-diff@@TRAIN (dom@@TRAIN@@BLK f1)
                                    s1))))

(assert (forall ( (x TRAIN)
                  (y BLK) )
                (= (select (mk-fun@@TRAIN@@BLK x
                                               y)
                           x)
                   y)))

(assert (forall ( (f1 (pfun TRAIN
                            BLK))
                  (s1 (set TRAIN))
                  (x TRAIN) )
                (=> (elem@@TRAIN x
                                 (intersect@@TRAIN s1
                                                   (dom@@TRAIN@@BLK f1)))
                    (= (select (dom-rest@@TRAIN@@BLK s1
                                                     f1)
                               x)
                       (select f1
                               x)))))

(assert (forall ( (f1 (pfun TRAIN
                            BLK))
                  (s1 (set TRAIN))
                  (x TRAIN) )
                (=> (elem@@TRAIN x
                                 (set-diff@@TRAIN (dom@@TRAIN@@BLK f1)
                                                  s1))
                    (= (select (dom-subt@@TRAIN@@BLK s1
                                                     f1)
                               x)
                       (select f1
                               x)))))

(assert (forall ( (x (pfun TRAIN
                           BLK))
                  (y (pfun TRAIN
                           BLK)) )
                (= (elem@Open@@pfun@@TRAIN@@BLK@Close x
                                                      (mk-set@Open@@pfun@@TRAIN@@BLK@Close y))
                   (= x
                      y))))

(assert (forall ( (x (pfun TRAIN
                           BLK))
                  (s1 (set (pfun TRAIN
                                 BLK)))
                  (s2 (set (pfun TRAIN
                                 BLK))) )
                (= (elem@Open@@pfun@@TRAIN@@BLK@Close x
                                                      (set-diff@Open@@pfun@@TRAIN@@BLK@Close s1
                                                                                             s2))
                   (and (elem@Open@@pfun@@TRAIN@@BLK@Close x
                                                           s1)
                        (not (elem@Open@@pfun@@TRAIN@@BLK@Close x
                                                                s2))))))

(assert (forall ( (x (pfun TRAIN
                           BLK))
                  (s1 (set (pfun TRAIN
                                 BLK)))
                  (s2 (set (pfun TRAIN
                                 BLK))) )
                (= (elem@Open@@pfun@@TRAIN@@BLK@Close x
                                                      (intersect@Open@@pfun@@TRAIN@@BLK@Close s1
                                                                                              s2))
                   (and (elem@Open@@pfun@@TRAIN@@BLK@Close x
                                                           s1)
                        (elem@Open@@pfun@@TRAIN@@BLK@Close x
                                                           s2)))))

(assert (forall ( (x (pfun TRAIN
                           BLK))
                  (s1 (set (pfun TRAIN
                                 BLK)))
                  (s2 (set (pfun TRAIN
                                 BLK))) )
                (= (elem@Open@@pfun@@TRAIN@@BLK@Close x
                                                      (bunion@Open@@pfun@@TRAIN@@BLK@Close s1
                                                                                           s2))
                   (or (elem@Open@@pfun@@TRAIN@@BLK@Close x
                                                          s1)
                       (elem@Open@@pfun@@TRAIN@@BLK@Close x
                                                          s2)))))

(assert (forall ( (x (pfun TRAIN
                           BLK))
                  (s1 (set (pfun TRAIN
                                 BLK)))
                  (s2 (set (pfun TRAIN
                                 BLK))) )
                (not (elem@Open@@pfun@@TRAIN@@BLK@Close x
                                                        empty-set@Open@@pfun@@TRAIN@@BLK@Close))))

(assert (and (not (= ent
                     ext))
             (not (elem@@BLK ent
                             PLF))
             (not (elem@@BLK ext
                             PLF))))

(assert (forall ( (p BLK) )
                (=> true
                    (= (not (= p
                               ext))
                       (elem@@BLK p
                                  (bunion@@BLK (mk-set@@BLK ent)
                                               PLF))))))

(assert (forall ( (p BLK) )
                (=> true
                    (= (not (= p
                               ent))
                       (elem@@BLK p
                                  (bunion@@BLK (mk-set@@BLK ext)
                                               PLF))))))

(assert (forall ( (p BLK) )
                (=> true
                    (= (or (= p
                              ent)
                           (= p
                              ext))
                       (not (elem@@BLK p
                                       PLF))))))

(assert (= BLK
           (bunion@@BLK (bunion@@BLK (mk-set@@BLK ent)
                                     (mk-set@@BLK ext))
                        PLF)))

(assert (not (= in@prime
                (dom@@TRAIN@@BLK loc@prime))))

(check-sat-using (or-else (then qe smt) (then skip smt) (then (using-params simplify :expand-power true) smt)))

(pop)
(echo "> train0/enter/INV/inv2/step (79,1)")
(push)
(declare-sort BLK 0)
(declare-sort LOC 0)
(declare-sort TRAIN 0)
(define-sort pfun (a b) (Array a b))
(declare-sort set 1)
(declare-const PLF (set BLK))
(declare-const BLK (set BLK))
(declare-const LOC (set LOC))
(declare-const TRAIN (set TRAIN))
(declare-const ent BLK)
(declare-const ext BLK)
(declare-const in (set TRAIN))
(declare-const in@prime (set TRAIN))
(declare-const loc (pfun TRAIN BLK))
(declare-const loc@prime (pfun TRAIN BLK))
(declare-const p BLK)
(declare-const q BLK)
(declare-const t TRAIN)
(declare-const t_0 TRAIN)
(declare-const t_1 TRAIN)
(declare-const t_2 TRAIN)
(declare-const t_3 TRAIN)
(declare-fun apply@@TRAIN@@BLK ((pfun TRAIN BLK) TRAIN) BLK)
(declare-fun dom-rest@@TRAIN@@BLK ((set TRAIN) (pfun TRAIN BLK)) (pfun TRAIN BLK))
(declare-fun dom-subt@@TRAIN@@BLK ((set TRAIN) (pfun TRAIN BLK)) (pfun TRAIN BLK))
(declare-fun dom@@TRAIN@@BLK ((pfun TRAIN BLK)) (set TRAIN))
(declare-fun elem@@BLK (BLK (set BLK)) Bool)
(declare-fun elem@@LOC (LOC (set LOC)) Bool)
(declare-fun elem@@TRAIN (TRAIN (set TRAIN)) Bool)
(declare-fun elem@Open@@pfun@@TRAIN@@BLK@Close ((pfun TRAIN BLK) (set (pfun TRAIN BLK))) Bool)
(declare-fun empty-fun@@TRAIN@@BLK () (pfun TRAIN BLK))
(declare-fun empty-set@@BLK () (set BLK))
(declare-fun empty-set@@LOC () (set LOC))
(declare-fun empty-set@@TRAIN () (set TRAIN))
(declare-fun empty-set@Open@@pfun@@TRAIN@@BLK@Close () (set (pfun TRAIN BLK)))
(declare-fun intersect@@BLK ((set BLK) (set BLK)) (set BLK))
(declare-fun intersect@@LOC ((set LOC) (set LOC)) (set LOC))
(declare-fun intersect@@TRAIN ((set TRAIN) (set TRAIN)) (set TRAIN))
(declare-fun intersect@Open@@pfun@@TRAIN@@BLK@Close ((set (pfun TRAIN BLK)) (set (pfun TRAIN BLK))) (set (pfun TRAIN BLK)))
(declare-fun mk-fun@@TRAIN@@BLK (TRAIN BLK) (pfun TRAIN BLK))
(declare-fun mk-set@@BLK (BLK) (set BLK))
(declare-fun mk-set@@LOC (LOC) (set LOC))
(declare-fun mk-set@@TRAIN (TRAIN) (set TRAIN))
(declare-fun mk-set@Open@@pfun@@TRAIN@@BLK@Close ((pfun TRAIN BLK)) (set (pfun TRAIN BLK)))
(declare-fun ovl@@TRAIN@@BLK ((pfun TRAIN BLK) (pfun TRAIN BLK)) (pfun TRAIN BLK))
(declare-fun set-diff@@BLK ((set BLK) (set BLK)) (set BLK))
(declare-fun set-diff@@LOC ((set LOC) (set LOC)) (set LOC))
(declare-fun set-diff@@TRAIN ((set TRAIN) (set TRAIN)) (set TRAIN))
(declare-fun set-diff@Open@@pfun@@TRAIN@@BLK@Close ((set (pfun TRAIN BLK)) (set (pfun TRAIN BLK))) (set (pfun TRAIN BLK)))
(declare-fun tfun@@TRAIN@@BLK ((set TRAIN) (set BLK)) (set (pfun TRAIN BLK)))
(declare-fun bunion@@BLK ((set BLK) (set BLK)) (set BLK))
(declare-fun bunion@@LOC ((set LOC) (set LOC)) (set LOC))
(declare-fun bunion@@TRAIN ((set TRAIN) (set TRAIN)) (set TRAIN))
(declare-fun bunion@Open@@pfun@@TRAIN@@BLK@Close ((set (pfun TRAIN BLK)) (set (pfun TRAIN BLK))) (set (pfun TRAIN BLK)))
(assert (= in@prime
           (bunion@@TRAIN in
                          (mk-set@@TRAIN t))))

(assert (forall ( (x BLK)
                  (y BLK) )
                (= (elem@@BLK x
                              (mk-set@@BLK y))
                   (= x
                      y))))

(assert (forall ( (x BLK)
                  (s1 (set BLK))
                  (s2 (set BLK)) )
                (= (elem@@BLK x
                              (set-diff@@BLK s1
                                             s2))
                   (and (elem@@BLK x
                                   s1)
                        (not (elem@@BLK x
                                        s2))))))

(assert (forall ( (x BLK)
                  (s1 (set BLK))
                  (s2 (set BLK)) )
                (= (elem@@BLK x
                              (intersect@@BLK s1
                                              s2))
                   (and (elem@@BLK x
                                   s1)
                        (elem@@BLK x
                                   s2)))))

(assert (forall ( (x BLK)
                  (s1 (set BLK))
                  (s2 (set BLK)) )
                (= (elem@@BLK x
                              (bunion@@BLK s1
                                           s2))
                   (or (elem@@BLK x
                                  s1)
                       (elem@@BLK x
                                  s2)))))

(assert (forall ( (x BLK)
                  (s1 (set BLK))
                  (s2 (set BLK)) )
                (not (elem@@BLK x
                                empty-set@@BLK))))

(assert (forall ( (x LOC)
                  (y LOC) )
                (= (elem@@LOC x
                              (mk-set@@LOC y))
                   (= x
                      y))))

(assert (forall ( (x LOC)
                  (s1 (set LOC))
                  (s2 (set LOC)) )
                (= (elem@@LOC x
                              (set-diff@@LOC s1
                                             s2))
                   (and (elem@@LOC x
                                   s1)
                        (not (elem@@LOC x
                                        s2))))))

(assert (forall ( (x LOC)
                  (s1 (set LOC))
                  (s2 (set LOC)) )
                (= (elem@@LOC x
                              (intersect@@LOC s1
                                              s2))
                   (and (elem@@LOC x
                                   s1)
                        (elem@@LOC x
                                   s2)))))

(assert (forall ( (x LOC)
                  (s1 (set LOC))
                  (s2 (set LOC)) )
                (= (elem@@LOC x
                              (bunion@@LOC s1
                                           s2))
                   (or (elem@@LOC x
                                  s1)
                       (elem@@LOC x
                                  s2)))))

(assert (forall ( (x LOC)
                  (s1 (set LOC))
                  (s2 (set LOC)) )
                (not (elem@@LOC x
                                empty-set@@LOC))))

(assert (forall ( (x TRAIN)
                  (y TRAIN) )
                (= (elem@@TRAIN x
                                (mk-set@@TRAIN y))
                   (= x
                      y))))

(assert (forall ( (x TRAIN)
                  (s1 (set TRAIN))
                  (s2 (set TRAIN)) )
                (= (elem@@TRAIN x
                                (set-diff@@TRAIN s1
                                                 s2))
                   (and (elem@@TRAIN x
                                     s1)
                        (not (elem@@TRAIN x
                                          s2))))))

(assert (forall ( (x TRAIN)
                  (s1 (set TRAIN))
                  (s2 (set TRAIN)) )
                (= (elem@@TRAIN x
                                (intersect@@TRAIN s1
                                                  s2))
                   (and (elem@@TRAIN x
                                     s1)
                        (elem@@TRAIN x
                                     s2)))))

(assert (forall ( (x TRAIN)
                  (s1 (set TRAIN))
                  (s2 (set TRAIN)) )
                (= (elem@@TRAIN x
                                (bunion@@TRAIN s1
                                               s2))
                   (or (elem@@TRAIN x
                                    s1)
                       (elem@@TRAIN x
                                    s2)))))

(assert (forall ( (x TRAIN)
                  (s1 (set TRAIN))
                  (s2 (set TRAIN)) )
                (not (elem@@TRAIN x
                                  empty-set@@TRAIN))))

(assert (forall ( (f1 (pfun TRAIN
                            BLK))
                  (f2 (pfun TRAIN
                            BLK)) )
                (= (bunion@@TRAIN (dom@@TRAIN@@BLK f1)
                                  (dom@@TRAIN@@BLK f2))
                   (dom@@TRAIN@@BLK (ovl@@TRAIN@@BLK f1
                                                     f2)))))

(assert (= (dom@@TRAIN@@BLK empty-fun@@TRAIN@@BLK)
           empty-set@@TRAIN))

(assert (forall ( (x TRAIN)
                  (y BLK) )
                (= (dom@@TRAIN@@BLK (mk-fun@@TRAIN@@BLK x
                                                        y))
                   (mk-set@@TRAIN x))))

(assert (forall ( (f1 (pfun TRAIN
                            BLK))
                  (f2 (pfun TRAIN
                            BLK))
                  (x TRAIN) )
                (=> (elem@@TRAIN x
                                 (dom@@TRAIN@@BLK f2))
                    (= (select (ovl@@TRAIN@@BLK f1
                                                f2)
                               x)
                       (select f2
                               x)))))

(assert (forall ( (f1 (pfun TRAIN
                            BLK))
                  (f2 (pfun TRAIN
                            BLK))
                  (x TRAIN) )
                (=> (elem@@TRAIN x
                                 (set-diff@@TRAIN (dom@@TRAIN@@BLK f1)
                                                  (dom@@TRAIN@@BLK f2)))
                    (= (select (ovl@@TRAIN@@BLK f1
                                                f2)
                               x)
                       (select f1
                               x)))))

(assert (forall ( (f1 (pfun TRAIN
                            BLK))
                  (s1 (set TRAIN)) )
                (= (dom@@TRAIN@@BLK (dom-subt@@TRAIN@@BLK s1
                                                          f1))
                   (set-diff@@TRAIN (dom@@TRAIN@@BLK f1)
                                    s1))))

(assert (forall ( (x TRAIN)
                  (y BLK) )
                (= (select (mk-fun@@TRAIN@@BLK x
                                               y)
                           x)
                   y)))

(assert (forall ( (f1 (pfun TRAIN
                            BLK))
                  (s1 (set TRAIN))
                  (x TRAIN) )
                (=> (elem@@TRAIN x
                                 (intersect@@TRAIN s1
                                                   (dom@@TRAIN@@BLK f1)))
                    (= (select (dom-rest@@TRAIN@@BLK s1
                                                     f1)
                               x)
                       (select f1
                               x)))))

(assert (forall ( (f1 (pfun TRAIN
                            BLK))
                  (s1 (set TRAIN))
                  (x TRAIN) )
                (=> (elem@@TRAIN x
                                 (set-diff@@TRAIN (dom@@TRAIN@@BLK f1)
                                                  s1))
                    (= (select (dom-subt@@TRAIN@@BLK s1
                                                     f1)
                               x)
                       (select f1
                               x)))))

(assert (forall ( (x (pfun TRAIN
                           BLK))
                  (y (pfun TRAIN
                           BLK)) )
                (= (elem@Open@@pfun@@TRAIN@@BLK@Close x
                                                      (mk-set@Open@@pfun@@TRAIN@@BLK@Close y))
                   (= x
                      y))))

(assert (forall ( (x (pfun TRAIN
                           BLK))
                  (s1 (set (pfun TRAIN
                                 BLK)))
                  (s2 (set (pfun TRAIN
                                 BLK))) )
                (= (elem@Open@@pfun@@TRAIN@@BLK@Close x
                                                      (set-diff@Open@@pfun@@TRAIN@@BLK@Close s1
                                                                                             s2))
                   (and (elem@Open@@pfun@@TRAIN@@BLK@Close x
                                                           s1)
                        (not (elem@Open@@pfun@@TRAIN@@BLK@Close x
                                                                s2))))))

(assert (forall ( (x (pfun TRAIN
                           BLK))
                  (s1 (set (pfun TRAIN
                                 BLK)))
                  (s2 (set (pfun TRAIN
                                 BLK))) )
                (= (elem@Open@@pfun@@TRAIN@@BLK@Close x
                                                      (intersect@Open@@pfun@@TRAIN@@BLK@Close s1
                                                                                              s2))
                   (and (elem@Open@@pfun@@TRAIN@@BLK@Close x
                                                           s1)
                        (elem@Open@@pfun@@TRAIN@@BLK@Close x
                                                           s2)))))

(assert (forall ( (x (pfun TRAIN
                           BLK))
                  (s1 (set (pfun TRAIN
                                 BLK)))
                  (s2 (set (pfun TRAIN
                                 BLK))) )
                (= (elem@Open@@pfun@@TRAIN@@BLK@Close x
                                                      (bunion@Open@@pfun@@TRAIN@@BLK@Close s1
                                                                                           s2))
                   (or (elem@Open@@pfun@@TRAIN@@BLK@Close x
                                                          s1)
                       (elem@Open@@pfun@@TRAIN@@BLK@Close x
                                                          s2)))))

(assert (forall ( (x (pfun TRAIN
                           BLK))
                  (s1 (set (pfun TRAIN
                                 BLK)))
                  (s2 (set (pfun TRAIN
                                 BLK))) )
                (not (elem@Open@@pfun@@TRAIN@@BLK@Close x
                                                        empty-set@Open@@pfun@@TRAIN@@BLK@Close))))

(assert (and (not (= ent
                     ext))
             (not (elem@@BLK ent
                             PLF))
             (not (elem@@BLK ext
                             PLF))))

(assert (forall ( (p BLK) )
                (=> true
                    (= (not (= p
                               ext))
                       (elem@@BLK p
                                  (bunion@@BLK (mk-set@@BLK ent)
                                               PLF))))))

(assert (forall ( (p BLK) )
                (=> true
                    (= (not (= p
                               ent))
                       (elem@@BLK p
                                  (bunion@@BLK (mk-set@@BLK ext)
                                               PLF))))))

(assert (forall ( (p BLK) )
                (=> true
                    (= (or (= p
                              ent)
                           (= p
                              ext))
                       (not (elem@@BLK p
                                       PLF))))))

(assert (= BLK
           (bunion@@BLK (bunion@@BLK (mk-set@@BLK ent)
                                     (mk-set@@BLK ext))
                        PLF)))

(assert (not (= in@prime
                (bunion@@TRAIN in
                               (mk-set@@TRAIN t)))))

(check-sat-using (or-else (then qe smt) (then skip smt) (then (using-params simplify :expand-power true) smt)))

(pop)
(echo "> train0/enter/INV/inv2/step (81,1)")
(push)
(declare-sort BLK 0)
(declare-sort LOC 0)
(declare-sort TRAIN 0)
(define-sort pfun (a b) (Array a b))
(declare-sort set 1)
(declare-const PLF (set BLK))
(declare-const BLK (set BLK))
(declare-const LOC (set LOC))
(declare-const TRAIN (set TRAIN))
(declare-const ent BLK)
(declare-const ext BLK)
(declare-const in (set TRAIN))
(declare-const in@prime (set TRAIN))
(declare-const loc (pfun TRAIN BLK))
(declare-const loc@prime (pfun TRAIN BLK))
(declare-const p BLK)
(declare-const q BLK)
(declare-const t TRAIN)
(declare-const t_0 TRAIN)
(declare-const t_1 TRAIN)
(declare-const t_2 TRAIN)
(declare-const t_3 TRAIN)
(declare-fun apply@@TRAIN@@BLK ((pfun TRAIN BLK) TRAIN) BLK)
(declare-fun dom-rest@@TRAIN@@BLK ((set TRAIN) (pfun TRAIN BLK)) (pfun TRAIN BLK))
(declare-fun dom-subt@@TRAIN@@BLK ((set TRAIN) (pfun TRAIN BLK)) (pfun TRAIN BLK))
(declare-fun dom@@TRAIN@@BLK ((pfun TRAIN BLK)) (set TRAIN))
(declare-fun elem@@BLK (BLK (set BLK)) Bool)
(declare-fun elem@@LOC (LOC (set LOC)) Bool)
(declare-fun elem@@TRAIN (TRAIN (set TRAIN)) Bool)
(declare-fun elem@Open@@pfun@@TRAIN@@BLK@Close ((pfun TRAIN BLK) (set (pfun TRAIN BLK))) Bool)
(declare-fun empty-fun@@TRAIN@@BLK () (pfun TRAIN BLK))
(declare-fun empty-set@@BLK () (set BLK))
(declare-fun empty-set@@LOC () (set LOC))
(declare-fun empty-set@@TRAIN () (set TRAIN))
(declare-fun empty-set@Open@@pfun@@TRAIN@@BLK@Close () (set (pfun TRAIN BLK)))
(declare-fun intersect@@BLK ((set BLK) (set BLK)) (set BLK))
(declare-fun intersect@@LOC ((set LOC) (set LOC)) (set LOC))
(declare-fun intersect@@TRAIN ((set TRAIN) (set TRAIN)) (set TRAIN))
(declare-fun intersect@Open@@pfun@@TRAIN@@BLK@Close ((set (pfun TRAIN BLK)) (set (pfun TRAIN BLK))) (set (pfun TRAIN BLK)))
(declare-fun mk-fun@@TRAIN@@BLK (TRAIN BLK) (pfun TRAIN BLK))
(declare-fun mk-set@@BLK (BLK) (set BLK))
(declare-fun mk-set@@LOC (LOC) (set LOC))
(declare-fun mk-set@@TRAIN (TRAIN) (set TRAIN))
(declare-fun mk-set@Open@@pfun@@TRAIN@@BLK@Close ((pfun TRAIN BLK)) (set (pfun TRAIN BLK)))
(declare-fun ovl@@TRAIN@@BLK ((pfun TRAIN BLK) (pfun TRAIN BLK)) (pfun TRAIN BLK))
(declare-fun set-diff@@BLK ((set BLK) (set BLK)) (set BLK))
(declare-fun set-diff@@LOC ((set LOC) (set LOC)) (set LOC))
(declare-fun set-diff@@TRAIN ((set TRAIN) (set TRAIN)) (set TRAIN))
(declare-fun set-diff@Open@@pfun@@TRAIN@@BLK@Close ((set (pfun TRAIN BLK)) (set (pfun TRAIN BLK))) (set (pfun TRAIN BLK)))
(declare-fun tfun@@TRAIN@@BLK ((set TRAIN) (set BLK)) (set (pfun TRAIN BLK)))
(declare-fun bunion@@BLK ((set BLK) (set BLK)) (set BLK))
(declare-fun bunion@@LOC ((set LOC) (set LOC)) (set LOC))
(declare-fun bunion@@TRAIN ((set TRAIN) (set TRAIN)) (set TRAIN))
(declare-fun bunion@Open@@pfun@@TRAIN@@BLK@Close ((set (pfun TRAIN BLK)) (set (pfun TRAIN BLK))) (set (pfun TRAIN BLK)))
(assert (= (dom@@TRAIN@@BLK loc)
           in))

(assert (forall ( (x BLK)
                  (y BLK) )
                (= (elem@@BLK x
                              (mk-set@@BLK y))
                   (= x
                      y))))

(assert (forall ( (x BLK)
                  (s1 (set BLK))
                  (s2 (set BLK)) )
                (= (elem@@BLK x
                              (set-diff@@BLK s1
                                             s2))
                   (and (elem@@BLK x
                                   s1)
                        (not (elem@@BLK x
                                        s2))))))

(assert (forall ( (x BLK)
                  (s1 (set BLK))
                  (s2 (set BLK)) )
                (= (elem@@BLK x
                              (intersect@@BLK s1
                                              s2))
                   (and (elem@@BLK x
                                   s1)
                        (elem@@BLK x
                                   s2)))))

(assert (forall ( (x BLK)
                  (s1 (set BLK))
                  (s2 (set BLK)) )
                (= (elem@@BLK x
                              (bunion@@BLK s1
                                           s2))
                   (or (elem@@BLK x
                                  s1)
                       (elem@@BLK x
                                  s2)))))

(assert (forall ( (x BLK)
                  (s1 (set BLK))
                  (s2 (set BLK)) )
                (not (elem@@BLK x
                                empty-set@@BLK))))

(assert (forall ( (x LOC)
                  (y LOC) )
                (= (elem@@LOC x
                              (mk-set@@LOC y))
                   (= x
                      y))))

(assert (forall ( (x LOC)
                  (s1 (set LOC))
                  (s2 (set LOC)) )
                (= (elem@@LOC x
                              (set-diff@@LOC s1
                                             s2))
                   (and (elem@@LOC x
                                   s1)
                        (not (elem@@LOC x
                                        s2))))))

(assert (forall ( (x LOC)
                  (s1 (set LOC))
                  (s2 (set LOC)) )
                (= (elem@@LOC x
                              (intersect@@LOC s1
                                              s2))
                   (and (elem@@LOC x
                                   s1)
                        (elem@@LOC x
                                   s2)))))

(assert (forall ( (x LOC)
                  (s1 (set LOC))
                  (s2 (set LOC)) )
                (= (elem@@LOC x
                              (bunion@@LOC s1
                                           s2))
                   (or (elem@@LOC x
                                  s1)
                       (elem@@LOC x
                                  s2)))))

(assert (forall ( (x LOC)
                  (s1 (set LOC))
                  (s2 (set LOC)) )
                (not (elem@@LOC x
                                empty-set@@LOC))))

(assert (forall ( (x TRAIN)
                  (y TRAIN) )
                (= (elem@@TRAIN x
                                (mk-set@@TRAIN y))
                   (= x
                      y))))

(assert (forall ( (x TRAIN)
                  (s1 (set TRAIN))
                  (s2 (set TRAIN)) )
                (= (elem@@TRAIN x
                                (set-diff@@TRAIN s1
                                                 s2))
                   (and (elem@@TRAIN x
                                     s1)
                        (not (elem@@TRAIN x
                                          s2))))))

(assert (forall ( (x TRAIN)
                  (s1 (set TRAIN))
                  (s2 (set TRAIN)) )
                (= (elem@@TRAIN x
                                (intersect@@TRAIN s1
                                                  s2))
                   (and (elem@@TRAIN x
                                     s1)
                        (elem@@TRAIN x
                                     s2)))))

(assert (forall ( (x TRAIN)
                  (s1 (set TRAIN))
                  (s2 (set TRAIN)) )
                (= (elem@@TRAIN x
                                (bunion@@TRAIN s1
                                               s2))
                   (or (elem@@TRAIN x
                                    s1)
                       (elem@@TRAIN x
                                    s2)))))

(assert (forall ( (x TRAIN)
                  (s1 (set TRAIN))
                  (s2 (set TRAIN)) )
                (not (elem@@TRAIN x
                                  empty-set@@TRAIN))))

(assert (forall ( (f1 (pfun TRAIN
                            BLK))
                  (f2 (pfun TRAIN
                            BLK)) )
                (= (bunion@@TRAIN (dom@@TRAIN@@BLK f1)
                                  (dom@@TRAIN@@BLK f2))
                   (dom@@TRAIN@@BLK (ovl@@TRAIN@@BLK f1
                                                     f2)))))

(assert (= (dom@@TRAIN@@BLK empty-fun@@TRAIN@@BLK)
           empty-set@@TRAIN))

(assert (forall ( (x TRAIN)
                  (y BLK) )
                (= (dom@@TRAIN@@BLK (mk-fun@@TRAIN@@BLK x
                                                        y))
                   (mk-set@@TRAIN x))))

(assert (forall ( (f1 (pfun TRAIN
                            BLK))
                  (f2 (pfun TRAIN
                            BLK))
                  (x TRAIN) )
                (=> (elem@@TRAIN x
                                 (dom@@TRAIN@@BLK f2))
                    (= (select (ovl@@TRAIN@@BLK f1
                                                f2)
                               x)
                       (select f2
                               x)))))

(assert (forall ( (f1 (pfun TRAIN
                            BLK))
                  (f2 (pfun TRAIN
                            BLK))
                  (x TRAIN) )
                (=> (elem@@TRAIN x
                                 (set-diff@@TRAIN (dom@@TRAIN@@BLK f1)
                                                  (dom@@TRAIN@@BLK f2)))
                    (= (select (ovl@@TRAIN@@BLK f1
                                                f2)
                               x)
                       (select f1
                               x)))))

(assert (forall ( (f1 (pfun TRAIN
                            BLK))
                  (s1 (set TRAIN)) )
                (= (dom@@TRAIN@@BLK (dom-subt@@TRAIN@@BLK s1
                                                          f1))
                   (set-diff@@TRAIN (dom@@TRAIN@@BLK f1)
                                    s1))))

(assert (forall ( (x TRAIN)
                  (y BLK) )
                (= (select (mk-fun@@TRAIN@@BLK x
                                               y)
                           x)
                   y)))

(assert (forall ( (f1 (pfun TRAIN
                            BLK))
                  (s1 (set TRAIN))
                  (x TRAIN) )
                (=> (elem@@TRAIN x
                                 (intersect@@TRAIN s1
                                                   (dom@@TRAIN@@BLK f1)))
                    (= (select (dom-rest@@TRAIN@@BLK s1
                                                     f1)
                               x)
                       (select f1
                               x)))))

(assert (forall ( (f1 (pfun TRAIN
                            BLK))
                  (s1 (set TRAIN))
                  (x TRAIN) )
                (=> (elem@@TRAIN x
                                 (set-diff@@TRAIN (dom@@TRAIN@@BLK f1)
                                                  s1))
                    (= (select (dom-subt@@TRAIN@@BLK s1
                                                     f1)
                               x)
                       (select f1
                               x)))))

(assert (forall ( (x (pfun TRAIN
                           BLK))
                  (y (pfun TRAIN
                           BLK)) )
                (= (elem@Open@@pfun@@TRAIN@@BLK@Close x
                                                      (mk-set@Open@@pfun@@TRAIN@@BLK@Close y))
                   (= x
                      y))))

(assert (forall ( (x (pfun TRAIN
                           BLK))
                  (s1 (set (pfun TRAIN
                                 BLK)))
                  (s2 (set (pfun TRAIN
                                 BLK))) )
                (= (elem@Open@@pfun@@TRAIN@@BLK@Close x
                                                      (set-diff@Open@@pfun@@TRAIN@@BLK@Close s1
                                                                                             s2))
                   (and (elem@Open@@pfun@@TRAIN@@BLK@Close x
                                                           s1)
                        (not (elem@Open@@pfun@@TRAIN@@BLK@Close x
                                                                s2))))))

(assert (forall ( (x (pfun TRAIN
                           BLK))
                  (s1 (set (pfun TRAIN
                                 BLK)))
                  (s2 (set (pfun TRAIN
                                 BLK))) )
                (= (elem@Open@@pfun@@TRAIN@@BLK@Close x
                                                      (intersect@Open@@pfun@@TRAIN@@BLK@Close s1
                                                                                              s2))
                   (and (elem@Open@@pfun@@TRAIN@@BLK@Close x
                                                           s1)
                        (elem@Open@@pfun@@TRAIN@@BLK@Close x
                                                           s2)))))

(assert (forall ( (x (pfun TRAIN
                           BLK))
                  (s1 (set (pfun TRAIN
                                 BLK)))
                  (s2 (set (pfun TRAIN
                                 BLK))) )
                (= (elem@Open@@pfun@@TRAIN@@BLK@Close x
                                                      (bunion@Open@@pfun@@TRAIN@@BLK@Close s1
                                                                                           s2))
                   (or (elem@Open@@pfun@@TRAIN@@BLK@Close x
                                                          s1)
                       (elem@Open@@pfun@@TRAIN@@BLK@Close x
                                                          s2)))))

(assert (forall ( (x (pfun TRAIN
                           BLK))
                  (s1 (set (pfun TRAIN
                                 BLK)))
                  (s2 (set (pfun TRAIN
                                 BLK))) )
                (not (elem@Open@@pfun@@TRAIN@@BLK@Close x
                                                        empty-set@Open@@pfun@@TRAIN@@BLK@Close))))

(assert (and (not (= ent
                     ext))
             (not (elem@@BLK ent
                             PLF))
             (not (elem@@BLK ext
                             PLF))))

(assert (forall ( (p BLK) )
                (=> true
                    (= (not (= p
                               ext))
                       (elem@@BLK p
                                  (bunion@@BLK (mk-set@@BLK ent)
                                               PLF))))))

(assert (forall ( (p BLK) )
                (=> true
                    (= (not (= p
                               ent))
                       (elem@@BLK p
                                  (bunion@@BLK (mk-set@@BLK ext)
                                               PLF))))))

(assert (forall ( (p BLK) )
                (=> true
                    (= (or (= p
                              ent)
                           (= p
                              ext))
                       (not (elem@@BLK p
                                       PLF))))))

(assert (= BLK
           (bunion@@BLK (bunion@@BLK (mk-set@@BLK ent)
                                     (mk-set@@BLK ext))
                        PLF)))

(assert (not (= (bunion@@TRAIN in
                               (mk-set@@TRAIN t))
                (bunion@@TRAIN (dom@@TRAIN@@BLK loc)
                               (mk-set@@TRAIN t)))))

(check-sat-using (or-else (then qe smt) (then skip smt) (then (using-params simplify :expand-power true) smt)))

(pop)
(echo "> train0/enter/INV/inv2/step (83,1)")
(push)
(declare-sort BLK 0)
(declare-sort LOC 0)
(declare-sort TRAIN 0)
(define-sort pfun (a b) (Array a b))
(declare-sort set 1)
(declare-const PLF (set BLK))
(declare-const BLK (set BLK))
(declare-const LOC (set LOC))
(declare-const TRAIN (set TRAIN))
(declare-const ent BLK)
(declare-const ext BLK)
(declare-const in (set TRAIN))
(declare-const in@prime (set TRAIN))
(declare-const loc (pfun TRAIN BLK))
(declare-const loc@prime (pfun TRAIN BLK))
(declare-const p BLK)
(declare-const q BLK)
(declare-const t TRAIN)
(declare-const t_0 TRAIN)
(declare-const t_1 TRAIN)
(declare-const t_2 TRAIN)
(declare-const t_3 TRAIN)
(declare-fun apply@@TRAIN@@BLK ((pfun TRAIN BLK) TRAIN) BLK)
(declare-fun dom-rest@@TRAIN@@BLK ((set TRAIN) (pfun TRAIN BLK)) (pfun TRAIN BLK))
(declare-fun dom-subt@@TRAIN@@BLK ((set TRAIN) (pfun TRAIN BLK)) (pfun TRAIN BLK))
(declare-fun dom@@TRAIN@@BLK ((pfun TRAIN BLK)) (set TRAIN))
(declare-fun elem@@BLK (BLK (set BLK)) Bool)
(declare-fun elem@@LOC (LOC (set LOC)) Bool)
(declare-fun elem@@TRAIN (TRAIN (set TRAIN)) Bool)
(declare-fun elem@Open@@pfun@@TRAIN@@BLK@Close ((pfun TRAIN BLK) (set (pfun TRAIN BLK))) Bool)
(declare-fun empty-fun@@TRAIN@@BLK () (pfun TRAIN BLK))
(declare-fun empty-set@@BLK () (set BLK))
(declare-fun empty-set@@LOC () (set LOC))
(declare-fun empty-set@@TRAIN () (set TRAIN))
(declare-fun empty-set@Open@@pfun@@TRAIN@@BLK@Close () (set (pfun TRAIN BLK)))
(declare-fun intersect@@BLK ((set BLK) (set BLK)) (set BLK))
(declare-fun intersect@@LOC ((set LOC) (set LOC)) (set LOC))
(declare-fun intersect@@TRAIN ((set TRAIN) (set TRAIN)) (set TRAIN))
(declare-fun intersect@Open@@pfun@@TRAIN@@BLK@Close ((set (pfun TRAIN BLK)) (set (pfun TRAIN BLK))) (set (pfun TRAIN BLK)))
(declare-fun mk-fun@@TRAIN@@BLK (TRAIN BLK) (pfun TRAIN BLK))
(declare-fun mk-set@@BLK (BLK) (set BLK))
(declare-fun mk-set@@LOC (LOC) (set LOC))
(declare-fun mk-set@@TRAIN (TRAIN) (set TRAIN))
(declare-fun mk-set@Open@@pfun@@TRAIN@@BLK@Close ((pfun TRAIN BLK)) (set (pfun TRAIN BLK)))
(declare-fun ovl@@TRAIN@@BLK ((pfun TRAIN BLK) (pfun TRAIN BLK)) (pfun TRAIN BLK))
(declare-fun set-diff@@BLK ((set BLK) (set BLK)) (set BLK))
(declare-fun set-diff@@LOC ((set LOC) (set LOC)) (set LOC))
(declare-fun set-diff@@TRAIN ((set TRAIN) (set TRAIN)) (set TRAIN))
(declare-fun set-diff@Open@@pfun@@TRAIN@@BLK@Close ((set (pfun TRAIN BLK)) (set (pfun TRAIN BLK))) (set (pfun TRAIN BLK)))
(declare-fun tfun@@TRAIN@@BLK ((set TRAIN) (set BLK)) (set (pfun TRAIN BLK)))
(declare-fun bunion@@BLK ((set BLK) (set BLK)) (set BLK))
(declare-fun bunion@@LOC ((set LOC) (set LOC)) (set LOC))
(declare-fun bunion@@TRAIN ((set TRAIN) (set TRAIN)) (set TRAIN))
(declare-fun bunion@Open@@pfun@@TRAIN@@BLK@Close ((set (pfun TRAIN BLK)) (set (pfun TRAIN BLK))) (set (pfun TRAIN BLK)))
(assert (forall ( (x BLK)
                  (y BLK) )
                (= (elem@@BLK x
                              (mk-set@@BLK y))
                   (= x
                      y))))

(assert (forall ( (x BLK)
                  (s1 (set BLK))
                  (s2 (set BLK)) )
                (= (elem@@BLK x
                              (set-diff@@BLK s1
                                             s2))
                   (and (elem@@BLK x
                                   s1)
                        (not (elem@@BLK x
                                        s2))))))

(assert (forall ( (x BLK)
                  (s1 (set BLK))
                  (s2 (set BLK)) )
                (= (elem@@BLK x
                              (intersect@@BLK s1
                                              s2))
                   (and (elem@@BLK x
                                   s1)
                        (elem@@BLK x
                                   s2)))))

(assert (forall ( (x BLK)
                  (s1 (set BLK))
                  (s2 (set BLK)) )
                (= (elem@@BLK x
                              (bunion@@BLK s1
                                           s2))
                   (or (elem@@BLK x
                                  s1)
                       (elem@@BLK x
                                  s2)))))

(assert (forall ( (x BLK)
                  (s1 (set BLK))
                  (s2 (set BLK)) )
                (not (elem@@BLK x
                                empty-set@@BLK))))

(assert (forall ( (x LOC)
                  (y LOC) )
                (= (elem@@LOC x
                              (mk-set@@LOC y))
                   (= x
                      y))))

(assert (forall ( (x LOC)
                  (s1 (set LOC))
                  (s2 (set LOC)) )
                (= (elem@@LOC x
                              (set-diff@@LOC s1
                                             s2))
                   (and (elem@@LOC x
                                   s1)
                        (not (elem@@LOC x
                                        s2))))))

(assert (forall ( (x LOC)
                  (s1 (set LOC))
                  (s2 (set LOC)) )
                (= (elem@@LOC x
                              (intersect@@LOC s1
                                              s2))
                   (and (elem@@LOC x
                                   s1)
                        (elem@@LOC x
                                   s2)))))

(assert (forall ( (x LOC)
                  (s1 (set LOC))
                  (s2 (set LOC)) )
                (= (elem@@LOC x
                              (bunion@@LOC s1
                                           s2))
                   (or (elem@@LOC x
                                  s1)
                       (elem@@LOC x
                                  s2)))))

(assert (forall ( (x LOC)
                  (s1 (set LOC))
                  (s2 (set LOC)) )
                (not (elem@@LOC x
                                empty-set@@LOC))))

(assert (forall ( (x TRAIN)
                  (y TRAIN) )
                (= (elem@@TRAIN x
                                (mk-set@@TRAIN y))
                   (= x
                      y))))

(assert (forall ( (x TRAIN)
                  (s1 (set TRAIN))
                  (s2 (set TRAIN)) )
                (= (elem@@TRAIN x
                                (set-diff@@TRAIN s1
                                                 s2))
                   (and (elem@@TRAIN x
                                     s1)
                        (not (elem@@TRAIN x
                                          s2))))))

(assert (forall ( (x TRAIN)
                  (s1 (set TRAIN))
                  (s2 (set TRAIN)) )
                (= (elem@@TRAIN x
                                (intersect@@TRAIN s1
                                                  s2))
                   (and (elem@@TRAIN x
                                     s1)
                        (elem@@TRAIN x
                                     s2)))))

(assert (forall ( (x TRAIN)
                  (s1 (set TRAIN))
                  (s2 (set TRAIN)) )
                (= (elem@@TRAIN x
                                (bunion@@TRAIN s1
                                               s2))
                   (or (elem@@TRAIN x
                                    s1)
                       (elem@@TRAIN x
                                    s2)))))

(assert (forall ( (x TRAIN)
                  (s1 (set TRAIN))
                  (s2 (set TRAIN)) )
                (not (elem@@TRAIN x
                                  empty-set@@TRAIN))))

(assert (forall ( (f1 (pfun TRAIN
                            BLK))
                  (f2 (pfun TRAIN
                            BLK)) )
                (= (bunion@@TRAIN (dom@@TRAIN@@BLK f1)
                                  (dom@@TRAIN@@BLK f2))
                   (dom@@TRAIN@@BLK (ovl@@TRAIN@@BLK f1
                                                     f2)))))

(assert (= (dom@@TRAIN@@BLK empty-fun@@TRAIN@@BLK)
           empty-set@@TRAIN))

(assert (forall ( (x TRAIN)
                  (y BLK) )
                (= (dom@@TRAIN@@BLK (mk-fun@@TRAIN@@BLK x
                                                        y))
                   (mk-set@@TRAIN x))))

(assert (forall ( (f1 (pfun TRAIN
                            BLK))
                  (f2 (pfun TRAIN
                            BLK))
                  (x TRAIN) )
                (=> (elem@@TRAIN x
                                 (dom@@TRAIN@@BLK f2))
                    (= (select (ovl@@TRAIN@@BLK f1
                                                f2)
                               x)
                       (select f2
                               x)))))

(assert (forall ( (f1 (pfun TRAIN
                            BLK))
                  (f2 (pfun TRAIN
                            BLK))
                  (x TRAIN) )
                (=> (elem@@TRAIN x
                                 (set-diff@@TRAIN (dom@@TRAIN@@BLK f1)
                                                  (dom@@TRAIN@@BLK f2)))
                    (= (select (ovl@@TRAIN@@BLK f1
                                                f2)
                               x)
                       (select f1
                               x)))))

(assert (forall ( (f1 (pfun TRAIN
                            BLK))
                  (s1 (set TRAIN)) )
                (= (dom@@TRAIN@@BLK (dom-subt@@TRAIN@@BLK s1
                                                          f1))
                   (set-diff@@TRAIN (dom@@TRAIN@@BLK f1)
                                    s1))))

(assert (forall ( (x TRAIN)
                  (y BLK) )
                (= (select (mk-fun@@TRAIN@@BLK x
                                               y)
                           x)
                   y)))

(assert (forall ( (f1 (pfun TRAIN
                            BLK))
                  (s1 (set TRAIN))
                  (x TRAIN) )
                (=> (elem@@TRAIN x
                                 (intersect@@TRAIN s1
                                                   (dom@@TRAIN@@BLK f1)))
                    (= (select (dom-rest@@TRAIN@@BLK s1
                                                     f1)
                               x)
                       (select f1
                               x)))))

(assert (forall ( (f1 (pfun TRAIN
                            BLK))
                  (s1 (set TRAIN))
                  (x TRAIN) )
                (=> (elem@@TRAIN x
                                 (set-diff@@TRAIN (dom@@TRAIN@@BLK f1)
                                                  s1))
                    (= (select (dom-subt@@TRAIN@@BLK s1
                                                     f1)
                               x)
                       (select f1
                               x)))))

(assert (forall ( (x (pfun TRAIN
                           BLK))
                  (y (pfun TRAIN
                           BLK)) )
                (= (elem@Open@@pfun@@TRAIN@@BLK@Close x
                                                      (mk-set@Open@@pfun@@TRAIN@@BLK@Close y))
                   (= x
                      y))))

(assert (forall ( (x (pfun TRAIN
                           BLK))
                  (s1 (set (pfun TRAIN
                                 BLK)))
                  (s2 (set (pfun TRAIN
                                 BLK))) )
                (= (elem@Open@@pfun@@TRAIN@@BLK@Close x
                                                      (set-diff@Open@@pfun@@TRAIN@@BLK@Close s1
                                                                                             s2))
                   (and (elem@Open@@pfun@@TRAIN@@BLK@Close x
                                                           s1)
                        (not (elem@Open@@pfun@@TRAIN@@BLK@Close x
                                                                s2))))))

(assert (forall ( (x (pfun TRAIN
                           BLK))
                  (s1 (set (pfun TRAIN
                                 BLK)))
                  (s2 (set (pfun TRAIN
                                 BLK))) )
                (= (elem@Open@@pfun@@TRAIN@@BLK@Close x
                                                      (intersect@Open@@pfun@@TRAIN@@BLK@Close s1
                                                                                              s2))
                   (and (elem@Open@@pfun@@TRAIN@@BLK@Close x
                                                           s1)
                        (elem@Open@@pfun@@TRAIN@@BLK@Close x
                                                           s2)))))

(assert (forall ( (x (pfun TRAIN
                           BLK))
                  (s1 (set (pfun TRAIN
                                 BLK)))
                  (s2 (set (pfun TRAIN
                                 BLK))) )
                (= (elem@Open@@pfun@@TRAIN@@BLK@Close x
                                                      (bunion@Open@@pfun@@TRAIN@@BLK@Close s1
                                                                                           s2))
                   (or (elem@Open@@pfun@@TRAIN@@BLK@Close x
                                                          s1)
                       (elem@Open@@pfun@@TRAIN@@BLK@Close x
                                                          s2)))))

(assert (forall ( (x (pfun TRAIN
                           BLK))
                  (s1 (set (pfun TRAIN
                                 BLK)))
                  (s2 (set (pfun TRAIN
                                 BLK))) )
                (not (elem@Open@@pfun@@TRAIN@@BLK@Close x
                                                        empty-set@Open@@pfun@@TRAIN@@BLK@Close))))

(assert (and (not (= ent
                     ext))
             (not (elem@@BLK ent
                             PLF))
             (not (elem@@BLK ext
                             PLF))))

(assert (forall ( (p BLK) )
                (=> true
                    (= (not (= p
                               ext))
                       (elem@@BLK p
                                  (bunion@@BLK (mk-set@@BLK ent)
                                               PLF))))))

(assert (forall ( (p BLK) )
                (=> true
                    (= (not (= p
                               ent))
                       (elem@@BLK p
                                  (bunion@@BLK (mk-set@@BLK ext)
                                               PLF))))))

(assert (forall ( (p BLK) )
                (=> true
                    (= (or (= p
                              ent)
                           (= p
                              ext))
                       (not (elem@@BLK p
                                       PLF))))))

(assert (= BLK
           (bunion@@BLK (bunion@@BLK (mk-set@@BLK ent)
                                     (mk-set@@BLK ext))
                        PLF)))

(assert (not (= (bunion@@TRAIN (dom@@TRAIN@@BLK loc)
                               (mk-set@@TRAIN t))
                (bunion@@TRAIN (dom@@TRAIN@@BLK loc)
                               (dom@@TRAIN@@BLK (mk-fun@@TRAIN@@BLK t
                                                                    ent))))))

(check-sat-using (or-else (then qe smt) (then skip smt) (then (using-params simplify :expand-power true) smt)))

(pop)
(echo "> train0/enter/INV/inv2/step (85,1)")
(push)
(declare-sort BLK 0)
(declare-sort LOC 0)
(declare-sort TRAIN 0)
(define-sort pfun (a b) (Array a b))
(declare-sort set 1)
(declare-const PLF (set BLK))
(declare-const BLK (set BLK))
(declare-const LOC (set LOC))
(declare-const TRAIN (set TRAIN))
(declare-const ent BLK)
(declare-const ext BLK)
(declare-const in (set TRAIN))
(declare-const in@prime (set TRAIN))
(declare-const loc (pfun TRAIN BLK))
(declare-const loc@prime (pfun TRAIN BLK))
(declare-const p BLK)
(declare-const q BLK)
(declare-const t TRAIN)
(declare-const t_0 TRAIN)
(declare-const t_1 TRAIN)
(declare-const t_2 TRAIN)
(declare-const t_3 TRAIN)
(declare-fun apply@@TRAIN@@BLK ((pfun TRAIN BLK) TRAIN) BLK)
(declare-fun dom-rest@@TRAIN@@BLK ((set TRAIN) (pfun TRAIN BLK)) (pfun TRAIN BLK))
(declare-fun dom-subt@@TRAIN@@BLK ((set TRAIN) (pfun TRAIN BLK)) (pfun TRAIN BLK))
(declare-fun dom@@TRAIN@@BLK ((pfun TRAIN BLK)) (set TRAIN))
(declare-fun elem@@BLK (BLK (set BLK)) Bool)
(declare-fun elem@@LOC (LOC (set LOC)) Bool)
(declare-fun elem@@TRAIN (TRAIN (set TRAIN)) Bool)
(declare-fun elem@Open@@pfun@@TRAIN@@BLK@Close ((pfun TRAIN BLK) (set (pfun TRAIN BLK))) Bool)
(declare-fun empty-fun@@TRAIN@@BLK () (pfun TRAIN BLK))
(declare-fun empty-set@@BLK () (set BLK))
(declare-fun empty-set@@LOC () (set LOC))
(declare-fun empty-set@@TRAIN () (set TRAIN))
(declare-fun empty-set@Open@@pfun@@TRAIN@@BLK@Close () (set (pfun TRAIN BLK)))
(declare-fun intersect@@BLK ((set BLK) (set BLK)) (set BLK))
(declare-fun intersect@@LOC ((set LOC) (set LOC)) (set LOC))
(declare-fun intersect@@TRAIN ((set TRAIN) (set TRAIN)) (set TRAIN))
(declare-fun intersect@Open@@pfun@@TRAIN@@BLK@Close ((set (pfun TRAIN BLK)) (set (pfun TRAIN BLK))) (set (pfun TRAIN BLK)))
(declare-fun mk-fun@@TRAIN@@BLK (TRAIN BLK) (pfun TRAIN BLK))
(declare-fun mk-set@@BLK (BLK) (set BLK))
(declare-fun mk-set@@LOC (LOC) (set LOC))
(declare-fun mk-set@@TRAIN (TRAIN) (set TRAIN))
(declare-fun mk-set@Open@@pfun@@TRAIN@@BLK@Close ((pfun TRAIN BLK)) (set (pfun TRAIN BLK)))
(declare-fun ovl@@TRAIN@@BLK ((pfun TRAIN BLK) (pfun TRAIN BLK)) (pfun TRAIN BLK))
(declare-fun set-diff@@BLK ((set BLK) (set BLK)) (set BLK))
(declare-fun set-diff@@LOC ((set LOC) (set LOC)) (set LOC))
(declare-fun set-diff@@TRAIN ((set TRAIN) (set TRAIN)) (set TRAIN))
(declare-fun set-diff@Open@@pfun@@TRAIN@@BLK@Close ((set (pfun TRAIN BLK)) (set (pfun TRAIN BLK))) (set (pfun TRAIN BLK)))
(declare-fun tfun@@TRAIN@@BLK ((set TRAIN) (set BLK)) (set (pfun TRAIN BLK)))
(declare-fun bunion@@BLK ((set BLK) (set BLK)) (set BLK))
(declare-fun bunion@@LOC ((set LOC) (set LOC)) (set LOC))
(declare-fun bunion@@TRAIN ((set TRAIN) (set TRAIN)) (set TRAIN))
(declare-fun bunion@Open@@pfun@@TRAIN@@BLK@Close ((set (pfun TRAIN BLK)) (set (pfun TRAIN BLK))) (set (pfun TRAIN BLK)))
(assert (forall ( (x BLK)
                  (y BLK) )
                (= (elem@@BLK x
                              (mk-set@@BLK y))
                   (= x
                      y))))

(assert (forall ( (x BLK)
                  (s1 (set BLK))
                  (s2 (set BLK)) )
                (= (elem@@BLK x
                              (set-diff@@BLK s1
                                             s2))
                   (and (elem@@BLK x
                                   s1)
                        (not (elem@@BLK x
                                        s2))))))

(assert (forall ( (x BLK)
                  (s1 (set BLK))
                  (s2 (set BLK)) )
                (= (elem@@BLK x
                              (intersect@@BLK s1
                                              s2))
                   (and (elem@@BLK x
                                   s1)
                        (elem@@BLK x
                                   s2)))))

(assert (forall ( (x BLK)
                  (s1 (set BLK))
                  (s2 (set BLK)) )
                (= (elem@@BLK x
                              (bunion@@BLK s1
                                           s2))
                   (or (elem@@BLK x
                                  s1)
                       (elem@@BLK x
                                  s2)))))

(assert (forall ( (x BLK)
                  (s1 (set BLK))
                  (s2 (set BLK)) )
                (not (elem@@BLK x
                                empty-set@@BLK))))

(assert (forall ( (x LOC)
                  (y LOC) )
                (= (elem@@LOC x
                              (mk-set@@LOC y))
                   (= x
                      y))))

(assert (forall ( (x LOC)
                  (s1 (set LOC))
                  (s2 (set LOC)) )
                (= (elem@@LOC x
                              (set-diff@@LOC s1
                                             s2))
                   (and (elem@@LOC x
                                   s1)
                        (not (elem@@LOC x
                                        s2))))))

(assert (forall ( (x LOC)
                  (s1 (set LOC))
                  (s2 (set LOC)) )
                (= (elem@@LOC x
                              (intersect@@LOC s1
                                              s2))
                   (and (elem@@LOC x
                                   s1)
                        (elem@@LOC x
                                   s2)))))

(assert (forall ( (x LOC)
                  (s1 (set LOC))
                  (s2 (set LOC)) )
                (= (elem@@LOC x
                              (bunion@@LOC s1
                                           s2))
                   (or (elem@@LOC x
                                  s1)
                       (elem@@LOC x
                                  s2)))))

(assert (forall ( (x LOC)
                  (s1 (set LOC))
                  (s2 (set LOC)) )
                (not (elem@@LOC x
                                empty-set@@LOC))))

(assert (forall ( (x TRAIN)
                  (y TRAIN) )
                (= (elem@@TRAIN x
                                (mk-set@@TRAIN y))
                   (= x
                      y))))

(assert (forall ( (x TRAIN)
                  (s1 (set TRAIN))
                  (s2 (set TRAIN)) )
                (= (elem@@TRAIN x
                                (set-diff@@TRAIN s1
                                                 s2))
                   (and (elem@@TRAIN x
                                     s1)
                        (not (elem@@TRAIN x
                                          s2))))))

(assert (forall ( (x TRAIN)
                  (s1 (set TRAIN))
                  (s2 (set TRAIN)) )
                (= (elem@@TRAIN x
                                (intersect@@TRAIN s1
                                                  s2))
                   (and (elem@@TRAIN x
                                     s1)
                        (elem@@TRAIN x
                                     s2)))))

(assert (forall ( (x TRAIN)
                  (s1 (set TRAIN))
                  (s2 (set TRAIN)) )
                (= (elem@@TRAIN x
                                (bunion@@TRAIN s1
                                               s2))
                   (or (elem@@TRAIN x
                                    s1)
                       (elem@@TRAIN x
                                    s2)))))

(assert (forall ( (x TRAIN)
                  (s1 (set TRAIN))
                  (s2 (set TRAIN)) )
                (not (elem@@TRAIN x
                                  empty-set@@TRAIN))))

(assert (forall ( (f1 (pfun TRAIN
                            BLK))
                  (f2 (pfun TRAIN
                            BLK)) )
                (= (bunion@@TRAIN (dom@@TRAIN@@BLK f1)
                                  (dom@@TRAIN@@BLK f2))
                   (dom@@TRAIN@@BLK (ovl@@TRAIN@@BLK f1
                                                     f2)))))

(assert (= (dom@@TRAIN@@BLK empty-fun@@TRAIN@@BLK)
           empty-set@@TRAIN))

(assert (forall ( (x TRAIN)
                  (y BLK) )
                (= (dom@@TRAIN@@BLK (mk-fun@@TRAIN@@BLK x
                                                        y))
                   (mk-set@@TRAIN x))))

(assert (forall ( (f1 (pfun TRAIN
                            BLK))
                  (f2 (pfun TRAIN
                            BLK))
                  (x TRAIN) )
                (=> (elem@@TRAIN x
                                 (dom@@TRAIN@@BLK f2))
                    (= (select (ovl@@TRAIN@@BLK f1
                                                f2)
                               x)
                       (select f2
                               x)))))

(assert (forall ( (f1 (pfun TRAIN
                            BLK))
                  (f2 (pfun TRAIN
                            BLK))
                  (x TRAIN) )
                (=> (elem@@TRAIN x
                                 (set-diff@@TRAIN (dom@@TRAIN@@BLK f1)
                                                  (dom@@TRAIN@@BLK f2)))
                    (= (select (ovl@@TRAIN@@BLK f1
                                                f2)
                               x)
                       (select f1
                               x)))))

(assert (forall ( (f1 (pfun TRAIN
                            BLK))
                  (s1 (set TRAIN)) )
                (= (dom@@TRAIN@@BLK (dom-subt@@TRAIN@@BLK s1
                                                          f1))
                   (set-diff@@TRAIN (dom@@TRAIN@@BLK f1)
                                    s1))))

(assert (forall ( (x TRAIN)
                  (y BLK) )
                (= (select (mk-fun@@TRAIN@@BLK x
                                               y)
                           x)
                   y)))

(assert (forall ( (f1 (pfun TRAIN
                            BLK))
                  (s1 (set TRAIN))
                  (x TRAIN) )
                (=> (elem@@TRAIN x
                                 (intersect@@TRAIN s1
                                                   (dom@@TRAIN@@BLK f1)))
                    (= (select (dom-rest@@TRAIN@@BLK s1
                                                     f1)
                               x)
                       (select f1
                               x)))))

(assert (forall ( (f1 (pfun TRAIN
                            BLK))
                  (s1 (set TRAIN))
                  (x TRAIN) )
                (=> (elem@@TRAIN x
                                 (set-diff@@TRAIN (dom@@TRAIN@@BLK f1)
                                                  s1))
                    (= (select (dom-subt@@TRAIN@@BLK s1
                                                     f1)
                               x)
                       (select f1
                               x)))))

(assert (forall ( (x (pfun TRAIN
                           BLK))
                  (y (pfun TRAIN
                           BLK)) )
                (= (elem@Open@@pfun@@TRAIN@@BLK@Close x
                                                      (mk-set@Open@@pfun@@TRAIN@@BLK@Close y))
                   (= x
                      y))))

(assert (forall ( (x (pfun TRAIN
                           BLK))
                  (s1 (set (pfun TRAIN
                                 BLK)))
                  (s2 (set (pfun TRAIN
                                 BLK))) )
                (= (elem@Open@@pfun@@TRAIN@@BLK@Close x
                                                      (set-diff@Open@@pfun@@TRAIN@@BLK@Close s1
                                                                                             s2))
                   (and (elem@Open@@pfun@@TRAIN@@BLK@Close x
                                                           s1)
                        (not (elem@Open@@pfun@@TRAIN@@BLK@Close x
                                                                s2))))))

(assert (forall ( (x (pfun TRAIN
                           BLK))
                  (s1 (set (pfun TRAIN
                                 BLK)))
                  (s2 (set (pfun TRAIN
                                 BLK))) )
                (= (elem@Open@@pfun@@TRAIN@@BLK@Close x
                                                      (intersect@Open@@pfun@@TRAIN@@BLK@Close s1
                                                                                              s2))
                   (and (elem@Open@@pfun@@TRAIN@@BLK@Close x
                                                           s1)
                        (elem@Open@@pfun@@TRAIN@@BLK@Close x
                                                           s2)))))

(assert (forall ( (x (pfun TRAIN
                           BLK))
                  (s1 (set (pfun TRAIN
                                 BLK)))
                  (s2 (set (pfun TRAIN
                                 BLK))) )
                (= (elem@Open@@pfun@@TRAIN@@BLK@Close x
                                                      (bunion@Open@@pfun@@TRAIN@@BLK@Close s1
                                                                                           s2))
                   (or (elem@Open@@pfun@@TRAIN@@BLK@Close x
                                                          s1)
                       (elem@Open@@pfun@@TRAIN@@BLK@Close x
                                                          s2)))))

(assert (forall ( (x (pfun TRAIN
                           BLK))
                  (s1 (set (pfun TRAIN
                                 BLK)))
                  (s2 (set (pfun TRAIN
                                 BLK))) )
                (not (elem@Open@@pfun@@TRAIN@@BLK@Close x
                                                        empty-set@Open@@pfun@@TRAIN@@BLK@Close))))

(assert (and (not (= ent
                     ext))
             (not (elem@@BLK ent
                             PLF))
             (not (elem@@BLK ext
                             PLF))))

(assert (forall ( (p BLK) )
                (=> true
                    (= (not (= p
                               ext))
                       (elem@@BLK p
                                  (bunion@@BLK (mk-set@@BLK ent)
                                               PLF))))))

(assert (forall ( (p BLK) )
                (=> true
                    (= (not (= p
                               ent))
                       (elem@@BLK p
                                  (bunion@@BLK (mk-set@@BLK ext)
                                               PLF))))))

(assert (forall ( (p BLK) )
                (=> true
                    (= (or (= p
                              ent)
                           (= p
                              ext))
                       (not (elem@@BLK p
                                       PLF))))))

(assert (= BLK
           (bunion@@BLK (bunion@@BLK (mk-set@@BLK ent)
                                     (mk-set@@BLK ext))
                        PLF)))

(assert (not (= (bunion@@TRAIN (dom@@TRAIN@@BLK loc)
                               (dom@@TRAIN@@BLK (mk-fun@@TRAIN@@BLK t
                                                                    ent)))
                (dom@@TRAIN@@BLK (ovl@@TRAIN@@BLK loc
                                                  (mk-fun@@TRAIN@@BLK t
                                                                      ent))))))

(check-sat-using (or-else (then qe smt) (then skip smt) (then (using-params simplify :expand-power true) smt)))

(pop)
(echo "> train0/enter/INV/inv2/step (87,1)")
(push)
(declare-sort BLK 0)
(declare-sort LOC 0)
(declare-sort TRAIN 0)
(define-sort pfun (a b) (Array a b))
(declare-sort set 1)
(declare-const PLF (set BLK))
(declare-const BLK (set BLK))
(declare-const LOC (set LOC))
(declare-const TRAIN (set TRAIN))
(declare-const ent BLK)
(declare-const ext BLK)
(declare-const in (set TRAIN))
(declare-const in@prime (set TRAIN))
(declare-const loc (pfun TRAIN BLK))
(declare-const loc@prime (pfun TRAIN BLK))
(declare-const p BLK)
(declare-const q BLK)
(declare-const t TRAIN)
(declare-const t_0 TRAIN)
(declare-const t_1 TRAIN)
(declare-const t_2 TRAIN)
(declare-const t_3 TRAIN)
(declare-fun apply@@TRAIN@@BLK ((pfun TRAIN BLK) TRAIN) BLK)
(declare-fun dom-rest@@TRAIN@@BLK ((set TRAIN) (pfun TRAIN BLK)) (pfun TRAIN BLK))
(declare-fun dom-subt@@TRAIN@@BLK ((set TRAIN) (pfun TRAIN BLK)) (pfun TRAIN BLK))
(declare-fun dom@@TRAIN@@BLK ((pfun TRAIN BLK)) (set TRAIN))
(declare-fun elem@@BLK (BLK (set BLK)) Bool)
(declare-fun elem@@LOC (LOC (set LOC)) Bool)
(declare-fun elem@@TRAIN (TRAIN (set TRAIN)) Bool)
(declare-fun elem@Open@@pfun@@TRAIN@@BLK@Close ((pfun TRAIN BLK) (set (pfun TRAIN BLK))) Bool)
(declare-fun empty-fun@@TRAIN@@BLK () (pfun TRAIN BLK))
(declare-fun empty-set@@BLK () (set BLK))
(declare-fun empty-set@@LOC () (set LOC))
(declare-fun empty-set@@TRAIN () (set TRAIN))
(declare-fun empty-set@Open@@pfun@@TRAIN@@BLK@Close () (set (pfun TRAIN BLK)))
(declare-fun intersect@@BLK ((set BLK) (set BLK)) (set BLK))
(declare-fun intersect@@LOC ((set LOC) (set LOC)) (set LOC))
(declare-fun intersect@@TRAIN ((set TRAIN) (set TRAIN)) (set TRAIN))
(declare-fun intersect@Open@@pfun@@TRAIN@@BLK@Close ((set (pfun TRAIN BLK)) (set (pfun TRAIN BLK))) (set (pfun TRAIN BLK)))
(declare-fun mk-fun@@TRAIN@@BLK (TRAIN BLK) (pfun TRAIN BLK))
(declare-fun mk-set@@BLK (BLK) (set BLK))
(declare-fun mk-set@@LOC (LOC) (set LOC))
(declare-fun mk-set@@TRAIN (TRAIN) (set TRAIN))
(declare-fun mk-set@Open@@pfun@@TRAIN@@BLK@Close ((pfun TRAIN BLK)) (set (pfun TRAIN BLK)))
(declare-fun ovl@@TRAIN@@BLK ((pfun TRAIN BLK) (pfun TRAIN BLK)) (pfun TRAIN BLK))
(declare-fun set-diff@@BLK ((set BLK) (set BLK)) (set BLK))
(declare-fun set-diff@@LOC ((set LOC) (set LOC)) (set LOC))
(declare-fun set-diff@@TRAIN ((set TRAIN) (set TRAIN)) (set TRAIN))
(declare-fun set-diff@Open@@pfun@@TRAIN@@BLK@Close ((set (pfun TRAIN BLK)) (set (pfun TRAIN BLK))) (set (pfun TRAIN BLK)))
(declare-fun tfun@@TRAIN@@BLK ((set TRAIN) (set BLK)) (set (pfun TRAIN BLK)))
(declare-fun bunion@@BLK ((set BLK) (set BLK)) (set BLK))
(declare-fun bunion@@LOC ((set LOC) (set LOC)) (set LOC))
(declare-fun bunion@@TRAIN ((set TRAIN) (set TRAIN)) (set TRAIN))
(declare-fun bunion@Open@@pfun@@TRAIN@@BLK@Close ((set (pfun TRAIN BLK)) (set (pfun TRAIN BLK))) (set (pfun TRAIN BLK)))
(assert (= loc@prime
           (ovl@@TRAIN@@BLK loc
                            (mk-fun@@TRAIN@@BLK t
                                                ent))))

(assert (forall ( (x BLK)
                  (y BLK) )
                (= (elem@@BLK x
                              (mk-set@@BLK y))
                   (= x
                      y))))

(assert (forall ( (x BLK)
                  (s1 (set BLK))
                  (s2 (set BLK)) )
                (= (elem@@BLK x
                              (set-diff@@BLK s1
                                             s2))
                   (and (elem@@BLK x
                                   s1)
                        (not (elem@@BLK x
                                        s2))))))

(assert (forall ( (x BLK)
                  (s1 (set BLK))
                  (s2 (set BLK)) )
                (= (elem@@BLK x
                              (intersect@@BLK s1
                                              s2))
                   (and (elem@@BLK x
                                   s1)
                        (elem@@BLK x
                                   s2)))))

(assert (forall ( (x BLK)
                  (s1 (set BLK))
                  (s2 (set BLK)) )
                (= (elem@@BLK x
                              (bunion@@BLK s1
                                           s2))
                   (or (elem@@BLK x
                                  s1)
                       (elem@@BLK x
                                  s2)))))

(assert (forall ( (x BLK)
                  (s1 (set BLK))
                  (s2 (set BLK)) )
                (not (elem@@BLK x
                                empty-set@@BLK))))

(assert (forall ( (x LOC)
                  (y LOC) )
                (= (elem@@LOC x
                              (mk-set@@LOC y))
                   (= x
                      y))))

(assert (forall ( (x LOC)
                  (s1 (set LOC))
                  (s2 (set LOC)) )
                (= (elem@@LOC x
                              (set-diff@@LOC s1
                                             s2))
                   (and (elem@@LOC x
                                   s1)
                        (not (elem@@LOC x
                                        s2))))))

(assert (forall ( (x LOC)
                  (s1 (set LOC))
                  (s2 (set LOC)) )
                (= (elem@@LOC x
                              (intersect@@LOC s1
                                              s2))
                   (and (elem@@LOC x
                                   s1)
                        (elem@@LOC x
                                   s2)))))

(assert (forall ( (x LOC)
                  (s1 (set LOC))
                  (s2 (set LOC)) )
                (= (elem@@LOC x
                              (bunion@@LOC s1
                                           s2))
                   (or (elem@@LOC x
                                  s1)
                       (elem@@LOC x
                                  s2)))))

(assert (forall ( (x LOC)
                  (s1 (set LOC))
                  (s2 (set LOC)) )
                (not (elem@@LOC x
                                empty-set@@LOC))))

(assert (forall ( (x TRAIN)
                  (y TRAIN) )
                (= (elem@@TRAIN x
                                (mk-set@@TRAIN y))
                   (= x
                      y))))

(assert (forall ( (x TRAIN)
                  (s1 (set TRAIN))
                  (s2 (set TRAIN)) )
                (= (elem@@TRAIN x
                                (set-diff@@TRAIN s1
                                                 s2))
                   (and (elem@@TRAIN x
                                     s1)
                        (not (elem@@TRAIN x
                                          s2))))))

(assert (forall ( (x TRAIN)
                  (s1 (set TRAIN))
                  (s2 (set TRAIN)) )
                (= (elem@@TRAIN x
                                (intersect@@TRAIN s1
                                                  s2))
                   (and (elem@@TRAIN x
                                     s1)
                        (elem@@TRAIN x
                                     s2)))))

(assert (forall ( (x TRAIN)
                  (s1 (set TRAIN))
                  (s2 (set TRAIN)) )
                (= (elem@@TRAIN x
                                (bunion@@TRAIN s1
                                               s2))
                   (or (elem@@TRAIN x
                                    s1)
                       (elem@@TRAIN x
                                    s2)))))

(assert (forall ( (x TRAIN)
                  (s1 (set TRAIN))
                  (s2 (set TRAIN)) )
                (not (elem@@TRAIN x
                                  empty-set@@TRAIN))))

(assert (forall ( (f1 (pfun TRAIN
                            BLK))
                  (f2 (pfun TRAIN
                            BLK)) )
                (= (bunion@@TRAIN (dom@@TRAIN@@BLK f1)
                                  (dom@@TRAIN@@BLK f2))
                   (dom@@TRAIN@@BLK (ovl@@TRAIN@@BLK f1
                                                     f2)))))

(assert (= (dom@@TRAIN@@BLK empty-fun@@TRAIN@@BLK)
           empty-set@@TRAIN))

(assert (forall ( (x TRAIN)
                  (y BLK) )
                (= (dom@@TRAIN@@BLK (mk-fun@@TRAIN@@BLK x
                                                        y))
                   (mk-set@@TRAIN x))))

(assert (forall ( (f1 (pfun TRAIN
                            BLK))
                  (f2 (pfun TRAIN
                            BLK))
                  (x TRAIN) )
                (=> (elem@@TRAIN x
                                 (dom@@TRAIN@@BLK f2))
                    (= (select (ovl@@TRAIN@@BLK f1
                                                f2)
                               x)
                       (select f2
                               x)))))

(assert (forall ( (f1 (pfun TRAIN
                            BLK))
                  (f2 (pfun TRAIN
                            BLK))
                  (x TRAIN) )
                (=> (elem@@TRAIN x
                                 (set-diff@@TRAIN (dom@@TRAIN@@BLK f1)
                                                  (dom@@TRAIN@@BLK f2)))
                    (= (select (ovl@@TRAIN@@BLK f1
                                                f2)
                               x)
                       (select f1
                               x)))))

(assert (forall ( (f1 (pfun TRAIN
                            BLK))
                  (s1 (set TRAIN)) )
                (= (dom@@TRAIN@@BLK (dom-subt@@TRAIN@@BLK s1
                                                          f1))
                   (set-diff@@TRAIN (dom@@TRAIN@@BLK f1)
                                    s1))))

(assert (forall ( (x TRAIN)
                  (y BLK) )
                (= (select (mk-fun@@TRAIN@@BLK x
                                               y)
                           x)
                   y)))

(assert (forall ( (f1 (pfun TRAIN
                            BLK))
                  (s1 (set TRAIN))
                  (x TRAIN) )
                (=> (elem@@TRAIN x
                                 (intersect@@TRAIN s1
                                                   (dom@@TRAIN@@BLK f1)))
                    (= (select (dom-rest@@TRAIN@@BLK s1
                                                     f1)
                               x)
                       (select f1
                               x)))))

(assert (forall ( (f1 (pfun TRAIN
                            BLK))
                  (s1 (set TRAIN))
                  (x TRAIN) )
                (=> (elem@@TRAIN x
                                 (set-diff@@TRAIN (dom@@TRAIN@@BLK f1)
                                                  s1))
                    (= (select (dom-subt@@TRAIN@@BLK s1
                                                     f1)
                               x)
                       (select f1
                               x)))))

(assert (forall ( (x (pfun TRAIN
                           BLK))
                  (y (pfun TRAIN
                           BLK)) )
                (= (elem@Open@@pfun@@TRAIN@@BLK@Close x
                                                      (mk-set@Open@@pfun@@TRAIN@@BLK@Close y))
                   (= x
                      y))))

(assert (forall ( (x (pfun TRAIN
                           BLK))
                  (s1 (set (pfun TRAIN
                                 BLK)))
                  (s2 (set (pfun TRAIN
                                 BLK))) )
                (= (elem@Open@@pfun@@TRAIN@@BLK@Close x
                                                      (set-diff@Open@@pfun@@TRAIN@@BLK@Close s1
                                                                                             s2))
                   (and (elem@Open@@pfun@@TRAIN@@BLK@Close x
                                                           s1)
                        (not (elem@Open@@pfun@@TRAIN@@BLK@Close x
                                                                s2))))))

(assert (forall ( (x (pfun TRAIN
                           BLK))
                  (s1 (set (pfun TRAIN
                                 BLK)))
                  (s2 (set (pfun TRAIN
                                 BLK))) )
                (= (elem@Open@@pfun@@TRAIN@@BLK@Close x
                                                      (intersect@Open@@pfun@@TRAIN@@BLK@Close s1
                                                                                              s2))
                   (and (elem@Open@@pfun@@TRAIN@@BLK@Close x
                                                           s1)
                        (elem@Open@@pfun@@TRAIN@@BLK@Close x
                                                           s2)))))

(assert (forall ( (x (pfun TRAIN
                           BLK))
                  (s1 (set (pfun TRAIN
                                 BLK)))
                  (s2 (set (pfun TRAIN
                                 BLK))) )
                (= (elem@Open@@pfun@@TRAIN@@BLK@Close x
                                                      (bunion@Open@@pfun@@TRAIN@@BLK@Close s1
                                                                                           s2))
                   (or (elem@Open@@pfun@@TRAIN@@BLK@Close x
                                                          s1)
                       (elem@Open@@pfun@@TRAIN@@BLK@Close x
                                                          s2)))))

(assert (forall ( (x (pfun TRAIN
                           BLK))
                  (s1 (set (pfun TRAIN
                                 BLK)))
                  (s2 (set (pfun TRAIN
                                 BLK))) )
                (not (elem@Open@@pfun@@TRAIN@@BLK@Close x
                                                        empty-set@Open@@pfun@@TRAIN@@BLK@Close))))

(assert (and (not (= ent
                     ext))
             (not (elem@@BLK ent
                             PLF))
             (not (elem@@BLK ext
                             PLF))))

(assert (forall ( (p BLK) )
                (=> true
                    (= (not (= p
                               ext))
                       (elem@@BLK p
                                  (bunion@@BLK (mk-set@@BLK ent)
                                               PLF))))))

(assert (forall ( (p BLK) )
                (=> true
                    (= (not (= p
                               ent))
                       (elem@@BLK p
                                  (bunion@@BLK (mk-set@@BLK ext)
                                               PLF))))))

(assert (forall ( (p BLK) )
                (=> true
                    (= (or (= p
                              ent)
                           (= p
                              ext))
                       (not (elem@@BLK p
                                       PLF))))))

(assert (= BLK
           (bunion@@BLK (bunion@@BLK (mk-set@@BLK ent)
                                     (mk-set@@BLK ext))
                        PLF)))

(assert (not (= (dom@@TRAIN@@BLK (ovl@@TRAIN@@BLK loc
                                                  (mk-fun@@TRAIN@@BLK t
                                                                      ent)))
                (dom@@TRAIN@@BLK loc@prime))))

(check-sat-using (or-else (then qe smt) (then skip smt) (then (using-params simplify :expand-power true) smt)))

(pop)
(echo "> train0/enter/SCH")
(push)
(declare-sort BLK 0)
(declare-sort LOC 0)
(declare-sort TRAIN 0)
(define-sort pfun (a b) (Array a b))
(declare-sort set 1)
(declare-const PLF (set BLK))
(declare-const BLK (set BLK))
(declare-const LOC (set LOC))
(declare-const TRAIN (set TRAIN))
(declare-const ent BLK)
(declare-const ext BLK)
(declare-const in (set TRAIN))
(declare-const loc (pfun TRAIN BLK))
(declare-const p BLK)
(declare-const q BLK)
(declare-const t TRAIN)
(declare-const t_0 TRAIN)
(declare-const t_1 TRAIN)
(declare-const t_2 TRAIN)
(declare-const t_3 TRAIN)
(declare-fun apply@@TRAIN@@BLK ((pfun TRAIN BLK) TRAIN) BLK)
(declare-fun dom-rest@@TRAIN@@BLK ((set TRAIN) (pfun TRAIN BLK)) (pfun TRAIN BLK))
(declare-fun dom-subt@@TRAIN@@BLK ((set TRAIN) (pfun TRAIN BLK)) (pfun TRAIN BLK))
(declare-fun dom@@TRAIN@@BLK ((pfun TRAIN BLK)) (set TRAIN))
(declare-fun elem@@BLK (BLK (set BLK)) Bool)
(declare-fun elem@@LOC (LOC (set LOC)) Bool)
(declare-fun elem@@TRAIN (TRAIN (set TRAIN)) Bool)
(declare-fun elem@Open@@pfun@@TRAIN@@BLK@Close ((pfun TRAIN BLK) (set (pfun TRAIN BLK))) Bool)
(declare-fun empty-fun@@TRAIN@@BLK () (pfun TRAIN BLK))
(declare-fun empty-set@@BLK () (set BLK))
(declare-fun empty-set@@LOC () (set LOC))
(declare-fun empty-set@@TRAIN () (set TRAIN))
(declare-fun empty-set@Open@@pfun@@TRAIN@@BLK@Close () (set (pfun TRAIN BLK)))
(declare-fun intersect@@BLK ((set BLK) (set BLK)) (set BLK))
(declare-fun intersect@@LOC ((set LOC) (set LOC)) (set LOC))
(declare-fun intersect@@TRAIN ((set TRAIN) (set TRAIN)) (set TRAIN))
(declare-fun intersect@Open@@pfun@@TRAIN@@BLK@Close ((set (pfun TRAIN BLK)) (set (pfun TRAIN BLK))) (set (pfun TRAIN BLK)))
(declare-fun mk-fun@@TRAIN@@BLK (TRAIN BLK) (pfun TRAIN BLK))
(declare-fun mk-set@@BLK (BLK) (set BLK))
(declare-fun mk-set@@LOC (LOC) (set LOC))
(declare-fun mk-set@@TRAIN (TRAIN) (set TRAIN))
(declare-fun mk-set@Open@@pfun@@TRAIN@@BLK@Close ((pfun TRAIN BLK)) (set (pfun TRAIN BLK)))
(declare-fun ovl@@TRAIN@@BLK ((pfun TRAIN BLK) (pfun TRAIN BLK)) (pfun TRAIN BLK))
(declare-fun set-diff@@BLK ((set BLK) (set BLK)) (set BLK))
(declare-fun set-diff@@LOC ((set LOC) (set LOC)) (set LOC))
(declare-fun set-diff@@TRAIN ((set TRAIN) (set TRAIN)) (set TRAIN))
(declare-fun set-diff@Open@@pfun@@TRAIN@@BLK@Close ((set (pfun TRAIN BLK)) (set (pfun TRAIN BLK))) (set (pfun TRAIN BLK)))
(declare-fun tfun@@TRAIN@@BLK ((set TRAIN) (set BLK)) (set (pfun TRAIN BLK)))
(declare-fun bunion@@BLK ((set BLK) (set BLK)) (set BLK))
(declare-fun bunion@@LOC ((set LOC) (set LOC)) (set LOC))
(declare-fun bunion@@TRAIN ((set TRAIN) (set TRAIN)) (set TRAIN))
(declare-fun bunion@Open@@pfun@@TRAIN@@BLK@Close ((set (pfun TRAIN BLK)) (set (pfun TRAIN BLK))) (set (pfun TRAIN BLK)))
(assert (forall ( (x BLK)
                  (y BLK) )
                (= (elem@@BLK x
                              (mk-set@@BLK y))
                   (= x
                      y))))

(assert (forall ( (x BLK)
                  (s1 (set BLK))
                  (s2 (set BLK)) )
                (= (elem@@BLK x
                              (set-diff@@BLK s1
                                             s2))
                   (and (elem@@BLK x
                                   s1)
                        (not (elem@@BLK x
                                        s2))))))

(assert (forall ( (x BLK)
                  (s1 (set BLK))
                  (s2 (set BLK)) )
                (= (elem@@BLK x
                              (intersect@@BLK s1
                                              s2))
                   (and (elem@@BLK x
                                   s1)
                        (elem@@BLK x
                                   s2)))))

(assert (forall ( (x BLK)
                  (s1 (set BLK))
                  (s2 (set BLK)) )
                (= (elem@@BLK x
                              (bunion@@BLK s1
                                           s2))
                   (or (elem@@BLK x
                                  s1)
                       (elem@@BLK x
                                  s2)))))

(assert (forall ( (x BLK)
                  (s1 (set BLK))
                  (s2 (set BLK)) )
                (not (elem@@BLK x
                                empty-set@@BLK))))

(assert (forall ( (x LOC)
                  (y LOC) )
                (= (elem@@LOC x
                              (mk-set@@LOC y))
                   (= x
                      y))))

(assert (forall ( (x LOC)
                  (s1 (set LOC))
                  (s2 (set LOC)) )
                (= (elem@@LOC x
                              (set-diff@@LOC s1
                                             s2))
                   (and (elem@@LOC x
                                   s1)
                        (not (elem@@LOC x
                                        s2))))))

(assert (forall ( (x LOC)
                  (s1 (set LOC))
                  (s2 (set LOC)) )
                (= (elem@@LOC x
                              (intersect@@LOC s1
                                              s2))
                   (and (elem@@LOC x
                                   s1)
                        (elem@@LOC x
                                   s2)))))

(assert (forall ( (x LOC)
                  (s1 (set LOC))
                  (s2 (set LOC)) )
                (= (elem@@LOC x
                              (bunion@@LOC s1
                                           s2))
                   (or (elem@@LOC x
                                  s1)
                       (elem@@LOC x
                                  s2)))))

(assert (forall ( (x LOC)
                  (s1 (set LOC))
                  (s2 (set LOC)) )
                (not (elem@@LOC x
                                empty-set@@LOC))))

(assert (forall ( (x TRAIN)
                  (y TRAIN) )
                (= (elem@@TRAIN x
                                (mk-set@@TRAIN y))
                   (= x
                      y))))

(assert (forall ( (x TRAIN)
                  (s1 (set TRAIN))
                  (s2 (set TRAIN)) )
                (= (elem@@TRAIN x
                                (set-diff@@TRAIN s1
                                                 s2))
                   (and (elem@@TRAIN x
                                     s1)
                        (not (elem@@TRAIN x
                                          s2))))))

(assert (forall ( (x TRAIN)
                  (s1 (set TRAIN))
                  (s2 (set TRAIN)) )
                (= (elem@@TRAIN x
                                (intersect@@TRAIN s1
                                                  s2))
                   (and (elem@@TRAIN x
                                     s1)
                        (elem@@TRAIN x
                                     s2)))))

(assert (forall ( (x TRAIN)
                  (s1 (set TRAIN))
                  (s2 (set TRAIN)) )
                (= (elem@@TRAIN x
                                (bunion@@TRAIN s1
                                               s2))
                   (or (elem@@TRAIN x
                                    s1)
                       (elem@@TRAIN x
                                    s2)))))

(assert (forall ( (x TRAIN)
                  (s1 (set TRAIN))
                  (s2 (set TRAIN)) )
                (not (elem@@TRAIN x
                                  empty-set@@TRAIN))))

(assert (forall ( (f1 (pfun TRAIN
                            BLK))
                  (f2 (pfun TRAIN
                            BLK)) )
                (= (bunion@@TRAIN (dom@@TRAIN@@BLK f1)
                                  (dom@@TRAIN@@BLK f2))
                   (dom@@TRAIN@@BLK (ovl@@TRAIN@@BLK f1
                                                     f2)))))

(assert (= (dom@@TRAIN@@BLK empty-fun@@TRAIN@@BLK)
           empty-set@@TRAIN))

(assert (forall ( (x TRAIN)
                  (y BLK) )
                (= (dom@@TRAIN@@BLK (mk-fun@@TRAIN@@BLK x
                                                        y))
                   (mk-set@@TRAIN x))))

(assert (forall ( (f1 (pfun TRAIN
                            BLK))
                  (f2 (pfun TRAIN
                            BLK))
                  (x TRAIN) )
                (=> (elem@@TRAIN x
                                 (dom@@TRAIN@@BLK f2))
                    (= (select (ovl@@TRAIN@@BLK f1
                                                f2)
                               x)
                       (select f2
                               x)))))

(assert (forall ( (f1 (pfun TRAIN
                            BLK))
                  (f2 (pfun TRAIN
                            BLK))
                  (x TRAIN) )
                (=> (elem@@TRAIN x
                                 (set-diff@@TRAIN (dom@@TRAIN@@BLK f1)
                                                  (dom@@TRAIN@@BLK f2)))
                    (= (select (ovl@@TRAIN@@BLK f1
                                                f2)
                               x)
                       (select f1
                               x)))))

(assert (forall ( (f1 (pfun TRAIN
                            BLK))
                  (s1 (set TRAIN)) )
                (= (dom@@TRAIN@@BLK (dom-subt@@TRAIN@@BLK s1
                                                          f1))
                   (set-diff@@TRAIN (dom@@TRAIN@@BLK f1)
                                    s1))))

(assert (forall ( (x TRAIN)
                  (y BLK) )
                (= (select (mk-fun@@TRAIN@@BLK x
                                               y)
                           x)
                   y)))

(assert (forall ( (f1 (pfun TRAIN
                            BLK))
                  (s1 (set TRAIN))
                  (x TRAIN) )
                (=> (elem@@TRAIN x
                                 (intersect@@TRAIN s1
                                                   (dom@@TRAIN@@BLK f1)))
                    (= (select (dom-rest@@TRAIN@@BLK s1
                                                     f1)
                               x)
                       (select f1
                               x)))))

(assert (forall ( (f1 (pfun TRAIN
                            BLK))
                  (s1 (set TRAIN))
                  (x TRAIN) )
                (=> (elem@@TRAIN x
                                 (set-diff@@TRAIN (dom@@TRAIN@@BLK f1)
                                                  s1))
                    (= (select (dom-subt@@TRAIN@@BLK s1
                                                     f1)
                               x)
                       (select f1
                               x)))))

(assert (forall ( (x (pfun TRAIN
                           BLK))
                  (y (pfun TRAIN
                           BLK)) )
                (= (elem@Open@@pfun@@TRAIN@@BLK@Close x
                                                      (mk-set@Open@@pfun@@TRAIN@@BLK@Close y))
                   (= x
                      y))))

(assert (forall ( (x (pfun TRAIN
                           BLK))
                  (s1 (set (pfun TRAIN
                                 BLK)))
                  (s2 (set (pfun TRAIN
                                 BLK))) )
                (= (elem@Open@@pfun@@TRAIN@@BLK@Close x
                                                      (set-diff@Open@@pfun@@TRAIN@@BLK@Close s1
                                                                                             s2))
                   (and (elem@Open@@pfun@@TRAIN@@BLK@Close x
                                                           s1)
                        (not (elem@Open@@pfun@@TRAIN@@BLK@Close x
                                                                s2))))))

(assert (forall ( (x (pfun TRAIN
                           BLK))
                  (s1 (set (pfun TRAIN
                                 BLK)))
                  (s2 (set (pfun TRAIN
                                 BLK))) )
                (= (elem@Open@@pfun@@TRAIN@@BLK@Close x
                                                      (intersect@Open@@pfun@@TRAIN@@BLK@Close s1
                                                                                              s2))
                   (and (elem@Open@@pfun@@TRAIN@@BLK@Close x
                                                           s1)
                        (elem@Open@@pfun@@TRAIN@@BLK@Close x
                                                           s2)))))

(assert (forall ( (x (pfun TRAIN
                           BLK))
                  (s1 (set (pfun TRAIN
                                 BLK)))
                  (s2 (set (pfun TRAIN
                                 BLK))) )
                (= (elem@Open@@pfun@@TRAIN@@BLK@Close x
                                                      (bunion@Open@@pfun@@TRAIN@@BLK@Close s1
                                                                                           s2))
                   (or (elem@Open@@pfun@@TRAIN@@BLK@Close x
                                                          s1)
                       (elem@Open@@pfun@@TRAIN@@BLK@Close x
                                                          s2)))))

(assert (forall ( (x (pfun TRAIN
                           BLK))
                  (s1 (set (pfun TRAIN
                                 BLK)))
                  (s2 (set (pfun TRAIN
                                 BLK))) )
                (not (elem@Open@@pfun@@TRAIN@@BLK@Close x
                                                        empty-set@Open@@pfun@@TRAIN@@BLK@Close))))

(assert (and (not (= ent
                     ext))
             (not (elem@@BLK ent
                             PLF))
             (not (elem@@BLK ext
                             PLF))))

(assert (forall ( (p BLK) )
                (=> true
                    (= (not (= p
                               ext))
                       (elem@@BLK p
                                  (bunion@@BLK (mk-set@@BLK ent)
                                               PLF))))))

(assert (forall ( (p BLK) )
                (=> true
                    (= (not (= p
                               ent))
                       (elem@@BLK p
                                  (bunion@@BLK (mk-set@@BLK ext)
                                               PLF))))))

(assert (forall ( (p BLK) )
                (=> true
                    (= (or (= p
                              ent)
                           (= p
                              ext))
                       (not (elem@@BLK p
                                       PLF))))))

(assert (= BLK
           (bunion@@BLK (bunion@@BLK (mk-set@@BLK ent)
                                     (mk-set@@BLK ext))
                        PLF)))

(assert (forall ( (t TRAIN) )
                (=> (elem@@TRAIN t
                                 in)
                    (elem@@BLK (select loc
                                       t)
                               BLK))))

(assert (= (dom@@TRAIN@@BLK loc)
           in))

(assert false)

(assert (not (not (elem@@TRAIN t
                               in))))

(check-sat-using (or-else (then qe smt) (then skip smt) (then (using-params simplify :expand-power true) smt)))

(pop)
(echo "> train0/leave/CO/co0/goal (175,1)")
(push)
(declare-sort BLK 0)
(declare-sort LOC 0)
(declare-sort TRAIN 0)
(define-sort pfun (a b) (Array a b))
(declare-sort set 1)
(declare-const PLF (set BLK))
(declare-const BLK (set BLK))
(declare-const LOC (set LOC))
(declare-const TRAIN (set TRAIN))
(declare-const ent BLK)
(declare-const ext BLK)
(declare-const in (set TRAIN))
(declare-const in@prime (set TRAIN))
(declare-const loc (pfun TRAIN BLK))
(declare-const loc@prime (pfun TRAIN BLK))
(declare-const p BLK)
(declare-const q BLK)
(declare-const t TRAIN)
(declare-const t_0 TRAIN)
(declare-const t_1 TRAIN)
(declare-const t_2 TRAIN)
(declare-const t_3 TRAIN)
(declare-fun apply@@TRAIN@@BLK ((pfun TRAIN BLK) TRAIN) BLK)
(declare-fun dom-rest@@TRAIN@@BLK ((set TRAIN) (pfun TRAIN BLK)) (pfun TRAIN BLK))
(declare-fun dom-subt@@TRAIN@@BLK ((set TRAIN) (pfun TRAIN BLK)) (pfun TRAIN BLK))
(declare-fun dom@@TRAIN@@BLK ((pfun TRAIN BLK)) (set TRAIN))
(declare-fun elem@@BLK (BLK (set BLK)) Bool)
(declare-fun elem@@LOC (LOC (set LOC)) Bool)
(declare-fun elem@@TRAIN (TRAIN (set TRAIN)) Bool)
(declare-fun elem@Open@@pfun@@TRAIN@@BLK@Close ((pfun TRAIN BLK) (set (pfun TRAIN BLK))) Bool)
(declare-fun empty-fun@@TRAIN@@BLK () (pfun TRAIN BLK))
(declare-fun empty-set@@BLK () (set BLK))
(declare-fun empty-set@@LOC () (set LOC))
(declare-fun empty-set@@TRAIN () (set TRAIN))
(declare-fun empty-set@Open@@pfun@@TRAIN@@BLK@Close () (set (pfun TRAIN BLK)))
(declare-fun intersect@@BLK ((set BLK) (set BLK)) (set BLK))
(declare-fun intersect@@LOC ((set LOC) (set LOC)) (set LOC))
(declare-fun intersect@@TRAIN ((set TRAIN) (set TRAIN)) (set TRAIN))
(declare-fun intersect@Open@@pfun@@TRAIN@@BLK@Close ((set (pfun TRAIN BLK)) (set (pfun TRAIN BLK))) (set (pfun TRAIN BLK)))
(declare-fun mk-fun@@TRAIN@@BLK (TRAIN BLK) (pfun TRAIN BLK))
(declare-fun mk-set@@BLK (BLK) (set BLK))
(declare-fun mk-set@@LOC (LOC) (set LOC))
(declare-fun mk-set@@TRAIN (TRAIN) (set TRAIN))
(declare-fun mk-set@Open@@pfun@@TRAIN@@BLK@Close ((pfun TRAIN BLK)) (set (pfun TRAIN BLK)))
(declare-fun ovl@@TRAIN@@BLK ((pfun TRAIN BLK) (pfun TRAIN BLK)) (pfun TRAIN BLK))
(declare-fun set-diff@@BLK ((set BLK) (set BLK)) (set BLK))
(declare-fun set-diff@@LOC ((set LOC) (set LOC)) (set LOC))
(declare-fun set-diff@@TRAIN ((set TRAIN) (set TRAIN)) (set TRAIN))
(declare-fun set-diff@Open@@pfun@@TRAIN@@BLK@Close ((set (pfun TRAIN BLK)) (set (pfun TRAIN BLK))) (set (pfun TRAIN BLK)))
(declare-fun tfun@@TRAIN@@BLK ((set TRAIN) (set BLK)) (set (pfun TRAIN BLK)))
(declare-fun bunion@@BLK ((set BLK) (set BLK)) (set BLK))
(declare-fun bunion@@LOC ((set LOC) (set LOC)) (set LOC))
(declare-fun bunion@@TRAIN ((set TRAIN) (set TRAIN)) (set TRAIN))
(declare-fun bunion@Open@@pfun@@TRAIN@@BLK@Close ((set (pfun TRAIN BLK)) (set (pfun TRAIN BLK))) (set (pfun TRAIN BLK)))
(assert (=> (and (not (elem@@TRAIN t_0
                                   in))
                 (elem@@TRAIN t_0
                              in@prime))
            (= (select loc@prime
                       t_0)
               ent)))

(assert (not (=> (and (not (elem@@TRAIN t_0
                                        in))
                      (elem@@TRAIN t_0
                                   in@prime))
                 (= (select loc@prime
                            t_0)
                    ent))))

(check-sat-using (or-else (then qe smt) (then skip smt) (then (using-params simplify :expand-power true) smt)))

(pop)
(echo "> train0/leave/CO/co0/hypotheses (175,1)")
(push)
(declare-sort BLK 0)
(declare-sort LOC 0)
(declare-sort TRAIN 0)
(define-sort pfun (a b) (Array a b))
(declare-sort set 1)
(declare-const PLF (set BLK))
(declare-const BLK (set BLK))
(declare-const LOC (set LOC))
(declare-const TRAIN (set TRAIN))
(declare-const ent BLK)
(declare-const ext BLK)
(declare-const in (set TRAIN))
(declare-const in@prime (set TRAIN))
(declare-const loc (pfun TRAIN BLK))
(declare-const loc@prime (pfun TRAIN BLK))
(declare-const p BLK)
(declare-const q BLK)
(declare-const t TRAIN)
(declare-const t_0 TRAIN)
(declare-const t_1 TRAIN)
(declare-const t_2 TRAIN)
(declare-const t_3 TRAIN)
(declare-fun apply@@TRAIN@@BLK ((pfun TRAIN BLK) TRAIN) BLK)
(declare-fun dom-rest@@TRAIN@@BLK ((set TRAIN) (pfun TRAIN BLK)) (pfun TRAIN BLK))
(declare-fun dom-subt@@TRAIN@@BLK ((set TRAIN) (pfun TRAIN BLK)) (pfun TRAIN BLK))
(declare-fun dom@@TRAIN@@BLK ((pfun TRAIN BLK)) (set TRAIN))
(declare-fun elem@@BLK (BLK (set BLK)) Bool)
(declare-fun elem@@LOC (LOC (set LOC)) Bool)
(declare-fun elem@@TRAIN (TRAIN (set TRAIN)) Bool)
(declare-fun elem@Open@@pfun@@TRAIN@@BLK@Close ((pfun TRAIN BLK) (set (pfun TRAIN BLK))) Bool)
(declare-fun empty-fun@@TRAIN@@BLK () (pfun TRAIN BLK))
(declare-fun empty-set@@BLK () (set BLK))
(declare-fun empty-set@@LOC () (set LOC))
(declare-fun empty-set@@TRAIN () (set TRAIN))
(declare-fun empty-set@Open@@pfun@@TRAIN@@BLK@Close () (set (pfun TRAIN BLK)))
(declare-fun intersect@@BLK ((set BLK) (set BLK)) (set BLK))
(declare-fun intersect@@LOC ((set LOC) (set LOC)) (set LOC))
(declare-fun intersect@@TRAIN ((set TRAIN) (set TRAIN)) (set TRAIN))
(declare-fun intersect@Open@@pfun@@TRAIN@@BLK@Close ((set (pfun TRAIN BLK)) (set (pfun TRAIN BLK))) (set (pfun TRAIN BLK)))
(declare-fun mk-fun@@TRAIN@@BLK (TRAIN BLK) (pfun TRAIN BLK))
(declare-fun mk-set@@BLK (BLK) (set BLK))
(declare-fun mk-set@@LOC (LOC) (set LOC))
(declare-fun mk-set@@TRAIN (TRAIN) (set TRAIN))
(declare-fun mk-set@Open@@pfun@@TRAIN@@BLK@Close ((pfun TRAIN BLK)) (set (pfun TRAIN BLK)))
(declare-fun ovl@@TRAIN@@BLK ((pfun TRAIN BLK) (pfun TRAIN BLK)) (pfun TRAIN BLK))
(declare-fun set-diff@@BLK ((set BLK) (set BLK)) (set BLK))
(declare-fun set-diff@@LOC ((set LOC) (set LOC)) (set LOC))
(declare-fun set-diff@@TRAIN ((set TRAIN) (set TRAIN)) (set TRAIN))
(declare-fun set-diff@Open@@pfun@@TRAIN@@BLK@Close ((set (pfun TRAIN BLK)) (set (pfun TRAIN BLK))) (set (pfun TRAIN BLK)))
(declare-fun tfun@@TRAIN@@BLK ((set TRAIN) (set BLK)) (set (pfun TRAIN BLK)))
(declare-fun bunion@@BLK ((set BLK) (set BLK)) (set BLK))
(declare-fun bunion@@LOC ((set LOC) (set LOC)) (set LOC))
(declare-fun bunion@@TRAIN ((set TRAIN) (set TRAIN)) (set TRAIN))
(declare-fun bunion@Open@@pfun@@TRAIN@@BLK@Close ((set (pfun TRAIN BLK)) (set (pfun TRAIN BLK))) (set (pfun TRAIN BLK)))
(assert (forall ( (x BLK)
                  (y BLK) )
                (= (elem@@BLK x
                              (mk-set@@BLK y))
                   (= x
                      y))))

(assert (forall ( (x BLK)
                  (s1 (set BLK))
                  (s2 (set BLK)) )
                (= (elem@@BLK x
                              (set-diff@@BLK s1
                                             s2))
                   (and (elem@@BLK x
                                   s1)
                        (not (elem@@BLK x
                                        s2))))))

(assert (forall ( (x BLK)
                  (s1 (set BLK))
                  (s2 (set BLK)) )
                (= (elem@@BLK x
                              (intersect@@BLK s1
                                              s2))
                   (and (elem@@BLK x
                                   s1)
                        (elem@@BLK x
                                   s2)))))

(assert (forall ( (x BLK)
                  (s1 (set BLK))
                  (s2 (set BLK)) )
                (= (elem@@BLK x
                              (bunion@@BLK s1
                                           s2))
                   (or (elem@@BLK x
                                  s1)
                       (elem@@BLK x
                                  s2)))))

(assert (forall ( (x BLK)
                  (s1 (set BLK))
                  (s2 (set BLK)) )
                (not (elem@@BLK x
                                empty-set@@BLK))))

(assert (forall ( (x LOC)
                  (y LOC) )
                (= (elem@@LOC x
                              (mk-set@@LOC y))
                   (= x
                      y))))

(assert (forall ( (x LOC)
                  (s1 (set LOC))
                  (s2 (set LOC)) )
                (= (elem@@LOC x
                              (set-diff@@LOC s1
                                             s2))
                   (and (elem@@LOC x
                                   s1)
                        (not (elem@@LOC x
                                        s2))))))

(assert (forall ( (x LOC)
                  (s1 (set LOC))
                  (s2 (set LOC)) )
                (= (elem@@LOC x
                              (intersect@@LOC s1
                                              s2))
                   (and (elem@@LOC x
                                   s1)
                        (elem@@LOC x
                                   s2)))))

(assert (forall ( (x LOC)
                  (s1 (set LOC))
                  (s2 (set LOC)) )
                (= (elem@@LOC x
                              (bunion@@LOC s1
                                           s2))
                   (or (elem@@LOC x
                                  s1)
                       (elem@@LOC x
                                  s2)))))

(assert (forall ( (x LOC)
                  (s1 (set LOC))
                  (s2 (set LOC)) )
                (not (elem@@LOC x
                                empty-set@@LOC))))

(assert (forall ( (x TRAIN)
                  (y TRAIN) )
                (= (elem@@TRAIN x
                                (mk-set@@TRAIN y))
                   (= x
                      y))))

(assert (forall ( (x TRAIN)
                  (s1 (set TRAIN))
                  (s2 (set TRAIN)) )
                (= (elem@@TRAIN x
                                (set-diff@@TRAIN s1
                                                 s2))
                   (and (elem@@TRAIN x
                                     s1)
                        (not (elem@@TRAIN x
                                          s2))))))

(assert (forall ( (x TRAIN)
                  (s1 (set TRAIN))
                  (s2 (set TRAIN)) )
                (= (elem@@TRAIN x
                                (intersect@@TRAIN s1
                                                  s2))
                   (and (elem@@TRAIN x
                                     s1)
                        (elem@@TRAIN x
                                     s2)))))

(assert (forall ( (x TRAIN)
                  (s1 (set TRAIN))
                  (s2 (set TRAIN)) )
                (= (elem@@TRAIN x
                                (bunion@@TRAIN s1
                                               s2))
                   (or (elem@@TRAIN x
                                    s1)
                       (elem@@TRAIN x
                                    s2)))))

(assert (forall ( (x TRAIN)
                  (s1 (set TRAIN))
                  (s2 (set TRAIN)) )
                (not (elem@@TRAIN x
                                  empty-set@@TRAIN))))

(assert (forall ( (f1 (pfun TRAIN
                            BLK))
                  (f2 (pfun TRAIN
                            BLK)) )
                (= (bunion@@TRAIN (dom@@TRAIN@@BLK f1)
                                  (dom@@TRAIN@@BLK f2))
                   (dom@@TRAIN@@BLK (ovl@@TRAIN@@BLK f1
                                                     f2)))))

(assert (= (dom@@TRAIN@@BLK empty-fun@@TRAIN@@BLK)
           empty-set@@TRAIN))

(assert (forall ( (x TRAIN)
                  (y BLK) )
                (= (dom@@TRAIN@@BLK (mk-fun@@TRAIN@@BLK x
                                                        y))
                   (mk-set@@TRAIN x))))

(assert (forall ( (f1 (pfun TRAIN
                            BLK))
                  (f2 (pfun TRAIN
                            BLK))
                  (x TRAIN) )
                (=> (elem@@TRAIN x
                                 (dom@@TRAIN@@BLK f2))
                    (= (select (ovl@@TRAIN@@BLK f1
                                                f2)
                               x)
                       (select f2
                               x)))))

(assert (forall ( (f1 (pfun TRAIN
                            BLK))
                  (f2 (pfun TRAIN
                            BLK))
                  (x TRAIN) )
                (=> (elem@@TRAIN x
                                 (set-diff@@TRAIN (dom@@TRAIN@@BLK f1)
                                                  (dom@@TRAIN@@BLK f2)))
                    (= (select (ovl@@TRAIN@@BLK f1
                                                f2)
                               x)
                       (select f1
                               x)))))

(assert (forall ( (f1 (pfun TRAIN
                            BLK))
                  (s1 (set TRAIN)) )
                (= (dom@@TRAIN@@BLK (dom-subt@@TRAIN@@BLK s1
                                                          f1))
                   (set-diff@@TRAIN (dom@@TRAIN@@BLK f1)
                                    s1))))

(assert (forall ( (x TRAIN)
                  (y BLK) )
                (= (select (mk-fun@@TRAIN@@BLK x
                                               y)
                           x)
                   y)))

(assert (forall ( (f1 (pfun TRAIN
                            BLK))
                  (s1 (set TRAIN))
                  (x TRAIN) )
                (=> (elem@@TRAIN x
                                 (intersect@@TRAIN s1
                                                   (dom@@TRAIN@@BLK f1)))
                    (= (select (dom-rest@@TRAIN@@BLK s1
                                                     f1)
                               x)
                       (select f1
                               x)))))

(assert (forall ( (f1 (pfun TRAIN
                            BLK))
                  (s1 (set TRAIN))
                  (x TRAIN) )
                (=> (elem@@TRAIN x
                                 (set-diff@@TRAIN (dom@@TRAIN@@BLK f1)
                                                  s1))
                    (= (select (dom-subt@@TRAIN@@BLK s1
                                                     f1)
                               x)
                       (select f1
                               x)))))

(assert (forall ( (x (pfun TRAIN
                           BLK))
                  (y (pfun TRAIN
                           BLK)) )
                (= (elem@Open@@pfun@@TRAIN@@BLK@Close x
                                                      (mk-set@Open@@pfun@@TRAIN@@BLK@Close y))
                   (= x
                      y))))

(assert (forall ( (x (pfun TRAIN
                           BLK))
                  (s1 (set (pfun TRAIN
                                 BLK)))
                  (s2 (set (pfun TRAIN
                                 BLK))) )
                (= (elem@Open@@pfun@@TRAIN@@BLK@Close x
                                                      (set-diff@Open@@pfun@@TRAIN@@BLK@Close s1
                                                                                             s2))
                   (and (elem@Open@@pfun@@TRAIN@@BLK@Close x
                                                           s1)
                        (not (elem@Open@@pfun@@TRAIN@@BLK@Close x
                                                                s2))))))

(assert (forall ( (x (pfun TRAIN
                           BLK))
                  (s1 (set (pfun TRAIN
                                 BLK)))
                  (s2 (set (pfun TRAIN
                                 BLK))) )
                (= (elem@Open@@pfun@@TRAIN@@BLK@Close x
                                                      (intersect@Open@@pfun@@TRAIN@@BLK@Close s1
                                                                                              s2))
                   (and (elem@Open@@pfun@@TRAIN@@BLK@Close x
                                                           s1)
                        (elem@Open@@pfun@@TRAIN@@BLK@Close x
                                                           s2)))))

(assert (forall ( (x (pfun TRAIN
                           BLK))
                  (s1 (set (pfun TRAIN
                                 BLK)))
                  (s2 (set (pfun TRAIN
                                 BLK))) )
                (= (elem@Open@@pfun@@TRAIN@@BLK@Close x
                                                      (bunion@Open@@pfun@@TRAIN@@BLK@Close s1
                                                                                           s2))
                   (or (elem@Open@@pfun@@TRAIN@@BLK@Close x
                                                          s1)
                       (elem@Open@@pfun@@TRAIN@@BLK@Close x
                                                          s2)))))

(assert (forall ( (x (pfun TRAIN
                           BLK))
                  (s1 (set (pfun TRAIN
                                 BLK)))
                  (s2 (set (pfun TRAIN
                                 BLK))) )
                (not (elem@Open@@pfun@@TRAIN@@BLK@Close x
                                                        empty-set@Open@@pfun@@TRAIN@@BLK@Close))))

(assert (and (not (= ent
                     ext))
             (not (elem@@BLK ent
                             PLF))
             (not (elem@@BLK ext
                             PLF))))

(assert (forall ( (p BLK) )
                (=> true
                    (= (not (= p
                               ext))
                       (elem@@BLK p
                                  (bunion@@BLK (mk-set@@BLK ent)
                                               PLF))))))

(assert (forall ( (p BLK) )
                (=> true
                    (= (not (= p
                               ent))
                       (elem@@BLK p
                                  (bunion@@BLK (mk-set@@BLK ext)
                                               PLF))))))

(assert (forall ( (p BLK) )
                (=> true
                    (= (or (= p
                              ent)
                           (= p
                              ext))
                       (not (elem@@BLK p
                                       PLF))))))

(assert (= BLK
           (bunion@@BLK (bunion@@BLK (mk-set@@BLK ent)
                                     (mk-set@@BLK ext))
                        PLF)))

(assert (forall ( (t TRAIN) )
                (=> (elem@@TRAIN t
                                 in)
                    (elem@@BLK (select loc
                                       t)
                               BLK))))

(assert (= (dom@@TRAIN@@BLK loc)
           in))

(assert (and (= (select loc
                        t)
                ext)
             (elem@@TRAIN t
                          in)))

(assert (= in@prime
           (set-diff@@TRAIN in
                            (mk-set@@TRAIN t))))

(assert (= loc@prime
           (dom-subt@@TRAIN@@BLK (mk-set@@TRAIN t)
                                 loc)))

(assert (not (and (= (select loc
                             t)
                     ext)
                  (elem@@TRAIN t
                               in)
                  (= in@prime
                     (set-diff@@TRAIN in
                                      (mk-set@@TRAIN t))))))

(check-sat-using (or-else (then qe smt) (then skip smt) (then (using-params simplify :expand-power true) smt)))

(pop)
(echo "> train0/leave/CO/co0/relation (175,1)")
(push)
(declare-sort BLK 0)
(declare-sort LOC 0)
(declare-sort TRAIN 0)
(define-sort pfun (a b) (Array a b))
(declare-sort set 1)
(declare-const PLF (set BLK))
(declare-const BLK (set BLK))
(declare-const LOC (set LOC))
(declare-const TRAIN (set TRAIN))
(declare-const ent BLK)
(declare-const ext BLK)
(declare-const in (set TRAIN))
(declare-const in@prime (set TRAIN))
(declare-const loc (pfun TRAIN BLK))
(declare-const loc@prime (pfun TRAIN BLK))
(declare-const p BLK)
(declare-const q BLK)
(declare-const t TRAIN)
(declare-const t_0 TRAIN)
(declare-const t_1 TRAIN)
(declare-const t_2 TRAIN)
(declare-const t_3 TRAIN)
(declare-fun apply@@TRAIN@@BLK ((pfun TRAIN BLK) TRAIN) BLK)
(declare-fun dom-rest@@TRAIN@@BLK ((set TRAIN) (pfun TRAIN BLK)) (pfun TRAIN BLK))
(declare-fun dom-subt@@TRAIN@@BLK ((set TRAIN) (pfun TRAIN BLK)) (pfun TRAIN BLK))
(declare-fun dom@@TRAIN@@BLK ((pfun TRAIN BLK)) (set TRAIN))
(declare-fun elem@@BLK (BLK (set BLK)) Bool)
(declare-fun elem@@LOC (LOC (set LOC)) Bool)
(declare-fun elem@@TRAIN (TRAIN (set TRAIN)) Bool)
(declare-fun elem@Open@@pfun@@TRAIN@@BLK@Close ((pfun TRAIN BLK) (set (pfun TRAIN BLK))) Bool)
(declare-fun empty-fun@@TRAIN@@BLK () (pfun TRAIN BLK))
(declare-fun empty-set@@BLK () (set BLK))
(declare-fun empty-set@@LOC () (set LOC))
(declare-fun empty-set@@TRAIN () (set TRAIN))
(declare-fun empty-set@Open@@pfun@@TRAIN@@BLK@Close () (set (pfun TRAIN BLK)))
(declare-fun intersect@@BLK ((set BLK) (set BLK)) (set BLK))
(declare-fun intersect@@LOC ((set LOC) (set LOC)) (set LOC))
(declare-fun intersect@@TRAIN ((set TRAIN) (set TRAIN)) (set TRAIN))
(declare-fun intersect@Open@@pfun@@TRAIN@@BLK@Close ((set (pfun TRAIN BLK)) (set (pfun TRAIN BLK))) (set (pfun TRAIN BLK)))
(declare-fun mk-fun@@TRAIN@@BLK (TRAIN BLK) (pfun TRAIN BLK))
(declare-fun mk-set@@BLK (BLK) (set BLK))
(declare-fun mk-set@@LOC (LOC) (set LOC))
(declare-fun mk-set@@TRAIN (TRAIN) (set TRAIN))
(declare-fun mk-set@Open@@pfun@@TRAIN@@BLK@Close ((pfun TRAIN BLK)) (set (pfun TRAIN BLK)))
(declare-fun ovl@@TRAIN@@BLK ((pfun TRAIN BLK) (pfun TRAIN BLK)) (pfun TRAIN BLK))
(declare-fun set-diff@@BLK ((set BLK) (set BLK)) (set BLK))
(declare-fun set-diff@@LOC ((set LOC) (set LOC)) (set LOC))
(declare-fun set-diff@@TRAIN ((set TRAIN) (set TRAIN)) (set TRAIN))
(declare-fun set-diff@Open@@pfun@@TRAIN@@BLK@Close ((set (pfun TRAIN BLK)) (set (pfun TRAIN BLK))) (set (pfun TRAIN BLK)))
(declare-fun tfun@@TRAIN@@BLK ((set TRAIN) (set BLK)) (set (pfun TRAIN BLK)))
(declare-fun bunion@@BLK ((set BLK) (set BLK)) (set BLK))
(declare-fun bunion@@LOC ((set LOC) (set LOC)) (set LOC))
(declare-fun bunion@@TRAIN ((set TRAIN) (set TRAIN)) (set TRAIN))
(declare-fun bunion@Open@@pfun@@TRAIN@@BLK@Close ((set (pfun TRAIN BLK)) (set (pfun TRAIN BLK))) (set (pfun TRAIN BLK)))
(assert (= (and (not (elem@@TRAIN t_0
                                  in))
                (elem@@TRAIN t_0
                             in@prime))
           (and (not (= t_0
                        t))
                (not (elem@@TRAIN t_0
                                  in))
                (elem@@TRAIN t_0
                             in@prime))))

(assert (= (and (not (= t_0
                        t))
                (not (elem@@TRAIN t_0
                                  in))
                (elem@@TRAIN t_0
                             in@prime))
           (and (not (= t_0
                        t))
                (not (elem@@TRAIN t_0
                                  in))
                (elem@@TRAIN t_0
                             (bunion@@TRAIN in
                                            (mk-set@@TRAIN t))))))

(assert (= (and (not (= t_0
                        t))
                (not (elem@@TRAIN t_0
                                  in))
                (elem@@TRAIN t_0
                             (bunion@@TRAIN in
                                            (mk-set@@TRAIN t))))
           false))

(assert (=> false
            (= (select loc@prime
                       t_0)
               ent)))

(assert (forall ( (x BLK)
                  (y BLK) )
                (= (elem@@BLK x
                              (mk-set@@BLK y))
                   (= x
                      y))))

(assert (forall ( (x BLK)
                  (s1 (set BLK))
                  (s2 (set BLK)) )
                (= (elem@@BLK x
                              (set-diff@@BLK s1
                                             s2))
                   (and (elem@@BLK x
                                   s1)
                        (not (elem@@BLK x
                                        s2))))))

(assert (forall ( (x BLK)
                  (s1 (set BLK))
                  (s2 (set BLK)) )
                (= (elem@@BLK x
                              (intersect@@BLK s1
                                              s2))
                   (and (elem@@BLK x
                                   s1)
                        (elem@@BLK x
                                   s2)))))

(assert (forall ( (x BLK)
                  (s1 (set BLK))
                  (s2 (set BLK)) )
                (= (elem@@BLK x
                              (bunion@@BLK s1
                                           s2))
                   (or (elem@@BLK x
                                  s1)
                       (elem@@BLK x
                                  s2)))))

(assert (forall ( (x BLK)
                  (s1 (set BLK))
                  (s2 (set BLK)) )
                (not (elem@@BLK x
                                empty-set@@BLK))))

(assert (forall ( (x LOC)
                  (y LOC) )
                (= (elem@@LOC x
                              (mk-set@@LOC y))
                   (= x
                      y))))

(assert (forall ( (x LOC)
                  (s1 (set LOC))
                  (s2 (set LOC)) )
                (= (elem@@LOC x
                              (set-diff@@LOC s1
                                             s2))
                   (and (elem@@LOC x
                                   s1)
                        (not (elem@@LOC x
                                        s2))))))

(assert (forall ( (x LOC)
                  (s1 (set LOC))
                  (s2 (set LOC)) )
                (= (elem@@LOC x
                              (intersect@@LOC s1
                                              s2))
                   (and (elem@@LOC x
                                   s1)
                        (elem@@LOC x
                                   s2)))))

(assert (forall ( (x LOC)
                  (s1 (set LOC))
                  (s2 (set LOC)) )
                (= (elem@@LOC x
                              (bunion@@LOC s1
                                           s2))
                   (or (elem@@LOC x
                                  s1)
                       (elem@@LOC x
                                  s2)))))

(assert (forall ( (x LOC)
                  (s1 (set LOC))
                  (s2 (set LOC)) )
                (not (elem@@LOC x
                                empty-set@@LOC))))

(assert (forall ( (x TRAIN)
                  (y TRAIN) )
                (= (elem@@TRAIN x
                                (mk-set@@TRAIN y))
                   (= x
                      y))))

(assert (forall ( (x TRAIN)
                  (s1 (set TRAIN))
                  (s2 (set TRAIN)) )
                (= (elem@@TRAIN x
                                (set-diff@@TRAIN s1
                                                 s2))
                   (and (elem@@TRAIN x
                                     s1)
                        (not (elem@@TRAIN x
                                          s2))))))

(assert (forall ( (x TRAIN)
                  (s1 (set TRAIN))
                  (s2 (set TRAIN)) )
                (= (elem@@TRAIN x
                                (intersect@@TRAIN s1
                                                  s2))
                   (and (elem@@TRAIN x
                                     s1)
                        (elem@@TRAIN x
                                     s2)))))

(assert (forall ( (x TRAIN)
                  (s1 (set TRAIN))
                  (s2 (set TRAIN)) )
                (= (elem@@TRAIN x
                                (bunion@@TRAIN s1
                                               s2))
                   (or (elem@@TRAIN x
                                    s1)
                       (elem@@TRAIN x
                                    s2)))))

(assert (forall ( (x TRAIN)
                  (s1 (set TRAIN))
                  (s2 (set TRAIN)) )
                (not (elem@@TRAIN x
                                  empty-set@@TRAIN))))

(assert (forall ( (f1 (pfun TRAIN
                            BLK))
                  (f2 (pfun TRAIN
                            BLK)) )
                (= (bunion@@TRAIN (dom@@TRAIN@@BLK f1)
                                  (dom@@TRAIN@@BLK f2))
                   (dom@@TRAIN@@BLK (ovl@@TRAIN@@BLK f1
                                                     f2)))))

(assert (= (dom@@TRAIN@@BLK empty-fun@@TRAIN@@BLK)
           empty-set@@TRAIN))

(assert (forall ( (x TRAIN)
                  (y BLK) )
                (= (dom@@TRAIN@@BLK (mk-fun@@TRAIN@@BLK x
                                                        y))
                   (mk-set@@TRAIN x))))

(assert (forall ( (f1 (pfun TRAIN
                            BLK))
                  (f2 (pfun TRAIN
                            BLK))
                  (x TRAIN) )
                (=> (elem@@TRAIN x
                                 (dom@@TRAIN@@BLK f2))
                    (= (select (ovl@@TRAIN@@BLK f1
                                                f2)
                               x)
                       (select f2
                               x)))))

(assert (forall ( (f1 (pfun TRAIN
                            BLK))
                  (f2 (pfun TRAIN
                            BLK))
                  (x TRAIN) )
                (=> (elem@@TRAIN x
                                 (set-diff@@TRAIN (dom@@TRAIN@@BLK f1)
                                                  (dom@@TRAIN@@BLK f2)))
                    (= (select (ovl@@TRAIN@@BLK f1
                                                f2)
                               x)
                       (select f1
                               x)))))

(assert (forall ( (f1 (pfun TRAIN
                            BLK))
                  (s1 (set TRAIN)) )
                (= (dom@@TRAIN@@BLK (dom-subt@@TRAIN@@BLK s1
                                                          f1))
                   (set-diff@@TRAIN (dom@@TRAIN@@BLK f1)
                                    s1))))

(assert (forall ( (x TRAIN)
                  (y BLK) )
                (= (select (mk-fun@@TRAIN@@BLK x
                                               y)
                           x)
                   y)))

(assert (forall ( (f1 (pfun TRAIN
                            BLK))
                  (s1 (set TRAIN))
                  (x TRAIN) )
                (=> (elem@@TRAIN x
                                 (intersect@@TRAIN s1
                                                   (dom@@TRAIN@@BLK f1)))
                    (= (select (dom-rest@@TRAIN@@BLK s1
                                                     f1)
                               x)
                       (select f1
                               x)))))

(assert (forall ( (f1 (pfun TRAIN
                            BLK))
                  (s1 (set TRAIN))
                  (x TRAIN) )
                (=> (elem@@TRAIN x
                                 (set-diff@@TRAIN (dom@@TRAIN@@BLK f1)
                                                  s1))
                    (= (select (dom-subt@@TRAIN@@BLK s1
                                                     f1)
                               x)
                       (select f1
                               x)))))

(assert (forall ( (x (pfun TRAIN
                           BLK))
                  (y (pfun TRAIN
                           BLK)) )
                (= (elem@Open@@pfun@@TRAIN@@BLK@Close x
                                                      (mk-set@Open@@pfun@@TRAIN@@BLK@Close y))
                   (= x
                      y))))

(assert (forall ( (x (pfun TRAIN
                           BLK))
                  (s1 (set (pfun TRAIN
                                 BLK)))
                  (s2 (set (pfun TRAIN
                                 BLK))) )
                (= (elem@Open@@pfun@@TRAIN@@BLK@Close x
                                                      (set-diff@Open@@pfun@@TRAIN@@BLK@Close s1
                                                                                             s2))
                   (and (elem@Open@@pfun@@TRAIN@@BLK@Close x
                                                           s1)
                        (not (elem@Open@@pfun@@TRAIN@@BLK@Close x
                                                                s2))))))

(assert (forall ( (x (pfun TRAIN
                           BLK))
                  (s1 (set (pfun TRAIN
                                 BLK)))
                  (s2 (set (pfun TRAIN
                                 BLK))) )
                (= (elem@Open@@pfun@@TRAIN@@BLK@Close x
                                                      (intersect@Open@@pfun@@TRAIN@@BLK@Close s1
                                                                                              s2))
                   (and (elem@Open@@pfun@@TRAIN@@BLK@Close x
                                                           s1)
                        (elem@Open@@pfun@@TRAIN@@BLK@Close x
                                                           s2)))))

(assert (forall ( (x (pfun TRAIN
                           BLK))
                  (s1 (set (pfun TRAIN
                                 BLK)))
                  (s2 (set (pfun TRAIN
                                 BLK))) )
                (= (elem@Open@@pfun@@TRAIN@@BLK@Close x
                                                      (bunion@Open@@pfun@@TRAIN@@BLK@Close s1
                                                                                           s2))
                   (or (elem@Open@@pfun@@TRAIN@@BLK@Close x
                                                          s1)
                       (elem@Open@@pfun@@TRAIN@@BLK@Close x
                                                          s2)))))

(assert (forall ( (x (pfun TRAIN
                           BLK))
                  (s1 (set (pfun TRAIN
                                 BLK)))
                  (s2 (set (pfun TRAIN
                                 BLK))) )
                (not (elem@Open@@pfun@@TRAIN@@BLK@Close x
                                                        empty-set@Open@@pfun@@TRAIN@@BLK@Close))))

(assert (and (not (= ent
                     ext))
             (not (elem@@BLK ent
                             PLF))
             (not (elem@@BLK ext
                             PLF))))

(assert (forall ( (p BLK) )
                (=> true
                    (= (not (= p
                               ext))
                       (elem@@BLK p
                                  (bunion@@BLK (mk-set@@BLK ent)
                                               PLF))))))

(assert (forall ( (p BLK) )
                (=> true
                    (= (not (= p
                               ent))
                       (elem@@BLK p
                                  (bunion@@BLK (mk-set@@BLK ext)
                                               PLF))))))

(assert (forall ( (p BLK) )
                (=> true
                    (= (or (= p
                              ent)
                           (= p
                              ext))
                       (not (elem@@BLK p
                                       PLF))))))

(assert (= BLK
           (bunion@@BLK (bunion@@BLK (mk-set@@BLK ent)
                                     (mk-set@@BLK ext))
                        PLF)))

(assert (not (=> (and (not (elem@@TRAIN t_0
                                        in))
                      (elem@@TRAIN t_0
                                   in@prime))
                 (= (select loc@prime
                            t_0)
                    ent))))

(check-sat-using (or-else (then qe smt) (then skip smt) (then (using-params simplify :expand-power true) smt)))

(pop)
(echo "> train0/leave/CO/co0/step (182,1)")
(push)
(declare-sort BLK 0)
(declare-sort LOC 0)
(declare-sort TRAIN 0)
(define-sort pfun (a b) (Array a b))
(declare-sort set 1)
(declare-const PLF (set BLK))
(declare-const BLK (set BLK))
(declare-const LOC (set LOC))
(declare-const TRAIN (set TRAIN))
(declare-const ent BLK)
(declare-const ext BLK)
(declare-const in (set TRAIN))
(declare-const in@prime (set TRAIN))
(declare-const loc (pfun TRAIN BLK))
(declare-const loc@prime (pfun TRAIN BLK))
(declare-const p BLK)
(declare-const q BLK)
(declare-const t TRAIN)
(declare-const t_0 TRAIN)
(declare-const t_1 TRAIN)
(declare-const t_2 TRAIN)
(declare-const t_3 TRAIN)
(declare-fun apply@@TRAIN@@BLK ((pfun TRAIN BLK) TRAIN) BLK)
(declare-fun dom-rest@@TRAIN@@BLK ((set TRAIN) (pfun TRAIN BLK)) (pfun TRAIN BLK))
(declare-fun dom-subt@@TRAIN@@BLK ((set TRAIN) (pfun TRAIN BLK)) (pfun TRAIN BLK))
(declare-fun dom@@TRAIN@@BLK ((pfun TRAIN BLK)) (set TRAIN))
(declare-fun elem@@BLK (BLK (set BLK)) Bool)
(declare-fun elem@@LOC (LOC (set LOC)) Bool)
(declare-fun elem@@TRAIN (TRAIN (set TRAIN)) Bool)
(declare-fun elem@Open@@pfun@@TRAIN@@BLK@Close ((pfun TRAIN BLK) (set (pfun TRAIN BLK))) Bool)
(declare-fun empty-fun@@TRAIN@@BLK () (pfun TRAIN BLK))
(declare-fun empty-set@@BLK () (set BLK))
(declare-fun empty-set@@LOC () (set LOC))
(declare-fun empty-set@@TRAIN () (set TRAIN))
(declare-fun empty-set@Open@@pfun@@TRAIN@@BLK@Close () (set (pfun TRAIN BLK)))
(declare-fun intersect@@BLK ((set BLK) (set BLK)) (set BLK))
(declare-fun intersect@@LOC ((set LOC) (set LOC)) (set LOC))
(declare-fun intersect@@TRAIN ((set TRAIN) (set TRAIN)) (set TRAIN))
(declare-fun intersect@Open@@pfun@@TRAIN@@BLK@Close ((set (pfun TRAIN BLK)) (set (pfun TRAIN BLK))) (set (pfun TRAIN BLK)))
(declare-fun mk-fun@@TRAIN@@BLK (TRAIN BLK) (pfun TRAIN BLK))
(declare-fun mk-set@@BLK (BLK) (set BLK))
(declare-fun mk-set@@LOC (LOC) (set LOC))
(declare-fun mk-set@@TRAIN (TRAIN) (set TRAIN))
(declare-fun mk-set@Open@@pfun@@TRAIN@@BLK@Close ((pfun TRAIN BLK)) (set (pfun TRAIN BLK)))
(declare-fun ovl@@TRAIN@@BLK ((pfun TRAIN BLK) (pfun TRAIN BLK)) (pfun TRAIN BLK))
(declare-fun set-diff@@BLK ((set BLK) (set BLK)) (set BLK))
(declare-fun set-diff@@LOC ((set LOC) (set LOC)) (set LOC))
(declare-fun set-diff@@TRAIN ((set TRAIN) (set TRAIN)) (set TRAIN))
(declare-fun set-diff@Open@@pfun@@TRAIN@@BLK@Close ((set (pfun TRAIN BLK)) (set (pfun TRAIN BLK))) (set (pfun TRAIN BLK)))
(declare-fun tfun@@TRAIN@@BLK ((set TRAIN) (set BLK)) (set (pfun TRAIN BLK)))
(declare-fun bunion@@BLK ((set BLK) (set BLK)) (set BLK))
(declare-fun bunion@@LOC ((set LOC) (set LOC)) (set LOC))
(declare-fun bunion@@TRAIN ((set TRAIN) (set TRAIN)) (set TRAIN))
(declare-fun bunion@Open@@pfun@@TRAIN@@BLK@Close ((set (pfun TRAIN BLK)) (set (pfun TRAIN BLK))) (set (pfun TRAIN BLK)))
(assert (and (= (select loc
                        t)
                ext)
             (elem@@TRAIN t
                          in)))

(assert (forall ( (x BLK)
                  (y BLK) )
                (= (elem@@BLK x
                              (mk-set@@BLK y))
                   (= x
                      y))))

(assert (forall ( (x BLK)
                  (s1 (set BLK))
                  (s2 (set BLK)) )
                (= (elem@@BLK x
                              (set-diff@@BLK s1
                                             s2))
                   (and (elem@@BLK x
                                   s1)
                        (not (elem@@BLK x
                                        s2))))))

(assert (forall ( (x BLK)
                  (s1 (set BLK))
                  (s2 (set BLK)) )
                (= (elem@@BLK x
                              (intersect@@BLK s1
                                              s2))
                   (and (elem@@BLK x
                                   s1)
                        (elem@@BLK x
                                   s2)))))

(assert (forall ( (x BLK)
                  (s1 (set BLK))
                  (s2 (set BLK)) )
                (= (elem@@BLK x
                              (bunion@@BLK s1
                                           s2))
                   (or (elem@@BLK x
                                  s1)
                       (elem@@BLK x
                                  s2)))))

(assert (forall ( (x BLK)
                  (s1 (set BLK))
                  (s2 (set BLK)) )
                (not (elem@@BLK x
                                empty-set@@BLK))))

(assert (forall ( (x LOC)
                  (y LOC) )
                (= (elem@@LOC x
                              (mk-set@@LOC y))
                   (= x
                      y))))

(assert (forall ( (x LOC)
                  (s1 (set LOC))
                  (s2 (set LOC)) )
                (= (elem@@LOC x
                              (set-diff@@LOC s1
                                             s2))
                   (and (elem@@LOC x
                                   s1)
                        (not (elem@@LOC x
                                        s2))))))

(assert (forall ( (x LOC)
                  (s1 (set LOC))
                  (s2 (set LOC)) )
                (= (elem@@LOC x
                              (intersect@@LOC s1
                                              s2))
                   (and (elem@@LOC x
                                   s1)
                        (elem@@LOC x
                                   s2)))))

(assert (forall ( (x LOC)
                  (s1 (set LOC))
                  (s2 (set LOC)) )
                (= (elem@@LOC x
                              (bunion@@LOC s1
                                           s2))
                   (or (elem@@LOC x
                                  s1)
                       (elem@@LOC x
                                  s2)))))

(assert (forall ( (x LOC)
                  (s1 (set LOC))
                  (s2 (set LOC)) )
                (not (elem@@LOC x
                                empty-set@@LOC))))

(assert (forall ( (x TRAIN)
                  (y TRAIN) )
                (= (elem@@TRAIN x
                                (mk-set@@TRAIN y))
                   (= x
                      y))))

(assert (forall ( (x TRAIN)
                  (s1 (set TRAIN))
                  (s2 (set TRAIN)) )
                (= (elem@@TRAIN x
                                (set-diff@@TRAIN s1
                                                 s2))
                   (and (elem@@TRAIN x
                                     s1)
                        (not (elem@@TRAIN x
                                          s2))))))

(assert (forall ( (x TRAIN)
                  (s1 (set TRAIN))
                  (s2 (set TRAIN)) )
                (= (elem@@TRAIN x
                                (intersect@@TRAIN s1
                                                  s2))
                   (and (elem@@TRAIN x
                                     s1)
                        (elem@@TRAIN x
                                     s2)))))

(assert (forall ( (x TRAIN)
                  (s1 (set TRAIN))
                  (s2 (set TRAIN)) )
                (= (elem@@TRAIN x
                                (bunion@@TRAIN s1
                                               s2))
                   (or (elem@@TRAIN x
                                    s1)
                       (elem@@TRAIN x
                                    s2)))))

(assert (forall ( (x TRAIN)
                  (s1 (set TRAIN))
                  (s2 (set TRAIN)) )
                (not (elem@@TRAIN x
                                  empty-set@@TRAIN))))

(assert (forall ( (f1 (pfun TRAIN
                            BLK))
                  (f2 (pfun TRAIN
                            BLK)) )
                (= (bunion@@TRAIN (dom@@TRAIN@@BLK f1)
                                  (dom@@TRAIN@@BLK f2))
                   (dom@@TRAIN@@BLK (ovl@@TRAIN@@BLK f1
                                                     f2)))))

(assert (= (dom@@TRAIN@@BLK empty-fun@@TRAIN@@BLK)
           empty-set@@TRAIN))

(assert (forall ( (x TRAIN)
                  (y BLK) )
                (= (dom@@TRAIN@@BLK (mk-fun@@TRAIN@@BLK x
                                                        y))
                   (mk-set@@TRAIN x))))

(assert (forall ( (f1 (pfun TRAIN
                            BLK))
                  (f2 (pfun TRAIN
                            BLK))
                  (x TRAIN) )
                (=> (elem@@TRAIN x
                                 (dom@@TRAIN@@BLK f2))
                    (= (select (ovl@@TRAIN@@BLK f1
                                                f2)
                               x)
                       (select f2
                               x)))))

(assert (forall ( (f1 (pfun TRAIN
                            BLK))
                  (f2 (pfun TRAIN
                            BLK))
                  (x TRAIN) )
                (=> (elem@@TRAIN x
                                 (set-diff@@TRAIN (dom@@TRAIN@@BLK f1)
                                                  (dom@@TRAIN@@BLK f2)))
                    (= (select (ovl@@TRAIN@@BLK f1
                                                f2)
                               x)
                       (select f1
                               x)))))

(assert (forall ( (f1 (pfun TRAIN
                            BLK))
                  (s1 (set TRAIN)) )
                (= (dom@@TRAIN@@BLK (dom-subt@@TRAIN@@BLK s1
                                                          f1))
                   (set-diff@@TRAIN (dom@@TRAIN@@BLK f1)
                                    s1))))

(assert (forall ( (x TRAIN)
                  (y BLK) )
                (= (select (mk-fun@@TRAIN@@BLK x
                                               y)
                           x)
                   y)))

(assert (forall ( (f1 (pfun TRAIN
                            BLK))
                  (s1 (set TRAIN))
                  (x TRAIN) )
                (=> (elem@@TRAIN x
                                 (intersect@@TRAIN s1
                                                   (dom@@TRAIN@@BLK f1)))
                    (= (select (dom-rest@@TRAIN@@BLK s1
                                                     f1)
                               x)
                       (select f1
                               x)))))

(assert (forall ( (f1 (pfun TRAIN
                            BLK))
                  (s1 (set TRAIN))
                  (x TRAIN) )
                (=> (elem@@TRAIN x
                                 (set-diff@@TRAIN (dom@@TRAIN@@BLK f1)
                                                  s1))
                    (= (select (dom-subt@@TRAIN@@BLK s1
                                                     f1)
                               x)
                       (select f1
                               x)))))

(assert (forall ( (x (pfun TRAIN
                           BLK))
                  (y (pfun TRAIN
                           BLK)) )
                (= (elem@Open@@pfun@@TRAIN@@BLK@Close x
                                                      (mk-set@Open@@pfun@@TRAIN@@BLK@Close y))
                   (= x
                      y))))

(assert (forall ( (x (pfun TRAIN
                           BLK))
                  (s1 (set (pfun TRAIN
                                 BLK)))
                  (s2 (set (pfun TRAIN
                                 BLK))) )
                (= (elem@Open@@pfun@@TRAIN@@BLK@Close x
                                                      (set-diff@Open@@pfun@@TRAIN@@BLK@Close s1
                                                                                             s2))
                   (and (elem@Open@@pfun@@TRAIN@@BLK@Close x
                                                           s1)
                        (not (elem@Open@@pfun@@TRAIN@@BLK@Close x
                                                                s2))))))

(assert (forall ( (x (pfun TRAIN
                           BLK))
                  (s1 (set (pfun TRAIN
                                 BLK)))
                  (s2 (set (pfun TRAIN
                                 BLK))) )
                (= (elem@Open@@pfun@@TRAIN@@BLK@Close x
                                                      (intersect@Open@@pfun@@TRAIN@@BLK@Close s1
                                                                                              s2))
                   (and (elem@Open@@pfun@@TRAIN@@BLK@Close x
                                                           s1)
                        (elem@Open@@pfun@@TRAIN@@BLK@Close x
                                                           s2)))))

(assert (forall ( (x (pfun TRAIN
                           BLK))
                  (s1 (set (pfun TRAIN
                                 BLK)))
                  (s2 (set (pfun TRAIN
                                 BLK))) )
                (= (elem@Open@@pfun@@TRAIN@@BLK@Close x
                                                      (bunion@Open@@pfun@@TRAIN@@BLK@Close s1
                                                                                           s2))
                   (or (elem@Open@@pfun@@TRAIN@@BLK@Close x
                                                          s1)
                       (elem@Open@@pfun@@TRAIN@@BLK@Close x
                                                          s2)))))

(assert (forall ( (x (pfun TRAIN
                           BLK))
                  (s1 (set (pfun TRAIN
                                 BLK)))
                  (s2 (set (pfun TRAIN
                                 BLK))) )
                (not (elem@Open@@pfun@@TRAIN@@BLK@Close x
                                                        empty-set@Open@@pfun@@TRAIN@@BLK@Close))))

(assert (and (not (= ent
                     ext))
             (not (elem@@BLK ent
                             PLF))
             (not (elem@@BLK ext
                             PLF))))

(assert (forall ( (p BLK) )
                (=> true
                    (= (not (= p
                               ext))
                       (elem@@BLK p
                                  (bunion@@BLK (mk-set@@BLK ent)
                                               PLF))))))

(assert (forall ( (p BLK) )
                (=> true
                    (= (not (= p
                               ent))
                       (elem@@BLK p
                                  (bunion@@BLK (mk-set@@BLK ext)
                                               PLF))))))

(assert (forall ( (p BLK) )
                (=> true
                    (= (or (= p
                              ent)
                           (= p
                              ext))
                       (not (elem@@BLK p
                                       PLF))))))

(assert (= BLK
           (bunion@@BLK (bunion@@BLK (mk-set@@BLK ent)
                                     (mk-set@@BLK ext))
                        PLF)))

(assert (not (= (and (not (elem@@TRAIN t_0
                                       in))
                     (elem@@TRAIN t_0
                                  in@prime))
                (and (not (= t_0
                             t))
                     (not (elem@@TRAIN t_0
                                       in))
                     (elem@@TRAIN t_0
                                  in@prime)))))

(check-sat-using (or-else (then qe smt) (then skip smt) (then (using-params simplify :expand-power true) smt)))

(pop)
(echo "> train0/leave/CO/co0/step (184,1)")
(push)
(declare-sort BLK 0)
(declare-sort LOC 0)
(declare-sort TRAIN 0)
(define-sort pfun (a b) (Array a b))
(declare-sort set 1)
(declare-const PLF (set BLK))
(declare-const BLK (set BLK))
(declare-const LOC (set LOC))
(declare-const TRAIN (set TRAIN))
(declare-const ent BLK)
(declare-const ext BLK)
(declare-const in (set TRAIN))
(declare-const in@prime (set TRAIN))
(declare-const loc (pfun TRAIN BLK))
(declare-const loc@prime (pfun TRAIN BLK))
(declare-const p BLK)
(declare-const q BLK)
(declare-const t TRAIN)
(declare-const t_0 TRAIN)
(declare-const t_1 TRAIN)
(declare-const t_2 TRAIN)
(declare-const t_3 TRAIN)
(declare-fun apply@@TRAIN@@BLK ((pfun TRAIN BLK) TRAIN) BLK)
(declare-fun dom-rest@@TRAIN@@BLK ((set TRAIN) (pfun TRAIN BLK)) (pfun TRAIN BLK))
(declare-fun dom-subt@@TRAIN@@BLK ((set TRAIN) (pfun TRAIN BLK)) (pfun TRAIN BLK))
(declare-fun dom@@TRAIN@@BLK ((pfun TRAIN BLK)) (set TRAIN))
(declare-fun elem@@BLK (BLK (set BLK)) Bool)
(declare-fun elem@@LOC (LOC (set LOC)) Bool)
(declare-fun elem@@TRAIN (TRAIN (set TRAIN)) Bool)
(declare-fun elem@Open@@pfun@@TRAIN@@BLK@Close ((pfun TRAIN BLK) (set (pfun TRAIN BLK))) Bool)
(declare-fun empty-fun@@TRAIN@@BLK () (pfun TRAIN BLK))
(declare-fun empty-set@@BLK () (set BLK))
(declare-fun empty-set@@LOC () (set LOC))
(declare-fun empty-set@@TRAIN () (set TRAIN))
(declare-fun empty-set@Open@@pfun@@TRAIN@@BLK@Close () (set (pfun TRAIN BLK)))
(declare-fun intersect@@BLK ((set BLK) (set BLK)) (set BLK))
(declare-fun intersect@@LOC ((set LOC) (set LOC)) (set LOC))
(declare-fun intersect@@TRAIN ((set TRAIN) (set TRAIN)) (set TRAIN))
(declare-fun intersect@Open@@pfun@@TRAIN@@BLK@Close ((set (pfun TRAIN BLK)) (set (pfun TRAIN BLK))) (set (pfun TRAIN BLK)))
(declare-fun mk-fun@@TRAIN@@BLK (TRAIN BLK) (pfun TRAIN BLK))
(declare-fun mk-set@@BLK (BLK) (set BLK))
(declare-fun mk-set@@LOC (LOC) (set LOC))
(declare-fun mk-set@@TRAIN (TRAIN) (set TRAIN))
(declare-fun mk-set@Open@@pfun@@TRAIN@@BLK@Close ((pfun TRAIN BLK)) (set (pfun TRAIN BLK)))
(declare-fun ovl@@TRAIN@@BLK ((pfun TRAIN BLK) (pfun TRAIN BLK)) (pfun TRAIN BLK))
(declare-fun set-diff@@BLK ((set BLK) (set BLK)) (set BLK))
(declare-fun set-diff@@LOC ((set LOC) (set LOC)) (set LOC))
(declare-fun set-diff@@TRAIN ((set TRAIN) (set TRAIN)) (set TRAIN))
(declare-fun set-diff@Open@@pfun@@TRAIN@@BLK@Close ((set (pfun TRAIN BLK)) (set (pfun TRAIN BLK))) (set (pfun TRAIN BLK)))
(declare-fun tfun@@TRAIN@@BLK ((set TRAIN) (set BLK)) (set (pfun TRAIN BLK)))
(declare-fun bunion@@BLK ((set BLK) (set BLK)) (set BLK))
(declare-fun bunion@@LOC ((set LOC) (set LOC)) (set LOC))
(declare-fun bunion@@TRAIN ((set TRAIN) (set TRAIN)) (set TRAIN))
(declare-fun bunion@Open@@pfun@@TRAIN@@BLK@Close ((set (pfun TRAIN BLK)) (set (pfun TRAIN BLK))) (set (pfun TRAIN BLK)))
(assert (= in@prime
           (set-diff@@TRAIN in
                            (mk-set@@TRAIN t))))

(assert (forall ( (x BLK)
                  (y BLK) )
                (= (elem@@BLK x
                              (mk-set@@BLK y))
                   (= x
                      y))))

(assert (forall ( (x BLK)
                  (s1 (set BLK))
                  (s2 (set BLK)) )
                (= (elem@@BLK x
                              (set-diff@@BLK s1
                                             s2))
                   (and (elem@@BLK x
                                   s1)
                        (not (elem@@BLK x
                                        s2))))))

(assert (forall ( (x BLK)
                  (s1 (set BLK))
                  (s2 (set BLK)) )
                (= (elem@@BLK x
                              (intersect@@BLK s1
                                              s2))
                   (and (elem@@BLK x
                                   s1)
                        (elem@@BLK x
                                   s2)))))

(assert (forall ( (x BLK)
                  (s1 (set BLK))
                  (s2 (set BLK)) )
                (= (elem@@BLK x
                              (bunion@@BLK s1
                                           s2))
                   (or (elem@@BLK x
                                  s1)
                       (elem@@BLK x
                                  s2)))))

(assert (forall ( (x BLK)
                  (s1 (set BLK))
                  (s2 (set BLK)) )
                (not (elem@@BLK x
                                empty-set@@BLK))))

(assert (forall ( (x LOC)
                  (y LOC) )
                (= (elem@@LOC x
                              (mk-set@@LOC y))
                   (= x
                      y))))

(assert (forall ( (x LOC)
                  (s1 (set LOC))
                  (s2 (set LOC)) )
                (= (elem@@LOC x
                              (set-diff@@LOC s1
                                             s2))
                   (and (elem@@LOC x
                                   s1)
                        (not (elem@@LOC x
                                        s2))))))

(assert (forall ( (x LOC)
                  (s1 (set LOC))
                  (s2 (set LOC)) )
                (= (elem@@LOC x
                              (intersect@@LOC s1
                                              s2))
                   (and (elem@@LOC x
                                   s1)
                        (elem@@LOC x
                                   s2)))))

(assert (forall ( (x LOC)
                  (s1 (set LOC))
                  (s2 (set LOC)) )
                (= (elem@@LOC x
                              (bunion@@LOC s1
                                           s2))
                   (or (elem@@LOC x
                                  s1)
                       (elem@@LOC x
                                  s2)))))

(assert (forall ( (x LOC)
                  (s1 (set LOC))
                  (s2 (set LOC)) )
                (not (elem@@LOC x
                                empty-set@@LOC))))

(assert (forall ( (x TRAIN)
                  (y TRAIN) )
                (= (elem@@TRAIN x
                                (mk-set@@TRAIN y))
                   (= x
                      y))))

(assert (forall ( (x TRAIN)
                  (s1 (set TRAIN))
                  (s2 (set TRAIN)) )
                (= (elem@@TRAIN x
                                (set-diff@@TRAIN s1
                                                 s2))
                   (and (elem@@TRAIN x
                                     s1)
                        (not (elem@@TRAIN x
                                          s2))))))

(assert (forall ( (x TRAIN)
                  (s1 (set TRAIN))
                  (s2 (set TRAIN)) )
                (= (elem@@TRAIN x
                                (intersect@@TRAIN s1
                                                  s2))
                   (and (elem@@TRAIN x
                                     s1)
                        (elem@@TRAIN x
                                     s2)))))

(assert (forall ( (x TRAIN)
                  (s1 (set TRAIN))
                  (s2 (set TRAIN)) )
                (= (elem@@TRAIN x
                                (bunion@@TRAIN s1
                                               s2))
                   (or (elem@@TRAIN x
                                    s1)
                       (elem@@TRAIN x
                                    s2)))))

(assert (forall ( (x TRAIN)
                  (s1 (set TRAIN))
                  (s2 (set TRAIN)) )
                (not (elem@@TRAIN x
                                  empty-set@@TRAIN))))

(assert (forall ( (f1 (pfun TRAIN
                            BLK))
                  (f2 (pfun TRAIN
                            BLK)) )
                (= (bunion@@TRAIN (dom@@TRAIN@@BLK f1)
                                  (dom@@TRAIN@@BLK f2))
                   (dom@@TRAIN@@BLK (ovl@@TRAIN@@BLK f1
                                                     f2)))))

(assert (= (dom@@TRAIN@@BLK empty-fun@@TRAIN@@BLK)
           empty-set@@TRAIN))

(assert (forall ( (x TRAIN)
                  (y BLK) )
                (= (dom@@TRAIN@@BLK (mk-fun@@TRAIN@@BLK x
                                                        y))
                   (mk-set@@TRAIN x))))

(assert (forall ( (f1 (pfun TRAIN
                            BLK))
                  (f2 (pfun TRAIN
                            BLK))
                  (x TRAIN) )
                (=> (elem@@TRAIN x
                                 (dom@@TRAIN@@BLK f2))
                    (= (select (ovl@@TRAIN@@BLK f1
                                                f2)
                               x)
                       (select f2
                               x)))))

(assert (forall ( (f1 (pfun TRAIN
                            BLK))
                  (f2 (pfun TRAIN
                            BLK))
                  (x TRAIN) )
                (=> (elem@@TRAIN x
                                 (set-diff@@TRAIN (dom@@TRAIN@@BLK f1)
                                                  (dom@@TRAIN@@BLK f2)))
                    (= (select (ovl@@TRAIN@@BLK f1
                                                f2)
                               x)
                       (select f1
                               x)))))

(assert (forall ( (f1 (pfun TRAIN
                            BLK))
                  (s1 (set TRAIN)) )
                (= (dom@@TRAIN@@BLK (dom-subt@@TRAIN@@BLK s1
                                                          f1))
                   (set-diff@@TRAIN (dom@@TRAIN@@BLK f1)
                                    s1))))

(assert (forall ( (x TRAIN)
                  (y BLK) )
                (= (select (mk-fun@@TRAIN@@BLK x
                                               y)
                           x)
                   y)))

(assert (forall ( (f1 (pfun TRAIN
                            BLK))
                  (s1 (set TRAIN))
                  (x TRAIN) )
                (=> (elem@@TRAIN x
                                 (intersect@@TRAIN s1
                                                   (dom@@TRAIN@@BLK f1)))
                    (= (select (dom-rest@@TRAIN@@BLK s1
                                                     f1)
                               x)
                       (select f1
                               x)))))

(assert (forall ( (f1 (pfun TRAIN
                            BLK))
                  (s1 (set TRAIN))
                  (x TRAIN) )
                (=> (elem@@TRAIN x
                                 (set-diff@@TRAIN (dom@@TRAIN@@BLK f1)
                                                  s1))
                    (= (select (dom-subt@@TRAIN@@BLK s1
                                                     f1)
                               x)
                       (select f1
                               x)))))

(assert (forall ( (x (pfun TRAIN
                           BLK))
                  (y (pfun TRAIN
                           BLK)) )
                (= (elem@Open@@pfun@@TRAIN@@BLK@Close x
                                                      (mk-set@Open@@pfun@@TRAIN@@BLK@Close y))
                   (= x
                      y))))

(assert (forall ( (x (pfun TRAIN
                           BLK))
                  (s1 (set (pfun TRAIN
                                 BLK)))
                  (s2 (set (pfun TRAIN
                                 BLK))) )
                (= (elem@Open@@pfun@@TRAIN@@BLK@Close x
                                                      (set-diff@Open@@pfun@@TRAIN@@BLK@Close s1
                                                                                             s2))
                   (and (elem@Open@@pfun@@TRAIN@@BLK@Close x
                                                           s1)
                        (not (elem@Open@@pfun@@TRAIN@@BLK@Close x
                                                                s2))))))

(assert (forall ( (x (pfun TRAIN
                           BLK))
                  (s1 (set (pfun TRAIN
                                 BLK)))
                  (s2 (set (pfun TRAIN
                                 BLK))) )
                (= (elem@Open@@pfun@@TRAIN@@BLK@Close x
                                                      (intersect@Open@@pfun@@TRAIN@@BLK@Close s1
                                                                                              s2))
                   (and (elem@Open@@pfun@@TRAIN@@BLK@Close x
                                                           s1)
                        (elem@Open@@pfun@@TRAIN@@BLK@Close x
                                                           s2)))))

(assert (forall ( (x (pfun TRAIN
                           BLK))
                  (s1 (set (pfun TRAIN
                                 BLK)))
                  (s2 (set (pfun TRAIN
                                 BLK))) )
                (= (elem@Open@@pfun@@TRAIN@@BLK@Close x
                                                      (bunion@Open@@pfun@@TRAIN@@BLK@Close s1
                                                                                           s2))
                   (or (elem@Open@@pfun@@TRAIN@@BLK@Close x
                                                          s1)
                       (elem@Open@@pfun@@TRAIN@@BLK@Close x
                                                          s2)))))

(assert (forall ( (x (pfun TRAIN
                           BLK))
                  (s1 (set (pfun TRAIN
                                 BLK)))
                  (s2 (set (pfun TRAIN
                                 BLK))) )
                (not (elem@Open@@pfun@@TRAIN@@BLK@Close x
                                                        empty-set@Open@@pfun@@TRAIN@@BLK@Close))))

(assert (and (not (= ent
                     ext))
             (not (elem@@BLK ent
                             PLF))
             (not (elem@@BLK ext
                             PLF))))

(assert (forall ( (p BLK) )
                (=> true
                    (= (not (= p
                               ext))
                       (elem@@BLK p
                                  (bunion@@BLK (mk-set@@BLK ent)
                                               PLF))))))

(assert (forall ( (p BLK) )
                (=> true
                    (= (not (= p
                               ent))
                       (elem@@BLK p
                                  (bunion@@BLK (mk-set@@BLK ext)
                                               PLF))))))

(assert (forall ( (p BLK) )
                (=> true
                    (= (or (= p
                              ent)
                           (= p
                              ext))
                       (not (elem@@BLK p
                                       PLF))))))

(assert (= BLK
           (bunion@@BLK (bunion@@BLK (mk-set@@BLK ent)
                                     (mk-set@@BLK ext))
                        PLF)))

(assert (not (= (and (not (= t_0
                             t))
                     (not (elem@@TRAIN t_0
                                       in))
                     (elem@@TRAIN t_0
                                  in@prime))
                (and (not (= t_0
                             t))
                     (not (elem@@TRAIN t_0
                                       in))
                     (elem@@TRAIN t_0
                                  (bunion@@TRAIN in
                                                 (mk-set@@TRAIN t)))))))

(check-sat-using (or-else (then qe smt) (then skip smt) (then (using-params simplify :expand-power true) smt)))

(pop)
(echo "> train0/leave/CO/co0/step (186,1)")
(push)
(declare-sort BLK 0)
(declare-sort LOC 0)
(declare-sort TRAIN 0)
(define-sort pfun (a b) (Array a b))
(declare-sort set 1)
(declare-const PLF (set BLK))
(declare-const BLK (set BLK))
(declare-const LOC (set LOC))
(declare-const TRAIN (set TRAIN))
(declare-const ent BLK)
(declare-const ext BLK)
(declare-const in (set TRAIN))
(declare-const in@prime (set TRAIN))
(declare-const loc (pfun TRAIN BLK))
(declare-const loc@prime (pfun TRAIN BLK))
(declare-const p BLK)
(declare-const q BLK)
(declare-const t TRAIN)
(declare-const t_0 TRAIN)
(declare-const t_1 TRAIN)
(declare-const t_2 TRAIN)
(declare-const t_3 TRAIN)
(declare-fun apply@@TRAIN@@BLK ((pfun TRAIN BLK) TRAIN) BLK)
(declare-fun dom-rest@@TRAIN@@BLK ((set TRAIN) (pfun TRAIN BLK)) (pfun TRAIN BLK))
(declare-fun dom-subt@@TRAIN@@BLK ((set TRAIN) (pfun TRAIN BLK)) (pfun TRAIN BLK))
(declare-fun dom@@TRAIN@@BLK ((pfun TRAIN BLK)) (set TRAIN))
(declare-fun elem@@BLK (BLK (set BLK)) Bool)
(declare-fun elem@@LOC (LOC (set LOC)) Bool)
(declare-fun elem@@TRAIN (TRAIN (set TRAIN)) Bool)
(declare-fun elem@Open@@pfun@@TRAIN@@BLK@Close ((pfun TRAIN BLK) (set (pfun TRAIN BLK))) Bool)
(declare-fun empty-fun@@TRAIN@@BLK () (pfun TRAIN BLK))
(declare-fun empty-set@@BLK () (set BLK))
(declare-fun empty-set@@LOC () (set LOC))
(declare-fun empty-set@@TRAIN () (set TRAIN))
(declare-fun empty-set@Open@@pfun@@TRAIN@@BLK@Close () (set (pfun TRAIN BLK)))
(declare-fun intersect@@BLK ((set BLK) (set BLK)) (set BLK))
(declare-fun intersect@@LOC ((set LOC) (set LOC)) (set LOC))
(declare-fun intersect@@TRAIN ((set TRAIN) (set TRAIN)) (set TRAIN))
(declare-fun intersect@Open@@pfun@@TRAIN@@BLK@Close ((set (pfun TRAIN BLK)) (set (pfun TRAIN BLK))) (set (pfun TRAIN BLK)))
(declare-fun mk-fun@@TRAIN@@BLK (TRAIN BLK) (pfun TRAIN BLK))
(declare-fun mk-set@@BLK (BLK) (set BLK))
(declare-fun mk-set@@LOC (LOC) (set LOC))
(declare-fun mk-set@@TRAIN (TRAIN) (set TRAIN))
(declare-fun mk-set@Open@@pfun@@TRAIN@@BLK@Close ((pfun TRAIN BLK)) (set (pfun TRAIN BLK)))
(declare-fun ovl@@TRAIN@@BLK ((pfun TRAIN BLK) (pfun TRAIN BLK)) (pfun TRAIN BLK))
(declare-fun set-diff@@BLK ((set BLK) (set BLK)) (set BLK))
(declare-fun set-diff@@LOC ((set LOC) (set LOC)) (set LOC))
(declare-fun set-diff@@TRAIN ((set TRAIN) (set TRAIN)) (set TRAIN))
(declare-fun set-diff@Open@@pfun@@TRAIN@@BLK@Close ((set (pfun TRAIN BLK)) (set (pfun TRAIN BLK))) (set (pfun TRAIN BLK)))
(declare-fun tfun@@TRAIN@@BLK ((set TRAIN) (set BLK)) (set (pfun TRAIN BLK)))
(declare-fun bunion@@BLK ((set BLK) (set BLK)) (set BLK))
(declare-fun bunion@@LOC ((set LOC) (set LOC)) (set LOC))
(declare-fun bunion@@TRAIN ((set TRAIN) (set TRAIN)) (set TRAIN))
(declare-fun bunion@Open@@pfun@@TRAIN@@BLK@Close ((set (pfun TRAIN BLK)) (set (pfun TRAIN BLK))) (set (pfun TRAIN BLK)))
(assert (forall ( (x BLK)
                  (y BLK) )
                (= (elem@@BLK x
                              (mk-set@@BLK y))
                   (= x
                      y))))

(assert (forall ( (x BLK)
                  (s1 (set BLK))
                  (s2 (set BLK)) )
                (= (elem@@BLK x
                              (set-diff@@BLK s1
                                             s2))
                   (and (elem@@BLK x
                                   s1)
                        (not (elem@@BLK x
                                        s2))))))

(assert (forall ( (x BLK)
                  (s1 (set BLK))
                  (s2 (set BLK)) )
                (= (elem@@BLK x
                              (intersect@@BLK s1
                                              s2))
                   (and (elem@@BLK x
                                   s1)
                        (elem@@BLK x
                                   s2)))))

(assert (forall ( (x BLK)
                  (s1 (set BLK))
                  (s2 (set BLK)) )
                (= (elem@@BLK x
                              (bunion@@BLK s1
                                           s2))
                   (or (elem@@BLK x
                                  s1)
                       (elem@@BLK x
                                  s2)))))

(assert (forall ( (x BLK)
                  (s1 (set BLK))
                  (s2 (set BLK)) )
                (not (elem@@BLK x
                                empty-set@@BLK))))

(assert (forall ( (x LOC)
                  (y LOC) )
                (= (elem@@LOC x
                              (mk-set@@LOC y))
                   (= x
                      y))))

(assert (forall ( (x LOC)
                  (s1 (set LOC))
                  (s2 (set LOC)) )
                (= (elem@@LOC x
                              (set-diff@@LOC s1
                                             s2))
                   (and (elem@@LOC x
                                   s1)
                        (not (elem@@LOC x
                                        s2))))))

(assert (forall ( (x LOC)
                  (s1 (set LOC))
                  (s2 (set LOC)) )
                (= (elem@@LOC x
                              (intersect@@LOC s1
                                              s2))
                   (and (elem@@LOC x
                                   s1)
                        (elem@@LOC x
                                   s2)))))

(assert (forall ( (x LOC)
                  (s1 (set LOC))
                  (s2 (set LOC)) )
                (= (elem@@LOC x
                              (bunion@@LOC s1
                                           s2))
                   (or (elem@@LOC x
                                  s1)
                       (elem@@LOC x
                                  s2)))))

(assert (forall ( (x LOC)
                  (s1 (set LOC))
                  (s2 (set LOC)) )
                (not (elem@@LOC x
                                empty-set@@LOC))))

(assert (forall ( (x TRAIN)
                  (y TRAIN) )
                (= (elem@@TRAIN x
                                (mk-set@@TRAIN y))
                   (= x
                      y))))

(assert (forall ( (x TRAIN)
                  (s1 (set TRAIN))
                  (s2 (set TRAIN)) )
                (= (elem@@TRAIN x
                                (set-diff@@TRAIN s1
                                                 s2))
                   (and (elem@@TRAIN x
                                     s1)
                        (not (elem@@TRAIN x
                                          s2))))))

(assert (forall ( (x TRAIN)
                  (s1 (set TRAIN))
                  (s2 (set TRAIN)) )
                (= (elem@@TRAIN x
                                (intersect@@TRAIN s1
                                                  s2))
                   (and (elem@@TRAIN x
                                     s1)
                        (elem@@TRAIN x
                                     s2)))))

(assert (forall ( (x TRAIN)
                  (s1 (set TRAIN))
                  (s2 (set TRAIN)) )
                (= (elem@@TRAIN x
                                (bunion@@TRAIN s1
                                               s2))
                   (or (elem@@TRAIN x
                                    s1)
                       (elem@@TRAIN x
                                    s2)))))

(assert (forall ( (x TRAIN)
                  (s1 (set TRAIN))
                  (s2 (set TRAIN)) )
                (not (elem@@TRAIN x
                                  empty-set@@TRAIN))))

(assert (forall ( (f1 (pfun TRAIN
                            BLK))
                  (f2 (pfun TRAIN
                            BLK)) )
                (= (bunion@@TRAIN (dom@@TRAIN@@BLK f1)
                                  (dom@@TRAIN@@BLK f2))
                   (dom@@TRAIN@@BLK (ovl@@TRAIN@@BLK f1
                                                     f2)))))

(assert (= (dom@@TRAIN@@BLK empty-fun@@TRAIN@@BLK)
           empty-set@@TRAIN))

(assert (forall ( (x TRAIN)
                  (y BLK) )
                (= (dom@@TRAIN@@BLK (mk-fun@@TRAIN@@BLK x
                                                        y))
                   (mk-set@@TRAIN x))))

(assert (forall ( (f1 (pfun TRAIN
                            BLK))
                  (f2 (pfun TRAIN
                            BLK))
                  (x TRAIN) )
                (=> (elem@@TRAIN x
                                 (dom@@TRAIN@@BLK f2))
                    (= (select (ovl@@TRAIN@@BLK f1
                                                f2)
                               x)
                       (select f2
                               x)))))

(assert (forall ( (f1 (pfun TRAIN
                            BLK))
                  (f2 (pfun TRAIN
                            BLK))
                  (x TRAIN) )
                (=> (elem@@TRAIN x
                                 (set-diff@@TRAIN (dom@@TRAIN@@BLK f1)
                                                  (dom@@TRAIN@@BLK f2)))
                    (= (select (ovl@@TRAIN@@BLK f1
                                                f2)
                               x)
                       (select f1
                               x)))))

(assert (forall ( (f1 (pfun TRAIN
                            BLK))
                  (s1 (set TRAIN)) )
                (= (dom@@TRAIN@@BLK (dom-subt@@TRAIN@@BLK s1
                                                          f1))
                   (set-diff@@TRAIN (dom@@TRAIN@@BLK f1)
                                    s1))))

(assert (forall ( (x TRAIN)
                  (y BLK) )
                (= (select (mk-fun@@TRAIN@@BLK x
                                               y)
                           x)
                   y)))

(assert (forall ( (f1 (pfun TRAIN
                            BLK))
                  (s1 (set TRAIN))
                  (x TRAIN) )
                (=> (elem@@TRAIN x
                                 (intersect@@TRAIN s1
                                                   (dom@@TRAIN@@BLK f1)))
                    (= (select (dom-rest@@TRAIN@@BLK s1
                                                     f1)
                               x)
                       (select f1
                               x)))))

(assert (forall ( (f1 (pfun TRAIN
                            BLK))
                  (s1 (set TRAIN))
                  (x TRAIN) )
                (=> (elem@@TRAIN x
                                 (set-diff@@TRAIN (dom@@TRAIN@@BLK f1)
                                                  s1))
                    (= (select (dom-subt@@TRAIN@@BLK s1
                                                     f1)
                               x)
                       (select f1
                               x)))))

(assert (forall ( (x (pfun TRAIN
                           BLK))
                  (y (pfun TRAIN
                           BLK)) )
                (= (elem@Open@@pfun@@TRAIN@@BLK@Close x
                                                      (mk-set@Open@@pfun@@TRAIN@@BLK@Close y))
                   (= x
                      y))))

(assert (forall ( (x (pfun TRAIN
                           BLK))
                  (s1 (set (pfun TRAIN
                                 BLK)))
                  (s2 (set (pfun TRAIN
                                 BLK))) )
                (= (elem@Open@@pfun@@TRAIN@@BLK@Close x
                                                      (set-diff@Open@@pfun@@TRAIN@@BLK@Close s1
                                                                                             s2))
                   (and (elem@Open@@pfun@@TRAIN@@BLK@Close x
                                                           s1)
                        (not (elem@Open@@pfun@@TRAIN@@BLK@Close x
                                                                s2))))))

(assert (forall ( (x (pfun TRAIN
                           BLK))
                  (s1 (set (pfun TRAIN
                                 BLK)))
                  (s2 (set (pfun TRAIN
                                 BLK))) )
                (= (elem@Open@@pfun@@TRAIN@@BLK@Close x
                                                      (intersect@Open@@pfun@@TRAIN@@BLK@Close s1
                                                                                              s2))
                   (and (elem@Open@@pfun@@TRAIN@@BLK@Close x
                                                           s1)
                        (elem@Open@@pfun@@TRAIN@@BLK@Close x
                                                           s2)))))

(assert (forall ( (x (pfun TRAIN
                           BLK))
                  (s1 (set (pfun TRAIN
                                 BLK)))
                  (s2 (set (pfun TRAIN
                                 BLK))) )
                (= (elem@Open@@pfun@@TRAIN@@BLK@Close x
                                                      (bunion@Open@@pfun@@TRAIN@@BLK@Close s1
                                                                                           s2))
                   (or (elem@Open@@pfun@@TRAIN@@BLK@Close x
                                                          s1)
                       (elem@Open@@pfun@@TRAIN@@BLK@Close x
                                                          s2)))))

(assert (forall ( (x (pfun TRAIN
                           BLK))
                  (s1 (set (pfun TRAIN
                                 BLK)))
                  (s2 (set (pfun TRAIN
                                 BLK))) )
                (not (elem@Open@@pfun@@TRAIN@@BLK@Close x
                                                        empty-set@Open@@pfun@@TRAIN@@BLK@Close))))

(assert (and (not (= ent
                     ext))
             (not (elem@@BLK ent
                             PLF))
             (not (elem@@BLK ext
                             PLF))))

(assert (forall ( (p BLK) )
                (=> true
                    (= (not (= p
                               ext))
                       (elem@@BLK p
                                  (bunion@@BLK (mk-set@@BLK ent)
                                               PLF))))))

(assert (forall ( (p BLK) )
                (=> true
                    (= (not (= p
                               ent))
                       (elem@@BLK p
                                  (bunion@@BLK (mk-set@@BLK ext)
                                               PLF))))))

(assert (forall ( (p BLK) )
                (=> true
                    (= (or (= p
                              ent)
                           (= p
                              ext))
                       (not (elem@@BLK p
                                       PLF))))))

(assert (= BLK
           (bunion@@BLK (bunion@@BLK (mk-set@@BLK ent)
                                     (mk-set@@BLK ext))
                        PLF)))

(assert (not (= (and (not (= t_0
                             t))
                     (not (elem@@TRAIN t_0
                                       in))
                     (elem@@TRAIN t_0
                                  (bunion@@TRAIN in
                                                 (mk-set@@TRAIN t))))
                false)))

(check-sat-using (or-else (then qe smt) (then skip smt) (then (using-params simplify :expand-power true) smt)))

(pop)
(echo "> train0/leave/CO/co0/step (188,1)")
(push)
(declare-sort BLK 0)
(declare-sort LOC 0)
(declare-sort TRAIN 0)
(define-sort pfun (a b) (Array a b))
(declare-sort set 1)
(declare-const PLF (set BLK))
(declare-const BLK (set BLK))
(declare-const LOC (set LOC))
(declare-const TRAIN (set TRAIN))
(declare-const ent BLK)
(declare-const ext BLK)
(declare-const in (set TRAIN))
(declare-const in@prime (set TRAIN))
(declare-const loc (pfun TRAIN BLK))
(declare-const loc@prime (pfun TRAIN BLK))
(declare-const p BLK)
(declare-const q BLK)
(declare-const t TRAIN)
(declare-const t_0 TRAIN)
(declare-const t_1 TRAIN)
(declare-const t_2 TRAIN)
(declare-const t_3 TRAIN)
(declare-fun apply@@TRAIN@@BLK ((pfun TRAIN BLK) TRAIN) BLK)
(declare-fun dom-rest@@TRAIN@@BLK ((set TRAIN) (pfun TRAIN BLK)) (pfun TRAIN BLK))
(declare-fun dom-subt@@TRAIN@@BLK ((set TRAIN) (pfun TRAIN BLK)) (pfun TRAIN BLK))
(declare-fun dom@@TRAIN@@BLK ((pfun TRAIN BLK)) (set TRAIN))
(declare-fun elem@@BLK (BLK (set BLK)) Bool)
(declare-fun elem@@LOC (LOC (set LOC)) Bool)
(declare-fun elem@@TRAIN (TRAIN (set TRAIN)) Bool)
(declare-fun elem@Open@@pfun@@TRAIN@@BLK@Close ((pfun TRAIN BLK) (set (pfun TRAIN BLK))) Bool)
(declare-fun empty-fun@@TRAIN@@BLK () (pfun TRAIN BLK))
(declare-fun empty-set@@BLK () (set BLK))
(declare-fun empty-set@@LOC () (set LOC))
(declare-fun empty-set@@TRAIN () (set TRAIN))
(declare-fun empty-set@Open@@pfun@@TRAIN@@BLK@Close () (set (pfun TRAIN BLK)))
(declare-fun intersect@@BLK ((set BLK) (set BLK)) (set BLK))
(declare-fun intersect@@LOC ((set LOC) (set LOC)) (set LOC))
(declare-fun intersect@@TRAIN ((set TRAIN) (set TRAIN)) (set TRAIN))
(declare-fun intersect@Open@@pfun@@TRAIN@@BLK@Close ((set (pfun TRAIN BLK)) (set (pfun TRAIN BLK))) (set (pfun TRAIN BLK)))
(declare-fun mk-fun@@TRAIN@@BLK (TRAIN BLK) (pfun TRAIN BLK))
(declare-fun mk-set@@BLK (BLK) (set BLK))
(declare-fun mk-set@@LOC (LOC) (set LOC))
(declare-fun mk-set@@TRAIN (TRAIN) (set TRAIN))
(declare-fun mk-set@Open@@pfun@@TRAIN@@BLK@Close ((pfun TRAIN BLK)) (set (pfun TRAIN BLK)))
(declare-fun ovl@@TRAIN@@BLK ((pfun TRAIN BLK) (pfun TRAIN BLK)) (pfun TRAIN BLK))
(declare-fun set-diff@@BLK ((set BLK) (set BLK)) (set BLK))
(declare-fun set-diff@@LOC ((set LOC) (set LOC)) (set LOC))
(declare-fun set-diff@@TRAIN ((set TRAIN) (set TRAIN)) (set TRAIN))
(declare-fun set-diff@Open@@pfun@@TRAIN@@BLK@Close ((set (pfun TRAIN BLK)) (set (pfun TRAIN BLK))) (set (pfun TRAIN BLK)))
(declare-fun tfun@@TRAIN@@BLK ((set TRAIN) (set BLK)) (set (pfun TRAIN BLK)))
(declare-fun bunion@@BLK ((set BLK) (set BLK)) (set BLK))
(declare-fun bunion@@LOC ((set LOC) (set LOC)) (set LOC))
(declare-fun bunion@@TRAIN ((set TRAIN) (set TRAIN)) (set TRAIN))
(declare-fun bunion@Open@@pfun@@TRAIN@@BLK@Close ((set (pfun TRAIN BLK)) (set (pfun TRAIN BLK))) (set (pfun TRAIN BLK)))
(assert (forall ( (x BLK)
                  (y BLK) )
                (= (elem@@BLK x
                              (mk-set@@BLK y))
                   (= x
                      y))))

(assert (forall ( (x BLK)
                  (s1 (set BLK))
                  (s2 (set BLK)) )
                (= (elem@@BLK x
                              (set-diff@@BLK s1
                                             s2))
                   (and (elem@@BLK x
                                   s1)
                        (not (elem@@BLK x
                                        s2))))))

(assert (forall ( (x BLK)
                  (s1 (set BLK))
                  (s2 (set BLK)) )
                (= (elem@@BLK x
                              (intersect@@BLK s1
                                              s2))
                   (and (elem@@BLK x
                                   s1)
                        (elem@@BLK x
                                   s2)))))

(assert (forall ( (x BLK)
                  (s1 (set BLK))
                  (s2 (set BLK)) )
                (= (elem@@BLK x
                              (bunion@@BLK s1
                                           s2))
                   (or (elem@@BLK x
                                  s1)
                       (elem@@BLK x
                                  s2)))))

(assert (forall ( (x BLK)
                  (s1 (set BLK))
                  (s2 (set BLK)) )
                (not (elem@@BLK x
                                empty-set@@BLK))))

(assert (forall ( (x LOC)
                  (y LOC) )
                (= (elem@@LOC x
                              (mk-set@@LOC y))
                   (= x
                      y))))

(assert (forall ( (x LOC)
                  (s1 (set LOC))
                  (s2 (set LOC)) )
                (= (elem@@LOC x
                              (set-diff@@LOC s1
                                             s2))
                   (and (elem@@LOC x
                                   s1)
                        (not (elem@@LOC x
                                        s2))))))

(assert (forall ( (x LOC)
                  (s1 (set LOC))
                  (s2 (set LOC)) )
                (= (elem@@LOC x
                              (intersect@@LOC s1
                                              s2))
                   (and (elem@@LOC x
                                   s1)
                        (elem@@LOC x
                                   s2)))))

(assert (forall ( (x LOC)
                  (s1 (set LOC))
                  (s2 (set LOC)) )
                (= (elem@@LOC x
                              (bunion@@LOC s1
                                           s2))
                   (or (elem@@LOC x
                                  s1)
                       (elem@@LOC x
                                  s2)))))

(assert (forall ( (x LOC)
                  (s1 (set LOC))
                  (s2 (set LOC)) )
                (not (elem@@LOC x
                                empty-set@@LOC))))

(assert (forall ( (x TRAIN)
                  (y TRAIN) )
                (= (elem@@TRAIN x
                                (mk-set@@TRAIN y))
                   (= x
                      y))))

(assert (forall ( (x TRAIN)
                  (s1 (set TRAIN))
                  (s2 (set TRAIN)) )
                (= (elem@@TRAIN x
                                (set-diff@@TRAIN s1
                                                 s2))
                   (and (elem@@TRAIN x
                                     s1)
                        (not (elem@@TRAIN x
                                          s2))))))

(assert (forall ( (x TRAIN)
                  (s1 (set TRAIN))
                  (s2 (set TRAIN)) )
                (= (elem@@TRAIN x
                                (intersect@@TRAIN s1
                                                  s2))
                   (and (elem@@TRAIN x
                                     s1)
                        (elem@@TRAIN x
                                     s2)))))

(assert (forall ( (x TRAIN)
                  (s1 (set TRAIN))
                  (s2 (set TRAIN)) )
                (= (elem@@TRAIN x
                                (bunion@@TRAIN s1
                                               s2))
                   (or (elem@@TRAIN x
                                    s1)
                       (elem@@TRAIN x
                                    s2)))))

(assert (forall ( (x TRAIN)
                  (s1 (set TRAIN))
                  (s2 (set TRAIN)) )
                (not (elem@@TRAIN x
                                  empty-set@@TRAIN))))

(assert (forall ( (f1 (pfun TRAIN
                            BLK))
                  (f2 (pfun TRAIN
                            BLK)) )
                (= (bunion@@TRAIN (dom@@TRAIN@@BLK f1)
                                  (dom@@TRAIN@@BLK f2))
                   (dom@@TRAIN@@BLK (ovl@@TRAIN@@BLK f1
                                                     f2)))))

(assert (= (dom@@TRAIN@@BLK empty-fun@@TRAIN@@BLK)
           empty-set@@TRAIN))

(assert (forall ( (x TRAIN)
                  (y BLK) )
                (= (dom@@TRAIN@@BLK (mk-fun@@TRAIN@@BLK x
                                                        y))
                   (mk-set@@TRAIN x))))

(assert (forall ( (f1 (pfun TRAIN
                            BLK))
                  (f2 (pfun TRAIN
                            BLK))
                  (x TRAIN) )
                (=> (elem@@TRAIN x
                                 (dom@@TRAIN@@BLK f2))
                    (= (select (ovl@@TRAIN@@BLK f1
                                                f2)
                               x)
                       (select f2
                               x)))))

(assert (forall ( (f1 (pfun TRAIN
                            BLK))
                  (f2 (pfun TRAIN
                            BLK))
                  (x TRAIN) )
                (=> (elem@@TRAIN x
                                 (set-diff@@TRAIN (dom@@TRAIN@@BLK f1)
                                                  (dom@@TRAIN@@BLK f2)))
                    (= (select (ovl@@TRAIN@@BLK f1
                                                f2)
                               x)
                       (select f1
                               x)))))

(assert (forall ( (f1 (pfun TRAIN
                            BLK))
                  (s1 (set TRAIN)) )
                (= (dom@@TRAIN@@BLK (dom-subt@@TRAIN@@BLK s1
                                                          f1))
                   (set-diff@@TRAIN (dom@@TRAIN@@BLK f1)
                                    s1))))

(assert (forall ( (x TRAIN)
                  (y BLK) )
                (= (select (mk-fun@@TRAIN@@BLK x
                                               y)
                           x)
                   y)))

(assert (forall ( (f1 (pfun TRAIN
                            BLK))
                  (s1 (set TRAIN))
                  (x TRAIN) )
                (=> (elem@@TRAIN x
                                 (intersect@@TRAIN s1
                                                   (dom@@TRAIN@@BLK f1)))
                    (= (select (dom-rest@@TRAIN@@BLK s1
                                                     f1)
                               x)
                       (select f1
                               x)))))

(assert (forall ( (f1 (pfun TRAIN
                            BLK))
                  (s1 (set TRAIN))
                  (x TRAIN) )
                (=> (elem@@TRAIN x
                                 (set-diff@@TRAIN (dom@@TRAIN@@BLK f1)
                                                  s1))
                    (= (select (dom-subt@@TRAIN@@BLK s1
                                                     f1)
                               x)
                       (select f1
                               x)))))

(assert (forall ( (x (pfun TRAIN
                           BLK))
                  (y (pfun TRAIN
                           BLK)) )
                (= (elem@Open@@pfun@@TRAIN@@BLK@Close x
                                                      (mk-set@Open@@pfun@@TRAIN@@BLK@Close y))
                   (= x
                      y))))

(assert (forall ( (x (pfun TRAIN
                           BLK))
                  (s1 (set (pfun TRAIN
                                 BLK)))
                  (s2 (set (pfun TRAIN
                                 BLK))) )
                (= (elem@Open@@pfun@@TRAIN@@BLK@Close x
                                                      (set-diff@Open@@pfun@@TRAIN@@BLK@Close s1
                                                                                             s2))
                   (and (elem@Open@@pfun@@TRAIN@@BLK@Close x
                                                           s1)
                        (not (elem@Open@@pfun@@TRAIN@@BLK@Close x
                                                                s2))))))

(assert (forall ( (x (pfun TRAIN
                           BLK))
                  (s1 (set (pfun TRAIN
                                 BLK)))
                  (s2 (set (pfun TRAIN
                                 BLK))) )
                (= (elem@Open@@pfun@@TRAIN@@BLK@Close x
                                                      (intersect@Open@@pfun@@TRAIN@@BLK@Close s1
                                                                                              s2))
                   (and (elem@Open@@pfun@@TRAIN@@BLK@Close x
                                                           s1)
                        (elem@Open@@pfun@@TRAIN@@BLK@Close x
                                                           s2)))))

(assert (forall ( (x (pfun TRAIN
                           BLK))
                  (s1 (set (pfun TRAIN
                                 BLK)))
                  (s2 (set (pfun TRAIN
                                 BLK))) )
                (= (elem@Open@@pfun@@TRAIN@@BLK@Close x
                                                      (bunion@Open@@pfun@@TRAIN@@BLK@Close s1
                                                                                           s2))
                   (or (elem@Open@@pfun@@TRAIN@@BLK@Close x
                                                          s1)
                       (elem@Open@@pfun@@TRAIN@@BLK@Close x
                                                          s2)))))

(assert (forall ( (x (pfun TRAIN
                           BLK))
                  (s1 (set (pfun TRAIN
                                 BLK)))
                  (s2 (set (pfun TRAIN
                                 BLK))) )
                (not (elem@Open@@pfun@@TRAIN@@BLK@Close x
                                                        empty-set@Open@@pfun@@TRAIN@@BLK@Close))))

(assert (and (not (= ent
                     ext))
             (not (elem@@BLK ent
                             PLF))
             (not (elem@@BLK ext
                             PLF))))

(assert (forall ( (p BLK) )
                (=> true
                    (= (not (= p
                               ext))
                       (elem@@BLK p
                                  (bunion@@BLK (mk-set@@BLK ent)
                                               PLF))))))

(assert (forall ( (p BLK) )
                (=> true
                    (= (not (= p
                               ent))
                       (elem@@BLK p
                                  (bunion@@BLK (mk-set@@BLK ext)
                                               PLF))))))

(assert (forall ( (p BLK) )
                (=> true
                    (= (or (= p
                              ent)
                           (= p
                              ext))
                       (not (elem@@BLK p
                                       PLF))))))

(assert (= BLK
           (bunion@@BLK (bunion@@BLK (mk-set@@BLK ent)
                                     (mk-set@@BLK ext))
                        PLF)))

(assert (not (=> false
                 (= (select loc@prime
                            t_0)
                    ent))))

(check-sat-using (or-else (then qe smt) (then skip smt) (then (using-params simplify :expand-power true) smt)))

(pop)
(echo "> train0/leave/CO/co1/goal (324,1)")
(push)
(declare-sort BLK 0)
(declare-sort LOC 0)
(declare-sort TRAIN 0)
(define-sort pfun (a b) (Array a b))
(declare-sort set 1)
(declare-const PLF (set BLK))
(declare-const BLK (set BLK))
(declare-const LOC (set LOC))
(declare-const TRAIN (set TRAIN))
(declare-const ent BLK)
(declare-const ext BLK)
(declare-const in (set TRAIN))
(declare-const in@prime (set TRAIN))
(declare-const loc (pfun TRAIN BLK))
(declare-const loc@prime (pfun TRAIN BLK))
(declare-const p BLK)
(declare-const q BLK)
(declare-const t TRAIN)
(declare-const t_0 TRAIN)
(declare-const t_1 TRAIN)
(declare-const t_2 TRAIN)
(declare-const t_3 TRAIN)
(declare-fun apply@@TRAIN@@BLK ((pfun TRAIN BLK) TRAIN) BLK)
(declare-fun dom-rest@@TRAIN@@BLK ((set TRAIN) (pfun TRAIN BLK)) (pfun TRAIN BLK))
(declare-fun dom-subt@@TRAIN@@BLK ((set TRAIN) (pfun TRAIN BLK)) (pfun TRAIN BLK))
(declare-fun dom@@TRAIN@@BLK ((pfun TRAIN BLK)) (set TRAIN))
(declare-fun elem@@BLK (BLK (set BLK)) Bool)
(declare-fun elem@@LOC (LOC (set LOC)) Bool)
(declare-fun elem@@TRAIN (TRAIN (set TRAIN)) Bool)
(declare-fun elem@Open@@pfun@@TRAIN@@BLK@Close ((pfun TRAIN BLK) (set (pfun TRAIN BLK))) Bool)
(declare-fun empty-fun@@TRAIN@@BLK () (pfun TRAIN BLK))
(declare-fun empty-set@@BLK () (set BLK))
(declare-fun empty-set@@LOC () (set LOC))
(declare-fun empty-set@@TRAIN () (set TRAIN))
(declare-fun empty-set@Open@@pfun@@TRAIN@@BLK@Close () (set (pfun TRAIN BLK)))
(declare-fun intersect@@BLK ((set BLK) (set BLK)) (set BLK))
(declare-fun intersect@@LOC ((set LOC) (set LOC)) (set LOC))
(declare-fun intersect@@TRAIN ((set TRAIN) (set TRAIN)) (set TRAIN))
(declare-fun intersect@Open@@pfun@@TRAIN@@BLK@Close ((set (pfun TRAIN BLK)) (set (pfun TRAIN BLK))) (set (pfun TRAIN BLK)))
(declare-fun mk-fun@@TRAIN@@BLK (TRAIN BLK) (pfun TRAIN BLK))
(declare-fun mk-set@@BLK (BLK) (set BLK))
(declare-fun mk-set@@LOC (LOC) (set LOC))
(declare-fun mk-set@@TRAIN (TRAIN) (set TRAIN))
(declare-fun mk-set@Open@@pfun@@TRAIN@@BLK@Close ((pfun TRAIN BLK)) (set (pfun TRAIN BLK)))
(declare-fun ovl@@TRAIN@@BLK ((pfun TRAIN BLK) (pfun TRAIN BLK)) (pfun TRAIN BLK))
(declare-fun set-diff@@BLK ((set BLK) (set BLK)) (set BLK))
(declare-fun set-diff@@LOC ((set LOC) (set LOC)) (set LOC))
(declare-fun set-diff@@TRAIN ((set TRAIN) (set TRAIN)) (set TRAIN))
(declare-fun set-diff@Open@@pfun@@TRAIN@@BLK@Close ((set (pfun TRAIN BLK)) (set (pfun TRAIN BLK))) (set (pfun TRAIN BLK)))
(declare-fun tfun@@TRAIN@@BLK ((set TRAIN) (set BLK)) (set (pfun TRAIN BLK)))
(declare-fun bunion@@BLK ((set BLK) (set BLK)) (set BLK))
(declare-fun bunion@@LOC ((set LOC) (set LOC)) (set LOC))
(declare-fun bunion@@TRAIN ((set TRAIN) (set TRAIN)) (set TRAIN))
(declare-fun bunion@Open@@pfun@@TRAIN@@BLK@Close ((set (pfun TRAIN BLK)) (set (pfun TRAIN BLK))) (set (pfun TRAIN BLK)))
(assert (=> (and (elem@@TRAIN t_0
                              in)
                 (= (select loc
                            t_0)
                    ent)
                 (not (elem@@BLK (select loc
                                         t_0)
                                 PLF)))
            (and (elem@@TRAIN t_0
                              in@prime)
                 (or (elem@@BLK (select loc@prime
                                        t_0)
                                PLF)
                     (= (select loc@prime
                                t_0)
                        ent)))))

(assert (not (=> (and (elem@@TRAIN t_0
                                   in)
                      (= (select loc
                                 t_0)
                         ent)
                      (not (elem@@BLK (select loc
                                              t_0)
                                      PLF)))
                 (and (elem@@TRAIN t_0
                                   in@prime)
                      (or (elem@@BLK (select loc@prime
                                             t_0)
                                     PLF)
                          (= (select loc@prime
                                     t_0)
                             ent))))))

(check-sat-using (or-else (then qe smt) (then skip smt) (then (using-params simplify :expand-power true) smt)))

(pop)
(echo "> train0/leave/CO/co1/hypotheses (324,1)")
(push)
(declare-sort BLK 0)
(declare-sort LOC 0)
(declare-sort TRAIN 0)
(define-sort pfun (a b) (Array a b))
(declare-sort set 1)
(declare-const PLF (set BLK))
(declare-const BLK (set BLK))
(declare-const LOC (set LOC))
(declare-const TRAIN (set TRAIN))
(declare-const ent BLK)
(declare-const ext BLK)
(declare-const in (set TRAIN))
(declare-const in@prime (set TRAIN))
(declare-const loc (pfun TRAIN BLK))
(declare-const loc@prime (pfun TRAIN BLK))
(declare-const p BLK)
(declare-const q BLK)
(declare-const t TRAIN)
(declare-const t_0 TRAIN)
(declare-const t_1 TRAIN)
(declare-const t_2 TRAIN)
(declare-const t_3 TRAIN)
(declare-fun apply@@TRAIN@@BLK ((pfun TRAIN BLK) TRAIN) BLK)
(declare-fun dom-rest@@TRAIN@@BLK ((set TRAIN) (pfun TRAIN BLK)) (pfun TRAIN BLK))
(declare-fun dom-subt@@TRAIN@@BLK ((set TRAIN) (pfun TRAIN BLK)) (pfun TRAIN BLK))
(declare-fun dom@@TRAIN@@BLK ((pfun TRAIN BLK)) (set TRAIN))
(declare-fun elem@@BLK (BLK (set BLK)) Bool)
(declare-fun elem@@LOC (LOC (set LOC)) Bool)
(declare-fun elem@@TRAIN (TRAIN (set TRAIN)) Bool)
(declare-fun elem@Open@@pfun@@TRAIN@@BLK@Close ((pfun TRAIN BLK) (set (pfun TRAIN BLK))) Bool)
(declare-fun empty-fun@@TRAIN@@BLK () (pfun TRAIN BLK))
(declare-fun empty-set@@BLK () (set BLK))
(declare-fun empty-set@@LOC () (set LOC))
(declare-fun empty-set@@TRAIN () (set TRAIN))
(declare-fun empty-set@Open@@pfun@@TRAIN@@BLK@Close () (set (pfun TRAIN BLK)))
(declare-fun intersect@@BLK ((set BLK) (set BLK)) (set BLK))
(declare-fun intersect@@LOC ((set LOC) (set LOC)) (set LOC))
(declare-fun intersect@@TRAIN ((set TRAIN) (set TRAIN)) (set TRAIN))
(declare-fun intersect@Open@@pfun@@TRAIN@@BLK@Close ((set (pfun TRAIN BLK)) (set (pfun TRAIN BLK))) (set (pfun TRAIN BLK)))
(declare-fun mk-fun@@TRAIN@@BLK (TRAIN BLK) (pfun TRAIN BLK))
(declare-fun mk-set@@BLK (BLK) (set BLK))
(declare-fun mk-set@@LOC (LOC) (set LOC))
(declare-fun mk-set@@TRAIN (TRAIN) (set TRAIN))
(declare-fun mk-set@Open@@pfun@@TRAIN@@BLK@Close ((pfun TRAIN BLK)) (set (pfun TRAIN BLK)))
(declare-fun ovl@@TRAIN@@BLK ((pfun TRAIN BLK) (pfun TRAIN BLK)) (pfun TRAIN BLK))
(declare-fun set-diff@@BLK ((set BLK) (set BLK)) (set BLK))
(declare-fun set-diff@@LOC ((set LOC) (set LOC)) (set LOC))
(declare-fun set-diff@@TRAIN ((set TRAIN) (set TRAIN)) (set TRAIN))
(declare-fun set-diff@Open@@pfun@@TRAIN@@BLK@Close ((set (pfun TRAIN BLK)) (set (pfun TRAIN BLK))) (set (pfun TRAIN BLK)))
(declare-fun tfun@@TRAIN@@BLK ((set TRAIN) (set BLK)) (set (pfun TRAIN BLK)))
(declare-fun bunion@@BLK ((set BLK) (set BLK)) (set BLK))
(declare-fun bunion@@LOC ((set LOC) (set LOC)) (set LOC))
(declare-fun bunion@@TRAIN ((set TRAIN) (set TRAIN)) (set TRAIN))
(declare-fun bunion@Open@@pfun@@TRAIN@@BLK@Close ((set (pfun TRAIN BLK)) (set (pfun TRAIN BLK))) (set (pfun TRAIN BLK)))
(assert (forall ( (x BLK)
                  (y BLK) )
                (= (elem@@BLK x
                              (mk-set@@BLK y))
                   (= x
                      y))))

(assert (forall ( (x BLK)
                  (s1 (set BLK))
                  (s2 (set BLK)) )
                (= (elem@@BLK x
                              (set-diff@@BLK s1
                                             s2))
                   (and (elem@@BLK x
                                   s1)
                        (not (elem@@BLK x
                                        s2))))))

(assert (forall ( (x BLK)
                  (s1 (set BLK))
                  (s2 (set BLK)) )
                (= (elem@@BLK x
                              (intersect@@BLK s1
                                              s2))
                   (and (elem@@BLK x
                                   s1)
                        (elem@@BLK x
                                   s2)))))

(assert (forall ( (x BLK)
                  (s1 (set BLK))
                  (s2 (set BLK)) )
                (= (elem@@BLK x
                              (bunion@@BLK s1
                                           s2))
                   (or (elem@@BLK x
                                  s1)
                       (elem@@BLK x
                                  s2)))))

(assert (forall ( (x BLK)
                  (s1 (set BLK))
                  (s2 (set BLK)) )
                (not (elem@@BLK x
                                empty-set@@BLK))))

(assert (forall ( (x LOC)
                  (y LOC) )
                (= (elem@@LOC x
                              (mk-set@@LOC y))
                   (= x
                      y))))

(assert (forall ( (x LOC)
                  (s1 (set LOC))
                  (s2 (set LOC)) )
                (= (elem@@LOC x
                              (set-diff@@LOC s1
                                             s2))
                   (and (elem@@LOC x
                                   s1)
                        (not (elem@@LOC x
                                        s2))))))

(assert (forall ( (x LOC)
                  (s1 (set LOC))
                  (s2 (set LOC)) )
                (= (elem@@LOC x
                              (intersect@@LOC s1
                                              s2))
                   (and (elem@@LOC x
                                   s1)
                        (elem@@LOC x
                                   s2)))))

(assert (forall ( (x LOC)
                  (s1 (set LOC))
                  (s2 (set LOC)) )
                (= (elem@@LOC x
                              (bunion@@LOC s1
                                           s2))
                   (or (elem@@LOC x
                                  s1)
                       (elem@@LOC x
                                  s2)))))

(assert (forall ( (x LOC)
                  (s1 (set LOC))
                  (s2 (set LOC)) )
                (not (elem@@LOC x
                                empty-set@@LOC))))

(assert (forall ( (x TRAIN)
                  (y TRAIN) )
                (= (elem@@TRAIN x
                                (mk-set@@TRAIN y))
                   (= x
                      y))))

(assert (forall ( (x TRAIN)
                  (s1 (set TRAIN))
                  (s2 (set TRAIN)) )
                (= (elem@@TRAIN x
                                (set-diff@@TRAIN s1
                                                 s2))
                   (and (elem@@TRAIN x
                                     s1)
                        (not (elem@@TRAIN x
                                          s2))))))

(assert (forall ( (x TRAIN)
                  (s1 (set TRAIN))
                  (s2 (set TRAIN)) )
                (= (elem@@TRAIN x
                                (intersect@@TRAIN s1
                                                  s2))
                   (and (elem@@TRAIN x
                                     s1)
                        (elem@@TRAIN x
                                     s2)))))

(assert (forall ( (x TRAIN)
                  (s1 (set TRAIN))
                  (s2 (set TRAIN)) )
                (= (elem@@TRAIN x
                                (bunion@@TRAIN s1
                                               s2))
                   (or (elem@@TRAIN x
                                    s1)
                       (elem@@TRAIN x
                                    s2)))))

(assert (forall ( (x TRAIN)
                  (s1 (set TRAIN))
                  (s2 (set TRAIN)) )
                (not (elem@@TRAIN x
                                  empty-set@@TRAIN))))

(assert (forall ( (f1 (pfun TRAIN
                            BLK))
                  (f2 (pfun TRAIN
                            BLK)) )
                (= (bunion@@TRAIN (dom@@TRAIN@@BLK f1)
                                  (dom@@TRAIN@@BLK f2))
                   (dom@@TRAIN@@BLK (ovl@@TRAIN@@BLK f1
                                                     f2)))))

(assert (= (dom@@TRAIN@@BLK empty-fun@@TRAIN@@BLK)
           empty-set@@TRAIN))

(assert (forall ( (x TRAIN)
                  (y BLK) )
                (= (dom@@TRAIN@@BLK (mk-fun@@TRAIN@@BLK x
                                                        y))
                   (mk-set@@TRAIN x))))

(assert (forall ( (f1 (pfun TRAIN
                            BLK))
                  (f2 (pfun TRAIN
                            BLK))
                  (x TRAIN) )
                (=> (elem@@TRAIN x
                                 (dom@@TRAIN@@BLK f2))
                    (= (select (ovl@@TRAIN@@BLK f1
                                                f2)
                               x)
                       (select f2
                               x)))))

(assert (forall ( (f1 (pfun TRAIN
                            BLK))
                  (f2 (pfun TRAIN
                            BLK))
                  (x TRAIN) )
                (=> (elem@@TRAIN x
                                 (set-diff@@TRAIN (dom@@TRAIN@@BLK f1)
                                                  (dom@@TRAIN@@BLK f2)))
                    (= (select (ovl@@TRAIN@@BLK f1
                                                f2)
                               x)
                       (select f1
                               x)))))

(assert (forall ( (f1 (pfun TRAIN
                            BLK))
                  (s1 (set TRAIN)) )
                (= (dom@@TRAIN@@BLK (dom-subt@@TRAIN@@BLK s1
                                                          f1))
                   (set-diff@@TRAIN (dom@@TRAIN@@BLK f1)
                                    s1))))

(assert (forall ( (x TRAIN)
                  (y BLK) )
                (= (select (mk-fun@@TRAIN@@BLK x
                                               y)
                           x)
                   y)))

(assert (forall ( (f1 (pfun TRAIN
                            BLK))
                  (s1 (set TRAIN))
                  (x TRAIN) )
                (=> (elem@@TRAIN x
                                 (intersect@@TRAIN s1
                                                   (dom@@TRAIN@@BLK f1)))
                    (= (select (dom-rest@@TRAIN@@BLK s1
                                                     f1)
                               x)
                       (select f1
                               x)))))

(assert (forall ( (f1 (pfun TRAIN
                            BLK))
                  (s1 (set TRAIN))
                  (x TRAIN) )
                (=> (elem@@TRAIN x
                                 (set-diff@@TRAIN (dom@@TRAIN@@BLK f1)
                                                  s1))
                    (= (select (dom-subt@@TRAIN@@BLK s1
                                                     f1)
                               x)
                       (select f1
                               x)))))

(assert (forall ( (x (pfun TRAIN
                           BLK))
                  (y (pfun TRAIN
                           BLK)) )
                (= (elem@Open@@pfun@@TRAIN@@BLK@Close x
                                                      (mk-set@Open@@pfun@@TRAIN@@BLK@Close y))
                   (= x
                      y))))

(assert (forall ( (x (pfun TRAIN
                           BLK))
                  (s1 (set (pfun TRAIN
                                 BLK)))
                  (s2 (set (pfun TRAIN
                                 BLK))) )
                (= (elem@Open@@pfun@@TRAIN@@BLK@Close x
                                                      (set-diff@Open@@pfun@@TRAIN@@BLK@Close s1
                                                                                             s2))
                   (and (elem@Open@@pfun@@TRAIN@@BLK@Close x
                                                           s1)
                        (not (elem@Open@@pfun@@TRAIN@@BLK@Close x
                                                                s2))))))

(assert (forall ( (x (pfun TRAIN
                           BLK))
                  (s1 (set (pfun TRAIN
                                 BLK)))
                  (s2 (set (pfun TRAIN
                                 BLK))) )
                (= (elem@Open@@pfun@@TRAIN@@BLK@Close x
                                                      (intersect@Open@@pfun@@TRAIN@@BLK@Close s1
                                                                                              s2))
                   (and (elem@Open@@pfun@@TRAIN@@BLK@Close x
                                                           s1)
                        (elem@Open@@pfun@@TRAIN@@BLK@Close x
                                                           s2)))))

(assert (forall ( (x (pfun TRAIN
                           BLK))
                  (s1 (set (pfun TRAIN
                                 BLK)))
                  (s2 (set (pfun TRAIN
                                 BLK))) )
                (= (elem@Open@@pfun@@TRAIN@@BLK@Close x
                                                      (bunion@Open@@pfun@@TRAIN@@BLK@Close s1
                                                                                           s2))
                   (or (elem@Open@@pfun@@TRAIN@@BLK@Close x
                                                          s1)
                       (elem@Open@@pfun@@TRAIN@@BLK@Close x
                                                          s2)))))

(assert (forall ( (x (pfun TRAIN
                           BLK))
                  (s1 (set (pfun TRAIN
                                 BLK)))
                  (s2 (set (pfun TRAIN
                                 BLK))) )
                (not (elem@Open@@pfun@@TRAIN@@BLK@Close x
                                                        empty-set@Open@@pfun@@TRAIN@@BLK@Close))))

(assert (and (not (= ent
                     ext))
             (not (elem@@BLK ent
                             PLF))
             (not (elem@@BLK ext
                             PLF))))

(assert (forall ( (p BLK) )
                (=> true
                    (= (not (= p
                               ext))
                       (elem@@BLK p
                                  (bunion@@BLK (mk-set@@BLK ent)
                                               PLF))))))

(assert (forall ( (p BLK) )
                (=> true
                    (= (not (= p
                               ent))
                       (elem@@BLK p
                                  (bunion@@BLK (mk-set@@BLK ext)
                                               PLF))))))

(assert (forall ( (p BLK) )
                (=> true
                    (= (or (= p
                              ent)
                           (= p
                              ext))
                       (not (elem@@BLK p
                                       PLF))))))

(assert (= BLK
           (bunion@@BLK (bunion@@BLK (mk-set@@BLK ent)
                                     (mk-set@@BLK ext))
                        PLF)))

(assert (forall ( (t TRAIN) )
                (=> (elem@@TRAIN t
                                 in)
                    (elem@@BLK (select loc
                                       t)
                               BLK))))

(assert (= (dom@@TRAIN@@BLK loc)
           in))

(assert (and (= (select loc
                        t)
                ext)
             (elem@@TRAIN t
                          in)))

(assert (= in@prime
           (set-diff@@TRAIN in
                            (mk-set@@TRAIN t))))

(assert (= loc@prime
           (dom-subt@@TRAIN@@BLK (mk-set@@TRAIN t)
                                 loc)))

(assert (not (and (= in@prime
                     (set-diff@@TRAIN in
                                      (mk-set@@TRAIN t)))
                  (= loc@prime
                     (dom-subt@@TRAIN@@BLK (mk-set@@TRAIN t)
                                           loc))
                  (= (dom@@TRAIN@@BLK loc)
                     in)
                  (= (select loc
                             t)
                     ext)
                  (elem@@TRAIN t
                               in)
                  (= (select loc
                             t)
                     ext)
                  (elem@@TRAIN t
                               in))))

(check-sat-using (or-else (then qe smt) (then skip smt) (then (using-params simplify :expand-power true) smt)))

(pop)
(echo "> train0/leave/CO/co1/relation (324,1)")
(push)
(declare-sort BLK 0)
(declare-sort LOC 0)
(declare-sort TRAIN 0)
(define-sort pfun (a b) (Array a b))
(declare-sort set 1)
(declare-const PLF (set BLK))
(declare-const BLK (set BLK))
(declare-const LOC (set LOC))
(declare-const TRAIN (set TRAIN))
(declare-const ent BLK)
(declare-const ext BLK)
(declare-const in (set TRAIN))
(declare-const in@prime (set TRAIN))
(declare-const loc (pfun TRAIN BLK))
(declare-const loc@prime (pfun TRAIN BLK))
(declare-const p BLK)
(declare-const q BLK)
(declare-const t TRAIN)
(declare-const t_0 TRAIN)
(declare-const t_1 TRAIN)
(declare-const t_2 TRAIN)
(declare-const t_3 TRAIN)
(declare-fun apply@@TRAIN@@BLK ((pfun TRAIN BLK) TRAIN) BLK)
(declare-fun dom-rest@@TRAIN@@BLK ((set TRAIN) (pfun TRAIN BLK)) (pfun TRAIN BLK))
(declare-fun dom-subt@@TRAIN@@BLK ((set TRAIN) (pfun TRAIN BLK)) (pfun TRAIN BLK))
(declare-fun dom@@TRAIN@@BLK ((pfun TRAIN BLK)) (set TRAIN))
(declare-fun elem@@BLK (BLK (set BLK)) Bool)
(declare-fun elem@@LOC (LOC (set LOC)) Bool)
(declare-fun elem@@TRAIN (TRAIN (set TRAIN)) Bool)
(declare-fun elem@Open@@pfun@@TRAIN@@BLK@Close ((pfun TRAIN BLK) (set (pfun TRAIN BLK))) Bool)
(declare-fun empty-fun@@TRAIN@@BLK () (pfun TRAIN BLK))
(declare-fun empty-set@@BLK () (set BLK))
(declare-fun empty-set@@LOC () (set LOC))
(declare-fun empty-set@@TRAIN () (set TRAIN))
(declare-fun empty-set@Open@@pfun@@TRAIN@@BLK@Close () (set (pfun TRAIN BLK)))
(declare-fun intersect@@BLK ((set BLK) (set BLK)) (set BLK))
(declare-fun intersect@@LOC ((set LOC) (set LOC)) (set LOC))
(declare-fun intersect@@TRAIN ((set TRAIN) (set TRAIN)) (set TRAIN))
(declare-fun intersect@Open@@pfun@@TRAIN@@BLK@Close ((set (pfun TRAIN BLK)) (set (pfun TRAIN BLK))) (set (pfun TRAIN BLK)))
(declare-fun mk-fun@@TRAIN@@BLK (TRAIN BLK) (pfun TRAIN BLK))
(declare-fun mk-set@@BLK (BLK) (set BLK))
(declare-fun mk-set@@LOC (LOC) (set LOC))
(declare-fun mk-set@@TRAIN (TRAIN) (set TRAIN))
(declare-fun mk-set@Open@@pfun@@TRAIN@@BLK@Close ((pfun TRAIN BLK)) (set (pfun TRAIN BLK)))
(declare-fun ovl@@TRAIN@@BLK ((pfun TRAIN BLK) (pfun TRAIN BLK)) (pfun TRAIN BLK))
(declare-fun set-diff@@BLK ((set BLK) (set BLK)) (set BLK))
(declare-fun set-diff@@LOC ((set LOC) (set LOC)) (set LOC))
(declare-fun set-diff@@TRAIN ((set TRAIN) (set TRAIN)) (set TRAIN))
(declare-fun set-diff@Open@@pfun@@TRAIN@@BLK@Close ((set (pfun TRAIN BLK)) (set (pfun TRAIN BLK))) (set (pfun TRAIN BLK)))
(declare-fun tfun@@TRAIN@@BLK ((set TRAIN) (set BLK)) (set (pfun TRAIN BLK)))
(declare-fun bunion@@BLK ((set BLK) (set BLK)) (set BLK))
(declare-fun bunion@@LOC ((set LOC) (set LOC)) (set LOC))
(declare-fun bunion@@TRAIN ((set TRAIN) (set TRAIN)) (set TRAIN))
(declare-fun bunion@Open@@pfun@@TRAIN@@BLK@Close ((set (pfun TRAIN BLK)) (set (pfun TRAIN BLK))) (set (pfun TRAIN BLK)))
(assert (= (and (elem@@TRAIN t_0
                             in@prime)
                (or (elem@@BLK (select loc@prime
                                       t_0)
                               PLF)
                    (= (select loc@prime
                               t_0)
                       ent)))
           (and (elem@@TRAIN t_0
                             (set-diff@@TRAIN in
                                              (mk-set@@TRAIN t)))
                (or (elem@@BLK (select (dom-subt@@TRAIN@@BLK (mk-set@@TRAIN t)
                                                             loc)
                                       t_0)
                               PLF)
                    (= (select (dom-subt@@TRAIN@@BLK (mk-set@@TRAIN t)
                                                     loc)
                               t_0)
                       ent)))))

(assert (= (and (elem@@TRAIN t_0
                             (set-diff@@TRAIN in
                                              (mk-set@@TRAIN t)))
                (or (elem@@BLK (select (dom-subt@@TRAIN@@BLK (mk-set@@TRAIN t)
                                                             loc)
                                       t_0)
                               PLF)
                    (= (select (dom-subt@@TRAIN@@BLK (mk-set@@TRAIN t)
                                                     loc)
                               t_0)
                       ent)))
           (or (and (elem@@TRAIN t_0
                                 (set-diff@@TRAIN in
                                                  (mk-set@@TRAIN t)))
                    (elem@@BLK (select (dom-subt@@TRAIN@@BLK (mk-set@@TRAIN t)
                                                             loc)
                                       t_0)
                               PLF))
               (and (elem@@TRAIN t_0
                                 (set-diff@@TRAIN in
                                                  (mk-set@@TRAIN t)))
                    (= (select (dom-subt@@TRAIN@@BLK (mk-set@@TRAIN t)
                                                     loc)
                               t_0)
                       ent)))))

(assert (= (or (and (elem@@TRAIN t_0
                                 (set-diff@@TRAIN in
                                                  (mk-set@@TRAIN t)))
                    (elem@@BLK (select (dom-subt@@TRAIN@@BLK (mk-set@@TRAIN t)
                                                             loc)
                                       t_0)
                               PLF))
               (and (elem@@TRAIN t_0
                                 (set-diff@@TRAIN in
                                                  (mk-set@@TRAIN t)))
                    (= (select (dom-subt@@TRAIN@@BLK (mk-set@@TRAIN t)
                                                     loc)
                               t_0)
                       ent)))
           (and (elem@@TRAIN t_0
                             (set-diff@@TRAIN in
                                              (mk-set@@TRAIN t)))
                (or (elem@@BLK (select loc
                                       t_0)
                               PLF)
                    (= (select loc
                               t_0)
                       ent)))))

(assert (= (and (elem@@TRAIN t_0
                             (set-diff@@TRAIN in
                                              (mk-set@@TRAIN t)))
                (or (elem@@BLK (select loc
                                       t_0)
                               PLF)
                    (= (select loc
                               t_0)
                       ent)))
           (and (elem@@TRAIN t_0
                             in)
                (not (= t_0
                        t))
                (or (elem@@BLK (select loc
                                       t_0)
                               PLF)
                    (= (select loc
                               t_0)
                       ent)))))

(assert (= (and (elem@@TRAIN t_0
                             in)
                (not (= t_0
                        t))
                (or (elem@@BLK (select loc
                                       t_0)
                               PLF)
                    (= (select loc
                               t_0)
                       ent)))
           (and (elem@@TRAIN t_0
                             in)
                (not (= t_0
                        t))
                (not (= (select loc
                                t_0)
                        ext)))))

(assert (= (and (elem@@TRAIN t_0
                             in)
                (not (= t_0
                        t))
                (not (= (select loc
                                t_0)
                        ext)))
           (and (elem@@TRAIN t_0
                             in)
                (not (= (select loc
                                t_0)
                        ext))
                (= (select loc
                           t)
                   ext))))

(assert (=> (and (elem@@TRAIN t_0
                              in)
                 (= (select loc
                            t_0)
                    ent))
            (and (elem@@TRAIN t_0
                              in)
                 (not (= (select loc
                                 t_0)
                         ext))
                 (= (select loc
                            t)
                    ext))))

(assert (= (and (elem@@TRAIN t_0
                             in)
                (= (select loc
                           t_0)
                   ent))
           (and (elem@@TRAIN t_0
                             in)
                (= (select loc
                           t_0)
                   ent)
                (not (elem@@BLK (select loc
                                        t_0)
                                PLF)))))

(assert (forall ( (x BLK)
                  (y BLK) )
                (= (elem@@BLK x
                              (mk-set@@BLK y))
                   (= x
                      y))))

(assert (forall ( (x BLK)
                  (s1 (set BLK))
                  (s2 (set BLK)) )
                (= (elem@@BLK x
                              (set-diff@@BLK s1
                                             s2))
                   (and (elem@@BLK x
                                   s1)
                        (not (elem@@BLK x
                                        s2))))))

(assert (forall ( (x BLK)
                  (s1 (set BLK))
                  (s2 (set BLK)) )
                (= (elem@@BLK x
                              (intersect@@BLK s1
                                              s2))
                   (and (elem@@BLK x
                                   s1)
                        (elem@@BLK x
                                   s2)))))

(assert (forall ( (x BLK)
                  (s1 (set BLK))
                  (s2 (set BLK)) )
                (= (elem@@BLK x
                              (bunion@@BLK s1
                                           s2))
                   (or (elem@@BLK x
                                  s1)
                       (elem@@BLK x
                                  s2)))))

(assert (forall ( (x BLK)
                  (s1 (set BLK))
                  (s2 (set BLK)) )
                (not (elem@@BLK x
                                empty-set@@BLK))))

(assert (forall ( (x LOC)
                  (y LOC) )
                (= (elem@@LOC x
                              (mk-set@@LOC y))
                   (= x
                      y))))

(assert (forall ( (x LOC)
                  (s1 (set LOC))
                  (s2 (set LOC)) )
                (= (elem@@LOC x
                              (set-diff@@LOC s1
                                             s2))
                   (and (elem@@LOC x
                                   s1)
                        (not (elem@@LOC x
                                        s2))))))

(assert (forall ( (x LOC)
                  (s1 (set LOC))
                  (s2 (set LOC)) )
                (= (elem@@LOC x
                              (intersect@@LOC s1
                                              s2))
                   (and (elem@@LOC x
                                   s1)
                        (elem@@LOC x
                                   s2)))))

(assert (forall ( (x LOC)
                  (s1 (set LOC))
                  (s2 (set LOC)) )
                (= (elem@@LOC x
                              (bunion@@LOC s1
                                           s2))
                   (or (elem@@LOC x
                                  s1)
                       (elem@@LOC x
                                  s2)))))

(assert (forall ( (x LOC)
                  (s1 (set LOC))
                  (s2 (set LOC)) )
                (not (elem@@LOC x
                                empty-set@@LOC))))

(assert (forall ( (x TRAIN)
                  (y TRAIN) )
                (= (elem@@TRAIN x
                                (mk-set@@TRAIN y))
                   (= x
                      y))))

(assert (forall ( (x TRAIN)
                  (s1 (set TRAIN))
                  (s2 (set TRAIN)) )
                (= (elem@@TRAIN x
                                (set-diff@@TRAIN s1
                                                 s2))
                   (and (elem@@TRAIN x
                                     s1)
                        (not (elem@@TRAIN x
                                          s2))))))

(assert (forall ( (x TRAIN)
                  (s1 (set TRAIN))
                  (s2 (set TRAIN)) )
                (= (elem@@TRAIN x
                                (intersect@@TRAIN s1
                                                  s2))
                   (and (elem@@TRAIN x
                                     s1)
                        (elem@@TRAIN x
                                     s2)))))

(assert (forall ( (x TRAIN)
                  (s1 (set TRAIN))
                  (s2 (set TRAIN)) )
                (= (elem@@TRAIN x
                                (bunion@@TRAIN s1
                                               s2))
                   (or (elem@@TRAIN x
                                    s1)
                       (elem@@TRAIN x
                                    s2)))))

(assert (forall ( (x TRAIN)
                  (s1 (set TRAIN))
                  (s2 (set TRAIN)) )
                (not (elem@@TRAIN x
                                  empty-set@@TRAIN))))

(assert (forall ( (f1 (pfun TRAIN
                            BLK))
                  (f2 (pfun TRAIN
                            BLK)) )
                (= (bunion@@TRAIN (dom@@TRAIN@@BLK f1)
                                  (dom@@TRAIN@@BLK f2))
                   (dom@@TRAIN@@BLK (ovl@@TRAIN@@BLK f1
                                                     f2)))))

(assert (= (dom@@TRAIN@@BLK empty-fun@@TRAIN@@BLK)
           empty-set@@TRAIN))

(assert (forall ( (x TRAIN)
                  (y BLK) )
                (= (dom@@TRAIN@@BLK (mk-fun@@TRAIN@@BLK x
                                                        y))
                   (mk-set@@TRAIN x))))

(assert (forall ( (f1 (pfun TRAIN
                            BLK))
                  (f2 (pfun TRAIN
                            BLK))
                  (x TRAIN) )
                (=> (elem@@TRAIN x
                                 (dom@@TRAIN@@BLK f2))
                    (= (select (ovl@@TRAIN@@BLK f1
                                                f2)
                               x)
                       (select f2
                               x)))))

(assert (forall ( (f1 (pfun TRAIN
                            BLK))
                  (f2 (pfun TRAIN
                            BLK))
                  (x TRAIN) )
                (=> (elem@@TRAIN x
                                 (set-diff@@TRAIN (dom@@TRAIN@@BLK f1)
                                                  (dom@@TRAIN@@BLK f2)))
                    (= (select (ovl@@TRAIN@@BLK f1
                                                f2)
                               x)
                       (select f1
                               x)))))

(assert (forall ( (f1 (pfun TRAIN
                            BLK))
                  (s1 (set TRAIN)) )
                (= (dom@@TRAIN@@BLK (dom-subt@@TRAIN@@BLK s1
                                                          f1))
                   (set-diff@@TRAIN (dom@@TRAIN@@BLK f1)
                                    s1))))

(assert (forall ( (x TRAIN)
                  (y BLK) )
                (= (select (mk-fun@@TRAIN@@BLK x
                                               y)
                           x)
                   y)))

(assert (forall ( (f1 (pfun TRAIN
                            BLK))
                  (s1 (set TRAIN))
                  (x TRAIN) )
                (=> (elem@@TRAIN x
                                 (intersect@@TRAIN s1
                                                   (dom@@TRAIN@@BLK f1)))
                    (= (select (dom-rest@@TRAIN@@BLK s1
                                                     f1)
                               x)
                       (select f1
                               x)))))

(assert (forall ( (f1 (pfun TRAIN
                            BLK))
                  (s1 (set TRAIN))
                  (x TRAIN) )
                (=> (elem@@TRAIN x
                                 (set-diff@@TRAIN (dom@@TRAIN@@BLK f1)
                                                  s1))
                    (= (select (dom-subt@@TRAIN@@BLK s1
                                                     f1)
                               x)
                       (select f1
                               x)))))

(assert (forall ( (x (pfun TRAIN
                           BLK))
                  (y (pfun TRAIN
                           BLK)) )
                (= (elem@Open@@pfun@@TRAIN@@BLK@Close x
                                                      (mk-set@Open@@pfun@@TRAIN@@BLK@Close y))
                   (= x
                      y))))

(assert (forall ( (x (pfun TRAIN
                           BLK))
                  (s1 (set (pfun TRAIN
                                 BLK)))
                  (s2 (set (pfun TRAIN
                                 BLK))) )
                (= (elem@Open@@pfun@@TRAIN@@BLK@Close x
                                                      (set-diff@Open@@pfun@@TRAIN@@BLK@Close s1
                                                                                             s2))
                   (and (elem@Open@@pfun@@TRAIN@@BLK@Close x
                                                           s1)
                        (not (elem@Open@@pfun@@TRAIN@@BLK@Close x
                                                                s2))))))

(assert (forall ( (x (pfun TRAIN
                           BLK))
                  (s1 (set (pfun TRAIN
                                 BLK)))
                  (s2 (set (pfun TRAIN
                                 BLK))) )
                (= (elem@Open@@pfun@@TRAIN@@BLK@Close x
                                                      (intersect@Open@@pfun@@TRAIN@@BLK@Close s1
                                                                                              s2))
                   (and (elem@Open@@pfun@@TRAIN@@BLK@Close x
                                                           s1)
                        (elem@Open@@pfun@@TRAIN@@BLK@Close x
                                                           s2)))))

(assert (forall ( (x (pfun TRAIN
                           BLK))
                  (s1 (set (pfun TRAIN
                                 BLK)))
                  (s2 (set (pfun TRAIN
                                 BLK))) )
                (= (elem@Open@@pfun@@TRAIN@@BLK@Close x
                                                      (bunion@Open@@pfun@@TRAIN@@BLK@Close s1
                                                                                           s2))
                   (or (elem@Open@@pfun@@TRAIN@@BLK@Close x
                                                          s1)
                       (elem@Open@@pfun@@TRAIN@@BLK@Close x
                                                          s2)))))

(assert (forall ( (x (pfun TRAIN
                           BLK))
                  (s1 (set (pfun TRAIN
                                 BLK)))
                  (s2 (set (pfun TRAIN
                                 BLK))) )
                (not (elem@Open@@pfun@@TRAIN@@BLK@Close x
                                                        empty-set@Open@@pfun@@TRAIN@@BLK@Close))))

(assert (and (not (= ent
                     ext))
             (not (elem@@BLK ent
                             PLF))
             (not (elem@@BLK ext
                             PLF))))

(assert (forall ( (p BLK) )
                (=> true
                    (= (not (= p
                               ext))
                       (elem@@BLK p
                                  (bunion@@BLK (mk-set@@BLK ent)
                                               PLF))))))

(assert (forall ( (p BLK) )
                (=> true
                    (= (not (= p
                               ent))
                       (elem@@BLK p
                                  (bunion@@BLK (mk-set@@BLK ext)
                                               PLF))))))

(assert (forall ( (p BLK) )
                (=> true
                    (= (or (= p
                              ent)
                           (= p
                              ext))
                       (not (elem@@BLK p
                                       PLF))))))

(assert (= BLK
           (bunion@@BLK (bunion@@BLK (mk-set@@BLK ent)
                                     (mk-set@@BLK ext))
                        PLF)))

(assert (not (=> (and (elem@@TRAIN t_0
                                   in)
                      (= (select loc
                                 t_0)
                         ent)
                      (not (elem@@BLK (select loc
                                              t_0)
                                      PLF)))
                 (and (elem@@TRAIN t_0
                                   in@prime)
                      (or (elem@@BLK (select loc@prime
                                             t_0)
                                     PLF)
                          (= (select loc@prime
                                     t_0)
                             ent))))))

(check-sat-using (or-else (then qe smt) (then skip smt) (then (using-params simplify :expand-power true) smt)))

(pop)
(echo "> train0/leave/CO/co1/step (326,1)")
(push)
(declare-sort BLK 0)
(declare-sort LOC 0)
(declare-sort TRAIN 0)
(define-sort pfun (a b) (Array a b))
(declare-sort set 1)
(declare-const PLF (set BLK))
(declare-const BLK (set BLK))
(declare-const LOC (set LOC))
(declare-const TRAIN (set TRAIN))
(declare-const ent BLK)
(declare-const ext BLK)
(declare-const in (set TRAIN))
(declare-const in@prime (set TRAIN))
(declare-const loc (pfun TRAIN BLK))
(declare-const loc@prime (pfun TRAIN BLK))
(declare-const p BLK)
(declare-const q BLK)
(declare-const t TRAIN)
(declare-const t_0 TRAIN)
(declare-const t_1 TRAIN)
(declare-const t_2 TRAIN)
(declare-const t_3 TRAIN)
(declare-fun apply@@TRAIN@@BLK ((pfun TRAIN BLK) TRAIN) BLK)
(declare-fun dom-rest@@TRAIN@@BLK ((set TRAIN) (pfun TRAIN BLK)) (pfun TRAIN BLK))
(declare-fun dom-subt@@TRAIN@@BLK ((set TRAIN) (pfun TRAIN BLK)) (pfun TRAIN BLK))
(declare-fun dom@@TRAIN@@BLK ((pfun TRAIN BLK)) (set TRAIN))
(declare-fun elem@@BLK (BLK (set BLK)) Bool)
(declare-fun elem@@LOC (LOC (set LOC)) Bool)
(declare-fun elem@@TRAIN (TRAIN (set TRAIN)) Bool)
(declare-fun elem@Open@@pfun@@TRAIN@@BLK@Close ((pfun TRAIN BLK) (set (pfun TRAIN BLK))) Bool)
(declare-fun empty-fun@@TRAIN@@BLK () (pfun TRAIN BLK))
(declare-fun empty-set@@BLK () (set BLK))
(declare-fun empty-set@@LOC () (set LOC))
(declare-fun empty-set@@TRAIN () (set TRAIN))
(declare-fun empty-set@Open@@pfun@@TRAIN@@BLK@Close () (set (pfun TRAIN BLK)))
(declare-fun intersect@@BLK ((set BLK) (set BLK)) (set BLK))
(declare-fun intersect@@LOC ((set LOC) (set LOC)) (set LOC))
(declare-fun intersect@@TRAIN ((set TRAIN) (set TRAIN)) (set TRAIN))
(declare-fun intersect@Open@@pfun@@TRAIN@@BLK@Close ((set (pfun TRAIN BLK)) (set (pfun TRAIN BLK))) (set (pfun TRAIN BLK)))
(declare-fun mk-fun@@TRAIN@@BLK (TRAIN BLK) (pfun TRAIN BLK))
(declare-fun mk-set@@BLK (BLK) (set BLK))
(declare-fun mk-set@@LOC (LOC) (set LOC))
(declare-fun mk-set@@TRAIN (TRAIN) (set TRAIN))
(declare-fun mk-set@Open@@pfun@@TRAIN@@BLK@Close ((pfun TRAIN BLK)) (set (pfun TRAIN BLK)))
(declare-fun ovl@@TRAIN@@BLK ((pfun TRAIN BLK) (pfun TRAIN BLK)) (pfun TRAIN BLK))
(declare-fun set-diff@@BLK ((set BLK) (set BLK)) (set BLK))
(declare-fun set-diff@@LOC ((set LOC) (set LOC)) (set LOC))
(declare-fun set-diff@@TRAIN ((set TRAIN) (set TRAIN)) (set TRAIN))
(declare-fun set-diff@Open@@pfun@@TRAIN@@BLK@Close ((set (pfun TRAIN BLK)) (set (pfun TRAIN BLK))) (set (pfun TRAIN BLK)))
(declare-fun tfun@@TRAIN@@BLK ((set TRAIN) (set BLK)) (set (pfun TRAIN BLK)))
(declare-fun bunion@@BLK ((set BLK) (set BLK)) (set BLK))
(declare-fun bunion@@LOC ((set LOC) (set LOC)) (set LOC))
(declare-fun bunion@@TRAIN ((set TRAIN) (set TRAIN)) (set TRAIN))
(declare-fun bunion@Open@@pfun@@TRAIN@@BLK@Close ((set (pfun TRAIN BLK)) (set (pfun TRAIN BLK))) (set (pfun TRAIN BLK)))
(assert (= in@prime
           (set-diff@@TRAIN in
                            (mk-set@@TRAIN t))))

(assert (= loc@prime
           (dom-subt@@TRAIN@@BLK (mk-set@@TRAIN t)
                                 loc)))

(assert (forall ( (x BLK)
                  (y BLK) )
                (= (elem@@BLK x
                              (mk-set@@BLK y))
                   (= x
                      y))))

(assert (forall ( (x BLK)
                  (s1 (set BLK))
                  (s2 (set BLK)) )
                (= (elem@@BLK x
                              (set-diff@@BLK s1
                                             s2))
                   (and (elem@@BLK x
                                   s1)
                        (not (elem@@BLK x
                                        s2))))))

(assert (forall ( (x BLK)
                  (s1 (set BLK))
                  (s2 (set BLK)) )
                (= (elem@@BLK x
                              (intersect@@BLK s1
                                              s2))
                   (and (elem@@BLK x
                                   s1)
                        (elem@@BLK x
                                   s2)))))

(assert (forall ( (x BLK)
                  (s1 (set BLK))
                  (s2 (set BLK)) )
                (= (elem@@BLK x
                              (bunion@@BLK s1
                                           s2))
                   (or (elem@@BLK x
                                  s1)
                       (elem@@BLK x
                                  s2)))))

(assert (forall ( (x BLK)
                  (s1 (set BLK))
                  (s2 (set BLK)) )
                (not (elem@@BLK x
                                empty-set@@BLK))))

(assert (forall ( (x LOC)
                  (y LOC) )
                (= (elem@@LOC x
                              (mk-set@@LOC y))
                   (= x
                      y))))

(assert (forall ( (x LOC)
                  (s1 (set LOC))
                  (s2 (set LOC)) )
                (= (elem@@LOC x
                              (set-diff@@LOC s1
                                             s2))
                   (and (elem@@LOC x
                                   s1)
                        (not (elem@@LOC x
                                        s2))))))

(assert (forall ( (x LOC)
                  (s1 (set LOC))
                  (s2 (set LOC)) )
                (= (elem@@LOC x
                              (intersect@@LOC s1
                                              s2))
                   (and (elem@@LOC x
                                   s1)
                        (elem@@LOC x
                                   s2)))))

(assert (forall ( (x LOC)
                  (s1 (set LOC))
                  (s2 (set LOC)) )
                (= (elem@@LOC x
                              (bunion@@LOC s1
                                           s2))
                   (or (elem@@LOC x
                                  s1)
                       (elem@@LOC x
                                  s2)))))

(assert (forall ( (x LOC)
                  (s1 (set LOC))
                  (s2 (set LOC)) )
                (not (elem@@LOC x
                                empty-set@@LOC))))

(assert (forall ( (x TRAIN)
                  (y TRAIN) )
                (= (elem@@TRAIN x
                                (mk-set@@TRAIN y))
                   (= x
                      y))))

(assert (forall ( (x TRAIN)
                  (s1 (set TRAIN))
                  (s2 (set TRAIN)) )
                (= (elem@@TRAIN x
                                (set-diff@@TRAIN s1
                                                 s2))
                   (and (elem@@TRAIN x
                                     s1)
                        (not (elem@@TRAIN x
                                          s2))))))

(assert (forall ( (x TRAIN)
                  (s1 (set TRAIN))
                  (s2 (set TRAIN)) )
                (= (elem@@TRAIN x
                                (intersect@@TRAIN s1
                                                  s2))
                   (and (elem@@TRAIN x
                                     s1)
                        (elem@@TRAIN x
                                     s2)))))

(assert (forall ( (x TRAIN)
                  (s1 (set TRAIN))
                  (s2 (set TRAIN)) )
                (= (elem@@TRAIN x
                                (bunion@@TRAIN s1
                                               s2))
                   (or (elem@@TRAIN x
                                    s1)
                       (elem@@TRAIN x
                                    s2)))))

(assert (forall ( (x TRAIN)
                  (s1 (set TRAIN))
                  (s2 (set TRAIN)) )
                (not (elem@@TRAIN x
                                  empty-set@@TRAIN))))

(assert (forall ( (f1 (pfun TRAIN
                            BLK))
                  (f2 (pfun TRAIN
                            BLK)) )
                (= (bunion@@TRAIN (dom@@TRAIN@@BLK f1)
                                  (dom@@TRAIN@@BLK f2))
                   (dom@@TRAIN@@BLK (ovl@@TRAIN@@BLK f1
                                                     f2)))))

(assert (= (dom@@TRAIN@@BLK empty-fun@@TRAIN@@BLK)
           empty-set@@TRAIN))

(assert (forall ( (x TRAIN)
                  (y BLK) )
                (= (dom@@TRAIN@@BLK (mk-fun@@TRAIN@@BLK x
                                                        y))
                   (mk-set@@TRAIN x))))

(assert (forall ( (f1 (pfun TRAIN
                            BLK))
                  (f2 (pfun TRAIN
                            BLK))
                  (x TRAIN) )
                (=> (elem@@TRAIN x
                                 (dom@@TRAIN@@BLK f2))
                    (= (select (ovl@@TRAIN@@BLK f1
                                                f2)
                               x)
                       (select f2
                               x)))))

(assert (forall ( (f1 (pfun TRAIN
                            BLK))
                  (f2 (pfun TRAIN
                            BLK))
                  (x TRAIN) )
                (=> (elem@@TRAIN x
                                 (set-diff@@TRAIN (dom@@TRAIN@@BLK f1)
                                                  (dom@@TRAIN@@BLK f2)))
                    (= (select (ovl@@TRAIN@@BLK f1
                                                f2)
                               x)
                       (select f1
                               x)))))

(assert (forall ( (f1 (pfun TRAIN
                            BLK))
                  (s1 (set TRAIN)) )
                (= (dom@@TRAIN@@BLK (dom-subt@@TRAIN@@BLK s1
                                                          f1))
                   (set-diff@@TRAIN (dom@@TRAIN@@BLK f1)
                                    s1))))

(assert (forall ( (x TRAIN)
                  (y BLK) )
                (= (select (mk-fun@@TRAIN@@BLK x
                                               y)
                           x)
                   y)))

(assert (forall ( (f1 (pfun TRAIN
                            BLK))
                  (s1 (set TRAIN))
                  (x TRAIN) )
                (=> (elem@@TRAIN x
                                 (intersect@@TRAIN s1
                                                   (dom@@TRAIN@@BLK f1)))
                    (= (select (dom-rest@@TRAIN@@BLK s1
                                                     f1)
                               x)
                       (select f1
                               x)))))

(assert (forall ( (f1 (pfun TRAIN
                            BLK))
                  (s1 (set TRAIN))
                  (x TRAIN) )
                (=> (elem@@TRAIN x
                                 (set-diff@@TRAIN (dom@@TRAIN@@BLK f1)
                                                  s1))
                    (= (select (dom-subt@@TRAIN@@BLK s1
                                                     f1)
                               x)
                       (select f1
                               x)))))

(assert (forall ( (x (pfun TRAIN
                           BLK))
                  (y (pfun TRAIN
                           BLK)) )
                (= (elem@Open@@pfun@@TRAIN@@BLK@Close x
                                                      (mk-set@Open@@pfun@@TRAIN@@BLK@Close y))
                   (= x
                      y))))

(assert (forall ( (x (pfun TRAIN
                           BLK))
                  (s1 (set (pfun TRAIN
                                 BLK)))
                  (s2 (set (pfun TRAIN
                                 BLK))) )
                (= (elem@Open@@pfun@@TRAIN@@BLK@Close x
                                                      (set-diff@Open@@pfun@@TRAIN@@BLK@Close s1
                                                                                             s2))
                   (and (elem@Open@@pfun@@TRAIN@@BLK@Close x
                                                           s1)
                        (not (elem@Open@@pfun@@TRAIN@@BLK@Close x
                                                                s2))))))

(assert (forall ( (x (pfun TRAIN
                           BLK))
                  (s1 (set (pfun TRAIN
                                 BLK)))
                  (s2 (set (pfun TRAIN
                                 BLK))) )
                (= (elem@Open@@pfun@@TRAIN@@BLK@Close x
                                                      (intersect@Open@@pfun@@TRAIN@@BLK@Close s1
                                                                                              s2))
                   (and (elem@Open@@pfun@@TRAIN@@BLK@Close x
                                                           s1)
                        (elem@Open@@pfun@@TRAIN@@BLK@Close x
                                                           s2)))))

(assert (forall ( (x (pfun TRAIN
                           BLK))
                  (s1 (set (pfun TRAIN
                                 BLK)))
                  (s2 (set (pfun TRAIN
                                 BLK))) )
                (= (elem@Open@@pfun@@TRAIN@@BLK@Close x
                                                      (bunion@Open@@pfun@@TRAIN@@BLK@Close s1
                                                                                           s2))
                   (or (elem@Open@@pfun@@TRAIN@@BLK@Close x
                                                          s1)
                       (elem@Open@@pfun@@TRAIN@@BLK@Close x
                                                          s2)))))

(assert (forall ( (x (pfun TRAIN
                           BLK))
                  (s1 (set (pfun TRAIN
                                 BLK)))
                  (s2 (set (pfun TRAIN
                                 BLK))) )
                (not (elem@Open@@pfun@@TRAIN@@BLK@Close x
                                                        empty-set@Open@@pfun@@TRAIN@@BLK@Close))))

(assert (and (not (= ent
                     ext))
             (not (elem@@BLK ent
                             PLF))
             (not (elem@@BLK ext
                             PLF))))

(assert (forall ( (p BLK) )
                (=> true
                    (= (not (= p
                               ext))
                       (elem@@BLK p
                                  (bunion@@BLK (mk-set@@BLK ent)
                                               PLF))))))

(assert (forall ( (p BLK) )
                (=> true
                    (= (not (= p
                               ent))
                       (elem@@BLK p
                                  (bunion@@BLK (mk-set@@BLK ext)
                                               PLF))))))

(assert (forall ( (p BLK) )
                (=> true
                    (= (or (= p
                              ent)
                           (= p
                              ext))
                       (not (elem@@BLK p
                                       PLF))))))

(assert (= BLK
           (bunion@@BLK (bunion@@BLK (mk-set@@BLK ent)
                                     (mk-set@@BLK ext))
                        PLF)))

(assert (not (= (and (elem@@TRAIN t_0
                                  in@prime)
                     (or (elem@@BLK (select loc@prime
                                            t_0)
                                    PLF)
                         (= (select loc@prime
                                    t_0)
                            ent)))
                (and (elem@@TRAIN t_0
                                  (set-diff@@TRAIN in
                                                   (mk-set@@TRAIN t)))
                     (or (elem@@BLK (select (dom-subt@@TRAIN@@BLK (mk-set@@TRAIN t)
                                                                  loc)
                                            t_0)
                                    PLF)
                         (= (select (dom-subt@@TRAIN@@BLK (mk-set@@TRAIN t)
                                                          loc)
                                    t_0)
                            ent))))))

(check-sat-using (or-else (then qe smt) (then skip smt) (then (using-params simplify :expand-power true) smt)))

(pop)
(echo "> train0/leave/CO/co1/step (329,1)")
(push)
(declare-sort BLK 0)
(declare-sort LOC 0)
(declare-sort TRAIN 0)
(define-sort pfun (a b) (Array a b))
(declare-sort set 1)
(declare-const PLF (set BLK))
(declare-const BLK (set BLK))
(declare-const LOC (set LOC))
(declare-const TRAIN (set TRAIN))
(declare-const ent BLK)
(declare-const ext BLK)
(declare-const in (set TRAIN))
(declare-const in@prime (set TRAIN))
(declare-const loc (pfun TRAIN BLK))
(declare-const loc@prime (pfun TRAIN BLK))
(declare-const p BLK)
(declare-const q BLK)
(declare-const t TRAIN)
(declare-const t_0 TRAIN)
(declare-const t_1 TRAIN)
(declare-const t_2 TRAIN)
(declare-const t_3 TRAIN)
(declare-fun apply@@TRAIN@@BLK ((pfun TRAIN BLK) TRAIN) BLK)
(declare-fun dom-rest@@TRAIN@@BLK ((set TRAIN) (pfun TRAIN BLK)) (pfun TRAIN BLK))
(declare-fun dom-subt@@TRAIN@@BLK ((set TRAIN) (pfun TRAIN BLK)) (pfun TRAIN BLK))
(declare-fun dom@@TRAIN@@BLK ((pfun TRAIN BLK)) (set TRAIN))
(declare-fun elem@@BLK (BLK (set BLK)) Bool)
(declare-fun elem@@LOC (LOC (set LOC)) Bool)
(declare-fun elem@@TRAIN (TRAIN (set TRAIN)) Bool)
(declare-fun elem@Open@@pfun@@TRAIN@@BLK@Close ((pfun TRAIN BLK) (set (pfun TRAIN BLK))) Bool)
(declare-fun empty-fun@@TRAIN@@BLK () (pfun TRAIN BLK))
(declare-fun empty-set@@BLK () (set BLK))
(declare-fun empty-set@@LOC () (set LOC))
(declare-fun empty-set@@TRAIN () (set TRAIN))
(declare-fun empty-set@Open@@pfun@@TRAIN@@BLK@Close () (set (pfun TRAIN BLK)))
(declare-fun intersect@@BLK ((set BLK) (set BLK)) (set BLK))
(declare-fun intersect@@LOC ((set LOC) (set LOC)) (set LOC))
(declare-fun intersect@@TRAIN ((set TRAIN) (set TRAIN)) (set TRAIN))
(declare-fun intersect@Open@@pfun@@TRAIN@@BLK@Close ((set (pfun TRAIN BLK)) (set (pfun TRAIN BLK))) (set (pfun TRAIN BLK)))
(declare-fun mk-fun@@TRAIN@@BLK (TRAIN BLK) (pfun TRAIN BLK))
(declare-fun mk-set@@BLK (BLK) (set BLK))
(declare-fun mk-set@@LOC (LOC) (set LOC))
(declare-fun mk-set@@TRAIN (TRAIN) (set TRAIN))
(declare-fun mk-set@Open@@pfun@@TRAIN@@BLK@Close ((pfun TRAIN BLK)) (set (pfun TRAIN BLK)))
(declare-fun ovl@@TRAIN@@BLK ((pfun TRAIN BLK) (pfun TRAIN BLK)) (pfun TRAIN BLK))
(declare-fun set-diff@@BLK ((set BLK) (set BLK)) (set BLK))
(declare-fun set-diff@@LOC ((set LOC) (set LOC)) (set LOC))
(declare-fun set-diff@@TRAIN ((set TRAIN) (set TRAIN)) (set TRAIN))
(declare-fun set-diff@Open@@pfun@@TRAIN@@BLK@Close ((set (pfun TRAIN BLK)) (set (pfun TRAIN BLK))) (set (pfun TRAIN BLK)))
(declare-fun tfun@@TRAIN@@BLK ((set TRAIN) (set BLK)) (set (pfun TRAIN BLK)))
(declare-fun bunion@@BLK ((set BLK) (set BLK)) (set BLK))
(declare-fun bunion@@LOC ((set LOC) (set LOC)) (set LOC))
(declare-fun bunion@@TRAIN ((set TRAIN) (set TRAIN)) (set TRAIN))
(declare-fun bunion@Open@@pfun@@TRAIN@@BLK@Close ((set (pfun TRAIN BLK)) (set (pfun TRAIN BLK))) (set (pfun TRAIN BLK)))
(assert (forall ( (x BLK)
                  (y BLK) )
                (= (elem@@BLK x
                              (mk-set@@BLK y))
                   (= x
                      y))))

(assert (forall ( (x BLK)
                  (s1 (set BLK))
                  (s2 (set BLK)) )
                (= (elem@@BLK x
                              (set-diff@@BLK s1
                                             s2))
                   (and (elem@@BLK x
                                   s1)
                        (not (elem@@BLK x
                                        s2))))))

(assert (forall ( (x BLK)
                  (s1 (set BLK))
                  (s2 (set BLK)) )
                (= (elem@@BLK x
                              (intersect@@BLK s1
                                              s2))
                   (and (elem@@BLK x
                                   s1)
                        (elem@@BLK x
                                   s2)))))

(assert (forall ( (x BLK)
                  (s1 (set BLK))
                  (s2 (set BLK)) )
                (= (elem@@BLK x
                              (bunion@@BLK s1
                                           s2))
                   (or (elem@@BLK x
                                  s1)
                       (elem@@BLK x
                                  s2)))))

(assert (forall ( (x BLK)
                  (s1 (set BLK))
                  (s2 (set BLK)) )
                (not (elem@@BLK x
                                empty-set@@BLK))))

(assert (forall ( (x LOC)
                  (y LOC) )
                (= (elem@@LOC x
                              (mk-set@@LOC y))
                   (= x
                      y))))

(assert (forall ( (x LOC)
                  (s1 (set LOC))
                  (s2 (set LOC)) )
                (= (elem@@LOC x
                              (set-diff@@LOC s1
                                             s2))
                   (and (elem@@LOC x
                                   s1)
                        (not (elem@@LOC x
                                        s2))))))

(assert (forall ( (x LOC)
                  (s1 (set LOC))
                  (s2 (set LOC)) )
                (= (elem@@LOC x
                              (intersect@@LOC s1
                                              s2))
                   (and (elem@@LOC x
                                   s1)
                        (elem@@LOC x
                                   s2)))))

(assert (forall ( (x LOC)
                  (s1 (set LOC))
                  (s2 (set LOC)) )
                (= (elem@@LOC x
                              (bunion@@LOC s1
                                           s2))
                   (or (elem@@LOC x
                                  s1)
                       (elem@@LOC x
                                  s2)))))

(assert (forall ( (x LOC)
                  (s1 (set LOC))
                  (s2 (set LOC)) )
                (not (elem@@LOC x
                                empty-set@@LOC))))

(assert (forall ( (x TRAIN)
                  (y TRAIN) )
                (= (elem@@TRAIN x
                                (mk-set@@TRAIN y))
                   (= x
                      y))))

(assert (forall ( (x TRAIN)
                  (s1 (set TRAIN))
                  (s2 (set TRAIN)) )
                (= (elem@@TRAIN x
                                (set-diff@@TRAIN s1
                                                 s2))
                   (and (elem@@TRAIN x
                                     s1)
                        (not (elem@@TRAIN x
                                          s2))))))

(assert (forall ( (x TRAIN)
                  (s1 (set TRAIN))
                  (s2 (set TRAIN)) )
                (= (elem@@TRAIN x
                                (intersect@@TRAIN s1
                                                  s2))
                   (and (elem@@TRAIN x
                                     s1)
                        (elem@@TRAIN x
                                     s2)))))

(assert (forall ( (x TRAIN)
                  (s1 (set TRAIN))
                  (s2 (set TRAIN)) )
                (= (elem@@TRAIN x
                                (bunion@@TRAIN s1
                                               s2))
                   (or (elem@@TRAIN x
                                    s1)
                       (elem@@TRAIN x
                                    s2)))))

(assert (forall ( (x TRAIN)
                  (s1 (set TRAIN))
                  (s2 (set TRAIN)) )
                (not (elem@@TRAIN x
                                  empty-set@@TRAIN))))

(assert (forall ( (f1 (pfun TRAIN
                            BLK))
                  (f2 (pfun TRAIN
                            BLK)) )
                (= (bunion@@TRAIN (dom@@TRAIN@@BLK f1)
                                  (dom@@TRAIN@@BLK f2))
                   (dom@@TRAIN@@BLK (ovl@@TRAIN@@BLK f1
                                                     f2)))))

(assert (= (dom@@TRAIN@@BLK empty-fun@@TRAIN@@BLK)
           empty-set@@TRAIN))

(assert (forall ( (x TRAIN)
                  (y BLK) )
                (= (dom@@TRAIN@@BLK (mk-fun@@TRAIN@@BLK x
                                                        y))
                   (mk-set@@TRAIN x))))

(assert (forall ( (f1 (pfun TRAIN
                            BLK))
                  (f2 (pfun TRAIN
                            BLK))
                  (x TRAIN) )
                (=> (elem@@TRAIN x
                                 (dom@@TRAIN@@BLK f2))
                    (= (select (ovl@@TRAIN@@BLK f1
                                                f2)
                               x)
                       (select f2
                               x)))))

(assert (forall ( (f1 (pfun TRAIN
                            BLK))
                  (f2 (pfun TRAIN
                            BLK))
                  (x TRAIN) )
                (=> (elem@@TRAIN x
                                 (set-diff@@TRAIN (dom@@TRAIN@@BLK f1)
                                                  (dom@@TRAIN@@BLK f2)))
                    (= (select (ovl@@TRAIN@@BLK f1
                                                f2)
                               x)
                       (select f1
                               x)))))

(assert (forall ( (f1 (pfun TRAIN
                            BLK))
                  (s1 (set TRAIN)) )
                (= (dom@@TRAIN@@BLK (dom-subt@@TRAIN@@BLK s1
                                                          f1))
                   (set-diff@@TRAIN (dom@@TRAIN@@BLK f1)
                                    s1))))

(assert (forall ( (x TRAIN)
                  (y BLK) )
                (= (select (mk-fun@@TRAIN@@BLK x
                                               y)
                           x)
                   y)))

(assert (forall ( (f1 (pfun TRAIN
                            BLK))
                  (s1 (set TRAIN))
                  (x TRAIN) )
                (=> (elem@@TRAIN x
                                 (intersect@@TRAIN s1
                                                   (dom@@TRAIN@@BLK f1)))
                    (= (select (dom-rest@@TRAIN@@BLK s1
                                                     f1)
                               x)
                       (select f1
                               x)))))

(assert (forall ( (f1 (pfun TRAIN
                            BLK))
                  (s1 (set TRAIN))
                  (x TRAIN) )
                (=> (elem@@TRAIN x
                                 (set-diff@@TRAIN (dom@@TRAIN@@BLK f1)
                                                  s1))
                    (= (select (dom-subt@@TRAIN@@BLK s1
                                                     f1)
                               x)
                       (select f1
                               x)))))

(assert (forall ( (x (pfun TRAIN
                           BLK))
                  (y (pfun TRAIN
                           BLK)) )
                (= (elem@Open@@pfun@@TRAIN@@BLK@Close x
                                                      (mk-set@Open@@pfun@@TRAIN@@BLK@Close y))
                   (= x
                      y))))

(assert (forall ( (x (pfun TRAIN
                           BLK))
                  (s1 (set (pfun TRAIN
                                 BLK)))
                  (s2 (set (pfun TRAIN
                                 BLK))) )
                (= (elem@Open@@pfun@@TRAIN@@BLK@Close x
                                                      (set-diff@Open@@pfun@@TRAIN@@BLK@Close s1
                                                                                             s2))
                   (and (elem@Open@@pfun@@TRAIN@@BLK@Close x
                                                           s1)
                        (not (elem@Open@@pfun@@TRAIN@@BLK@Close x
                                                                s2))))))

(assert (forall ( (x (pfun TRAIN
                           BLK))
                  (s1 (set (pfun TRAIN
                                 BLK)))
                  (s2 (set (pfun TRAIN
                                 BLK))) )
                (= (elem@Open@@pfun@@TRAIN@@BLK@Close x
                                                      (intersect@Open@@pfun@@TRAIN@@BLK@Close s1
                                                                                              s2))
                   (and (elem@Open@@pfun@@TRAIN@@BLK@Close x
                                                           s1)
                        (elem@Open@@pfun@@TRAIN@@BLK@Close x
                                                           s2)))))

(assert (forall ( (x (pfun TRAIN
                           BLK))
                  (s1 (set (pfun TRAIN
                                 BLK)))
                  (s2 (set (pfun TRAIN
                                 BLK))) )
                (= (elem@Open@@pfun@@TRAIN@@BLK@Close x
                                                      (bunion@Open@@pfun@@TRAIN@@BLK@Close s1
                                                                                           s2))
                   (or (elem@Open@@pfun@@TRAIN@@BLK@Close x
                                                          s1)
                       (elem@Open@@pfun@@TRAIN@@BLK@Close x
                                                          s2)))))

(assert (forall ( (x (pfun TRAIN
                           BLK))
                  (s1 (set (pfun TRAIN
                                 BLK)))
                  (s2 (set (pfun TRAIN
                                 BLK))) )
                (not (elem@Open@@pfun@@TRAIN@@BLK@Close x
                                                        empty-set@Open@@pfun@@TRAIN@@BLK@Close))))

(assert (and (not (= ent
                     ext))
             (not (elem@@BLK ent
                             PLF))
             (not (elem@@BLK ext
                             PLF))))

(assert (forall ( (p BLK) )
                (=> true
                    (= (not (= p
                               ext))
                       (elem@@BLK p
                                  (bunion@@BLK (mk-set@@BLK ent)
                                               PLF))))))

(assert (forall ( (p BLK) )
                (=> true
                    (= (not (= p
                               ent))
                       (elem@@BLK p
                                  (bunion@@BLK (mk-set@@BLK ext)
                                               PLF))))))

(assert (forall ( (p BLK) )
                (=> true
                    (= (or (= p
                              ent)
                           (= p
                              ext))
                       (not (elem@@BLK p
                                       PLF))))))

(assert (= BLK
           (bunion@@BLK (bunion@@BLK (mk-set@@BLK ent)
                                     (mk-set@@BLK ext))
                        PLF)))

(assert (not (= (and (elem@@TRAIN t_0
                                  (set-diff@@TRAIN in
                                                   (mk-set@@TRAIN t)))
                     (or (elem@@BLK (select (dom-subt@@TRAIN@@BLK (mk-set@@TRAIN t)
                                                                  loc)
                                            t_0)
                                    PLF)
                         (= (select (dom-subt@@TRAIN@@BLK (mk-set@@TRAIN t)
                                                          loc)
                                    t_0)
                            ent)))
                (or (and (elem@@TRAIN t_0
                                      (set-diff@@TRAIN in
                                                       (mk-set@@TRAIN t)))
                         (elem@@BLK (select (dom-subt@@TRAIN@@BLK (mk-set@@TRAIN t)
                                                                  loc)
                                            t_0)
                                    PLF))
                    (and (elem@@TRAIN t_0
                                      (set-diff@@TRAIN in
                                                       (mk-set@@TRAIN t)))
                         (= (select (dom-subt@@TRAIN@@BLK (mk-set@@TRAIN t)
                                                          loc)
                                    t_0)
                            ent))))))

(check-sat-using (or-else (then qe smt) (then skip smt) (then (using-params simplify :expand-power true) smt)))

(pop)
(echo "> train0/leave/CO/co1/step (334,1)")
(push)
(declare-sort BLK 0)
(declare-sort LOC 0)
(declare-sort TRAIN 0)
(define-sort pfun (a b) (Array a b))
(declare-sort set 1)
(declare-const PLF (set BLK))
(declare-const BLK (set BLK))
(declare-const LOC (set LOC))
(declare-const TRAIN (set TRAIN))
(declare-const ent BLK)
(declare-const ext BLK)
(declare-const in (set TRAIN))
(declare-const in@prime (set TRAIN))
(declare-const loc (pfun TRAIN BLK))
(declare-const loc@prime (pfun TRAIN BLK))
(declare-const p BLK)
(declare-const q BLK)
(declare-const t TRAIN)
(declare-const t_0 TRAIN)
(declare-const t_1 TRAIN)
(declare-const t_2 TRAIN)
(declare-const t_3 TRAIN)
(declare-fun apply@@TRAIN@@BLK ((pfun TRAIN BLK) TRAIN) BLK)
(declare-fun dom-rest@@TRAIN@@BLK ((set TRAIN) (pfun TRAIN BLK)) (pfun TRAIN BLK))
(declare-fun dom-subt@@TRAIN@@BLK ((set TRAIN) (pfun TRAIN BLK)) (pfun TRAIN BLK))
(declare-fun dom@@TRAIN@@BLK ((pfun TRAIN BLK)) (set TRAIN))
(declare-fun elem@@BLK (BLK (set BLK)) Bool)
(declare-fun elem@@LOC (LOC (set LOC)) Bool)
(declare-fun elem@@TRAIN (TRAIN (set TRAIN)) Bool)
(declare-fun elem@Open@@pfun@@TRAIN@@BLK@Close ((pfun TRAIN BLK) (set (pfun TRAIN BLK))) Bool)
(declare-fun empty-fun@@TRAIN@@BLK () (pfun TRAIN BLK))
(declare-fun empty-set@@BLK () (set BLK))
(declare-fun empty-set@@LOC () (set LOC))
(declare-fun empty-set@@TRAIN () (set TRAIN))
(declare-fun empty-set@Open@@pfun@@TRAIN@@BLK@Close () (set (pfun TRAIN BLK)))
(declare-fun intersect@@BLK ((set BLK) (set BLK)) (set BLK))
(declare-fun intersect@@LOC ((set LOC) (set LOC)) (set LOC))
(declare-fun intersect@@TRAIN ((set TRAIN) (set TRAIN)) (set TRAIN))
(declare-fun intersect@Open@@pfun@@TRAIN@@BLK@Close ((set (pfun TRAIN BLK)) (set (pfun TRAIN BLK))) (set (pfun TRAIN BLK)))
(declare-fun mk-fun@@TRAIN@@BLK (TRAIN BLK) (pfun TRAIN BLK))
(declare-fun mk-set@@BLK (BLK) (set BLK))
(declare-fun mk-set@@LOC (LOC) (set LOC))
(declare-fun mk-set@@TRAIN (TRAIN) (set TRAIN))
(declare-fun mk-set@Open@@pfun@@TRAIN@@BLK@Close ((pfun TRAIN BLK)) (set (pfun TRAIN BLK)))
(declare-fun ovl@@TRAIN@@BLK ((pfun TRAIN BLK) (pfun TRAIN BLK)) (pfun TRAIN BLK))
(declare-fun set-diff@@BLK ((set BLK) (set BLK)) (set BLK))
(declare-fun set-diff@@LOC ((set LOC) (set LOC)) (set LOC))
(declare-fun set-diff@@TRAIN ((set TRAIN) (set TRAIN)) (set TRAIN))
(declare-fun set-diff@Open@@pfun@@TRAIN@@BLK@Close ((set (pfun TRAIN BLK)) (set (pfun TRAIN BLK))) (set (pfun TRAIN BLK)))
(declare-fun tfun@@TRAIN@@BLK ((set TRAIN) (set BLK)) (set (pfun TRAIN BLK)))
(declare-fun bunion@@BLK ((set BLK) (set BLK)) (set BLK))
(declare-fun bunion@@LOC ((set LOC) (set LOC)) (set LOC))
(declare-fun bunion@@TRAIN ((set TRAIN) (set TRAIN)) (set TRAIN))
(declare-fun bunion@Open@@pfun@@TRAIN@@BLK@Close ((set (pfun TRAIN BLK)) (set (pfun TRAIN BLK))) (set (pfun TRAIN BLK)))
(assert (= (dom@@TRAIN@@BLK loc)
           in))

(assert (forall ( (x BLK)
                  (y BLK) )
                (= (elem@@BLK x
                              (mk-set@@BLK y))
                   (= x
                      y))))

(assert (forall ( (x BLK)
                  (s1 (set BLK))
                  (s2 (set BLK)) )
                (= (elem@@BLK x
                              (set-diff@@BLK s1
                                             s2))
                   (and (elem@@BLK x
                                   s1)
                        (not (elem@@BLK x
                                        s2))))))

(assert (forall ( (x BLK)
                  (s1 (set BLK))
                  (s2 (set BLK)) )
                (= (elem@@BLK x
                              (intersect@@BLK s1
                                              s2))
                   (and (elem@@BLK x
                                   s1)
                        (elem@@BLK x
                                   s2)))))

(assert (forall ( (x BLK)
                  (s1 (set BLK))
                  (s2 (set BLK)) )
                (= (elem@@BLK x
                              (bunion@@BLK s1
                                           s2))
                   (or (elem@@BLK x
                                  s1)
                       (elem@@BLK x
                                  s2)))))

(assert (forall ( (x BLK)
                  (s1 (set BLK))
                  (s2 (set BLK)) )
                (not (elem@@BLK x
                                empty-set@@BLK))))

(assert (forall ( (x LOC)
                  (y LOC) )
                (= (elem@@LOC x
                              (mk-set@@LOC y))
                   (= x
                      y))))

(assert (forall ( (x LOC)
                  (s1 (set LOC))
                  (s2 (set LOC)) )
                (= (elem@@LOC x
                              (set-diff@@LOC s1
                                             s2))
                   (and (elem@@LOC x
                                   s1)
                        (not (elem@@LOC x
                                        s2))))))

(assert (forall ( (x LOC)
                  (s1 (set LOC))
                  (s2 (set LOC)) )
                (= (elem@@LOC x
                              (intersect@@LOC s1
                                              s2))
                   (and (elem@@LOC x
                                   s1)
                        (elem@@LOC x
                                   s2)))))

(assert (forall ( (x LOC)
                  (s1 (set LOC))
                  (s2 (set LOC)) )
                (= (elem@@LOC x
                              (bunion@@LOC s1
                                           s2))
                   (or (elem@@LOC x
                                  s1)
                       (elem@@LOC x
                                  s2)))))

(assert (forall ( (x LOC)
                  (s1 (set LOC))
                  (s2 (set LOC)) )
                (not (elem@@LOC x
                                empty-set@@LOC))))

(assert (forall ( (x TRAIN)
                  (y TRAIN) )
                (= (elem@@TRAIN x
                                (mk-set@@TRAIN y))
                   (= x
                      y))))

(assert (forall ( (x TRAIN)
                  (s1 (set TRAIN))
                  (s2 (set TRAIN)) )
                (= (elem@@TRAIN x
                                (set-diff@@TRAIN s1
                                                 s2))
                   (and (elem@@TRAIN x
                                     s1)
                        (not (elem@@TRAIN x
                                          s2))))))

(assert (forall ( (x TRAIN)
                  (s1 (set TRAIN))
                  (s2 (set TRAIN)) )
                (= (elem@@TRAIN x
                                (intersect@@TRAIN s1
                                                  s2))
                   (and (elem@@TRAIN x
                                     s1)
                        (elem@@TRAIN x
                                     s2)))))

(assert (forall ( (x TRAIN)
                  (s1 (set TRAIN))
                  (s2 (set TRAIN)) )
                (= (elem@@TRAIN x
                                (bunion@@TRAIN s1
                                               s2))
                   (or (elem@@TRAIN x
                                    s1)
                       (elem@@TRAIN x
                                    s2)))))

(assert (forall ( (x TRAIN)
                  (s1 (set TRAIN))
                  (s2 (set TRAIN)) )
                (not (elem@@TRAIN x
                                  empty-set@@TRAIN))))

(assert (forall ( (f1 (pfun TRAIN
                            BLK))
                  (f2 (pfun TRAIN
                            BLK)) )
                (= (bunion@@TRAIN (dom@@TRAIN@@BLK f1)
                                  (dom@@TRAIN@@BLK f2))
                   (dom@@TRAIN@@BLK (ovl@@TRAIN@@BLK f1
                                                     f2)))))

(assert (= (dom@@TRAIN@@BLK empty-fun@@TRAIN@@BLK)
           empty-set@@TRAIN))

(assert (forall ( (x TRAIN)
                  (y BLK) )
                (= (dom@@TRAIN@@BLK (mk-fun@@TRAIN@@BLK x
                                                        y))
                   (mk-set@@TRAIN x))))

(assert (forall ( (f1 (pfun TRAIN
                            BLK))
                  (f2 (pfun TRAIN
                            BLK))
                  (x TRAIN) )
                (=> (elem@@TRAIN x
                                 (dom@@TRAIN@@BLK f2))
                    (= (select (ovl@@TRAIN@@BLK f1
                                                f2)
                               x)
                       (select f2
                               x)))))

(assert (forall ( (f1 (pfun TRAIN
                            BLK))
                  (f2 (pfun TRAIN
                            BLK))
                  (x TRAIN) )
                (=> (elem@@TRAIN x
                                 (set-diff@@TRAIN (dom@@TRAIN@@BLK f1)
                                                  (dom@@TRAIN@@BLK f2)))
                    (= (select (ovl@@TRAIN@@BLK f1
                                                f2)
                               x)
                       (select f1
                               x)))))

(assert (forall ( (f1 (pfun TRAIN
                            BLK))
                  (s1 (set TRAIN)) )
                (= (dom@@TRAIN@@BLK (dom-subt@@TRAIN@@BLK s1
                                                          f1))
                   (set-diff@@TRAIN (dom@@TRAIN@@BLK f1)
                                    s1))))

(assert (forall ( (x TRAIN)
                  (y BLK) )
                (= (select (mk-fun@@TRAIN@@BLK x
                                               y)
                           x)
                   y)))

(assert (forall ( (f1 (pfun TRAIN
                            BLK))
                  (s1 (set TRAIN))
                  (x TRAIN) )
                (=> (elem@@TRAIN x
                                 (intersect@@TRAIN s1
                                                   (dom@@TRAIN@@BLK f1)))
                    (= (select (dom-rest@@TRAIN@@BLK s1
                                                     f1)
                               x)
                       (select f1
                               x)))))

(assert (forall ( (f1 (pfun TRAIN
                            BLK))
                  (s1 (set TRAIN))
                  (x TRAIN) )
                (=> (elem@@TRAIN x
                                 (set-diff@@TRAIN (dom@@TRAIN@@BLK f1)
                                                  s1))
                    (= (select (dom-subt@@TRAIN@@BLK s1
                                                     f1)
                               x)
                       (select f1
                               x)))))

(assert (forall ( (x (pfun TRAIN
                           BLK))
                  (y (pfun TRAIN
                           BLK)) )
                (= (elem@Open@@pfun@@TRAIN@@BLK@Close x
                                                      (mk-set@Open@@pfun@@TRAIN@@BLK@Close y))
                   (= x
                      y))))

(assert (forall ( (x (pfun TRAIN
                           BLK))
                  (s1 (set (pfun TRAIN
                                 BLK)))
                  (s2 (set (pfun TRAIN
                                 BLK))) )
                (= (elem@Open@@pfun@@TRAIN@@BLK@Close x
                                                      (set-diff@Open@@pfun@@TRAIN@@BLK@Close s1
                                                                                             s2))
                   (and (elem@Open@@pfun@@TRAIN@@BLK@Close x
                                                           s1)
                        (not (elem@Open@@pfun@@TRAIN@@BLK@Close x
                                                                s2))))))

(assert (forall ( (x (pfun TRAIN
                           BLK))
                  (s1 (set (pfun TRAIN
                                 BLK)))
                  (s2 (set (pfun TRAIN
                                 BLK))) )
                (= (elem@Open@@pfun@@TRAIN@@BLK@Close x
                                                      (intersect@Open@@pfun@@TRAIN@@BLK@Close s1
                                                                                              s2))
                   (and (elem@Open@@pfun@@TRAIN@@BLK@Close x
                                                           s1)
                        (elem@Open@@pfun@@TRAIN@@BLK@Close x
                                                           s2)))))

(assert (forall ( (x (pfun TRAIN
                           BLK))
                  (s1 (set (pfun TRAIN
                                 BLK)))
                  (s2 (set (pfun TRAIN
                                 BLK))) )
                (= (elem@Open@@pfun@@TRAIN@@BLK@Close x
                                                      (bunion@Open@@pfun@@TRAIN@@BLK@Close s1
                                                                                           s2))
                   (or (elem@Open@@pfun@@TRAIN@@BLK@Close x
                                                          s1)
                       (elem@Open@@pfun@@TRAIN@@BLK@Close x
                                                          s2)))))

(assert (forall ( (x (pfun TRAIN
                           BLK))
                  (s1 (set (pfun TRAIN
                                 BLK)))
                  (s2 (set (pfun TRAIN
                                 BLK))) )
                (not (elem@Open@@pfun@@TRAIN@@BLK@Close x
                                                        empty-set@Open@@pfun@@TRAIN@@BLK@Close))))

(assert (and (not (= ent
                     ext))
             (not (elem@@BLK ent
                             PLF))
             (not (elem@@BLK ext
                             PLF))))

(assert (forall ( (p BLK) )
                (=> true
                    (= (not (= p
                               ext))
                       (elem@@BLK p
                                  (bunion@@BLK (mk-set@@BLK ent)
                                               PLF))))))

(assert (forall ( (p BLK) )
                (=> true
                    (= (not (= p
                               ent))
                       (elem@@BLK p
                                  (bunion@@BLK (mk-set@@BLK ext)
                                               PLF))))))

(assert (forall ( (p BLK) )
                (=> true
                    (= (or (= p
                              ent)
                           (= p
                              ext))
                       (not (elem@@BLK p
                                       PLF))))))

(assert (= BLK
           (bunion@@BLK (bunion@@BLK (mk-set@@BLK ent)
                                     (mk-set@@BLK ext))
                        PLF)))

(assert (not (= (or (and (elem@@TRAIN t_0
                                      (set-diff@@TRAIN in
                                                       (mk-set@@TRAIN t)))
                         (elem@@BLK (select (dom-subt@@TRAIN@@BLK (mk-set@@TRAIN t)
                                                                  loc)
                                            t_0)
                                    PLF))
                    (and (elem@@TRAIN t_0
                                      (set-diff@@TRAIN in
                                                       (mk-set@@TRAIN t)))
                         (= (select (dom-subt@@TRAIN@@BLK (mk-set@@TRAIN t)
                                                          loc)
                                    t_0)
                            ent)))
                (and (elem@@TRAIN t_0
                                  (set-diff@@TRAIN in
                                                   (mk-set@@TRAIN t)))
                     (or (elem@@BLK (select loc
                                            t_0)
                                    PLF)
                         (= (select loc
                                    t_0)
                            ent))))))

(check-sat-using (or-else (then qe smt) (then skip smt) (then (using-params simplify :expand-power true) smt)))

(pop)
(echo "> train0/leave/CO/co1/step (337,1)")
(push)
(declare-sort BLK 0)
(declare-sort LOC 0)
(declare-sort TRAIN 0)
(define-sort pfun (a b) (Array a b))
(declare-sort set 1)
(declare-const PLF (set BLK))
(declare-const BLK (set BLK))
(declare-const LOC (set LOC))
(declare-const TRAIN (set TRAIN))
(declare-const ent BLK)
(declare-const ext BLK)
(declare-const in (set TRAIN))
(declare-const in@prime (set TRAIN))
(declare-const loc (pfun TRAIN BLK))
(declare-const loc@prime (pfun TRAIN BLK))
(declare-const p BLK)
(declare-const q BLK)
(declare-const t TRAIN)
(declare-const t_0 TRAIN)
(declare-const t_1 TRAIN)
(declare-const t_2 TRAIN)
(declare-const t_3 TRAIN)
(declare-fun apply@@TRAIN@@BLK ((pfun TRAIN BLK) TRAIN) BLK)
(declare-fun dom-rest@@TRAIN@@BLK ((set TRAIN) (pfun TRAIN BLK)) (pfun TRAIN BLK))
(declare-fun dom-subt@@TRAIN@@BLK ((set TRAIN) (pfun TRAIN BLK)) (pfun TRAIN BLK))
(declare-fun dom@@TRAIN@@BLK ((pfun TRAIN BLK)) (set TRAIN))
(declare-fun elem@@BLK (BLK (set BLK)) Bool)
(declare-fun elem@@LOC (LOC (set LOC)) Bool)
(declare-fun elem@@TRAIN (TRAIN (set TRAIN)) Bool)
(declare-fun elem@Open@@pfun@@TRAIN@@BLK@Close ((pfun TRAIN BLK) (set (pfun TRAIN BLK))) Bool)
(declare-fun empty-fun@@TRAIN@@BLK () (pfun TRAIN BLK))
(declare-fun empty-set@@BLK () (set BLK))
(declare-fun empty-set@@LOC () (set LOC))
(declare-fun empty-set@@TRAIN () (set TRAIN))
(declare-fun empty-set@Open@@pfun@@TRAIN@@BLK@Close () (set (pfun TRAIN BLK)))
(declare-fun intersect@@BLK ((set BLK) (set BLK)) (set BLK))
(declare-fun intersect@@LOC ((set LOC) (set LOC)) (set LOC))
(declare-fun intersect@@TRAIN ((set TRAIN) (set TRAIN)) (set TRAIN))
(declare-fun intersect@Open@@pfun@@TRAIN@@BLK@Close ((set (pfun TRAIN BLK)) (set (pfun TRAIN BLK))) (set (pfun TRAIN BLK)))
(declare-fun mk-fun@@TRAIN@@BLK (TRAIN BLK) (pfun TRAIN BLK))
(declare-fun mk-set@@BLK (BLK) (set BLK))
(declare-fun mk-set@@LOC (LOC) (set LOC))
(declare-fun mk-set@@TRAIN (TRAIN) (set TRAIN))
(declare-fun mk-set@Open@@pfun@@TRAIN@@BLK@Close ((pfun TRAIN BLK)) (set (pfun TRAIN BLK)))
(declare-fun ovl@@TRAIN@@BLK ((pfun TRAIN BLK) (pfun TRAIN BLK)) (pfun TRAIN BLK))
(declare-fun set-diff@@BLK ((set BLK) (set BLK)) (set BLK))
(declare-fun set-diff@@LOC ((set LOC) (set LOC)) (set LOC))
(declare-fun set-diff@@TRAIN ((set TRAIN) (set TRAIN)) (set TRAIN))
(declare-fun set-diff@Open@@pfun@@TRAIN@@BLK@Close ((set (pfun TRAIN BLK)) (set (pfun TRAIN BLK))) (set (pfun TRAIN BLK)))
(declare-fun tfun@@TRAIN@@BLK ((set TRAIN) (set BLK)) (set (pfun TRAIN BLK)))
(declare-fun bunion@@BLK ((set BLK) (set BLK)) (set BLK))
(declare-fun bunion@@LOC ((set LOC) (set LOC)) (set LOC))
(declare-fun bunion@@TRAIN ((set TRAIN) (set TRAIN)) (set TRAIN))
(declare-fun bunion@Open@@pfun@@TRAIN@@BLK@Close ((set (pfun TRAIN BLK)) (set (pfun TRAIN BLK))) (set (pfun TRAIN BLK)))
(assert (forall ( (x BLK)
                  (y BLK) )
                (= (elem@@BLK x
                              (mk-set@@BLK y))
                   (= x
                      y))))

(assert (forall ( (x BLK)
                  (s1 (set BLK))
                  (s2 (set BLK)) )
                (= (elem@@BLK x
                              (set-diff@@BLK s1
                                             s2))
                   (and (elem@@BLK x
                                   s1)
                        (not (elem@@BLK x
                                        s2))))))

(assert (forall ( (x BLK)
                  (s1 (set BLK))
                  (s2 (set BLK)) )
                (= (elem@@BLK x
                              (intersect@@BLK s1
                                              s2))
                   (and (elem@@BLK x
                                   s1)
                        (elem@@BLK x
                                   s2)))))

(assert (forall ( (x BLK)
                  (s1 (set BLK))
                  (s2 (set BLK)) )
                (= (elem@@BLK x
                              (bunion@@BLK s1
                                           s2))
                   (or (elem@@BLK x
                                  s1)
                       (elem@@BLK x
                                  s2)))))

(assert (forall ( (x BLK)
                  (s1 (set BLK))
                  (s2 (set BLK)) )
                (not (elem@@BLK x
                                empty-set@@BLK))))

(assert (forall ( (x LOC)
                  (y LOC) )
                (= (elem@@LOC x
                              (mk-set@@LOC y))
                   (= x
                      y))))

(assert (forall ( (x LOC)
                  (s1 (set LOC))
                  (s2 (set LOC)) )
                (= (elem@@LOC x
                              (set-diff@@LOC s1
                                             s2))
                   (and (elem@@LOC x
                                   s1)
                        (not (elem@@LOC x
                                        s2))))))

(assert (forall ( (x LOC)
                  (s1 (set LOC))
                  (s2 (set LOC)) )
                (= (elem@@LOC x
                              (intersect@@LOC s1
                                              s2))
                   (and (elem@@LOC x
                                   s1)
                        (elem@@LOC x
                                   s2)))))

(assert (forall ( (x LOC)
                  (s1 (set LOC))
                  (s2 (set LOC)) )
                (= (elem@@LOC x
                              (bunion@@LOC s1
                                           s2))
                   (or (elem@@LOC x
                                  s1)
                       (elem@@LOC x
                                  s2)))))

(assert (forall ( (x LOC)
                  (s1 (set LOC))
                  (s2 (set LOC)) )
                (not (elem@@LOC x
                                empty-set@@LOC))))

(assert (forall ( (x TRAIN)
                  (y TRAIN) )
                (= (elem@@TRAIN x
                                (mk-set@@TRAIN y))
                   (= x
                      y))))

(assert (forall ( (x TRAIN)
                  (s1 (set TRAIN))
                  (s2 (set TRAIN)) )
                (= (elem@@TRAIN x
                                (set-diff@@TRAIN s1
                                                 s2))
                   (and (elem@@TRAIN x
                                     s1)
                        (not (elem@@TRAIN x
                                          s2))))))

(assert (forall ( (x TRAIN)
                  (s1 (set TRAIN))
                  (s2 (set TRAIN)) )
                (= (elem@@TRAIN x
                                (intersect@@TRAIN s1
                                                  s2))
                   (and (elem@@TRAIN x
                                     s1)
                        (elem@@TRAIN x
                                     s2)))))

(assert (forall ( (x TRAIN)
                  (s1 (set TRAIN))
                  (s2 (set TRAIN)) )
                (= (elem@@TRAIN x
                                (bunion@@TRAIN s1
                                               s2))
                   (or (elem@@TRAIN x
                                    s1)
                       (elem@@TRAIN x
                                    s2)))))

(assert (forall ( (x TRAIN)
                  (s1 (set TRAIN))
                  (s2 (set TRAIN)) )
                (not (elem@@TRAIN x
                                  empty-set@@TRAIN))))

(assert (forall ( (f1 (pfun TRAIN
                            BLK))
                  (f2 (pfun TRAIN
                            BLK)) )
                (= (bunion@@TRAIN (dom@@TRAIN@@BLK f1)
                                  (dom@@TRAIN@@BLK f2))
                   (dom@@TRAIN@@BLK (ovl@@TRAIN@@BLK f1
                                                     f2)))))

(assert (= (dom@@TRAIN@@BLK empty-fun@@TRAIN@@BLK)
           empty-set@@TRAIN))

(assert (forall ( (x TRAIN)
                  (y BLK) )
                (= (dom@@TRAIN@@BLK (mk-fun@@TRAIN@@BLK x
                                                        y))
                   (mk-set@@TRAIN x))))

(assert (forall ( (f1 (pfun TRAIN
                            BLK))
                  (f2 (pfun TRAIN
                            BLK))
                  (x TRAIN) )
                (=> (elem@@TRAIN x
                                 (dom@@TRAIN@@BLK f2))
                    (= (select (ovl@@TRAIN@@BLK f1
                                                f2)
                               x)
                       (select f2
                               x)))))

(assert (forall ( (f1 (pfun TRAIN
                            BLK))
                  (f2 (pfun TRAIN
                            BLK))
                  (x TRAIN) )
                (=> (elem@@TRAIN x
                                 (set-diff@@TRAIN (dom@@TRAIN@@BLK f1)
                                                  (dom@@TRAIN@@BLK f2)))
                    (= (select (ovl@@TRAIN@@BLK f1
                                                f2)
                               x)
                       (select f1
                               x)))))

(assert (forall ( (f1 (pfun TRAIN
                            BLK))
                  (s1 (set TRAIN)) )
                (= (dom@@TRAIN@@BLK (dom-subt@@TRAIN@@BLK s1
                                                          f1))
                   (set-diff@@TRAIN (dom@@TRAIN@@BLK f1)
                                    s1))))

(assert (forall ( (x TRAIN)
                  (y BLK) )
                (= (select (mk-fun@@TRAIN@@BLK x
                                               y)
                           x)
                   y)))

(assert (forall ( (f1 (pfun TRAIN
                            BLK))
                  (s1 (set TRAIN))
                  (x TRAIN) )
                (=> (elem@@TRAIN x
                                 (intersect@@TRAIN s1
                                                   (dom@@TRAIN@@BLK f1)))
                    (= (select (dom-rest@@TRAIN@@BLK s1
                                                     f1)
                               x)
                       (select f1
                               x)))))

(assert (forall ( (f1 (pfun TRAIN
                            BLK))
                  (s1 (set TRAIN))
                  (x TRAIN) )
                (=> (elem@@TRAIN x
                                 (set-diff@@TRAIN (dom@@TRAIN@@BLK f1)
                                                  s1))
                    (= (select (dom-subt@@TRAIN@@BLK s1
                                                     f1)
                               x)
                       (select f1
                               x)))))

(assert (forall ( (x (pfun TRAIN
                           BLK))
                  (y (pfun TRAIN
                           BLK)) )
                (= (elem@Open@@pfun@@TRAIN@@BLK@Close x
                                                      (mk-set@Open@@pfun@@TRAIN@@BLK@Close y))
                   (= x
                      y))))

(assert (forall ( (x (pfun TRAIN
                           BLK))
                  (s1 (set (pfun TRAIN
                                 BLK)))
                  (s2 (set (pfun TRAIN
                                 BLK))) )
                (= (elem@Open@@pfun@@TRAIN@@BLK@Close x
                                                      (set-diff@Open@@pfun@@TRAIN@@BLK@Close s1
                                                                                             s2))
                   (and (elem@Open@@pfun@@TRAIN@@BLK@Close x
                                                           s1)
                        (not (elem@Open@@pfun@@TRAIN@@BLK@Close x
                                                                s2))))))

(assert (forall ( (x (pfun TRAIN
                           BLK))
                  (s1 (set (pfun TRAIN
                                 BLK)))
                  (s2 (set (pfun TRAIN
                                 BLK))) )
                (= (elem@Open@@pfun@@TRAIN@@BLK@Close x
                                                      (intersect@Open@@pfun@@TRAIN@@BLK@Close s1
                                                                                              s2))
                   (and (elem@Open@@pfun@@TRAIN@@BLK@Close x
                                                           s1)
                        (elem@Open@@pfun@@TRAIN@@BLK@Close x
                                                           s2)))))

(assert (forall ( (x (pfun TRAIN
                           BLK))
                  (s1 (set (pfun TRAIN
                                 BLK)))
                  (s2 (set (pfun TRAIN
                                 BLK))) )
                (= (elem@Open@@pfun@@TRAIN@@BLK@Close x
                                                      (bunion@Open@@pfun@@TRAIN@@BLK@Close s1
                                                                                           s2))
                   (or (elem@Open@@pfun@@TRAIN@@BLK@Close x
                                                          s1)
                       (elem@Open@@pfun@@TRAIN@@BLK@Close x
                                                          s2)))))

(assert (forall ( (x (pfun TRAIN
                           BLK))
                  (s1 (set (pfun TRAIN
                                 BLK)))
                  (s2 (set (pfun TRAIN
                                 BLK))) )
                (not (elem@Open@@pfun@@TRAIN@@BLK@Close x
                                                        empty-set@Open@@pfun@@TRAIN@@BLK@Close))))

(assert (and (not (= ent
                     ext))
             (not (elem@@BLK ent
                             PLF))
             (not (elem@@BLK ext
                             PLF))))

(assert (forall ( (p BLK) )
                (=> true
                    (= (not (= p
                               ext))
                       (elem@@BLK p
                                  (bunion@@BLK (mk-set@@BLK ent)
                                               PLF))))))

(assert (forall ( (p BLK) )
                (=> true
                    (= (not (= p
                               ent))
                       (elem@@BLK p
                                  (bunion@@BLK (mk-set@@BLK ext)
                                               PLF))))))

(assert (forall ( (p BLK) )
                (=> true
                    (= (or (= p
                              ent)
                           (= p
                              ext))
                       (not (elem@@BLK p
                                       PLF))))))

(assert (= BLK
           (bunion@@BLK (bunion@@BLK (mk-set@@BLK ent)
                                     (mk-set@@BLK ext))
                        PLF)))

(assert (not (= (and (elem@@TRAIN t_0
                                  (set-diff@@TRAIN in
                                                   (mk-set@@TRAIN t)))
                     (or (elem@@BLK (select loc
                                            t_0)
                                    PLF)
                         (= (select loc
                                    t_0)
                            ent)))
                (and (elem@@TRAIN t_0
                                  in)
                     (not (= t_0
                             t))
                     (or (elem@@BLK (select loc
                                            t_0)
                                    PLF)
                         (= (select loc
                                    t_0)
                            ent))))))

(check-sat-using (or-else (then qe smt) (then skip smt) (then (using-params simplify :expand-power true) smt)))

(pop)
(echo "> train0/leave/CO/co1/step (340,1)")
(push)
(declare-sort BLK 0)
(declare-sort LOC 0)
(declare-sort TRAIN 0)
(define-sort pfun (a b) (Array a b))
(declare-sort set 1)
(declare-const PLF (set BLK))
(declare-const BLK (set BLK))
(declare-const LOC (set LOC))
(declare-const TRAIN (set TRAIN))
(declare-const ent BLK)
(declare-const ext BLK)
(declare-const in (set TRAIN))
(declare-const in@prime (set TRAIN))
(declare-const loc (pfun TRAIN BLK))
(declare-const loc@prime (pfun TRAIN BLK))
(declare-const p BLK)
(declare-const q BLK)
(declare-const t TRAIN)
(declare-const t_0 TRAIN)
(declare-const t_1 TRAIN)
(declare-const t_2 TRAIN)
(declare-const t_3 TRAIN)
(declare-fun apply@@TRAIN@@BLK ((pfun TRAIN BLK) TRAIN) BLK)
(declare-fun dom-rest@@TRAIN@@BLK ((set TRAIN) (pfun TRAIN BLK)) (pfun TRAIN BLK))
(declare-fun dom-subt@@TRAIN@@BLK ((set TRAIN) (pfun TRAIN BLK)) (pfun TRAIN BLK))
(declare-fun dom@@TRAIN@@BLK ((pfun TRAIN BLK)) (set TRAIN))
(declare-fun elem@@BLK (BLK (set BLK)) Bool)
(declare-fun elem@@LOC (LOC (set LOC)) Bool)
(declare-fun elem@@TRAIN (TRAIN (set TRAIN)) Bool)
(declare-fun elem@Open@@pfun@@TRAIN@@BLK@Close ((pfun TRAIN BLK) (set (pfun TRAIN BLK))) Bool)
(declare-fun empty-fun@@TRAIN@@BLK () (pfun TRAIN BLK))
(declare-fun empty-set@@BLK () (set BLK))
(declare-fun empty-set@@LOC () (set LOC))
(declare-fun empty-set@@TRAIN () (set TRAIN))
(declare-fun empty-set@Open@@pfun@@TRAIN@@BLK@Close () (set (pfun TRAIN BLK)))
(declare-fun intersect@@BLK ((set BLK) (set BLK)) (set BLK))
(declare-fun intersect@@LOC ((set LOC) (set LOC)) (set LOC))
(declare-fun intersect@@TRAIN ((set TRAIN) (set TRAIN)) (set TRAIN))
(declare-fun intersect@Open@@pfun@@TRAIN@@BLK@Close ((set (pfun TRAIN BLK)) (set (pfun TRAIN BLK))) (set (pfun TRAIN BLK)))
(declare-fun mk-fun@@TRAIN@@BLK (TRAIN BLK) (pfun TRAIN BLK))
(declare-fun mk-set@@BLK (BLK) (set BLK))
(declare-fun mk-set@@LOC (LOC) (set LOC))
(declare-fun mk-set@@TRAIN (TRAIN) (set TRAIN))
(declare-fun mk-set@Open@@pfun@@TRAIN@@BLK@Close ((pfun TRAIN BLK)) (set (pfun TRAIN BLK)))
(declare-fun ovl@@TRAIN@@BLK ((pfun TRAIN BLK) (pfun TRAIN BLK)) (pfun TRAIN BLK))
(declare-fun set-diff@@BLK ((set BLK) (set BLK)) (set BLK))
(declare-fun set-diff@@LOC ((set LOC) (set LOC)) (set LOC))
(declare-fun set-diff@@TRAIN ((set TRAIN) (set TRAIN)) (set TRAIN))
(declare-fun set-diff@Open@@pfun@@TRAIN@@BLK@Close ((set (pfun TRAIN BLK)) (set (pfun TRAIN BLK))) (set (pfun TRAIN BLK)))
(declare-fun tfun@@TRAIN@@BLK ((set TRAIN) (set BLK)) (set (pfun TRAIN BLK)))
(declare-fun bunion@@BLK ((set BLK) (set BLK)) (set BLK))
(declare-fun bunion@@LOC ((set LOC) (set LOC)) (set LOC))
(declare-fun bunion@@TRAIN ((set TRAIN) (set TRAIN)) (set TRAIN))
(declare-fun bunion@Open@@pfun@@TRAIN@@BLK@Close ((set (pfun TRAIN BLK)) (set (pfun TRAIN BLK))) (set (pfun TRAIN BLK)))
(assert (forall ( (x BLK)
                  (y BLK) )
                (= (elem@@BLK x
                              (mk-set@@BLK y))
                   (= x
                      y))))

(assert (forall ( (x BLK)
                  (s1 (set BLK))
                  (s2 (set BLK)) )
                (= (elem@@BLK x
                              (set-diff@@BLK s1
                                             s2))
                   (and (elem@@BLK x
                                   s1)
                        (not (elem@@BLK x
                                        s2))))))

(assert (forall ( (x BLK)
                  (s1 (set BLK))
                  (s2 (set BLK)) )
                (= (elem@@BLK x
                              (intersect@@BLK s1
                                              s2))
                   (and (elem@@BLK x
                                   s1)
                        (elem@@BLK x
                                   s2)))))

(assert (forall ( (x BLK)
                  (s1 (set BLK))
                  (s2 (set BLK)) )
                (= (elem@@BLK x
                              (bunion@@BLK s1
                                           s2))
                   (or (elem@@BLK x
                                  s1)
                       (elem@@BLK x
                                  s2)))))

(assert (forall ( (x BLK)
                  (s1 (set BLK))
                  (s2 (set BLK)) )
                (not (elem@@BLK x
                                empty-set@@BLK))))

(assert (forall ( (x LOC)
                  (y LOC) )
                (= (elem@@LOC x
                              (mk-set@@LOC y))
                   (= x
                      y))))

(assert (forall ( (x LOC)
                  (s1 (set LOC))
                  (s2 (set LOC)) )
                (= (elem@@LOC x
                              (set-diff@@LOC s1
                                             s2))
                   (and (elem@@LOC x
                                   s1)
                        (not (elem@@LOC x
                                        s2))))))

(assert (forall ( (x LOC)
                  (s1 (set LOC))
                  (s2 (set LOC)) )
                (= (elem@@LOC x
                              (intersect@@LOC s1
                                              s2))
                   (and (elem@@LOC x
                                   s1)
                        (elem@@LOC x
                                   s2)))))

(assert (forall ( (x LOC)
                  (s1 (set LOC))
                  (s2 (set LOC)) )
                (= (elem@@LOC x
                              (bunion@@LOC s1
                                           s2))
                   (or (elem@@LOC x
                                  s1)
                       (elem@@LOC x
                                  s2)))))

(assert (forall ( (x LOC)
                  (s1 (set LOC))
                  (s2 (set LOC)) )
                (not (elem@@LOC x
                                empty-set@@LOC))))

(assert (forall ( (x TRAIN)
                  (y TRAIN) )
                (= (elem@@TRAIN x
                                (mk-set@@TRAIN y))
                   (= x
                      y))))

(assert (forall ( (x TRAIN)
                  (s1 (set TRAIN))
                  (s2 (set TRAIN)) )
                (= (elem@@TRAIN x
                                (set-diff@@TRAIN s1
                                                 s2))
                   (and (elem@@TRAIN x
                                     s1)
                        (not (elem@@TRAIN x
                                          s2))))))

(assert (forall ( (x TRAIN)
                  (s1 (set TRAIN))
                  (s2 (set TRAIN)) )
                (= (elem@@TRAIN x
                                (intersect@@TRAIN s1
                                                  s2))
                   (and (elem@@TRAIN x
                                     s1)
                        (elem@@TRAIN x
                                     s2)))))

(assert (forall ( (x TRAIN)
                  (s1 (set TRAIN))
                  (s2 (set TRAIN)) )
                (= (elem@@TRAIN x
                                (bunion@@TRAIN s1
                                               s2))
                   (or (elem@@TRAIN x
                                    s1)
                       (elem@@TRAIN x
                                    s2)))))

(assert (forall ( (x TRAIN)
                  (s1 (set TRAIN))
                  (s2 (set TRAIN)) )
                (not (elem@@TRAIN x
                                  empty-set@@TRAIN))))

(assert (forall ( (f1 (pfun TRAIN
                            BLK))
                  (f2 (pfun TRAIN
                            BLK)) )
                (= (bunion@@TRAIN (dom@@TRAIN@@BLK f1)
                                  (dom@@TRAIN@@BLK f2))
                   (dom@@TRAIN@@BLK (ovl@@TRAIN@@BLK f1
                                                     f2)))))

(assert (= (dom@@TRAIN@@BLK empty-fun@@TRAIN@@BLK)
           empty-set@@TRAIN))

(assert (forall ( (x TRAIN)
                  (y BLK) )
                (= (dom@@TRAIN@@BLK (mk-fun@@TRAIN@@BLK x
                                                        y))
                   (mk-set@@TRAIN x))))

(assert (forall ( (f1 (pfun TRAIN
                            BLK))
                  (f2 (pfun TRAIN
                            BLK))
                  (x TRAIN) )
                (=> (elem@@TRAIN x
                                 (dom@@TRAIN@@BLK f2))
                    (= (select (ovl@@TRAIN@@BLK f1
                                                f2)
                               x)
                       (select f2
                               x)))))

(assert (forall ( (f1 (pfun TRAIN
                            BLK))
                  (f2 (pfun TRAIN
                            BLK))
                  (x TRAIN) )
                (=> (elem@@TRAIN x
                                 (set-diff@@TRAIN (dom@@TRAIN@@BLK f1)
                                                  (dom@@TRAIN@@BLK f2)))
                    (= (select (ovl@@TRAIN@@BLK f1
                                                f2)
                               x)
                       (select f1
                               x)))))

(assert (forall ( (f1 (pfun TRAIN
                            BLK))
                  (s1 (set TRAIN)) )
                (= (dom@@TRAIN@@BLK (dom-subt@@TRAIN@@BLK s1
                                                          f1))
                   (set-diff@@TRAIN (dom@@TRAIN@@BLK f1)
                                    s1))))

(assert (forall ( (x TRAIN)
                  (y BLK) )
                (= (select (mk-fun@@TRAIN@@BLK x
                                               y)
                           x)
                   y)))

(assert (forall ( (f1 (pfun TRAIN
                            BLK))
                  (s1 (set TRAIN))
                  (x TRAIN) )
                (=> (elem@@TRAIN x
                                 (intersect@@TRAIN s1
                                                   (dom@@TRAIN@@BLK f1)))
                    (= (select (dom-rest@@TRAIN@@BLK s1
                                                     f1)
                               x)
                       (select f1
                               x)))))

(assert (forall ( (f1 (pfun TRAIN
                            BLK))
                  (s1 (set TRAIN))
                  (x TRAIN) )
                (=> (elem@@TRAIN x
                                 (set-diff@@TRAIN (dom@@TRAIN@@BLK f1)
                                                  s1))
                    (= (select (dom-subt@@TRAIN@@BLK s1
                                                     f1)
                               x)
                       (select f1
                               x)))))

(assert (forall ( (x (pfun TRAIN
                           BLK))
                  (y (pfun TRAIN
                           BLK)) )
                (= (elem@Open@@pfun@@TRAIN@@BLK@Close x
                                                      (mk-set@Open@@pfun@@TRAIN@@BLK@Close y))
                   (= x
                      y))))

(assert (forall ( (x (pfun TRAIN
                           BLK))
                  (s1 (set (pfun TRAIN
                                 BLK)))
                  (s2 (set (pfun TRAIN
                                 BLK))) )
                (= (elem@Open@@pfun@@TRAIN@@BLK@Close x
                                                      (set-diff@Open@@pfun@@TRAIN@@BLK@Close s1
                                                                                             s2))
                   (and (elem@Open@@pfun@@TRAIN@@BLK@Close x
                                                           s1)
                        (not (elem@Open@@pfun@@TRAIN@@BLK@Close x
                                                                s2))))))

(assert (forall ( (x (pfun TRAIN
                           BLK))
                  (s1 (set (pfun TRAIN
                                 BLK)))
                  (s2 (set (pfun TRAIN
                                 BLK))) )
                (= (elem@Open@@pfun@@TRAIN@@BLK@Close x
                                                      (intersect@Open@@pfun@@TRAIN@@BLK@Close s1
                                                                                              s2))
                   (and (elem@Open@@pfun@@TRAIN@@BLK@Close x
                                                           s1)
                        (elem@Open@@pfun@@TRAIN@@BLK@Close x
                                                           s2)))))

(assert (forall ( (x (pfun TRAIN
                           BLK))
                  (s1 (set (pfun TRAIN
                                 BLK)))
                  (s2 (set (pfun TRAIN
                                 BLK))) )
                (= (elem@Open@@pfun@@TRAIN@@BLK@Close x
                                                      (bunion@Open@@pfun@@TRAIN@@BLK@Close s1
                                                                                           s2))
                   (or (elem@Open@@pfun@@TRAIN@@BLK@Close x
                                                          s1)
                       (elem@Open@@pfun@@TRAIN@@BLK@Close x
                                                          s2)))))

(assert (forall ( (x (pfun TRAIN
                           BLK))
                  (s1 (set (pfun TRAIN
                                 BLK)))
                  (s2 (set (pfun TRAIN
                                 BLK))) )
                (not (elem@Open@@pfun@@TRAIN@@BLK@Close x
                                                        empty-set@Open@@pfun@@TRAIN@@BLK@Close))))

(assert (and (not (= ent
                     ext))
             (not (elem@@BLK ent
                             PLF))
             (not (elem@@BLK ext
                             PLF))))

(assert (forall ( (p BLK) )
                (=> true
                    (= (not (= p
                               ext))
                       (elem@@BLK p
                                  (bunion@@BLK (mk-set@@BLK ent)
                                               PLF))))))

(assert (forall ( (p BLK) )
                (=> true
                    (= (not (= p
                               ent))
                       (elem@@BLK p
                                  (bunion@@BLK (mk-set@@BLK ext)
                                               PLF))))))

(assert (forall ( (p BLK) )
                (=> true
                    (= (or (= p
                              ent)
                           (= p
                              ext))
                       (not (elem@@BLK p
                                       PLF))))))

(assert (= BLK
           (bunion@@BLK (bunion@@BLK (mk-set@@BLK ent)
                                     (mk-set@@BLK ext))
                        PLF)))

(assert (not (= (and (elem@@TRAIN t_0
                                  in)
                     (not (= t_0
                             t))
                     (or (elem@@BLK (select loc
                                            t_0)
                                    PLF)
                         (= (select loc
                                    t_0)
                            ent)))
                (and (elem@@TRAIN t_0
                                  in)
                     (not (= t_0
                             t))
                     (not (= (select loc
                                     t_0)
                             ext))))))

(check-sat-using (or-else (then qe smt) (then skip smt) (then (using-params simplify :expand-power true) smt)))

(pop)
(echo "> train0/leave/CO/co1/step (342,1)")
(push)
(declare-sort BLK 0)
(declare-sort LOC 0)
(declare-sort TRAIN 0)
(define-sort pfun (a b) (Array a b))
(declare-sort set 1)
(declare-const PLF (set BLK))
(declare-const BLK (set BLK))
(declare-const LOC (set LOC))
(declare-const TRAIN (set TRAIN))
(declare-const ent BLK)
(declare-const ext BLK)
(declare-const in (set TRAIN))
(declare-const in@prime (set TRAIN))
(declare-const loc (pfun TRAIN BLK))
(declare-const loc@prime (pfun TRAIN BLK))
(declare-const p BLK)
(declare-const q BLK)
(declare-const t TRAIN)
(declare-const t_0 TRAIN)
(declare-const t_1 TRAIN)
(declare-const t_2 TRAIN)
(declare-const t_3 TRAIN)
(declare-fun apply@@TRAIN@@BLK ((pfun TRAIN BLK) TRAIN) BLK)
(declare-fun dom-rest@@TRAIN@@BLK ((set TRAIN) (pfun TRAIN BLK)) (pfun TRAIN BLK))
(declare-fun dom-subt@@TRAIN@@BLK ((set TRAIN) (pfun TRAIN BLK)) (pfun TRAIN BLK))
(declare-fun dom@@TRAIN@@BLK ((pfun TRAIN BLK)) (set TRAIN))
(declare-fun elem@@BLK (BLK (set BLK)) Bool)
(declare-fun elem@@LOC (LOC (set LOC)) Bool)
(declare-fun elem@@TRAIN (TRAIN (set TRAIN)) Bool)
(declare-fun elem@Open@@pfun@@TRAIN@@BLK@Close ((pfun TRAIN BLK) (set (pfun TRAIN BLK))) Bool)
(declare-fun empty-fun@@TRAIN@@BLK () (pfun TRAIN BLK))
(declare-fun empty-set@@BLK () (set BLK))
(declare-fun empty-set@@LOC () (set LOC))
(declare-fun empty-set@@TRAIN () (set TRAIN))
(declare-fun empty-set@Open@@pfun@@TRAIN@@BLK@Close () (set (pfun TRAIN BLK)))
(declare-fun intersect@@BLK ((set BLK) (set BLK)) (set BLK))
(declare-fun intersect@@LOC ((set LOC) (set LOC)) (set LOC))
(declare-fun intersect@@TRAIN ((set TRAIN) (set TRAIN)) (set TRAIN))
(declare-fun intersect@Open@@pfun@@TRAIN@@BLK@Close ((set (pfun TRAIN BLK)) (set (pfun TRAIN BLK))) (set (pfun TRAIN BLK)))
(declare-fun mk-fun@@TRAIN@@BLK (TRAIN BLK) (pfun TRAIN BLK))
(declare-fun mk-set@@BLK (BLK) (set BLK))
(declare-fun mk-set@@LOC (LOC) (set LOC))
(declare-fun mk-set@@TRAIN (TRAIN) (set TRAIN))
(declare-fun mk-set@Open@@pfun@@TRAIN@@BLK@Close ((pfun TRAIN BLK)) (set (pfun TRAIN BLK)))
(declare-fun ovl@@TRAIN@@BLK ((pfun TRAIN BLK) (pfun TRAIN BLK)) (pfun TRAIN BLK))
(declare-fun set-diff@@BLK ((set BLK) (set BLK)) (set BLK))
(declare-fun set-diff@@LOC ((set LOC) (set LOC)) (set LOC))
(declare-fun set-diff@@TRAIN ((set TRAIN) (set TRAIN)) (set TRAIN))
(declare-fun set-diff@Open@@pfun@@TRAIN@@BLK@Close ((set (pfun TRAIN BLK)) (set (pfun TRAIN BLK))) (set (pfun TRAIN BLK)))
(declare-fun tfun@@TRAIN@@BLK ((set TRAIN) (set BLK)) (set (pfun TRAIN BLK)))
(declare-fun bunion@@BLK ((set BLK) (set BLK)) (set BLK))
(declare-fun bunion@@LOC ((set LOC) (set LOC)) (set LOC))
(declare-fun bunion@@TRAIN ((set TRAIN) (set TRAIN)) (set TRAIN))
(declare-fun bunion@Open@@pfun@@TRAIN@@BLK@Close ((set (pfun TRAIN BLK)) (set (pfun TRAIN BLK))) (set (pfun TRAIN BLK)))
(assert (and (= (select loc
                        t)
                ext)
             (elem@@TRAIN t
                          in)))

(assert (forall ( (x BLK)
                  (y BLK) )
                (= (elem@@BLK x
                              (mk-set@@BLK y))
                   (= x
                      y))))

(assert (forall ( (x BLK)
                  (s1 (set BLK))
                  (s2 (set BLK)) )
                (= (elem@@BLK x
                              (set-diff@@BLK s1
                                             s2))
                   (and (elem@@BLK x
                                   s1)
                        (not (elem@@BLK x
                                        s2))))))

(assert (forall ( (x BLK)
                  (s1 (set BLK))
                  (s2 (set BLK)) )
                (= (elem@@BLK x
                              (intersect@@BLK s1
                                              s2))
                   (and (elem@@BLK x
                                   s1)
                        (elem@@BLK x
                                   s2)))))

(assert (forall ( (x BLK)
                  (s1 (set BLK))
                  (s2 (set BLK)) )
                (= (elem@@BLK x
                              (bunion@@BLK s1
                                           s2))
                   (or (elem@@BLK x
                                  s1)
                       (elem@@BLK x
                                  s2)))))

(assert (forall ( (x BLK)
                  (s1 (set BLK))
                  (s2 (set BLK)) )
                (not (elem@@BLK x
                                empty-set@@BLK))))

(assert (forall ( (x LOC)
                  (y LOC) )
                (= (elem@@LOC x
                              (mk-set@@LOC y))
                   (= x
                      y))))

(assert (forall ( (x LOC)
                  (s1 (set LOC))
                  (s2 (set LOC)) )
                (= (elem@@LOC x
                              (set-diff@@LOC s1
                                             s2))
                   (and (elem@@LOC x
                                   s1)
                        (not (elem@@LOC x
                                        s2))))))

(assert (forall ( (x LOC)
                  (s1 (set LOC))
                  (s2 (set LOC)) )
                (= (elem@@LOC x
                              (intersect@@LOC s1
                                              s2))
                   (and (elem@@LOC x
                                   s1)
                        (elem@@LOC x
                                   s2)))))

(assert (forall ( (x LOC)
                  (s1 (set LOC))
                  (s2 (set LOC)) )
                (= (elem@@LOC x
                              (bunion@@LOC s1
                                           s2))
                   (or (elem@@LOC x
                                  s1)
                       (elem@@LOC x
                                  s2)))))

(assert (forall ( (x LOC)
                  (s1 (set LOC))
                  (s2 (set LOC)) )
                (not (elem@@LOC x
                                empty-set@@LOC))))

(assert (forall ( (x TRAIN)
                  (y TRAIN) )
                (= (elem@@TRAIN x
                                (mk-set@@TRAIN y))
                   (= x
                      y))))

(assert (forall ( (x TRAIN)
                  (s1 (set TRAIN))
                  (s2 (set TRAIN)) )
                (= (elem@@TRAIN x
                                (set-diff@@TRAIN s1
                                                 s2))
                   (and (elem@@TRAIN x
                                     s1)
                        (not (elem@@TRAIN x
                                          s2))))))

(assert (forall ( (x TRAIN)
                  (s1 (set TRAIN))
                  (s2 (set TRAIN)) )
                (= (elem@@TRAIN x
                                (intersect@@TRAIN s1
                                                  s2))
                   (and (elem@@TRAIN x
                                     s1)
                        (elem@@TRAIN x
                                     s2)))))

(assert (forall ( (x TRAIN)
                  (s1 (set TRAIN))
                  (s2 (set TRAIN)) )
                (= (elem@@TRAIN x
                                (bunion@@TRAIN s1
                                               s2))
                   (or (elem@@TRAIN x
                                    s1)
                       (elem@@TRAIN x
                                    s2)))))

(assert (forall ( (x TRAIN)
                  (s1 (set TRAIN))
                  (s2 (set TRAIN)) )
                (not (elem@@TRAIN x
                                  empty-set@@TRAIN))))

(assert (forall ( (f1 (pfun TRAIN
                            BLK))
                  (f2 (pfun TRAIN
                            BLK)) )
                (= (bunion@@TRAIN (dom@@TRAIN@@BLK f1)
                                  (dom@@TRAIN@@BLK f2))
                   (dom@@TRAIN@@BLK (ovl@@TRAIN@@BLK f1
                                                     f2)))))

(assert (= (dom@@TRAIN@@BLK empty-fun@@TRAIN@@BLK)
           empty-set@@TRAIN))

(assert (forall ( (x TRAIN)
                  (y BLK) )
                (= (dom@@TRAIN@@BLK (mk-fun@@TRAIN@@BLK x
                                                        y))
                   (mk-set@@TRAIN x))))

(assert (forall ( (f1 (pfun TRAIN
                            BLK))
                  (f2 (pfun TRAIN
                            BLK))
                  (x TRAIN) )
                (=> (elem@@TRAIN x
                                 (dom@@TRAIN@@BLK f2))
                    (= (select (ovl@@TRAIN@@BLK f1
                                                f2)
                               x)
                       (select f2
                               x)))))

(assert (forall ( (f1 (pfun TRAIN
                            BLK))
                  (f2 (pfun TRAIN
                            BLK))
                  (x TRAIN) )
                (=> (elem@@TRAIN x
                                 (set-diff@@TRAIN (dom@@TRAIN@@BLK f1)
                                                  (dom@@TRAIN@@BLK f2)))
                    (= (select (ovl@@TRAIN@@BLK f1
                                                f2)
                               x)
                       (select f1
                               x)))))

(assert (forall ( (f1 (pfun TRAIN
                            BLK))
                  (s1 (set TRAIN)) )
                (= (dom@@TRAIN@@BLK (dom-subt@@TRAIN@@BLK s1
                                                          f1))
                   (set-diff@@TRAIN (dom@@TRAIN@@BLK f1)
                                    s1))))

(assert (forall ( (x TRAIN)
                  (y BLK) )
                (= (select (mk-fun@@TRAIN@@BLK x
                                               y)
                           x)
                   y)))

(assert (forall ( (f1 (pfun TRAIN
                            BLK))
                  (s1 (set TRAIN))
                  (x TRAIN) )
                (=> (elem@@TRAIN x
                                 (intersect@@TRAIN s1
                                                   (dom@@TRAIN@@BLK f1)))
                    (= (select (dom-rest@@TRAIN@@BLK s1
                                                     f1)
                               x)
                       (select f1
                               x)))))

(assert (forall ( (f1 (pfun TRAIN
                            BLK))
                  (s1 (set TRAIN))
                  (x TRAIN) )
                (=> (elem@@TRAIN x
                                 (set-diff@@TRAIN (dom@@TRAIN@@BLK f1)
                                                  s1))
                    (= (select (dom-subt@@TRAIN@@BLK s1
                                                     f1)
                               x)
                       (select f1
                               x)))))

(assert (forall ( (x (pfun TRAIN
                           BLK))
                  (y (pfun TRAIN
                           BLK)) )
                (= (elem@Open@@pfun@@TRAIN@@BLK@Close x
                                                      (mk-set@Open@@pfun@@TRAIN@@BLK@Close y))
                   (= x
                      y))))

(assert (forall ( (x (pfun TRAIN
                           BLK))
                  (s1 (set (pfun TRAIN
                                 BLK)))
                  (s2 (set (pfun TRAIN
                                 BLK))) )
                (= (elem@Open@@pfun@@TRAIN@@BLK@Close x
                                                      (set-diff@Open@@pfun@@TRAIN@@BLK@Close s1
                                                                                             s2))
                   (and (elem@Open@@pfun@@TRAIN@@BLK@Close x
                                                           s1)
                        (not (elem@Open@@pfun@@TRAIN@@BLK@Close x
                                                                s2))))))

(assert (forall ( (x (pfun TRAIN
                           BLK))
                  (s1 (set (pfun TRAIN
                                 BLK)))
                  (s2 (set (pfun TRAIN
                                 BLK))) )
                (= (elem@Open@@pfun@@TRAIN@@BLK@Close x
                                                      (intersect@Open@@pfun@@TRAIN@@BLK@Close s1
                                                                                              s2))
                   (and (elem@Open@@pfun@@TRAIN@@BLK@Close x
                                                           s1)
                        (elem@Open@@pfun@@TRAIN@@BLK@Close x
                                                           s2)))))

(assert (forall ( (x (pfun TRAIN
                           BLK))
                  (s1 (set (pfun TRAIN
                                 BLK)))
                  (s2 (set (pfun TRAIN
                                 BLK))) )
                (= (elem@Open@@pfun@@TRAIN@@BLK@Close x
                                                      (bunion@Open@@pfun@@TRAIN@@BLK@Close s1
                                                                                           s2))
                   (or (elem@Open@@pfun@@TRAIN@@BLK@Close x
                                                          s1)
                       (elem@Open@@pfun@@TRAIN@@BLK@Close x
                                                          s2)))))

(assert (forall ( (x (pfun TRAIN
                           BLK))
                  (s1 (set (pfun TRAIN
                                 BLK)))
                  (s2 (set (pfun TRAIN
                                 BLK))) )
                (not (elem@Open@@pfun@@TRAIN@@BLK@Close x
                                                        empty-set@Open@@pfun@@TRAIN@@BLK@Close))))

(assert (and (not (= ent
                     ext))
             (not (elem@@BLK ent
                             PLF))
             (not (elem@@BLK ext
                             PLF))))

(assert (forall ( (p BLK) )
                (=> true
                    (= (not (= p
                               ext))
                       (elem@@BLK p
                                  (bunion@@BLK (mk-set@@BLK ent)
                                               PLF))))))

(assert (forall ( (p BLK) )
                (=> true
                    (= (not (= p
                               ent))
                       (elem@@BLK p
                                  (bunion@@BLK (mk-set@@BLK ext)
                                               PLF))))))

(assert (forall ( (p BLK) )
                (=> true
                    (= (or (= p
                              ent)
                           (= p
                              ext))
                       (not (elem@@BLK p
                                       PLF))))))

(assert (= BLK
           (bunion@@BLK (bunion@@BLK (mk-set@@BLK ent)
                                     (mk-set@@BLK ext))
                        PLF)))

(assert (not (= (and (elem@@TRAIN t_0
                                  in)
                     (not (= t_0
                             t))
                     (not (= (select loc
                                     t_0)
                             ext)))
                (and (elem@@TRAIN t_0
                                  in)
                     (not (= (select loc
                                     t_0)
                             ext))
                     (= (select loc
                                t)
                        ext)))))

(check-sat-using (or-else (then qe smt) (then skip smt) (then (using-params simplify :expand-power true) smt)))

(pop)
(echo "> train0/leave/CO/co1/step (344,1)")
(push)
(declare-sort BLK 0)
(declare-sort LOC 0)
(declare-sort TRAIN 0)
(define-sort pfun (a b) (Array a b))
(declare-sort set 1)
(declare-const PLF (set BLK))
(declare-const BLK (set BLK))
(declare-const LOC (set LOC))
(declare-const TRAIN (set TRAIN))
(declare-const ent BLK)
(declare-const ext BLK)
(declare-const in (set TRAIN))
(declare-const in@prime (set TRAIN))
(declare-const loc (pfun TRAIN BLK))
(declare-const loc@prime (pfun TRAIN BLK))
(declare-const p BLK)
(declare-const q BLK)
(declare-const t TRAIN)
(declare-const t_0 TRAIN)
(declare-const t_1 TRAIN)
(declare-const t_2 TRAIN)
(declare-const t_3 TRAIN)
(declare-fun apply@@TRAIN@@BLK ((pfun TRAIN BLK) TRAIN) BLK)
(declare-fun dom-rest@@TRAIN@@BLK ((set TRAIN) (pfun TRAIN BLK)) (pfun TRAIN BLK))
(declare-fun dom-subt@@TRAIN@@BLK ((set TRAIN) (pfun TRAIN BLK)) (pfun TRAIN BLK))
(declare-fun dom@@TRAIN@@BLK ((pfun TRAIN BLK)) (set TRAIN))
(declare-fun elem@@BLK (BLK (set BLK)) Bool)
(declare-fun elem@@LOC (LOC (set LOC)) Bool)
(declare-fun elem@@TRAIN (TRAIN (set TRAIN)) Bool)
(declare-fun elem@Open@@pfun@@TRAIN@@BLK@Close ((pfun TRAIN BLK) (set (pfun TRAIN BLK))) Bool)
(declare-fun empty-fun@@TRAIN@@BLK () (pfun TRAIN BLK))
(declare-fun empty-set@@BLK () (set BLK))
(declare-fun empty-set@@LOC () (set LOC))
(declare-fun empty-set@@TRAIN () (set TRAIN))
(declare-fun empty-set@Open@@pfun@@TRAIN@@BLK@Close () (set (pfun TRAIN BLK)))
(declare-fun intersect@@BLK ((set BLK) (set BLK)) (set BLK))
(declare-fun intersect@@LOC ((set LOC) (set LOC)) (set LOC))
(declare-fun intersect@@TRAIN ((set TRAIN) (set TRAIN)) (set TRAIN))
(declare-fun intersect@Open@@pfun@@TRAIN@@BLK@Close ((set (pfun TRAIN BLK)) (set (pfun TRAIN BLK))) (set (pfun TRAIN BLK)))
(declare-fun mk-fun@@TRAIN@@BLK (TRAIN BLK) (pfun TRAIN BLK))
(declare-fun mk-set@@BLK (BLK) (set BLK))
(declare-fun mk-set@@LOC (LOC) (set LOC))
(declare-fun mk-set@@TRAIN (TRAIN) (set TRAIN))
(declare-fun mk-set@Open@@pfun@@TRAIN@@BLK@Close ((pfun TRAIN BLK)) (set (pfun TRAIN BLK)))
(declare-fun ovl@@TRAIN@@BLK ((pfun TRAIN BLK) (pfun TRAIN BLK)) (pfun TRAIN BLK))
(declare-fun set-diff@@BLK ((set BLK) (set BLK)) (set BLK))
(declare-fun set-diff@@LOC ((set LOC) (set LOC)) (set LOC))
(declare-fun set-diff@@TRAIN ((set TRAIN) (set TRAIN)) (set TRAIN))
(declare-fun set-diff@Open@@pfun@@TRAIN@@BLK@Close ((set (pfun TRAIN BLK)) (set (pfun TRAIN BLK))) (set (pfun TRAIN BLK)))
(declare-fun tfun@@TRAIN@@BLK ((set TRAIN) (set BLK)) (set (pfun TRAIN BLK)))
(declare-fun bunion@@BLK ((set BLK) (set BLK)) (set BLK))
(declare-fun bunion@@LOC ((set LOC) (set LOC)) (set LOC))
(declare-fun bunion@@TRAIN ((set TRAIN) (set TRAIN)) (set TRAIN))
(declare-fun bunion@Open@@pfun@@TRAIN@@BLK@Close ((set (pfun TRAIN BLK)) (set (pfun TRAIN BLK))) (set (pfun TRAIN BLK)))
(assert (and (= (select loc
                        t)
                ext)
             (elem@@TRAIN t
                          in)))

(assert (forall ( (x BLK)
                  (y BLK) )
                (= (elem@@BLK x
                              (mk-set@@BLK y))
                   (= x
                      y))))

(assert (forall ( (x BLK)
                  (s1 (set BLK))
                  (s2 (set BLK)) )
                (= (elem@@BLK x
                              (set-diff@@BLK s1
                                             s2))
                   (and (elem@@BLK x
                                   s1)
                        (not (elem@@BLK x
                                        s2))))))

(assert (forall ( (x BLK)
                  (s1 (set BLK))
                  (s2 (set BLK)) )
                (= (elem@@BLK x
                              (intersect@@BLK s1
                                              s2))
                   (and (elem@@BLK x
                                   s1)
                        (elem@@BLK x
                                   s2)))))

(assert (forall ( (x BLK)
                  (s1 (set BLK))
                  (s2 (set BLK)) )
                (= (elem@@BLK x
                              (bunion@@BLK s1
                                           s2))
                   (or (elem@@BLK x
                                  s1)
                       (elem@@BLK x
                                  s2)))))

(assert (forall ( (x BLK)
                  (s1 (set BLK))
                  (s2 (set BLK)) )
                (not (elem@@BLK x
                                empty-set@@BLK))))

(assert (forall ( (x LOC)
                  (y LOC) )
                (= (elem@@LOC x
                              (mk-set@@LOC y))
                   (= x
                      y))))

(assert (forall ( (x LOC)
                  (s1 (set LOC))
                  (s2 (set LOC)) )
                (= (elem@@LOC x
                              (set-diff@@LOC s1
                                             s2))
                   (and (elem@@LOC x
                                   s1)
                        (not (elem@@LOC x
                                        s2))))))

(assert (forall ( (x LOC)
                  (s1 (set LOC))
                  (s2 (set LOC)) )
                (= (elem@@LOC x
                              (intersect@@LOC s1
                                              s2))
                   (and (elem@@LOC x
                                   s1)
                        (elem@@LOC x
                                   s2)))))

(assert (forall ( (x LOC)
                  (s1 (set LOC))
                  (s2 (set LOC)) )
                (= (elem@@LOC x
                              (bunion@@LOC s1
                                           s2))
                   (or (elem@@LOC x
                                  s1)
                       (elem@@LOC x
                                  s2)))))

(assert (forall ( (x LOC)
                  (s1 (set LOC))
                  (s2 (set LOC)) )
                (not (elem@@LOC x
                                empty-set@@LOC))))

(assert (forall ( (x TRAIN)
                  (y TRAIN) )
                (= (elem@@TRAIN x
                                (mk-set@@TRAIN y))
                   (= x
                      y))))

(assert (forall ( (x TRAIN)
                  (s1 (set TRAIN))
                  (s2 (set TRAIN)) )
                (= (elem@@TRAIN x
                                (set-diff@@TRAIN s1
                                                 s2))
                   (and (elem@@TRAIN x
                                     s1)
                        (not (elem@@TRAIN x
                                          s2))))))

(assert (forall ( (x TRAIN)
                  (s1 (set TRAIN))
                  (s2 (set TRAIN)) )
                (= (elem@@TRAIN x
                                (intersect@@TRAIN s1
                                                  s2))
                   (and (elem@@TRAIN x
                                     s1)
                        (elem@@TRAIN x
                                     s2)))))

(assert (forall ( (x TRAIN)
                  (s1 (set TRAIN))
                  (s2 (set TRAIN)) )
                (= (elem@@TRAIN x
                                (bunion@@TRAIN s1
                                               s2))
                   (or (elem@@TRAIN x
                                    s1)
                       (elem@@TRAIN x
                                    s2)))))

(assert (forall ( (x TRAIN)
                  (s1 (set TRAIN))
                  (s2 (set TRAIN)) )
                (not (elem@@TRAIN x
                                  empty-set@@TRAIN))))

(assert (forall ( (f1 (pfun TRAIN
                            BLK))
                  (f2 (pfun TRAIN
                            BLK)) )
                (= (bunion@@TRAIN (dom@@TRAIN@@BLK f1)
                                  (dom@@TRAIN@@BLK f2))
                   (dom@@TRAIN@@BLK (ovl@@TRAIN@@BLK f1
                                                     f2)))))

(assert (= (dom@@TRAIN@@BLK empty-fun@@TRAIN@@BLK)
           empty-set@@TRAIN))

(assert (forall ( (x TRAIN)
                  (y BLK) )
                (= (dom@@TRAIN@@BLK (mk-fun@@TRAIN@@BLK x
                                                        y))
                   (mk-set@@TRAIN x))))

(assert (forall ( (f1 (pfun TRAIN
                            BLK))
                  (f2 (pfun TRAIN
                            BLK))
                  (x TRAIN) )
                (=> (elem@@TRAIN x
                                 (dom@@TRAIN@@BLK f2))
                    (= (select (ovl@@TRAIN@@BLK f1
                                                f2)
                               x)
                       (select f2
                               x)))))

(assert (forall ( (f1 (pfun TRAIN
                            BLK))
                  (f2 (pfun TRAIN
                            BLK))
                  (x TRAIN) )
                (=> (elem@@TRAIN x
                                 (set-diff@@TRAIN (dom@@TRAIN@@BLK f1)
                                                  (dom@@TRAIN@@BLK f2)))
                    (= (select (ovl@@TRAIN@@BLK f1
                                                f2)
                               x)
                       (select f1
                               x)))))

(assert (forall ( (f1 (pfun TRAIN
                            BLK))
                  (s1 (set TRAIN)) )
                (= (dom@@TRAIN@@BLK (dom-subt@@TRAIN@@BLK s1
                                                          f1))
                   (set-diff@@TRAIN (dom@@TRAIN@@BLK f1)
                                    s1))))

(assert (forall ( (x TRAIN)
                  (y BLK) )
                (= (select (mk-fun@@TRAIN@@BLK x
                                               y)
                           x)
                   y)))

(assert (forall ( (f1 (pfun TRAIN
                            BLK))
                  (s1 (set TRAIN))
                  (x TRAIN) )
                (=> (elem@@TRAIN x
                                 (intersect@@TRAIN s1
                                                   (dom@@TRAIN@@BLK f1)))
                    (= (select (dom-rest@@TRAIN@@BLK s1
                                                     f1)
                               x)
                       (select f1
                               x)))))

(assert (forall ( (f1 (pfun TRAIN
                            BLK))
                  (s1 (set TRAIN))
                  (x TRAIN) )
                (=> (elem@@TRAIN x
                                 (set-diff@@TRAIN (dom@@TRAIN@@BLK f1)
                                                  s1))
                    (= (select (dom-subt@@TRAIN@@BLK s1
                                                     f1)
                               x)
                       (select f1
                               x)))))

(assert (forall ( (x (pfun TRAIN
                           BLK))
                  (y (pfun TRAIN
                           BLK)) )
                (= (elem@Open@@pfun@@TRAIN@@BLK@Close x
                                                      (mk-set@Open@@pfun@@TRAIN@@BLK@Close y))
                   (= x
                      y))))

(assert (forall ( (x (pfun TRAIN
                           BLK))
                  (s1 (set (pfun TRAIN
                                 BLK)))
                  (s2 (set (pfun TRAIN
                                 BLK))) )
                (= (elem@Open@@pfun@@TRAIN@@BLK@Close x
                                                      (set-diff@Open@@pfun@@TRAIN@@BLK@Close s1
                                                                                             s2))
                   (and (elem@Open@@pfun@@TRAIN@@BLK@Close x
                                                           s1)
                        (not (elem@Open@@pfun@@TRAIN@@BLK@Close x
                                                                s2))))))

(assert (forall ( (x (pfun TRAIN
                           BLK))
                  (s1 (set (pfun TRAIN
                                 BLK)))
                  (s2 (set (pfun TRAIN
                                 BLK))) )
                (= (elem@Open@@pfun@@TRAIN@@BLK@Close x
                                                      (intersect@Open@@pfun@@TRAIN@@BLK@Close s1
                                                                                              s2))
                   (and (elem@Open@@pfun@@TRAIN@@BLK@Close x
                                                           s1)
                        (elem@Open@@pfun@@TRAIN@@BLK@Close x
                                                           s2)))))

(assert (forall ( (x (pfun TRAIN
                           BLK))
                  (s1 (set (pfun TRAIN
                                 BLK)))
                  (s2 (set (pfun TRAIN
                                 BLK))) )
                (= (elem@Open@@pfun@@TRAIN@@BLK@Close x
                                                      (bunion@Open@@pfun@@TRAIN@@BLK@Close s1
                                                                                           s2))
                   (or (elem@Open@@pfun@@TRAIN@@BLK@Close x
                                                          s1)
                       (elem@Open@@pfun@@TRAIN@@BLK@Close x
                                                          s2)))))

(assert (forall ( (x (pfun TRAIN
                           BLK))
                  (s1 (set (pfun TRAIN
                                 BLK)))
                  (s2 (set (pfun TRAIN
                                 BLK))) )
                (not (elem@Open@@pfun@@TRAIN@@BLK@Close x
                                                        empty-set@Open@@pfun@@TRAIN@@BLK@Close))))

(assert (and (not (= ent
                     ext))
             (not (elem@@BLK ent
                             PLF))
             (not (elem@@BLK ext
                             PLF))))

(assert (forall ( (p BLK) )
                (=> true
                    (= (not (= p
                               ext))
                       (elem@@BLK p
                                  (bunion@@BLK (mk-set@@BLK ent)
                                               PLF))))))

(assert (forall ( (p BLK) )
                (=> true
                    (= (not (= p
                               ent))
                       (elem@@BLK p
                                  (bunion@@BLK (mk-set@@BLK ext)
                                               PLF))))))

(assert (forall ( (p BLK) )
                (=> true
                    (= (or (= p
                              ent)
                           (= p
                              ext))
                       (not (elem@@BLK p
                                       PLF))))))

(assert (= BLK
           (bunion@@BLK (bunion@@BLK (mk-set@@BLK ent)
                                     (mk-set@@BLK ext))
                        PLF)))

(assert (not (=> (and (elem@@TRAIN t_0
                                   in)
                      (= (select loc
                                 t_0)
                         ent))
                 (and (elem@@TRAIN t_0
                                   in)
                      (not (= (select loc
                                      t_0)
                              ext))
                      (= (select loc
                                 t)
                         ext)))))

(check-sat-using (or-else (then qe smt) (then skip smt) (then (using-params simplify :expand-power true) smt)))

(pop)
(echo "> train0/leave/CO/co1/step (347,1)")
(push)
(declare-sort BLK 0)
(declare-sort LOC 0)
(declare-sort TRAIN 0)
(define-sort pfun (a b) (Array a b))
(declare-sort set 1)
(declare-const PLF (set BLK))
(declare-const BLK (set BLK))
(declare-const LOC (set LOC))
(declare-const TRAIN (set TRAIN))
(declare-const ent BLK)
(declare-const ext BLK)
(declare-const in (set TRAIN))
(declare-const in@prime (set TRAIN))
(declare-const loc (pfun TRAIN BLK))
(declare-const loc@prime (pfun TRAIN BLK))
(declare-const p BLK)
(declare-const q BLK)
(declare-const t TRAIN)
(declare-const t_0 TRAIN)
(declare-const t_1 TRAIN)
(declare-const t_2 TRAIN)
(declare-const t_3 TRAIN)
(declare-fun apply@@TRAIN@@BLK ((pfun TRAIN BLK) TRAIN) BLK)
(declare-fun dom-rest@@TRAIN@@BLK ((set TRAIN) (pfun TRAIN BLK)) (pfun TRAIN BLK))
(declare-fun dom-subt@@TRAIN@@BLK ((set TRAIN) (pfun TRAIN BLK)) (pfun TRAIN BLK))
(declare-fun dom@@TRAIN@@BLK ((pfun TRAIN BLK)) (set TRAIN))
(declare-fun elem@@BLK (BLK (set BLK)) Bool)
(declare-fun elem@@LOC (LOC (set LOC)) Bool)
(declare-fun elem@@TRAIN (TRAIN (set TRAIN)) Bool)
(declare-fun elem@Open@@pfun@@TRAIN@@BLK@Close ((pfun TRAIN BLK) (set (pfun TRAIN BLK))) Bool)
(declare-fun empty-fun@@TRAIN@@BLK () (pfun TRAIN BLK))
(declare-fun empty-set@@BLK () (set BLK))
(declare-fun empty-set@@LOC () (set LOC))
(declare-fun empty-set@@TRAIN () (set TRAIN))
(declare-fun empty-set@Open@@pfun@@TRAIN@@BLK@Close () (set (pfun TRAIN BLK)))
(declare-fun intersect@@BLK ((set BLK) (set BLK)) (set BLK))
(declare-fun intersect@@LOC ((set LOC) (set LOC)) (set LOC))
(declare-fun intersect@@TRAIN ((set TRAIN) (set TRAIN)) (set TRAIN))
(declare-fun intersect@Open@@pfun@@TRAIN@@BLK@Close ((set (pfun TRAIN BLK)) (set (pfun TRAIN BLK))) (set (pfun TRAIN BLK)))
(declare-fun mk-fun@@TRAIN@@BLK (TRAIN BLK) (pfun TRAIN BLK))
(declare-fun mk-set@@BLK (BLK) (set BLK))
(declare-fun mk-set@@LOC (LOC) (set LOC))
(declare-fun mk-set@@TRAIN (TRAIN) (set TRAIN))
(declare-fun mk-set@Open@@pfun@@TRAIN@@BLK@Close ((pfun TRAIN BLK)) (set (pfun TRAIN BLK)))
(declare-fun ovl@@TRAIN@@BLK ((pfun TRAIN BLK) (pfun TRAIN BLK)) (pfun TRAIN BLK))
(declare-fun set-diff@@BLK ((set BLK) (set BLK)) (set BLK))
(declare-fun set-diff@@LOC ((set LOC) (set LOC)) (set LOC))
(declare-fun set-diff@@TRAIN ((set TRAIN) (set TRAIN)) (set TRAIN))
(declare-fun set-diff@Open@@pfun@@TRAIN@@BLK@Close ((set (pfun TRAIN BLK)) (set (pfun TRAIN BLK))) (set (pfun TRAIN BLK)))
(declare-fun tfun@@TRAIN@@BLK ((set TRAIN) (set BLK)) (set (pfun TRAIN BLK)))
(declare-fun bunion@@BLK ((set BLK) (set BLK)) (set BLK))
(declare-fun bunion@@LOC ((set LOC) (set LOC)) (set LOC))
(declare-fun bunion@@TRAIN ((set TRAIN) (set TRAIN)) (set TRAIN))
(declare-fun bunion@Open@@pfun@@TRAIN@@BLK@Close ((set (pfun TRAIN BLK)) (set (pfun TRAIN BLK))) (set (pfun TRAIN BLK)))
(assert (forall ( (x BLK)
                  (y BLK) )
                (= (elem@@BLK x
                              (mk-set@@BLK y))
                   (= x
                      y))))

(assert (forall ( (x BLK)
                  (s1 (set BLK))
                  (s2 (set BLK)) )
                (= (elem@@BLK x
                              (set-diff@@BLK s1
                                             s2))
                   (and (elem@@BLK x
                                   s1)
                        (not (elem@@BLK x
                                        s2))))))

(assert (forall ( (x BLK)
                  (s1 (set BLK))
                  (s2 (set BLK)) )
                (= (elem@@BLK x
                              (intersect@@BLK s1
                                              s2))
                   (and (elem@@BLK x
                                   s1)
                        (elem@@BLK x
                                   s2)))))

(assert (forall ( (x BLK)
                  (s1 (set BLK))
                  (s2 (set BLK)) )
                (= (elem@@BLK x
                              (bunion@@BLK s1
                                           s2))
                   (or (elem@@BLK x
                                  s1)
                       (elem@@BLK x
                                  s2)))))

(assert (forall ( (x BLK)
                  (s1 (set BLK))
                  (s2 (set BLK)) )
                (not (elem@@BLK x
                                empty-set@@BLK))))

(assert (forall ( (x LOC)
                  (y LOC) )
                (= (elem@@LOC x
                              (mk-set@@LOC y))
                   (= x
                      y))))

(assert (forall ( (x LOC)
                  (s1 (set LOC))
                  (s2 (set LOC)) )
                (= (elem@@LOC x
                              (set-diff@@LOC s1
                                             s2))
                   (and (elem@@LOC x
                                   s1)
                        (not (elem@@LOC x
                                        s2))))))

(assert (forall ( (x LOC)
                  (s1 (set LOC))
                  (s2 (set LOC)) )
                (= (elem@@LOC x
                              (intersect@@LOC s1
                                              s2))
                   (and (elem@@LOC x
                                   s1)
                        (elem@@LOC x
                                   s2)))))

(assert (forall ( (x LOC)
                  (s1 (set LOC))
                  (s2 (set LOC)) )
                (= (elem@@LOC x
                              (bunion@@LOC s1
                                           s2))
                   (or (elem@@LOC x
                                  s1)
                       (elem@@LOC x
                                  s2)))))

(assert (forall ( (x LOC)
                  (s1 (set LOC))
                  (s2 (set LOC)) )
                (not (elem@@LOC x
                                empty-set@@LOC))))

(assert (forall ( (x TRAIN)
                  (y TRAIN) )
                (= (elem@@TRAIN x
                                (mk-set@@TRAIN y))
                   (= x
                      y))))

(assert (forall ( (x TRAIN)
                  (s1 (set TRAIN))
                  (s2 (set TRAIN)) )
                (= (elem@@TRAIN x
                                (set-diff@@TRAIN s1
                                                 s2))
                   (and (elem@@TRAIN x
                                     s1)
                        (not (elem@@TRAIN x
                                          s2))))))

(assert (forall ( (x TRAIN)
                  (s1 (set TRAIN))
                  (s2 (set TRAIN)) )
                (= (elem@@TRAIN x
                                (intersect@@TRAIN s1
                                                  s2))
                   (and (elem@@TRAIN x
                                     s1)
                        (elem@@TRAIN x
                                     s2)))))

(assert (forall ( (x TRAIN)
                  (s1 (set TRAIN))
                  (s2 (set TRAIN)) )
                (= (elem@@TRAIN x
                                (bunion@@TRAIN s1
                                               s2))
                   (or (elem@@TRAIN x
                                    s1)
                       (elem@@TRAIN x
                                    s2)))))

(assert (forall ( (x TRAIN)
                  (s1 (set TRAIN))
                  (s2 (set TRAIN)) )
                (not (elem@@TRAIN x
                                  empty-set@@TRAIN))))

(assert (forall ( (f1 (pfun TRAIN
                            BLK))
                  (f2 (pfun TRAIN
                            BLK)) )
                (= (bunion@@TRAIN (dom@@TRAIN@@BLK f1)
                                  (dom@@TRAIN@@BLK f2))
                   (dom@@TRAIN@@BLK (ovl@@TRAIN@@BLK f1
                                                     f2)))))

(assert (= (dom@@TRAIN@@BLK empty-fun@@TRAIN@@BLK)
           empty-set@@TRAIN))

(assert (forall ( (x TRAIN)
                  (y BLK) )
                (= (dom@@TRAIN@@BLK (mk-fun@@TRAIN@@BLK x
                                                        y))
                   (mk-set@@TRAIN x))))

(assert (forall ( (f1 (pfun TRAIN
                            BLK))
                  (f2 (pfun TRAIN
                            BLK))
                  (x TRAIN) )
                (=> (elem@@TRAIN x
                                 (dom@@TRAIN@@BLK f2))
                    (= (select (ovl@@TRAIN@@BLK f1
                                                f2)
                               x)
                       (select f2
                               x)))))

(assert (forall ( (f1 (pfun TRAIN
                            BLK))
                  (f2 (pfun TRAIN
                            BLK))
                  (x TRAIN) )
                (=> (elem@@TRAIN x
                                 (set-diff@@TRAIN (dom@@TRAIN@@BLK f1)
                                                  (dom@@TRAIN@@BLK f2)))
                    (= (select (ovl@@TRAIN@@BLK f1
                                                f2)
                               x)
                       (select f1
                               x)))))

(assert (forall ( (f1 (pfun TRAIN
                            BLK))
                  (s1 (set TRAIN)) )
                (= (dom@@TRAIN@@BLK (dom-subt@@TRAIN@@BLK s1
                                                          f1))
                   (set-diff@@TRAIN (dom@@TRAIN@@BLK f1)
                                    s1))))

(assert (forall ( (x TRAIN)
                  (y BLK) )
                (= (select (mk-fun@@TRAIN@@BLK x
                                               y)
                           x)
                   y)))

(assert (forall ( (f1 (pfun TRAIN
                            BLK))
                  (s1 (set TRAIN))
                  (x TRAIN) )
                (=> (elem@@TRAIN x
                                 (intersect@@TRAIN s1
                                                   (dom@@TRAIN@@BLK f1)))
                    (= (select (dom-rest@@TRAIN@@BLK s1
                                                     f1)
                               x)
                       (select f1
                               x)))))

(assert (forall ( (f1 (pfun TRAIN
                            BLK))
                  (s1 (set TRAIN))
                  (x TRAIN) )
                (=> (elem@@TRAIN x
                                 (set-diff@@TRAIN (dom@@TRAIN@@BLK f1)
                                                  s1))
                    (= (select (dom-subt@@TRAIN@@BLK s1
                                                     f1)
                               x)
                       (select f1
                               x)))))

(assert (forall ( (x (pfun TRAIN
                           BLK))
                  (y (pfun TRAIN
                           BLK)) )
                (= (elem@Open@@pfun@@TRAIN@@BLK@Close x
                                                      (mk-set@Open@@pfun@@TRAIN@@BLK@Close y))
                   (= x
                      y))))

(assert (forall ( (x (pfun TRAIN
                           BLK))
                  (s1 (set (pfun TRAIN
                                 BLK)))
                  (s2 (set (pfun TRAIN
                                 BLK))) )
                (= (elem@Open@@pfun@@TRAIN@@BLK@Close x
                                                      (set-diff@Open@@pfun@@TRAIN@@BLK@Close s1
                                                                                             s2))
                   (and (elem@Open@@pfun@@TRAIN@@BLK@Close x
                                                           s1)
                        (not (elem@Open@@pfun@@TRAIN@@BLK@Close x
                                                                s2))))))

(assert (forall ( (x (pfun TRAIN
                           BLK))
                  (s1 (set (pfun TRAIN
                                 BLK)))
                  (s2 (set (pfun TRAIN
                                 BLK))) )
                (= (elem@Open@@pfun@@TRAIN@@BLK@Close x
                                                      (intersect@Open@@pfun@@TRAIN@@BLK@Close s1
                                                                                              s2))
                   (and (elem@Open@@pfun@@TRAIN@@BLK@Close x
                                                           s1)
                        (elem@Open@@pfun@@TRAIN@@BLK@Close x
                                                           s2)))))

(assert (forall ( (x (pfun TRAIN
                           BLK))
                  (s1 (set (pfun TRAIN
                                 BLK)))
                  (s2 (set (pfun TRAIN
                                 BLK))) )
                (= (elem@Open@@pfun@@TRAIN@@BLK@Close x
                                                      (bunion@Open@@pfun@@TRAIN@@BLK@Close s1
                                                                                           s2))
                   (or (elem@Open@@pfun@@TRAIN@@BLK@Close x
                                                          s1)
                       (elem@Open@@pfun@@TRAIN@@BLK@Close x
                                                          s2)))))

(assert (forall ( (x (pfun TRAIN
                           BLK))
                  (s1 (set (pfun TRAIN
                                 BLK)))
                  (s2 (set (pfun TRAIN
                                 BLK))) )
                (not (elem@Open@@pfun@@TRAIN@@BLK@Close x
                                                        empty-set@Open@@pfun@@TRAIN@@BLK@Close))))

(assert (and (not (= ent
                     ext))
             (not (elem@@BLK ent
                             PLF))
             (not (elem@@BLK ext
                             PLF))))

(assert (forall ( (p BLK) )
                (=> true
                    (= (not (= p
                               ext))
                       (elem@@BLK p
                                  (bunion@@BLK (mk-set@@BLK ent)
                                               PLF))))))

(assert (forall ( (p BLK) )
                (=> true
                    (= (not (= p
                               ent))
                       (elem@@BLK p
                                  (bunion@@BLK (mk-set@@BLK ext)
                                               PLF))))))

(assert (forall ( (p BLK) )
                (=> true
                    (= (or (= p
                              ent)
                           (= p
                              ext))
                       (not (elem@@BLK p
                                       PLF))))))

(assert (= BLK
           (bunion@@BLK (bunion@@BLK (mk-set@@BLK ent)
                                     (mk-set@@BLK ext))
                        PLF)))

(assert (not (= (and (elem@@TRAIN t_0
                                  in)
                     (= (select loc
                                t_0)
                        ent))
                (and (elem@@TRAIN t_0
                                  in)
                     (= (select loc
                                t_0)
                        ent)
                     (not (elem@@BLK (select loc
                                             t_0)
                                     PLF))))))

(check-sat-using (or-else (then qe smt) (then skip smt) (then (using-params simplify :expand-power true) smt)))

(pop)
(echo "> train0/leave/FIS")
(push)
(declare-sort BLK 0)
(declare-sort LOC 0)
(declare-sort TRAIN 0)
(define-sort pfun (a b) (Array a b))
(declare-sort set 1)
(declare-const PLF (set BLK))
(declare-const BLK (set BLK))
(declare-const LOC (set LOC))
(declare-const TRAIN (set TRAIN))
(declare-const ent BLK)
(declare-const ext BLK)
(declare-const in (set TRAIN))
(declare-const loc (pfun TRAIN BLK))
(declare-const p BLK)
(declare-const q BLK)
(declare-const t TRAIN)
(declare-const t_0 TRAIN)
(declare-const t_1 TRAIN)
(declare-const t_2 TRAIN)
(declare-const t_3 TRAIN)
(declare-fun apply@@TRAIN@@BLK ((pfun TRAIN BLK) TRAIN) BLK)
(declare-fun dom-rest@@TRAIN@@BLK ((set TRAIN) (pfun TRAIN BLK)) (pfun TRAIN BLK))
(declare-fun dom-subt@@TRAIN@@BLK ((set TRAIN) (pfun TRAIN BLK)) (pfun TRAIN BLK))
(declare-fun dom@@TRAIN@@BLK ((pfun TRAIN BLK)) (set TRAIN))
(declare-fun elem@@BLK (BLK (set BLK)) Bool)
(declare-fun elem@@LOC (LOC (set LOC)) Bool)
(declare-fun elem@@TRAIN (TRAIN (set TRAIN)) Bool)
(declare-fun elem@Open@@pfun@@TRAIN@@BLK@Close ((pfun TRAIN BLK) (set (pfun TRAIN BLK))) Bool)
(declare-fun empty-fun@@TRAIN@@BLK () (pfun TRAIN BLK))
(declare-fun empty-set@@BLK () (set BLK))
(declare-fun empty-set@@LOC () (set LOC))
(declare-fun empty-set@@TRAIN () (set TRAIN))
(declare-fun empty-set@Open@@pfun@@TRAIN@@BLK@Close () (set (pfun TRAIN BLK)))
(declare-fun intersect@@BLK ((set BLK) (set BLK)) (set BLK))
(declare-fun intersect@@LOC ((set LOC) (set LOC)) (set LOC))
(declare-fun intersect@@TRAIN ((set TRAIN) (set TRAIN)) (set TRAIN))
(declare-fun intersect@Open@@pfun@@TRAIN@@BLK@Close ((set (pfun TRAIN BLK)) (set (pfun TRAIN BLK))) (set (pfun TRAIN BLK)))
(declare-fun mk-fun@@TRAIN@@BLK (TRAIN BLK) (pfun TRAIN BLK))
(declare-fun mk-set@@BLK (BLK) (set BLK))
(declare-fun mk-set@@LOC (LOC) (set LOC))
(declare-fun mk-set@@TRAIN (TRAIN) (set TRAIN))
(declare-fun mk-set@Open@@pfun@@TRAIN@@BLK@Close ((pfun TRAIN BLK)) (set (pfun TRAIN BLK)))
(declare-fun ovl@@TRAIN@@BLK ((pfun TRAIN BLK) (pfun TRAIN BLK)) (pfun TRAIN BLK))
(declare-fun set-diff@@BLK ((set BLK) (set BLK)) (set BLK))
(declare-fun set-diff@@LOC ((set LOC) (set LOC)) (set LOC))
(declare-fun set-diff@@TRAIN ((set TRAIN) (set TRAIN)) (set TRAIN))
(declare-fun set-diff@Open@@pfun@@TRAIN@@BLK@Close ((set (pfun TRAIN BLK)) (set (pfun TRAIN BLK))) (set (pfun TRAIN BLK)))
(declare-fun tfun@@TRAIN@@BLK ((set TRAIN) (set BLK)) (set (pfun TRAIN BLK)))
(declare-fun bunion@@BLK ((set BLK) (set BLK)) (set BLK))
(declare-fun bunion@@LOC ((set LOC) (set LOC)) (set LOC))
(declare-fun bunion@@TRAIN ((set TRAIN) (set TRAIN)) (set TRAIN))
(declare-fun bunion@Open@@pfun@@TRAIN@@BLK@Close ((set (pfun TRAIN BLK)) (set (pfun TRAIN BLK))) (set (pfun TRAIN BLK)))
(assert (forall ( (x BLK)
                  (y BLK) )
                (= (elem@@BLK x
                              (mk-set@@BLK y))
                   (= x
                      y))))

(assert (forall ( (x BLK)
                  (s1 (set BLK))
                  (s2 (set BLK)) )
                (= (elem@@BLK x
                              (set-diff@@BLK s1
                                             s2))
                   (and (elem@@BLK x
                                   s1)
                        (not (elem@@BLK x
                                        s2))))))

(assert (forall ( (x BLK)
                  (s1 (set BLK))
                  (s2 (set BLK)) )
                (= (elem@@BLK x
                              (intersect@@BLK s1
                                              s2))
                   (and (elem@@BLK x
                                   s1)
                        (elem@@BLK x
                                   s2)))))

(assert (forall ( (x BLK)
                  (s1 (set BLK))
                  (s2 (set BLK)) )
                (= (elem@@BLK x
                              (bunion@@BLK s1
                                           s2))
                   (or (elem@@BLK x
                                  s1)
                       (elem@@BLK x
                                  s2)))))

(assert (forall ( (x BLK)
                  (s1 (set BLK))
                  (s2 (set BLK)) )
                (not (elem@@BLK x
                                empty-set@@BLK))))

(assert (forall ( (x LOC)
                  (y LOC) )
                (= (elem@@LOC x
                              (mk-set@@LOC y))
                   (= x
                      y))))

(assert (forall ( (x LOC)
                  (s1 (set LOC))
                  (s2 (set LOC)) )
                (= (elem@@LOC x
                              (set-diff@@LOC s1
                                             s2))
                   (and (elem@@LOC x
                                   s1)
                        (not (elem@@LOC x
                                        s2))))))

(assert (forall ( (x LOC)
                  (s1 (set LOC))
                  (s2 (set LOC)) )
                (= (elem@@LOC x
                              (intersect@@LOC s1
                                              s2))
                   (and (elem@@LOC x
                                   s1)
                        (elem@@LOC x
                                   s2)))))

(assert (forall ( (x LOC)
                  (s1 (set LOC))
                  (s2 (set LOC)) )
                (= (elem@@LOC x
                              (bunion@@LOC s1
                                           s2))
                   (or (elem@@LOC x
                                  s1)
                       (elem@@LOC x
                                  s2)))))

(assert (forall ( (x LOC)
                  (s1 (set LOC))
                  (s2 (set LOC)) )
                (not (elem@@LOC x
                                empty-set@@LOC))))

(assert (forall ( (x TRAIN)
                  (y TRAIN) )
                (= (elem@@TRAIN x
                                (mk-set@@TRAIN y))
                   (= x
                      y))))

(assert (forall ( (x TRAIN)
                  (s1 (set TRAIN))
                  (s2 (set TRAIN)) )
                (= (elem@@TRAIN x
                                (set-diff@@TRAIN s1
                                                 s2))
                   (and (elem@@TRAIN x
                                     s1)
                        (not (elem@@TRAIN x
                                          s2))))))

(assert (forall ( (x TRAIN)
                  (s1 (set TRAIN))
                  (s2 (set TRAIN)) )
                (= (elem@@TRAIN x
                                (intersect@@TRAIN s1
                                                  s2))
                   (and (elem@@TRAIN x
                                     s1)
                        (elem@@TRAIN x
                                     s2)))))

(assert (forall ( (x TRAIN)
                  (s1 (set TRAIN))
                  (s2 (set TRAIN)) )
                (= (elem@@TRAIN x
                                (bunion@@TRAIN s1
                                               s2))
                   (or (elem@@TRAIN x
                                    s1)
                       (elem@@TRAIN x
                                    s2)))))

(assert (forall ( (x TRAIN)
                  (s1 (set TRAIN))
                  (s2 (set TRAIN)) )
                (not (elem@@TRAIN x
                                  empty-set@@TRAIN))))

(assert (forall ( (f1 (pfun TRAIN
                            BLK))
                  (f2 (pfun TRAIN
                            BLK)) )
                (= (bunion@@TRAIN (dom@@TRAIN@@BLK f1)
                                  (dom@@TRAIN@@BLK f2))
                   (dom@@TRAIN@@BLK (ovl@@TRAIN@@BLK f1
                                                     f2)))))

(assert (= (dom@@TRAIN@@BLK empty-fun@@TRAIN@@BLK)
           empty-set@@TRAIN))

(assert (forall ( (x TRAIN)
                  (y BLK) )
                (= (dom@@TRAIN@@BLK (mk-fun@@TRAIN@@BLK x
                                                        y))
                   (mk-set@@TRAIN x))))

(assert (forall ( (f1 (pfun TRAIN
                            BLK))
                  (f2 (pfun TRAIN
                            BLK))
                  (x TRAIN) )
                (=> (elem@@TRAIN x
                                 (dom@@TRAIN@@BLK f2))
                    (= (select (ovl@@TRAIN@@BLK f1
                                                f2)
                               x)
                       (select f2
                               x)))))

(assert (forall ( (f1 (pfun TRAIN
                            BLK))
                  (f2 (pfun TRAIN
                            BLK))
                  (x TRAIN) )
                (=> (elem@@TRAIN x
                                 (set-diff@@TRAIN (dom@@TRAIN@@BLK f1)
                                                  (dom@@TRAIN@@BLK f2)))
                    (= (select (ovl@@TRAIN@@BLK f1
                                                f2)
                               x)
                       (select f1
                               x)))))

(assert (forall ( (f1 (pfun TRAIN
                            BLK))
                  (s1 (set TRAIN)) )
                (= (dom@@TRAIN@@BLK (dom-subt@@TRAIN@@BLK s1
                                                          f1))
                   (set-diff@@TRAIN (dom@@TRAIN@@BLK f1)
                                    s1))))

(assert (forall ( (x TRAIN)
                  (y BLK) )
                (= (select (mk-fun@@TRAIN@@BLK x
                                               y)
                           x)
                   y)))

(assert (forall ( (f1 (pfun TRAIN
                            BLK))
                  (s1 (set TRAIN))
                  (x TRAIN) )
                (=> (elem@@TRAIN x
                                 (intersect@@TRAIN s1
                                                   (dom@@TRAIN@@BLK f1)))
                    (= (select (dom-rest@@TRAIN@@BLK s1
                                                     f1)
                               x)
                       (select f1
                               x)))))

(assert (forall ( (f1 (pfun TRAIN
                            BLK))
                  (s1 (set TRAIN))
                  (x TRAIN) )
                (=> (elem@@TRAIN x
                                 (set-diff@@TRAIN (dom@@TRAIN@@BLK f1)
                                                  s1))
                    (= (select (dom-subt@@TRAIN@@BLK s1
                                                     f1)
                               x)
                       (select f1
                               x)))))

(assert (forall ( (x (pfun TRAIN
                           BLK))
                  (y (pfun TRAIN
                           BLK)) )
                (= (elem@Open@@pfun@@TRAIN@@BLK@Close x
                                                      (mk-set@Open@@pfun@@TRAIN@@BLK@Close y))
                   (= x
                      y))))

(assert (forall ( (x (pfun TRAIN
                           BLK))
                  (s1 (set (pfun TRAIN
                                 BLK)))
                  (s2 (set (pfun TRAIN
                                 BLK))) )
                (= (elem@Open@@pfun@@TRAIN@@BLK@Close x
                                                      (set-diff@Open@@pfun@@TRAIN@@BLK@Close s1
                                                                                             s2))
                   (and (elem@Open@@pfun@@TRAIN@@BLK@Close x
                                                           s1)
                        (not (elem@Open@@pfun@@TRAIN@@BLK@Close x
                                                                s2))))))

(assert (forall ( (x (pfun TRAIN
                           BLK))
                  (s1 (set (pfun TRAIN
                                 BLK)))
                  (s2 (set (pfun TRAIN
                                 BLK))) )
                (= (elem@Open@@pfun@@TRAIN@@BLK@Close x
                                                      (intersect@Open@@pfun@@TRAIN@@BLK@Close s1
                                                                                              s2))
                   (and (elem@Open@@pfun@@TRAIN@@BLK@Close x
                                                           s1)
                        (elem@Open@@pfun@@TRAIN@@BLK@Close x
                                                           s2)))))

(assert (forall ( (x (pfun TRAIN
                           BLK))
                  (s1 (set (pfun TRAIN
                                 BLK)))
                  (s2 (set (pfun TRAIN
                                 BLK))) )
                (= (elem@Open@@pfun@@TRAIN@@BLK@Close x
                                                      (bunion@Open@@pfun@@TRAIN@@BLK@Close s1
                                                                                           s2))
                   (or (elem@Open@@pfun@@TRAIN@@BLK@Close x
                                                          s1)
                       (elem@Open@@pfun@@TRAIN@@BLK@Close x
                                                          s2)))))

(assert (forall ( (x (pfun TRAIN
                           BLK))
                  (s1 (set (pfun TRAIN
                                 BLK)))
                  (s2 (set (pfun TRAIN
                                 BLK))) )
                (not (elem@Open@@pfun@@TRAIN@@BLK@Close x
                                                        empty-set@Open@@pfun@@TRAIN@@BLK@Close))))

(assert (and (not (= ent
                     ext))
             (not (elem@@BLK ent
                             PLF))
             (not (elem@@BLK ext
                             PLF))))

(assert (forall ( (p BLK) )
                (=> true
                    (= (not (= p
                               ext))
                       (elem@@BLK p
                                  (bunion@@BLK (mk-set@@BLK ent)
                                               PLF))))))

(assert (forall ( (p BLK) )
                (=> true
                    (= (not (= p
                               ent))
                       (elem@@BLK p
                                  (bunion@@BLK (mk-set@@BLK ext)
                                               PLF))))))

(assert (forall ( (p BLK) )
                (=> true
                    (= (or (= p
                              ent)
                           (= p
                              ext))
                       (not (elem@@BLK p
                                       PLF))))))

(assert (= BLK
           (bunion@@BLK (bunion@@BLK (mk-set@@BLK ent)
                                     (mk-set@@BLK ext))
                        PLF)))

(assert (forall ( (t TRAIN) )
                (=> (elem@@TRAIN t
                                 in)
                    (elem@@BLK (select loc
                                       t)
                               BLK))))

(assert (= (dom@@TRAIN@@BLK loc)
           in))

(assert (and (= (select loc
                        t)
                ext)
             (elem@@TRAIN t
                          in)))

(assert (not (exists ( (in@prime (set TRAIN))
                       (loc@prime (pfun TRAIN
                                        BLK)) )
                     (and (= in@prime
                             (set-diff@@TRAIN in
                                              (mk-set@@TRAIN t)))
                          (= loc@prime
                             (dom-subt@@TRAIN@@BLK (mk-set@@TRAIN t)
                                                   loc))))))

(check-sat-using (or-else (then qe smt) (then skip smt) (then (using-params simplify :expand-power true) smt)))

(pop)
(echo "> train0/leave/INV/inv1")
(push)
(declare-sort BLK 0)
(declare-sort LOC 0)
(declare-sort TRAIN 0)
(define-sort pfun (a b) (Array a b))
(declare-sort set 1)
(declare-const PLF (set BLK))
(declare-const BLK (set BLK))
(declare-const LOC (set LOC))
(declare-const TRAIN (set TRAIN))
(declare-const ent BLK)
(declare-const ext BLK)
(declare-const in (set TRAIN))
(declare-const in@prime (set TRAIN))
(declare-const loc (pfun TRAIN BLK))
(declare-const loc@prime (pfun TRAIN BLK))
(declare-const p BLK)
(declare-const q BLK)
(declare-const t TRAIN)
(declare-const t_0 TRAIN)
(declare-const t_1 TRAIN)
(declare-const t_2 TRAIN)
(declare-const t_3 TRAIN)
(declare-fun apply@@TRAIN@@BLK ((pfun TRAIN BLK) TRAIN) BLK)
(declare-fun dom-rest@@TRAIN@@BLK ((set TRAIN) (pfun TRAIN BLK)) (pfun TRAIN BLK))
(declare-fun dom-subt@@TRAIN@@BLK ((set TRAIN) (pfun TRAIN BLK)) (pfun TRAIN BLK))
(declare-fun dom@@TRAIN@@BLK ((pfun TRAIN BLK)) (set TRAIN))
(declare-fun elem@@BLK (BLK (set BLK)) Bool)
(declare-fun elem@@LOC (LOC (set LOC)) Bool)
(declare-fun elem@@TRAIN (TRAIN (set TRAIN)) Bool)
(declare-fun elem@Open@@pfun@@TRAIN@@BLK@Close ((pfun TRAIN BLK) (set (pfun TRAIN BLK))) Bool)
(declare-fun empty-fun@@TRAIN@@BLK () (pfun TRAIN BLK))
(declare-fun empty-set@@BLK () (set BLK))
(declare-fun empty-set@@LOC () (set LOC))
(declare-fun empty-set@@TRAIN () (set TRAIN))
(declare-fun empty-set@Open@@pfun@@TRAIN@@BLK@Close () (set (pfun TRAIN BLK)))
(declare-fun intersect@@BLK ((set BLK) (set BLK)) (set BLK))
(declare-fun intersect@@LOC ((set LOC) (set LOC)) (set LOC))
(declare-fun intersect@@TRAIN ((set TRAIN) (set TRAIN)) (set TRAIN))
(declare-fun intersect@Open@@pfun@@TRAIN@@BLK@Close ((set (pfun TRAIN BLK)) (set (pfun TRAIN BLK))) (set (pfun TRAIN BLK)))
(declare-fun mk-fun@@TRAIN@@BLK (TRAIN BLK) (pfun TRAIN BLK))
(declare-fun mk-set@@BLK (BLK) (set BLK))
(declare-fun mk-set@@LOC (LOC) (set LOC))
(declare-fun mk-set@@TRAIN (TRAIN) (set TRAIN))
(declare-fun mk-set@Open@@pfun@@TRAIN@@BLK@Close ((pfun TRAIN BLK)) (set (pfun TRAIN BLK)))
(declare-fun ovl@@TRAIN@@BLK ((pfun TRAIN BLK) (pfun TRAIN BLK)) (pfun TRAIN BLK))
(declare-fun set-diff@@BLK ((set BLK) (set BLK)) (set BLK))
(declare-fun set-diff@@LOC ((set LOC) (set LOC)) (set LOC))
(declare-fun set-diff@@TRAIN ((set TRAIN) (set TRAIN)) (set TRAIN))
(declare-fun set-diff@Open@@pfun@@TRAIN@@BLK@Close ((set (pfun TRAIN BLK)) (set (pfun TRAIN BLK))) (set (pfun TRAIN BLK)))
(declare-fun tfun@@TRAIN@@BLK ((set TRAIN) (set BLK)) (set (pfun TRAIN BLK)))
(declare-fun bunion@@BLK ((set BLK) (set BLK)) (set BLK))
(declare-fun bunion@@LOC ((set LOC) (set LOC)) (set LOC))
(declare-fun bunion@@TRAIN ((set TRAIN) (set TRAIN)) (set TRAIN))
(declare-fun bunion@Open@@pfun@@TRAIN@@BLK@Close ((set (pfun TRAIN BLK)) (set (pfun TRAIN BLK))) (set (pfun TRAIN BLK)))
(assert (forall ( (x BLK)
                  (y BLK) )
                (= (elem@@BLK x
                              (mk-set@@BLK y))
                   (= x
                      y))))

(assert (forall ( (x BLK)
                  (s1 (set BLK))
                  (s2 (set BLK)) )
                (= (elem@@BLK x
                              (set-diff@@BLK s1
                                             s2))
                   (and (elem@@BLK x
                                   s1)
                        (not (elem@@BLK x
                                        s2))))))

(assert (forall ( (x BLK)
                  (s1 (set BLK))
                  (s2 (set BLK)) )
                (= (elem@@BLK x
                              (intersect@@BLK s1
                                              s2))
                   (and (elem@@BLK x
                                   s1)
                        (elem@@BLK x
                                   s2)))))

(assert (forall ( (x BLK)
                  (s1 (set BLK))
                  (s2 (set BLK)) )
                (= (elem@@BLK x
                              (bunion@@BLK s1
                                           s2))
                   (or (elem@@BLK x
                                  s1)
                       (elem@@BLK x
                                  s2)))))

(assert (forall ( (x BLK)
                  (s1 (set BLK))
                  (s2 (set BLK)) )
                (not (elem@@BLK x
                                empty-set@@BLK))))

(assert (forall ( (x LOC)
                  (y LOC) )
                (= (elem@@LOC x
                              (mk-set@@LOC y))
                   (= x
                      y))))

(assert (forall ( (x LOC)
                  (s1 (set LOC))
                  (s2 (set LOC)) )
                (= (elem@@LOC x
                              (set-diff@@LOC s1
                                             s2))
                   (and (elem@@LOC x
                                   s1)
                        (not (elem@@LOC x
                                        s2))))))

(assert (forall ( (x LOC)
                  (s1 (set LOC))
                  (s2 (set LOC)) )
                (= (elem@@LOC x
                              (intersect@@LOC s1
                                              s2))
                   (and (elem@@LOC x
                                   s1)
                        (elem@@LOC x
                                   s2)))))

(assert (forall ( (x LOC)
                  (s1 (set LOC))
                  (s2 (set LOC)) )
                (= (elem@@LOC x
                              (bunion@@LOC s1
                                           s2))
                   (or (elem@@LOC x
                                  s1)
                       (elem@@LOC x
                                  s2)))))

(assert (forall ( (x LOC)
                  (s1 (set LOC))
                  (s2 (set LOC)) )
                (not (elem@@LOC x
                                empty-set@@LOC))))

(assert (forall ( (x TRAIN)
                  (y TRAIN) )
                (= (elem@@TRAIN x
                                (mk-set@@TRAIN y))
                   (= x
                      y))))

(assert (forall ( (x TRAIN)
                  (s1 (set TRAIN))
                  (s2 (set TRAIN)) )
                (= (elem@@TRAIN x
                                (set-diff@@TRAIN s1
                                                 s2))
                   (and (elem@@TRAIN x
                                     s1)
                        (not (elem@@TRAIN x
                                          s2))))))

(assert (forall ( (x TRAIN)
                  (s1 (set TRAIN))
                  (s2 (set TRAIN)) )
                (= (elem@@TRAIN x
                                (intersect@@TRAIN s1
                                                  s2))
                   (and (elem@@TRAIN x
                                     s1)
                        (elem@@TRAIN x
                                     s2)))))

(assert (forall ( (x TRAIN)
                  (s1 (set TRAIN))
                  (s2 (set TRAIN)) )
                (= (elem@@TRAIN x
                                (bunion@@TRAIN s1
                                               s2))
                   (or (elem@@TRAIN x
                                    s1)
                       (elem@@TRAIN x
                                    s2)))))

(assert (forall ( (x TRAIN)
                  (s1 (set TRAIN))
                  (s2 (set TRAIN)) )
                (not (elem@@TRAIN x
                                  empty-set@@TRAIN))))

(assert (forall ( (f1 (pfun TRAIN
                            BLK))
                  (f2 (pfun TRAIN
                            BLK)) )
                (= (bunion@@TRAIN (dom@@TRAIN@@BLK f1)
                                  (dom@@TRAIN@@BLK f2))
                   (dom@@TRAIN@@BLK (ovl@@TRAIN@@BLK f1
                                                     f2)))))

(assert (= (dom@@TRAIN@@BLK empty-fun@@TRAIN@@BLK)
           empty-set@@TRAIN))

(assert (forall ( (x TRAIN)
                  (y BLK) )
                (= (dom@@TRAIN@@BLK (mk-fun@@TRAIN@@BLK x
                                                        y))
                   (mk-set@@TRAIN x))))

(assert (forall ( (f1 (pfun TRAIN
                            BLK))
                  (f2 (pfun TRAIN
                            BLK))
                  (x TRAIN) )
                (=> (elem@@TRAIN x
                                 (dom@@TRAIN@@BLK f2))
                    (= (select (ovl@@TRAIN@@BLK f1
                                                f2)
                               x)
                       (select f2
                               x)))))

(assert (forall ( (f1 (pfun TRAIN
                            BLK))
                  (f2 (pfun TRAIN
                            BLK))
                  (x TRAIN) )
                (=> (elem@@TRAIN x
                                 (set-diff@@TRAIN (dom@@TRAIN@@BLK f1)
                                                  (dom@@TRAIN@@BLK f2)))
                    (= (select (ovl@@TRAIN@@BLK f1
                                                f2)
                               x)
                       (select f1
                               x)))))

(assert (forall ( (f1 (pfun TRAIN
                            BLK))
                  (s1 (set TRAIN)) )
                (= (dom@@TRAIN@@BLK (dom-subt@@TRAIN@@BLK s1
                                                          f1))
                   (set-diff@@TRAIN (dom@@TRAIN@@BLK f1)
                                    s1))))

(assert (forall ( (x TRAIN)
                  (y BLK) )
                (= (select (mk-fun@@TRAIN@@BLK x
                                               y)
                           x)
                   y)))

(assert (forall ( (f1 (pfun TRAIN
                            BLK))
                  (s1 (set TRAIN))
                  (x TRAIN) )
                (=> (elem@@TRAIN x
                                 (intersect@@TRAIN s1
                                                   (dom@@TRAIN@@BLK f1)))
                    (= (select (dom-rest@@TRAIN@@BLK s1
                                                     f1)
                               x)
                       (select f1
                               x)))))

(assert (forall ( (f1 (pfun TRAIN
                            BLK))
                  (s1 (set TRAIN))
                  (x TRAIN) )
                (=> (elem@@TRAIN x
                                 (set-diff@@TRAIN (dom@@TRAIN@@BLK f1)
                                                  s1))
                    (= (select (dom-subt@@TRAIN@@BLK s1
                                                     f1)
                               x)
                       (select f1
                               x)))))

(assert (forall ( (x (pfun TRAIN
                           BLK))
                  (y (pfun TRAIN
                           BLK)) )
                (= (elem@Open@@pfun@@TRAIN@@BLK@Close x
                                                      (mk-set@Open@@pfun@@TRAIN@@BLK@Close y))
                   (= x
                      y))))

(assert (forall ( (x (pfun TRAIN
                           BLK))
                  (s1 (set (pfun TRAIN
                                 BLK)))
                  (s2 (set (pfun TRAIN
                                 BLK))) )
                (= (elem@Open@@pfun@@TRAIN@@BLK@Close x
                                                      (set-diff@Open@@pfun@@TRAIN@@BLK@Close s1
                                                                                             s2))
                   (and (elem@Open@@pfun@@TRAIN@@BLK@Close x
                                                           s1)
                        (not (elem@Open@@pfun@@TRAIN@@BLK@Close x
                                                                s2))))))

(assert (forall ( (x (pfun TRAIN
                           BLK))
                  (s1 (set (pfun TRAIN
                                 BLK)))
                  (s2 (set (pfun TRAIN
                                 BLK))) )
                (= (elem@Open@@pfun@@TRAIN@@BLK@Close x
                                                      (intersect@Open@@pfun@@TRAIN@@BLK@Close s1
                                                                                              s2))
                   (and (elem@Open@@pfun@@TRAIN@@BLK@Close x
                                                           s1)
                        (elem@Open@@pfun@@TRAIN@@BLK@Close x
                                                           s2)))))

(assert (forall ( (x (pfun TRAIN
                           BLK))
                  (s1 (set (pfun TRAIN
                                 BLK)))
                  (s2 (set (pfun TRAIN
                                 BLK))) )
                (= (elem@Open@@pfun@@TRAIN@@BLK@Close x
                                                      (bunion@Open@@pfun@@TRAIN@@BLK@Close s1
                                                                                           s2))
                   (or (elem@Open@@pfun@@TRAIN@@BLK@Close x
                                                          s1)
                       (elem@Open@@pfun@@TRAIN@@BLK@Close x
                                                          s2)))))

(assert (forall ( (x (pfun TRAIN
                           BLK))
                  (s1 (set (pfun TRAIN
                                 BLK)))
                  (s2 (set (pfun TRAIN
                                 BLK))) )
                (not (elem@Open@@pfun@@TRAIN@@BLK@Close x
                                                        empty-set@Open@@pfun@@TRAIN@@BLK@Close))))

(assert (and (not (= ent
                     ext))
             (not (elem@@BLK ent
                             PLF))
             (not (elem@@BLK ext
                             PLF))))

(assert (forall ( (p BLK) )
                (=> true
                    (= (not (= p
                               ext))
                       (elem@@BLK p
                                  (bunion@@BLK (mk-set@@BLK ent)
                                               PLF))))))

(assert (forall ( (p BLK) )
                (=> true
                    (= (not (= p
                               ent))
                       (elem@@BLK p
                                  (bunion@@BLK (mk-set@@BLK ext)
                                               PLF))))))

(assert (forall ( (p BLK) )
                (=> true
                    (= (or (= p
                              ent)
                           (= p
                              ext))
                       (not (elem@@BLK p
                                       PLF))))))

(assert (= BLK
           (bunion@@BLK (bunion@@BLK (mk-set@@BLK ent)
                                     (mk-set@@BLK ext))
                        PLF)))

(assert (forall ( (t TRAIN) )
                (=> (elem@@TRAIN t
                                 in)
                    (elem@@BLK (select loc
                                       t)
                               BLK))))

(assert (= (dom@@TRAIN@@BLK loc)
           in))

(assert (and (= (select loc
                        t)
                ext)
             (elem@@TRAIN t
                          in)))

(assert (= in@prime
           (set-diff@@TRAIN in
                            (mk-set@@TRAIN t))))

(assert (= loc@prime
           (dom-subt@@TRAIN@@BLK (mk-set@@TRAIN t)
                                 loc)))

(assert (not (forall ( (t TRAIN) )
                     (=> (elem@@TRAIN t
                                      in@prime)
                         (elem@@BLK (select loc@prime
                                            t)
                                    BLK)))))

(check-sat-using (or-else (then qe smt) (then skip smt) (then (using-params simplify :expand-power true) smt)))

(pop)
(echo "> train0/leave/INV/inv2/goal (98,1)")
(push)
(declare-sort BLK 0)
(declare-sort LOC 0)
(declare-sort TRAIN 0)
(define-sort pfun (a b) (Array a b))
(declare-sort set 1)
(declare-const PLF (set BLK))
(declare-const BLK (set BLK))
(declare-const LOC (set LOC))
(declare-const TRAIN (set TRAIN))
(declare-const ent BLK)
(declare-const ext BLK)
(declare-const in (set TRAIN))
(declare-const in@prime (set TRAIN))
(declare-const loc (pfun TRAIN BLK))
(declare-const loc@prime (pfun TRAIN BLK))
(declare-const p BLK)
(declare-const q BLK)
(declare-const t TRAIN)
(declare-const t_0 TRAIN)
(declare-const t_1 TRAIN)
(declare-const t_2 TRAIN)
(declare-const t_3 TRAIN)
(declare-fun apply@@TRAIN@@BLK ((pfun TRAIN BLK) TRAIN) BLK)
(declare-fun dom-rest@@TRAIN@@BLK ((set TRAIN) (pfun TRAIN BLK)) (pfun TRAIN BLK))
(declare-fun dom-subt@@TRAIN@@BLK ((set TRAIN) (pfun TRAIN BLK)) (pfun TRAIN BLK))
(declare-fun dom@@TRAIN@@BLK ((pfun TRAIN BLK)) (set TRAIN))
(declare-fun elem@@BLK (BLK (set BLK)) Bool)
(declare-fun elem@@LOC (LOC (set LOC)) Bool)
(declare-fun elem@@TRAIN (TRAIN (set TRAIN)) Bool)
(declare-fun elem@Open@@pfun@@TRAIN@@BLK@Close ((pfun TRAIN BLK) (set (pfun TRAIN BLK))) Bool)
(declare-fun empty-fun@@TRAIN@@BLK () (pfun TRAIN BLK))
(declare-fun empty-set@@BLK () (set BLK))
(declare-fun empty-set@@LOC () (set LOC))
(declare-fun empty-set@@TRAIN () (set TRAIN))
(declare-fun empty-set@Open@@pfun@@TRAIN@@BLK@Close () (set (pfun TRAIN BLK)))
(declare-fun intersect@@BLK ((set BLK) (set BLK)) (set BLK))
(declare-fun intersect@@LOC ((set LOC) (set LOC)) (set LOC))
(declare-fun intersect@@TRAIN ((set TRAIN) (set TRAIN)) (set TRAIN))
(declare-fun intersect@Open@@pfun@@TRAIN@@BLK@Close ((set (pfun TRAIN BLK)) (set (pfun TRAIN BLK))) (set (pfun TRAIN BLK)))
(declare-fun mk-fun@@TRAIN@@BLK (TRAIN BLK) (pfun TRAIN BLK))
(declare-fun mk-set@@BLK (BLK) (set BLK))
(declare-fun mk-set@@LOC (LOC) (set LOC))
(declare-fun mk-set@@TRAIN (TRAIN) (set TRAIN))
(declare-fun mk-set@Open@@pfun@@TRAIN@@BLK@Close ((pfun TRAIN BLK)) (set (pfun TRAIN BLK)))
(declare-fun ovl@@TRAIN@@BLK ((pfun TRAIN BLK) (pfun TRAIN BLK)) (pfun TRAIN BLK))
(declare-fun set-diff@@BLK ((set BLK) (set BLK)) (set BLK))
(declare-fun set-diff@@LOC ((set LOC) (set LOC)) (set LOC))
(declare-fun set-diff@@TRAIN ((set TRAIN) (set TRAIN)) (set TRAIN))
(declare-fun set-diff@Open@@pfun@@TRAIN@@BLK@Close ((set (pfun TRAIN BLK)) (set (pfun TRAIN BLK))) (set (pfun TRAIN BLK)))
(declare-fun tfun@@TRAIN@@BLK ((set TRAIN) (set BLK)) (set (pfun TRAIN BLK)))
(declare-fun bunion@@BLK ((set BLK) (set BLK)) (set BLK))
(declare-fun bunion@@LOC ((set LOC) (set LOC)) (set LOC))
(declare-fun bunion@@TRAIN ((set TRAIN) (set TRAIN)) (set TRAIN))
(declare-fun bunion@Open@@pfun@@TRAIN@@BLK@Close ((set (pfun TRAIN BLK)) (set (pfun TRAIN BLK))) (set (pfun TRAIN BLK)))
(assert (= in@prime
           (dom@@TRAIN@@BLK loc@prime)))

(assert (not (= (dom@@TRAIN@@BLK loc@prime)
                in@prime)))

(check-sat-using (or-else (then qe smt) (then skip smt) (then (using-params simplify :expand-power true) smt)))

(pop)
(echo "> train0/leave/INV/inv2/hypotheses (98,1)")
(push)
(declare-sort BLK 0)
(declare-sort LOC 0)
(declare-sort TRAIN 0)
(define-sort pfun (a b) (Array a b))
(declare-sort set 1)
(declare-const PLF (set BLK))
(declare-const BLK (set BLK))
(declare-const LOC (set LOC))
(declare-const TRAIN (set TRAIN))
(declare-const ent BLK)
(declare-const ext BLK)
(declare-const in (set TRAIN))
(declare-const in@prime (set TRAIN))
(declare-const loc (pfun TRAIN BLK))
(declare-const loc@prime (pfun TRAIN BLK))
(declare-const p BLK)
(declare-const q BLK)
(declare-const t TRAIN)
(declare-const t_0 TRAIN)
(declare-const t_1 TRAIN)
(declare-const t_2 TRAIN)
(declare-const t_3 TRAIN)
(declare-fun apply@@TRAIN@@BLK ((pfun TRAIN BLK) TRAIN) BLK)
(declare-fun dom-rest@@TRAIN@@BLK ((set TRAIN) (pfun TRAIN BLK)) (pfun TRAIN BLK))
(declare-fun dom-subt@@TRAIN@@BLK ((set TRAIN) (pfun TRAIN BLK)) (pfun TRAIN BLK))
(declare-fun dom@@TRAIN@@BLK ((pfun TRAIN BLK)) (set TRAIN))
(declare-fun elem@@BLK (BLK (set BLK)) Bool)
(declare-fun elem@@LOC (LOC (set LOC)) Bool)
(declare-fun elem@@TRAIN (TRAIN (set TRAIN)) Bool)
(declare-fun elem@Open@@pfun@@TRAIN@@BLK@Close ((pfun TRAIN BLK) (set (pfun TRAIN BLK))) Bool)
(declare-fun empty-fun@@TRAIN@@BLK () (pfun TRAIN BLK))
(declare-fun empty-set@@BLK () (set BLK))
(declare-fun empty-set@@LOC () (set LOC))
(declare-fun empty-set@@TRAIN () (set TRAIN))
(declare-fun empty-set@Open@@pfun@@TRAIN@@BLK@Close () (set (pfun TRAIN BLK)))
(declare-fun intersect@@BLK ((set BLK) (set BLK)) (set BLK))
(declare-fun intersect@@LOC ((set LOC) (set LOC)) (set LOC))
(declare-fun intersect@@TRAIN ((set TRAIN) (set TRAIN)) (set TRAIN))
(declare-fun intersect@Open@@pfun@@TRAIN@@BLK@Close ((set (pfun TRAIN BLK)) (set (pfun TRAIN BLK))) (set (pfun TRAIN BLK)))
(declare-fun mk-fun@@TRAIN@@BLK (TRAIN BLK) (pfun TRAIN BLK))
(declare-fun mk-set@@BLK (BLK) (set BLK))
(declare-fun mk-set@@LOC (LOC) (set LOC))
(declare-fun mk-set@@TRAIN (TRAIN) (set TRAIN))
(declare-fun mk-set@Open@@pfun@@TRAIN@@BLK@Close ((pfun TRAIN BLK)) (set (pfun TRAIN BLK)))
(declare-fun ovl@@TRAIN@@BLK ((pfun TRAIN BLK) (pfun TRAIN BLK)) (pfun TRAIN BLK))
(declare-fun set-diff@@BLK ((set BLK) (set BLK)) (set BLK))
(declare-fun set-diff@@LOC ((set LOC) (set LOC)) (set LOC))
(declare-fun set-diff@@TRAIN ((set TRAIN) (set TRAIN)) (set TRAIN))
(declare-fun set-diff@Open@@pfun@@TRAIN@@BLK@Close ((set (pfun TRAIN BLK)) (set (pfun TRAIN BLK))) (set (pfun TRAIN BLK)))
(declare-fun tfun@@TRAIN@@BLK ((set TRAIN) (set BLK)) (set (pfun TRAIN BLK)))
(declare-fun bunion@@BLK ((set BLK) (set BLK)) (set BLK))
(declare-fun bunion@@LOC ((set LOC) (set LOC)) (set LOC))
(declare-fun bunion@@TRAIN ((set TRAIN) (set TRAIN)) (set TRAIN))
(declare-fun bunion@Open@@pfun@@TRAIN@@BLK@Close ((set (pfun TRAIN BLK)) (set (pfun TRAIN BLK))) (set (pfun TRAIN BLK)))
(assert (forall ( (x BLK)
                  (y BLK) )
                (= (elem@@BLK x
                              (mk-set@@BLK y))
                   (= x
                      y))))

(assert (forall ( (x BLK)
                  (s1 (set BLK))
                  (s2 (set BLK)) )
                (= (elem@@BLK x
                              (set-diff@@BLK s1
                                             s2))
                   (and (elem@@BLK x
                                   s1)
                        (not (elem@@BLK x
                                        s2))))))

(assert (forall ( (x BLK)
                  (s1 (set BLK))
                  (s2 (set BLK)) )
                (= (elem@@BLK x
                              (intersect@@BLK s1
                                              s2))
                   (and (elem@@BLK x
                                   s1)
                        (elem@@BLK x
                                   s2)))))

(assert (forall ( (x BLK)
                  (s1 (set BLK))
                  (s2 (set BLK)) )
                (= (elem@@BLK x
                              (bunion@@BLK s1
                                           s2))
                   (or (elem@@BLK x
                                  s1)
                       (elem@@BLK x
                                  s2)))))

(assert (forall ( (x BLK)
                  (s1 (set BLK))
                  (s2 (set BLK)) )
                (not (elem@@BLK x
                                empty-set@@BLK))))

(assert (forall ( (x LOC)
                  (y LOC) )
                (= (elem@@LOC x
                              (mk-set@@LOC y))
                   (= x
                      y))))

(assert (forall ( (x LOC)
                  (s1 (set LOC))
                  (s2 (set LOC)) )
                (= (elem@@LOC x
                              (set-diff@@LOC s1
                                             s2))
                   (and (elem@@LOC x
                                   s1)
                        (not (elem@@LOC x
                                        s2))))))

(assert (forall ( (x LOC)
                  (s1 (set LOC))
                  (s2 (set LOC)) )
                (= (elem@@LOC x
                              (intersect@@LOC s1
                                              s2))
                   (and (elem@@LOC x
                                   s1)
                        (elem@@LOC x
                                   s2)))))

(assert (forall ( (x LOC)
                  (s1 (set LOC))
                  (s2 (set LOC)) )
                (= (elem@@LOC x
                              (bunion@@LOC s1
                                           s2))
                   (or (elem@@LOC x
                                  s1)
                       (elem@@LOC x
                                  s2)))))

(assert (forall ( (x LOC)
                  (s1 (set LOC))
                  (s2 (set LOC)) )
                (not (elem@@LOC x
                                empty-set@@LOC))))

(assert (forall ( (x TRAIN)
                  (y TRAIN) )
                (= (elem@@TRAIN x
                                (mk-set@@TRAIN y))
                   (= x
                      y))))

(assert (forall ( (x TRAIN)
                  (s1 (set TRAIN))
                  (s2 (set TRAIN)) )
                (= (elem@@TRAIN x
                                (set-diff@@TRAIN s1
                                                 s2))
                   (and (elem@@TRAIN x
                                     s1)
                        (not (elem@@TRAIN x
                                          s2))))))

(assert (forall ( (x TRAIN)
                  (s1 (set TRAIN))
                  (s2 (set TRAIN)) )
                (= (elem@@TRAIN x
                                (intersect@@TRAIN s1
                                                  s2))
                   (and (elem@@TRAIN x
                                     s1)
                        (elem@@TRAIN x
                                     s2)))))

(assert (forall ( (x TRAIN)
                  (s1 (set TRAIN))
                  (s2 (set TRAIN)) )
                (= (elem@@TRAIN x
                                (bunion@@TRAIN s1
                                               s2))
                   (or (elem@@TRAIN x
                                    s1)
                       (elem@@TRAIN x
                                    s2)))))

(assert (forall ( (x TRAIN)
                  (s1 (set TRAIN))
                  (s2 (set TRAIN)) )
                (not (elem@@TRAIN x
                                  empty-set@@TRAIN))))

(assert (forall ( (f1 (pfun TRAIN
                            BLK))
                  (f2 (pfun TRAIN
                            BLK)) )
                (= (bunion@@TRAIN (dom@@TRAIN@@BLK f1)
                                  (dom@@TRAIN@@BLK f2))
                   (dom@@TRAIN@@BLK (ovl@@TRAIN@@BLK f1
                                                     f2)))))

(assert (= (dom@@TRAIN@@BLK empty-fun@@TRAIN@@BLK)
           empty-set@@TRAIN))

(assert (forall ( (x TRAIN)
                  (y BLK) )
                (= (dom@@TRAIN@@BLK (mk-fun@@TRAIN@@BLK x
                                                        y))
                   (mk-set@@TRAIN x))))

(assert (forall ( (f1 (pfun TRAIN
                            BLK))
                  (f2 (pfun TRAIN
                            BLK))
                  (x TRAIN) )
                (=> (elem@@TRAIN x
                                 (dom@@TRAIN@@BLK f2))
                    (= (select (ovl@@TRAIN@@BLK f1
                                                f2)
                               x)
                       (select f2
                               x)))))

(assert (forall ( (f1 (pfun TRAIN
                            BLK))
                  (f2 (pfun TRAIN
                            BLK))
                  (x TRAIN) )
                (=> (elem@@TRAIN x
                                 (set-diff@@TRAIN (dom@@TRAIN@@BLK f1)
                                                  (dom@@TRAIN@@BLK f2)))
                    (= (select (ovl@@TRAIN@@BLK f1
                                                f2)
                               x)
                       (select f1
                               x)))))

(assert (forall ( (f1 (pfun TRAIN
                            BLK))
                  (s1 (set TRAIN)) )
                (= (dom@@TRAIN@@BLK (dom-subt@@TRAIN@@BLK s1
                                                          f1))
                   (set-diff@@TRAIN (dom@@TRAIN@@BLK f1)
                                    s1))))

(assert (forall ( (x TRAIN)
                  (y BLK) )
                (= (select (mk-fun@@TRAIN@@BLK x
                                               y)
                           x)
                   y)))

(assert (forall ( (f1 (pfun TRAIN
                            BLK))
                  (s1 (set TRAIN))
                  (x TRAIN) )
                (=> (elem@@TRAIN x
                                 (intersect@@TRAIN s1
                                                   (dom@@TRAIN@@BLK f1)))
                    (= (select (dom-rest@@TRAIN@@BLK s1
                                                     f1)
                               x)
                       (select f1
                               x)))))

(assert (forall ( (f1 (pfun TRAIN
                            BLK))
                  (s1 (set TRAIN))
                  (x TRAIN) )
                (=> (elem@@TRAIN x
                                 (set-diff@@TRAIN (dom@@TRAIN@@BLK f1)
                                                  s1))
                    (= (select (dom-subt@@TRAIN@@BLK s1
                                                     f1)
                               x)
                       (select f1
                               x)))))

(assert (forall ( (x (pfun TRAIN
                           BLK))
                  (y (pfun TRAIN
                           BLK)) )
                (= (elem@Open@@pfun@@TRAIN@@BLK@Close x
                                                      (mk-set@Open@@pfun@@TRAIN@@BLK@Close y))
                   (= x
                      y))))

(assert (forall ( (x (pfun TRAIN
                           BLK))
                  (s1 (set (pfun TRAIN
                                 BLK)))
                  (s2 (set (pfun TRAIN
                                 BLK))) )
                (= (elem@Open@@pfun@@TRAIN@@BLK@Close x
                                                      (set-diff@Open@@pfun@@TRAIN@@BLK@Close s1
                                                                                             s2))
                   (and (elem@Open@@pfun@@TRAIN@@BLK@Close x
                                                           s1)
                        (not (elem@Open@@pfun@@TRAIN@@BLK@Close x
                                                                s2))))))

(assert (forall ( (x (pfun TRAIN
                           BLK))
                  (s1 (set (pfun TRAIN
                                 BLK)))
                  (s2 (set (pfun TRAIN
                                 BLK))) )
                (= (elem@Open@@pfun@@TRAIN@@BLK@Close x
                                                      (intersect@Open@@pfun@@TRAIN@@BLK@Close s1
                                                                                              s2))
                   (and (elem@Open@@pfun@@TRAIN@@BLK@Close x
                                                           s1)
                        (elem@Open@@pfun@@TRAIN@@BLK@Close x
                                                           s2)))))

(assert (forall ( (x (pfun TRAIN
                           BLK))
                  (s1 (set (pfun TRAIN
                                 BLK)))
                  (s2 (set (pfun TRAIN
                                 BLK))) )
                (= (elem@Open@@pfun@@TRAIN@@BLK@Close x
                                                      (bunion@Open@@pfun@@TRAIN@@BLK@Close s1
                                                                                           s2))
                   (or (elem@Open@@pfun@@TRAIN@@BLK@Close x
                                                          s1)
                       (elem@Open@@pfun@@TRAIN@@BLK@Close x
                                                          s2)))))

(assert (forall ( (x (pfun TRAIN
                           BLK))
                  (s1 (set (pfun TRAIN
                                 BLK)))
                  (s2 (set (pfun TRAIN
                                 BLK))) )
                (not (elem@Open@@pfun@@TRAIN@@BLK@Close x
                                                        empty-set@Open@@pfun@@TRAIN@@BLK@Close))))

(assert (and (not (= ent
                     ext))
             (not (elem@@BLK ent
                             PLF))
             (not (elem@@BLK ext
                             PLF))))

(assert (forall ( (p BLK) )
                (=> true
                    (= (not (= p
                               ext))
                       (elem@@BLK p
                                  (bunion@@BLK (mk-set@@BLK ent)
                                               PLF))))))

(assert (forall ( (p BLK) )
                (=> true
                    (= (not (= p
                               ent))
                       (elem@@BLK p
                                  (bunion@@BLK (mk-set@@BLK ext)
                                               PLF))))))

(assert (forall ( (p BLK) )
                (=> true
                    (= (or (= p
                              ent)
                           (= p
                              ext))
                       (not (elem@@BLK p
                                       PLF))))))

(assert (= BLK
           (bunion@@BLK (bunion@@BLK (mk-set@@BLK ent)
                                     (mk-set@@BLK ext))
                        PLF)))

(assert (forall ( (t TRAIN) )
                (=> (elem@@TRAIN t
                                 in)
                    (elem@@BLK (select loc
                                       t)
                               BLK))))

(assert (= (dom@@TRAIN@@BLK loc)
           in))

(assert (and (= (select loc
                        t)
                ext)
             (elem@@TRAIN t
                          in)))

(assert (= in@prime
           (set-diff@@TRAIN in
                            (mk-set@@TRAIN t))))

(assert (= loc@prime
           (dom-subt@@TRAIN@@BLK (mk-set@@TRAIN t)
                                 loc)))

(assert (not (and (= in@prime
                     (set-diff@@TRAIN in
                                      (mk-set@@TRAIN t)))
                  (= (dom@@TRAIN@@BLK loc)
                     in)
                  (= loc@prime
                     (dom-subt@@TRAIN@@BLK (mk-set@@TRAIN t)
                                           loc)))))

(check-sat-using (or-else (then qe smt) (then skip smt) (then (using-params simplify :expand-power true) smt)))

(pop)
(echo "> train0/leave/INV/inv2/relation (98,1)")
(push)
(declare-sort BLK 0)
(declare-sort LOC 0)
(declare-sort TRAIN 0)
(define-sort pfun (a b) (Array a b))
(declare-sort set 1)
(declare-const PLF (set BLK))
(declare-const BLK (set BLK))
(declare-const LOC (set LOC))
(declare-const TRAIN (set TRAIN))
(declare-const ent BLK)
(declare-const ext BLK)
(declare-const in (set TRAIN))
(declare-const in@prime (set TRAIN))
(declare-const loc (pfun TRAIN BLK))
(declare-const loc@prime (pfun TRAIN BLK))
(declare-const p BLK)
(declare-const q BLK)
(declare-const t TRAIN)
(declare-const t_0 TRAIN)
(declare-const t_1 TRAIN)
(declare-const t_2 TRAIN)
(declare-const t_3 TRAIN)
(declare-fun apply@@TRAIN@@BLK ((pfun TRAIN BLK) TRAIN) BLK)
(declare-fun dom-rest@@TRAIN@@BLK ((set TRAIN) (pfun TRAIN BLK)) (pfun TRAIN BLK))
(declare-fun dom-subt@@TRAIN@@BLK ((set TRAIN) (pfun TRAIN BLK)) (pfun TRAIN BLK))
(declare-fun dom@@TRAIN@@BLK ((pfun TRAIN BLK)) (set TRAIN))
(declare-fun elem@@BLK (BLK (set BLK)) Bool)
(declare-fun elem@@LOC (LOC (set LOC)) Bool)
(declare-fun elem@@TRAIN (TRAIN (set TRAIN)) Bool)
(declare-fun elem@Open@@pfun@@TRAIN@@BLK@Close ((pfun TRAIN BLK) (set (pfun TRAIN BLK))) Bool)
(declare-fun empty-fun@@TRAIN@@BLK () (pfun TRAIN BLK))
(declare-fun empty-set@@BLK () (set BLK))
(declare-fun empty-set@@LOC () (set LOC))
(declare-fun empty-set@@TRAIN () (set TRAIN))
(declare-fun empty-set@Open@@pfun@@TRAIN@@BLK@Close () (set (pfun TRAIN BLK)))
(declare-fun intersect@@BLK ((set BLK) (set BLK)) (set BLK))
(declare-fun intersect@@LOC ((set LOC) (set LOC)) (set LOC))
(declare-fun intersect@@TRAIN ((set TRAIN) (set TRAIN)) (set TRAIN))
(declare-fun intersect@Open@@pfun@@TRAIN@@BLK@Close ((set (pfun TRAIN BLK)) (set (pfun TRAIN BLK))) (set (pfun TRAIN BLK)))
(declare-fun mk-fun@@TRAIN@@BLK (TRAIN BLK) (pfun TRAIN BLK))
(declare-fun mk-set@@BLK (BLK) (set BLK))
(declare-fun mk-set@@LOC (LOC) (set LOC))
(declare-fun mk-set@@TRAIN (TRAIN) (set TRAIN))
(declare-fun mk-set@Open@@pfun@@TRAIN@@BLK@Close ((pfun TRAIN BLK)) (set (pfun TRAIN BLK)))
(declare-fun ovl@@TRAIN@@BLK ((pfun TRAIN BLK) (pfun TRAIN BLK)) (pfun TRAIN BLK))
(declare-fun set-diff@@BLK ((set BLK) (set BLK)) (set BLK))
(declare-fun set-diff@@LOC ((set LOC) (set LOC)) (set LOC))
(declare-fun set-diff@@TRAIN ((set TRAIN) (set TRAIN)) (set TRAIN))
(declare-fun set-diff@Open@@pfun@@TRAIN@@BLK@Close ((set (pfun TRAIN BLK)) (set (pfun TRAIN BLK))) (set (pfun TRAIN BLK)))
(declare-fun tfun@@TRAIN@@BLK ((set TRAIN) (set BLK)) (set (pfun TRAIN BLK)))
(declare-fun bunion@@BLK ((set BLK) (set BLK)) (set BLK))
(declare-fun bunion@@LOC ((set LOC) (set LOC)) (set LOC))
(declare-fun bunion@@TRAIN ((set TRAIN) (set TRAIN)) (set TRAIN))
(declare-fun bunion@Open@@pfun@@TRAIN@@BLK@Close ((set (pfun TRAIN BLK)) (set (pfun TRAIN BLK))) (set (pfun TRAIN BLK)))
(assert (= in@prime
           (set-diff@@TRAIN in
                            (mk-set@@TRAIN t))))

(assert (= (set-diff@@TRAIN in
                            (mk-set@@TRAIN t))
           (set-diff@@TRAIN (dom@@TRAIN@@BLK loc)
                            (mk-set@@TRAIN t))))

(assert (= (set-diff@@TRAIN (dom@@TRAIN@@BLK loc)
                            (mk-set@@TRAIN t))
           (dom@@TRAIN@@BLK (dom-subt@@TRAIN@@BLK (mk-set@@TRAIN t)
                                                  loc))))

(assert (= (dom@@TRAIN@@BLK (dom-subt@@TRAIN@@BLK (mk-set@@TRAIN t)
                                                  loc))
           (dom@@TRAIN@@BLK loc@prime)))

(assert (forall ( (x BLK)
                  (y BLK) )
                (= (elem@@BLK x
                              (mk-set@@BLK y))
                   (= x
                      y))))

(assert (forall ( (x BLK)
                  (s1 (set BLK))
                  (s2 (set BLK)) )
                (= (elem@@BLK x
                              (set-diff@@BLK s1
                                             s2))
                   (and (elem@@BLK x
                                   s1)
                        (not (elem@@BLK x
                                        s2))))))

(assert (forall ( (x BLK)
                  (s1 (set BLK))
                  (s2 (set BLK)) )
                (= (elem@@BLK x
                              (intersect@@BLK s1
                                              s2))
                   (and (elem@@BLK x
                                   s1)
                        (elem@@BLK x
                                   s2)))))

(assert (forall ( (x BLK)
                  (s1 (set BLK))
                  (s2 (set BLK)) )
                (= (elem@@BLK x
                              (bunion@@BLK s1
                                           s2))
                   (or (elem@@BLK x
                                  s1)
                       (elem@@BLK x
                                  s2)))))

(assert (forall ( (x BLK)
                  (s1 (set BLK))
                  (s2 (set BLK)) )
                (not (elem@@BLK x
                                empty-set@@BLK))))

(assert (forall ( (x LOC)
                  (y LOC) )
                (= (elem@@LOC x
                              (mk-set@@LOC y))
                   (= x
                      y))))

(assert (forall ( (x LOC)
                  (s1 (set LOC))
                  (s2 (set LOC)) )
                (= (elem@@LOC x
                              (set-diff@@LOC s1
                                             s2))
                   (and (elem@@LOC x
                                   s1)
                        (not (elem@@LOC x
                                        s2))))))

(assert (forall ( (x LOC)
                  (s1 (set LOC))
                  (s2 (set LOC)) )
                (= (elem@@LOC x
                              (intersect@@LOC s1
                                              s2))
                   (and (elem@@LOC x
                                   s1)
                        (elem@@LOC x
                                   s2)))))

(assert (forall ( (x LOC)
                  (s1 (set LOC))
                  (s2 (set LOC)) )
                (= (elem@@LOC x
                              (bunion@@LOC s1
                                           s2))
                   (or (elem@@LOC x
                                  s1)
                       (elem@@LOC x
                                  s2)))))

(assert (forall ( (x LOC)
                  (s1 (set LOC))
                  (s2 (set LOC)) )
                (not (elem@@LOC x
                                empty-set@@LOC))))

(assert (forall ( (x TRAIN)
                  (y TRAIN) )
                (= (elem@@TRAIN x
                                (mk-set@@TRAIN y))
                   (= x
                      y))))

(assert (forall ( (x TRAIN)
                  (s1 (set TRAIN))
                  (s2 (set TRAIN)) )
                (= (elem@@TRAIN x
                                (set-diff@@TRAIN s1
                                                 s2))
                   (and (elem@@TRAIN x
                                     s1)
                        (not (elem@@TRAIN x
                                          s2))))))

(assert (forall ( (x TRAIN)
                  (s1 (set TRAIN))
                  (s2 (set TRAIN)) )
                (= (elem@@TRAIN x
                                (intersect@@TRAIN s1
                                                  s2))
                   (and (elem@@TRAIN x
                                     s1)
                        (elem@@TRAIN x
                                     s2)))))

(assert (forall ( (x TRAIN)
                  (s1 (set TRAIN))
                  (s2 (set TRAIN)) )
                (= (elem@@TRAIN x
                                (bunion@@TRAIN s1
                                               s2))
                   (or (elem@@TRAIN x
                                    s1)
                       (elem@@TRAIN x
                                    s2)))))

(assert (forall ( (x TRAIN)
                  (s1 (set TRAIN))
                  (s2 (set TRAIN)) )
                (not (elem@@TRAIN x
                                  empty-set@@TRAIN))))

(assert (forall ( (f1 (pfun TRAIN
                            BLK))
                  (f2 (pfun TRAIN
                            BLK)) )
                (= (bunion@@TRAIN (dom@@TRAIN@@BLK f1)
                                  (dom@@TRAIN@@BLK f2))
                   (dom@@TRAIN@@BLK (ovl@@TRAIN@@BLK f1
                                                     f2)))))

(assert (= (dom@@TRAIN@@BLK empty-fun@@TRAIN@@BLK)
           empty-set@@TRAIN))

(assert (forall ( (x TRAIN)
                  (y BLK) )
                (= (dom@@TRAIN@@BLK (mk-fun@@TRAIN@@BLK x
                                                        y))
                   (mk-set@@TRAIN x))))

(assert (forall ( (f1 (pfun TRAIN
                            BLK))
                  (f2 (pfun TRAIN
                            BLK))
                  (x TRAIN) )
                (=> (elem@@TRAIN x
                                 (dom@@TRAIN@@BLK f2))
                    (= (select (ovl@@TRAIN@@BLK f1
                                                f2)
                               x)
                       (select f2
                               x)))))

(assert (forall ( (f1 (pfun TRAIN
                            BLK))
                  (f2 (pfun TRAIN
                            BLK))
                  (x TRAIN) )
                (=> (elem@@TRAIN x
                                 (set-diff@@TRAIN (dom@@TRAIN@@BLK f1)
                                                  (dom@@TRAIN@@BLK f2)))
                    (= (select (ovl@@TRAIN@@BLK f1
                                                f2)
                               x)
                       (select f1
                               x)))))

(assert (forall ( (f1 (pfun TRAIN
                            BLK))
                  (s1 (set TRAIN)) )
                (= (dom@@TRAIN@@BLK (dom-subt@@TRAIN@@BLK s1
                                                          f1))
                   (set-diff@@TRAIN (dom@@TRAIN@@BLK f1)
                                    s1))))

(assert (forall ( (x TRAIN)
                  (y BLK) )
                (= (select (mk-fun@@TRAIN@@BLK x
                                               y)
                           x)
                   y)))

(assert (forall ( (f1 (pfun TRAIN
                            BLK))
                  (s1 (set TRAIN))
                  (x TRAIN) )
                (=> (elem@@TRAIN x
                                 (intersect@@TRAIN s1
                                                   (dom@@TRAIN@@BLK f1)))
                    (= (select (dom-rest@@TRAIN@@BLK s1
                                                     f1)
                               x)
                       (select f1
                               x)))))

(assert (forall ( (f1 (pfun TRAIN
                            BLK))
                  (s1 (set TRAIN))
                  (x TRAIN) )
                (=> (elem@@TRAIN x
                                 (set-diff@@TRAIN (dom@@TRAIN@@BLK f1)
                                                  s1))
                    (= (select (dom-subt@@TRAIN@@BLK s1
                                                     f1)
                               x)
                       (select f1
                               x)))))

(assert (forall ( (x (pfun TRAIN
                           BLK))
                  (y (pfun TRAIN
                           BLK)) )
                (= (elem@Open@@pfun@@TRAIN@@BLK@Close x
                                                      (mk-set@Open@@pfun@@TRAIN@@BLK@Close y))
                   (= x
                      y))))

(assert (forall ( (x (pfun TRAIN
                           BLK))
                  (s1 (set (pfun TRAIN
                                 BLK)))
                  (s2 (set (pfun TRAIN
                                 BLK))) )
                (= (elem@Open@@pfun@@TRAIN@@BLK@Close x
                                                      (set-diff@Open@@pfun@@TRAIN@@BLK@Close s1
                                                                                             s2))
                   (and (elem@Open@@pfun@@TRAIN@@BLK@Close x
                                                           s1)
                        (not (elem@Open@@pfun@@TRAIN@@BLK@Close x
                                                                s2))))))

(assert (forall ( (x (pfun TRAIN
                           BLK))
                  (s1 (set (pfun TRAIN
                                 BLK)))
                  (s2 (set (pfun TRAIN
                                 BLK))) )
                (= (elem@Open@@pfun@@TRAIN@@BLK@Close x
                                                      (intersect@Open@@pfun@@TRAIN@@BLK@Close s1
                                                                                              s2))
                   (and (elem@Open@@pfun@@TRAIN@@BLK@Close x
                                                           s1)
                        (elem@Open@@pfun@@TRAIN@@BLK@Close x
                                                           s2)))))

(assert (forall ( (x (pfun TRAIN
                           BLK))
                  (s1 (set (pfun TRAIN
                                 BLK)))
                  (s2 (set (pfun TRAIN
                                 BLK))) )
                (= (elem@Open@@pfun@@TRAIN@@BLK@Close x
                                                      (bunion@Open@@pfun@@TRAIN@@BLK@Close s1
                                                                                           s2))
                   (or (elem@Open@@pfun@@TRAIN@@BLK@Close x
                                                          s1)
                       (elem@Open@@pfun@@TRAIN@@BLK@Close x
                                                          s2)))))

(assert (forall ( (x (pfun TRAIN
                           BLK))
                  (s1 (set (pfun TRAIN
                                 BLK)))
                  (s2 (set (pfun TRAIN
                                 BLK))) )
                (not (elem@Open@@pfun@@TRAIN@@BLK@Close x
                                                        empty-set@Open@@pfun@@TRAIN@@BLK@Close))))

(assert (and (not (= ent
                     ext))
             (not (elem@@BLK ent
                             PLF))
             (not (elem@@BLK ext
                             PLF))))

(assert (forall ( (p BLK) )
                (=> true
                    (= (not (= p
                               ext))
                       (elem@@BLK p
                                  (bunion@@BLK (mk-set@@BLK ent)
                                               PLF))))))

(assert (forall ( (p BLK) )
                (=> true
                    (= (not (= p
                               ent))
                       (elem@@BLK p
                                  (bunion@@BLK (mk-set@@BLK ext)
                                               PLF))))))

(assert (forall ( (p BLK) )
                (=> true
                    (= (or (= p
                              ent)
                           (= p
                              ext))
                       (not (elem@@BLK p
                                       PLF))))))

(assert (= BLK
           (bunion@@BLK (bunion@@BLK (mk-set@@BLK ent)
                                     (mk-set@@BLK ext))
                        PLF)))

(assert (not (= in@prime
                (dom@@TRAIN@@BLK loc@prime))))

(check-sat-using (or-else (then qe smt) (then skip smt) (then (using-params simplify :expand-power true) smt)))

(pop)
(echo "> train0/leave/INV/inv2/step (100,1)")
(push)
(declare-sort BLK 0)
(declare-sort LOC 0)
(declare-sort TRAIN 0)
(define-sort pfun (a b) (Array a b))
(declare-sort set 1)
(declare-const PLF (set BLK))
(declare-const BLK (set BLK))
(declare-const LOC (set LOC))
(declare-const TRAIN (set TRAIN))
(declare-const ent BLK)
(declare-const ext BLK)
(declare-const in (set TRAIN))
(declare-const in@prime (set TRAIN))
(declare-const loc (pfun TRAIN BLK))
(declare-const loc@prime (pfun TRAIN BLK))
(declare-const p BLK)
(declare-const q BLK)
(declare-const t TRAIN)
(declare-const t_0 TRAIN)
(declare-const t_1 TRAIN)
(declare-const t_2 TRAIN)
(declare-const t_3 TRAIN)
(declare-fun apply@@TRAIN@@BLK ((pfun TRAIN BLK) TRAIN) BLK)
(declare-fun dom-rest@@TRAIN@@BLK ((set TRAIN) (pfun TRAIN BLK)) (pfun TRAIN BLK))
(declare-fun dom-subt@@TRAIN@@BLK ((set TRAIN) (pfun TRAIN BLK)) (pfun TRAIN BLK))
(declare-fun dom@@TRAIN@@BLK ((pfun TRAIN BLK)) (set TRAIN))
(declare-fun elem@@BLK (BLK (set BLK)) Bool)
(declare-fun elem@@LOC (LOC (set LOC)) Bool)
(declare-fun elem@@TRAIN (TRAIN (set TRAIN)) Bool)
(declare-fun elem@Open@@pfun@@TRAIN@@BLK@Close ((pfun TRAIN BLK) (set (pfun TRAIN BLK))) Bool)
(declare-fun empty-fun@@TRAIN@@BLK () (pfun TRAIN BLK))
(declare-fun empty-set@@BLK () (set BLK))
(declare-fun empty-set@@LOC () (set LOC))
(declare-fun empty-set@@TRAIN () (set TRAIN))
(declare-fun empty-set@Open@@pfun@@TRAIN@@BLK@Close () (set (pfun TRAIN BLK)))
(declare-fun intersect@@BLK ((set BLK) (set BLK)) (set BLK))
(declare-fun intersect@@LOC ((set LOC) (set LOC)) (set LOC))
(declare-fun intersect@@TRAIN ((set TRAIN) (set TRAIN)) (set TRAIN))
(declare-fun intersect@Open@@pfun@@TRAIN@@BLK@Close ((set (pfun TRAIN BLK)) (set (pfun TRAIN BLK))) (set (pfun TRAIN BLK)))
(declare-fun mk-fun@@TRAIN@@BLK (TRAIN BLK) (pfun TRAIN BLK))
(declare-fun mk-set@@BLK (BLK) (set BLK))
(declare-fun mk-set@@LOC (LOC) (set LOC))
(declare-fun mk-set@@TRAIN (TRAIN) (set TRAIN))
(declare-fun mk-set@Open@@pfun@@TRAIN@@BLK@Close ((pfun TRAIN BLK)) (set (pfun TRAIN BLK)))
(declare-fun ovl@@TRAIN@@BLK ((pfun TRAIN BLK) (pfun TRAIN BLK)) (pfun TRAIN BLK))
(declare-fun set-diff@@BLK ((set BLK) (set BLK)) (set BLK))
(declare-fun set-diff@@LOC ((set LOC) (set LOC)) (set LOC))
(declare-fun set-diff@@TRAIN ((set TRAIN) (set TRAIN)) (set TRAIN))
(declare-fun set-diff@Open@@pfun@@TRAIN@@BLK@Close ((set (pfun TRAIN BLK)) (set (pfun TRAIN BLK))) (set (pfun TRAIN BLK)))
(declare-fun tfun@@TRAIN@@BLK ((set TRAIN) (set BLK)) (set (pfun TRAIN BLK)))
(declare-fun bunion@@BLK ((set BLK) (set BLK)) (set BLK))
(declare-fun bunion@@LOC ((set LOC) (set LOC)) (set LOC))
(declare-fun bunion@@TRAIN ((set TRAIN) (set TRAIN)) (set TRAIN))
(declare-fun bunion@Open@@pfun@@TRAIN@@BLK@Close ((set (pfun TRAIN BLK)) (set (pfun TRAIN BLK))) (set (pfun TRAIN BLK)))
(assert (= in@prime
           (set-diff@@TRAIN in
                            (mk-set@@TRAIN t))))

(assert (forall ( (x BLK)
                  (y BLK) )
                (= (elem@@BLK x
                              (mk-set@@BLK y))
                   (= x
                      y))))

(assert (forall ( (x BLK)
                  (s1 (set BLK))
                  (s2 (set BLK)) )
                (= (elem@@BLK x
                              (set-diff@@BLK s1
                                             s2))
                   (and (elem@@BLK x
                                   s1)
                        (not (elem@@BLK x
                                        s2))))))

(assert (forall ( (x BLK)
                  (s1 (set BLK))
                  (s2 (set BLK)) )
                (= (elem@@BLK x
                              (intersect@@BLK s1
                                              s2))
                   (and (elem@@BLK x
                                   s1)
                        (elem@@BLK x
                                   s2)))))

(assert (forall ( (x BLK)
                  (s1 (set BLK))
                  (s2 (set BLK)) )
                (= (elem@@BLK x
                              (bunion@@BLK s1
                                           s2))
                   (or (elem@@BLK x
                                  s1)
                       (elem@@BLK x
                                  s2)))))

(assert (forall ( (x BLK)
                  (s1 (set BLK))
                  (s2 (set BLK)) )
                (not (elem@@BLK x
                                empty-set@@BLK))))

(assert (forall ( (x LOC)
                  (y LOC) )
                (= (elem@@LOC x
                              (mk-set@@LOC y))
                   (= x
                      y))))

(assert (forall ( (x LOC)
                  (s1 (set LOC))
                  (s2 (set LOC)) )
                (= (elem@@LOC x
                              (set-diff@@LOC s1
                                             s2))
                   (and (elem@@LOC x
                                   s1)
                        (not (elem@@LOC x
                                        s2))))))

(assert (forall ( (x LOC)
                  (s1 (set LOC))
                  (s2 (set LOC)) )
                (= (elem@@LOC x
                              (intersect@@LOC s1
                                              s2))
                   (and (elem@@LOC x
                                   s1)
                        (elem@@LOC x
                                   s2)))))

(assert (forall ( (x LOC)
                  (s1 (set LOC))
                  (s2 (set LOC)) )
                (= (elem@@LOC x
                              (bunion@@LOC s1
                                           s2))
                   (or (elem@@LOC x
                                  s1)
                       (elem@@LOC x
                                  s2)))))

(assert (forall ( (x LOC)
                  (s1 (set LOC))
                  (s2 (set LOC)) )
                (not (elem@@LOC x
                                empty-set@@LOC))))

(assert (forall ( (x TRAIN)
                  (y TRAIN) )
                (= (elem@@TRAIN x
                                (mk-set@@TRAIN y))
                   (= x
                      y))))

(assert (forall ( (x TRAIN)
                  (s1 (set TRAIN))
                  (s2 (set TRAIN)) )
                (= (elem@@TRAIN x
                                (set-diff@@TRAIN s1
                                                 s2))
                   (and (elem@@TRAIN x
                                     s1)
                        (not (elem@@TRAIN x
                                          s2))))))

(assert (forall ( (x TRAIN)
                  (s1 (set TRAIN))
                  (s2 (set TRAIN)) )
                (= (elem@@TRAIN x
                                (intersect@@TRAIN s1
                                                  s2))
                   (and (elem@@TRAIN x
                                     s1)
                        (elem@@TRAIN x
                                     s2)))))

(assert (forall ( (x TRAIN)
                  (s1 (set TRAIN))
                  (s2 (set TRAIN)) )
                (= (elem@@TRAIN x
                                (bunion@@TRAIN s1
                                               s2))
                   (or (elem@@TRAIN x
                                    s1)
                       (elem@@TRAIN x
                                    s2)))))

(assert (forall ( (x TRAIN)
                  (s1 (set TRAIN))
                  (s2 (set TRAIN)) )
                (not (elem@@TRAIN x
                                  empty-set@@TRAIN))))

(assert (forall ( (f1 (pfun TRAIN
                            BLK))
                  (f2 (pfun TRAIN
                            BLK)) )
                (= (bunion@@TRAIN (dom@@TRAIN@@BLK f1)
                                  (dom@@TRAIN@@BLK f2))
                   (dom@@TRAIN@@BLK (ovl@@TRAIN@@BLK f1
                                                     f2)))))

(assert (= (dom@@TRAIN@@BLK empty-fun@@TRAIN@@BLK)
           empty-set@@TRAIN))

(assert (forall ( (x TRAIN)
                  (y BLK) )
                (= (dom@@TRAIN@@BLK (mk-fun@@TRAIN@@BLK x
                                                        y))
                   (mk-set@@TRAIN x))))

(assert (forall ( (f1 (pfun TRAIN
                            BLK))
                  (f2 (pfun TRAIN
                            BLK))
                  (x TRAIN) )
                (=> (elem@@TRAIN x
                                 (dom@@TRAIN@@BLK f2))
                    (= (select (ovl@@TRAIN@@BLK f1
                                                f2)
                               x)
                       (select f2
                               x)))))

(assert (forall ( (f1 (pfun TRAIN
                            BLK))
                  (f2 (pfun TRAIN
                            BLK))
                  (x TRAIN) )
                (=> (elem@@TRAIN x
                                 (set-diff@@TRAIN (dom@@TRAIN@@BLK f1)
                                                  (dom@@TRAIN@@BLK f2)))
                    (= (select (ovl@@TRAIN@@BLK f1
                                                f2)
                               x)
                       (select f1
                               x)))))

(assert (forall ( (f1 (pfun TRAIN
                            BLK))
                  (s1 (set TRAIN)) )
                (= (dom@@TRAIN@@BLK (dom-subt@@TRAIN@@BLK s1
                                                          f1))
                   (set-diff@@TRAIN (dom@@TRAIN@@BLK f1)
                                    s1))))

(assert (forall ( (x TRAIN)
                  (y BLK) )
                (= (select (mk-fun@@TRAIN@@BLK x
                                               y)
                           x)
                   y)))

(assert (forall ( (f1 (pfun TRAIN
                            BLK))
                  (s1 (set TRAIN))
                  (x TRAIN) )
                (=> (elem@@TRAIN x
                                 (intersect@@TRAIN s1
                                                   (dom@@TRAIN@@BLK f1)))
                    (= (select (dom-rest@@TRAIN@@BLK s1
                                                     f1)
                               x)
                       (select f1
                               x)))))

(assert (forall ( (f1 (pfun TRAIN
                            BLK))
                  (s1 (set TRAIN))
                  (x TRAIN) )
                (=> (elem@@TRAIN x
                                 (set-diff@@TRAIN (dom@@TRAIN@@BLK f1)
                                                  s1))
                    (= (select (dom-subt@@TRAIN@@BLK s1
                                                     f1)
                               x)
                       (select f1
                               x)))))

(assert (forall ( (x (pfun TRAIN
                           BLK))
                  (y (pfun TRAIN
                           BLK)) )
                (= (elem@Open@@pfun@@TRAIN@@BLK@Close x
                                                      (mk-set@Open@@pfun@@TRAIN@@BLK@Close y))
                   (= x
                      y))))

(assert (forall ( (x (pfun TRAIN
                           BLK))
                  (s1 (set (pfun TRAIN
                                 BLK)))
                  (s2 (set (pfun TRAIN
                                 BLK))) )
                (= (elem@Open@@pfun@@TRAIN@@BLK@Close x
                                                      (set-diff@Open@@pfun@@TRAIN@@BLK@Close s1
                                                                                             s2))
                   (and (elem@Open@@pfun@@TRAIN@@BLK@Close x
                                                           s1)
                        (not (elem@Open@@pfun@@TRAIN@@BLK@Close x
                                                                s2))))))

(assert (forall ( (x (pfun TRAIN
                           BLK))
                  (s1 (set (pfun TRAIN
                                 BLK)))
                  (s2 (set (pfun TRAIN
                                 BLK))) )
                (= (elem@Open@@pfun@@TRAIN@@BLK@Close x
                                                      (intersect@Open@@pfun@@TRAIN@@BLK@Close s1
                                                                                              s2))
                   (and (elem@Open@@pfun@@TRAIN@@BLK@Close x
                                                           s1)
                        (elem@Open@@pfun@@TRAIN@@BLK@Close x
                                                           s2)))))

(assert (forall ( (x (pfun TRAIN
                           BLK))
                  (s1 (set (pfun TRAIN
                                 BLK)))
                  (s2 (set (pfun TRAIN
                                 BLK))) )
                (= (elem@Open@@pfun@@TRAIN@@BLK@Close x
                                                      (bunion@Open@@pfun@@TRAIN@@BLK@Close s1
                                                                                           s2))
                   (or (elem@Open@@pfun@@TRAIN@@BLK@Close x
                                                          s1)
                       (elem@Open@@pfun@@TRAIN@@BLK@Close x
                                                          s2)))))

(assert (forall ( (x (pfun TRAIN
                           BLK))
                  (s1 (set (pfun TRAIN
                                 BLK)))
                  (s2 (set (pfun TRAIN
                                 BLK))) )
                (not (elem@Open@@pfun@@TRAIN@@BLK@Close x
                                                        empty-set@Open@@pfun@@TRAIN@@BLK@Close))))

(assert (and (not (= ent
                     ext))
             (not (elem@@BLK ent
                             PLF))
             (not (elem@@BLK ext
                             PLF))))

(assert (forall ( (p BLK) )
                (=> true
                    (= (not (= p
                               ext))
                       (elem@@BLK p
                                  (bunion@@BLK (mk-set@@BLK ent)
                                               PLF))))))

(assert (forall ( (p BLK) )
                (=> true
                    (= (not (= p
                               ent))
                       (elem@@BLK p
                                  (bunion@@BLK (mk-set@@BLK ext)
                                               PLF))))))

(assert (forall ( (p BLK) )
                (=> true
                    (= (or (= p
                              ent)
                           (= p
                              ext))
                       (not (elem@@BLK p
                                       PLF))))))

(assert (= BLK
           (bunion@@BLK (bunion@@BLK (mk-set@@BLK ent)
                                     (mk-set@@BLK ext))
                        PLF)))

(assert (not (= in@prime
                (set-diff@@TRAIN in
                                 (mk-set@@TRAIN t)))))

(check-sat-using (or-else (then qe smt) (then skip smt) (then (using-params simplify :expand-power true) smt)))

(pop)
(echo "> train0/leave/INV/inv2/step (102,1)")
(push)
(declare-sort BLK 0)
(declare-sort LOC 0)
(declare-sort TRAIN 0)
(define-sort pfun (a b) (Array a b))
(declare-sort set 1)
(declare-const PLF (set BLK))
(declare-const BLK (set BLK))
(declare-const LOC (set LOC))
(declare-const TRAIN (set TRAIN))
(declare-const ent BLK)
(declare-const ext BLK)
(declare-const in (set TRAIN))
(declare-const in@prime (set TRAIN))
(declare-const loc (pfun TRAIN BLK))
(declare-const loc@prime (pfun TRAIN BLK))
(declare-const p BLK)
(declare-const q BLK)
(declare-const t TRAIN)
(declare-const t_0 TRAIN)
(declare-const t_1 TRAIN)
(declare-const t_2 TRAIN)
(declare-const t_3 TRAIN)
(declare-fun apply@@TRAIN@@BLK ((pfun TRAIN BLK) TRAIN) BLK)
(declare-fun dom-rest@@TRAIN@@BLK ((set TRAIN) (pfun TRAIN BLK)) (pfun TRAIN BLK))
(declare-fun dom-subt@@TRAIN@@BLK ((set TRAIN) (pfun TRAIN BLK)) (pfun TRAIN BLK))
(declare-fun dom@@TRAIN@@BLK ((pfun TRAIN BLK)) (set TRAIN))
(declare-fun elem@@BLK (BLK (set BLK)) Bool)
(declare-fun elem@@LOC (LOC (set LOC)) Bool)
(declare-fun elem@@TRAIN (TRAIN (set TRAIN)) Bool)
(declare-fun elem@Open@@pfun@@TRAIN@@BLK@Close ((pfun TRAIN BLK) (set (pfun TRAIN BLK))) Bool)
(declare-fun empty-fun@@TRAIN@@BLK () (pfun TRAIN BLK))
(declare-fun empty-set@@BLK () (set BLK))
(declare-fun empty-set@@LOC () (set LOC))
(declare-fun empty-set@@TRAIN () (set TRAIN))
(declare-fun empty-set@Open@@pfun@@TRAIN@@BLK@Close () (set (pfun TRAIN BLK)))
(declare-fun intersect@@BLK ((set BLK) (set BLK)) (set BLK))
(declare-fun intersect@@LOC ((set LOC) (set LOC)) (set LOC))
(declare-fun intersect@@TRAIN ((set TRAIN) (set TRAIN)) (set TRAIN))
(declare-fun intersect@Open@@pfun@@TRAIN@@BLK@Close ((set (pfun TRAIN BLK)) (set (pfun TRAIN BLK))) (set (pfun TRAIN BLK)))
(declare-fun mk-fun@@TRAIN@@BLK (TRAIN BLK) (pfun TRAIN BLK))
(declare-fun mk-set@@BLK (BLK) (set BLK))
(declare-fun mk-set@@LOC (LOC) (set LOC))
(declare-fun mk-set@@TRAIN (TRAIN) (set TRAIN))
(declare-fun mk-set@Open@@pfun@@TRAIN@@BLK@Close ((pfun TRAIN BLK)) (set (pfun TRAIN BLK)))
(declare-fun ovl@@TRAIN@@BLK ((pfun TRAIN BLK) (pfun TRAIN BLK)) (pfun TRAIN BLK))
(declare-fun set-diff@@BLK ((set BLK) (set BLK)) (set BLK))
(declare-fun set-diff@@LOC ((set LOC) (set LOC)) (set LOC))
(declare-fun set-diff@@TRAIN ((set TRAIN) (set TRAIN)) (set TRAIN))
(declare-fun set-diff@Open@@pfun@@TRAIN@@BLK@Close ((set (pfun TRAIN BLK)) (set (pfun TRAIN BLK))) (set (pfun TRAIN BLK)))
(declare-fun tfun@@TRAIN@@BLK ((set TRAIN) (set BLK)) (set (pfun TRAIN BLK)))
(declare-fun bunion@@BLK ((set BLK) (set BLK)) (set BLK))
(declare-fun bunion@@LOC ((set LOC) (set LOC)) (set LOC))
(declare-fun bunion@@TRAIN ((set TRAIN) (set TRAIN)) (set TRAIN))
(declare-fun bunion@Open@@pfun@@TRAIN@@BLK@Close ((set (pfun TRAIN BLK)) (set (pfun TRAIN BLK))) (set (pfun TRAIN BLK)))
(assert (= (dom@@TRAIN@@BLK loc)
           in))

(assert (forall ( (x BLK)
                  (y BLK) )
                (= (elem@@BLK x
                              (mk-set@@BLK y))
                   (= x
                      y))))

(assert (forall ( (x BLK)
                  (s1 (set BLK))
                  (s2 (set BLK)) )
                (= (elem@@BLK x
                              (set-diff@@BLK s1
                                             s2))
                   (and (elem@@BLK x
                                   s1)
                        (not (elem@@BLK x
                                        s2))))))

(assert (forall ( (x BLK)
                  (s1 (set BLK))
                  (s2 (set BLK)) )
                (= (elem@@BLK x
                              (intersect@@BLK s1
                                              s2))
                   (and (elem@@BLK x
                                   s1)
                        (elem@@BLK x
                                   s2)))))

(assert (forall ( (x BLK)
                  (s1 (set BLK))
                  (s2 (set BLK)) )
                (= (elem@@BLK x
                              (bunion@@BLK s1
                                           s2))
                   (or (elem@@BLK x
                                  s1)
                       (elem@@BLK x
                                  s2)))))

(assert (forall ( (x BLK)
                  (s1 (set BLK))
                  (s2 (set BLK)) )
                (not (elem@@BLK x
                                empty-set@@BLK))))

(assert (forall ( (x LOC)
                  (y LOC) )
                (= (elem@@LOC x
                              (mk-set@@LOC y))
                   (= x
                      y))))

(assert (forall ( (x LOC)
                  (s1 (set LOC))
                  (s2 (set LOC)) )
                (= (elem@@LOC x
                              (set-diff@@LOC s1
                                             s2))
                   (and (elem@@LOC x
                                   s1)
                        (not (elem@@LOC x
                                        s2))))))

(assert (forall ( (x LOC)
                  (s1 (set LOC))
                  (s2 (set LOC)) )
                (= (elem@@LOC x
                              (intersect@@LOC s1
                                              s2))
                   (and (elem@@LOC x
                                   s1)
                        (elem@@LOC x
                                   s2)))))

(assert (forall ( (x LOC)
                  (s1 (set LOC))
                  (s2 (set LOC)) )
                (= (elem@@LOC x
                              (bunion@@LOC s1
                                           s2))
                   (or (elem@@LOC x
                                  s1)
                       (elem@@LOC x
                                  s2)))))

(assert (forall ( (x LOC)
                  (s1 (set LOC))
                  (s2 (set LOC)) )
                (not (elem@@LOC x
                                empty-set@@LOC))))

(assert (forall ( (x TRAIN)
                  (y TRAIN) )
                (= (elem@@TRAIN x
                                (mk-set@@TRAIN y))
                   (= x
                      y))))

(assert (forall ( (x TRAIN)
                  (s1 (set TRAIN))
                  (s2 (set TRAIN)) )
                (= (elem@@TRAIN x
                                (set-diff@@TRAIN s1
                                                 s2))
                   (and (elem@@TRAIN x
                                     s1)
                        (not (elem@@TRAIN x
                                          s2))))))

(assert (forall ( (x TRAIN)
                  (s1 (set TRAIN))
                  (s2 (set TRAIN)) )
                (= (elem@@TRAIN x
                                (intersect@@TRAIN s1
                                                  s2))
                   (and (elem@@TRAIN x
                                     s1)
                        (elem@@TRAIN x
                                     s2)))))

(assert (forall ( (x TRAIN)
                  (s1 (set TRAIN))
                  (s2 (set TRAIN)) )
                (= (elem@@TRAIN x
                                (bunion@@TRAIN s1
                                               s2))
                   (or (elem@@TRAIN x
                                    s1)
                       (elem@@TRAIN x
                                    s2)))))

(assert (forall ( (x TRAIN)
                  (s1 (set TRAIN))
                  (s2 (set TRAIN)) )
                (not (elem@@TRAIN x
                                  empty-set@@TRAIN))))

(assert (forall ( (f1 (pfun TRAIN
                            BLK))
                  (f2 (pfun TRAIN
                            BLK)) )
                (= (bunion@@TRAIN (dom@@TRAIN@@BLK f1)
                                  (dom@@TRAIN@@BLK f2))
                   (dom@@TRAIN@@BLK (ovl@@TRAIN@@BLK f1
                                                     f2)))))

(assert (= (dom@@TRAIN@@BLK empty-fun@@TRAIN@@BLK)
           empty-set@@TRAIN))

(assert (forall ( (x TRAIN)
                  (y BLK) )
                (= (dom@@TRAIN@@BLK (mk-fun@@TRAIN@@BLK x
                                                        y))
                   (mk-set@@TRAIN x))))

(assert (forall ( (f1 (pfun TRAIN
                            BLK))
                  (f2 (pfun TRAIN
                            BLK))
                  (x TRAIN) )
                (=> (elem@@TRAIN x
                                 (dom@@TRAIN@@BLK f2))
                    (= (select (ovl@@TRAIN@@BLK f1
                                                f2)
                               x)
                       (select f2
                               x)))))

(assert (forall ( (f1 (pfun TRAIN
                            BLK))
                  (f2 (pfun TRAIN
                            BLK))
                  (x TRAIN) )
                (=> (elem@@TRAIN x
                                 (set-diff@@TRAIN (dom@@TRAIN@@BLK f1)
                                                  (dom@@TRAIN@@BLK f2)))
                    (= (select (ovl@@TRAIN@@BLK f1
                                                f2)
                               x)
                       (select f1
                               x)))))

(assert (forall ( (f1 (pfun TRAIN
                            BLK))
                  (s1 (set TRAIN)) )
                (= (dom@@TRAIN@@BLK (dom-subt@@TRAIN@@BLK s1
                                                          f1))
                   (set-diff@@TRAIN (dom@@TRAIN@@BLK f1)
                                    s1))))

(assert (forall ( (x TRAIN)
                  (y BLK) )
                (= (select (mk-fun@@TRAIN@@BLK x
                                               y)
                           x)
                   y)))

(assert (forall ( (f1 (pfun TRAIN
                            BLK))
                  (s1 (set TRAIN))
                  (x TRAIN) )
                (=> (elem@@TRAIN x
                                 (intersect@@TRAIN s1
                                                   (dom@@TRAIN@@BLK f1)))
                    (= (select (dom-rest@@TRAIN@@BLK s1
                                                     f1)
                               x)
                       (select f1
                               x)))))

(assert (forall ( (f1 (pfun TRAIN
                            BLK))
                  (s1 (set TRAIN))
                  (x TRAIN) )
                (=> (elem@@TRAIN x
                                 (set-diff@@TRAIN (dom@@TRAIN@@BLK f1)
                                                  s1))
                    (= (select (dom-subt@@TRAIN@@BLK s1
                                                     f1)
                               x)
                       (select f1
                               x)))))

(assert (forall ( (x (pfun TRAIN
                           BLK))
                  (y (pfun TRAIN
                           BLK)) )
                (= (elem@Open@@pfun@@TRAIN@@BLK@Close x
                                                      (mk-set@Open@@pfun@@TRAIN@@BLK@Close y))
                   (= x
                      y))))

(assert (forall ( (x (pfun TRAIN
                           BLK))
                  (s1 (set (pfun TRAIN
                                 BLK)))
                  (s2 (set (pfun TRAIN
                                 BLK))) )
                (= (elem@Open@@pfun@@TRAIN@@BLK@Close x
                                                      (set-diff@Open@@pfun@@TRAIN@@BLK@Close s1
                                                                                             s2))
                   (and (elem@Open@@pfun@@TRAIN@@BLK@Close x
                                                           s1)
                        (not (elem@Open@@pfun@@TRAIN@@BLK@Close x
                                                                s2))))))

(assert (forall ( (x (pfun TRAIN
                           BLK))
                  (s1 (set (pfun TRAIN
                                 BLK)))
                  (s2 (set (pfun TRAIN
                                 BLK))) )
                (= (elem@Open@@pfun@@TRAIN@@BLK@Close x
                                                      (intersect@Open@@pfun@@TRAIN@@BLK@Close s1
                                                                                              s2))
                   (and (elem@Open@@pfun@@TRAIN@@BLK@Close x
                                                           s1)
                        (elem@Open@@pfun@@TRAIN@@BLK@Close x
                                                           s2)))))

(assert (forall ( (x (pfun TRAIN
                           BLK))
                  (s1 (set (pfun TRAIN
                                 BLK)))
                  (s2 (set (pfun TRAIN
                                 BLK))) )
                (= (elem@Open@@pfun@@TRAIN@@BLK@Close x
                                                      (bunion@Open@@pfun@@TRAIN@@BLK@Close s1
                                                                                           s2))
                   (or (elem@Open@@pfun@@TRAIN@@BLK@Close x
                                                          s1)
                       (elem@Open@@pfun@@TRAIN@@BLK@Close x
                                                          s2)))))

(assert (forall ( (x (pfun TRAIN
                           BLK))
                  (s1 (set (pfun TRAIN
                                 BLK)))
                  (s2 (set (pfun TRAIN
                                 BLK))) )
                (not (elem@Open@@pfun@@TRAIN@@BLK@Close x
                                                        empty-set@Open@@pfun@@TRAIN@@BLK@Close))))

(assert (and (not (= ent
                     ext))
             (not (elem@@BLK ent
                             PLF))
             (not (elem@@BLK ext
                             PLF))))

(assert (forall ( (p BLK) )
                (=> true
                    (= (not (= p
                               ext))
                       (elem@@BLK p
                                  (bunion@@BLK (mk-set@@BLK ent)
                                               PLF))))))

(assert (forall ( (p BLK) )
                (=> true
                    (= (not (= p
                               ent))
                       (elem@@BLK p
                                  (bunion@@BLK (mk-set@@BLK ext)
                                               PLF))))))

(assert (forall ( (p BLK) )
                (=> true
                    (= (or (= p
                              ent)
                           (= p
                              ext))
                       (not (elem@@BLK p
                                       PLF))))))

(assert (= BLK
           (bunion@@BLK (bunion@@BLK (mk-set@@BLK ent)
                                     (mk-set@@BLK ext))
                        PLF)))

(assert (not (= (set-diff@@TRAIN in
                                 (mk-set@@TRAIN t))
                (set-diff@@TRAIN (dom@@TRAIN@@BLK loc)
                                 (mk-set@@TRAIN t)))))

(check-sat-using (or-else (then qe smt) (then skip smt) (then (using-params simplify :expand-power true) smt)))

(pop)
(echo "> train0/leave/INV/inv2/step (104,1)")
(push)
(declare-sort BLK 0)
(declare-sort LOC 0)
(declare-sort TRAIN 0)
(define-sort pfun (a b) (Array a b))
(declare-sort set 1)
(declare-const PLF (set BLK))
(declare-const BLK (set BLK))
(declare-const LOC (set LOC))
(declare-const TRAIN (set TRAIN))
(declare-const ent BLK)
(declare-const ext BLK)
(declare-const in (set TRAIN))
(declare-const in@prime (set TRAIN))
(declare-const loc (pfun TRAIN BLK))
(declare-const loc@prime (pfun TRAIN BLK))
(declare-const p BLK)
(declare-const q BLK)
(declare-const t TRAIN)
(declare-const t_0 TRAIN)
(declare-const t_1 TRAIN)
(declare-const t_2 TRAIN)
(declare-const t_3 TRAIN)
(declare-fun apply@@TRAIN@@BLK ((pfun TRAIN BLK) TRAIN) BLK)
(declare-fun dom-rest@@TRAIN@@BLK ((set TRAIN) (pfun TRAIN BLK)) (pfun TRAIN BLK))
(declare-fun dom-subt@@TRAIN@@BLK ((set TRAIN) (pfun TRAIN BLK)) (pfun TRAIN BLK))
(declare-fun dom@@TRAIN@@BLK ((pfun TRAIN BLK)) (set TRAIN))
(declare-fun elem@@BLK (BLK (set BLK)) Bool)
(declare-fun elem@@LOC (LOC (set LOC)) Bool)
(declare-fun elem@@TRAIN (TRAIN (set TRAIN)) Bool)
(declare-fun elem@Open@@pfun@@TRAIN@@BLK@Close ((pfun TRAIN BLK) (set (pfun TRAIN BLK))) Bool)
(declare-fun empty-fun@@TRAIN@@BLK () (pfun TRAIN BLK))
(declare-fun empty-set@@BLK () (set BLK))
(declare-fun empty-set@@LOC () (set LOC))
(declare-fun empty-set@@TRAIN () (set TRAIN))
(declare-fun empty-set@Open@@pfun@@TRAIN@@BLK@Close () (set (pfun TRAIN BLK)))
(declare-fun intersect@@BLK ((set BLK) (set BLK)) (set BLK))
(declare-fun intersect@@LOC ((set LOC) (set LOC)) (set LOC))
(declare-fun intersect@@TRAIN ((set TRAIN) (set TRAIN)) (set TRAIN))
(declare-fun intersect@Open@@pfun@@TRAIN@@BLK@Close ((set (pfun TRAIN BLK)) (set (pfun TRAIN BLK))) (set (pfun TRAIN BLK)))
(declare-fun mk-fun@@TRAIN@@BLK (TRAIN BLK) (pfun TRAIN BLK))
(declare-fun mk-set@@BLK (BLK) (set BLK))
(declare-fun mk-set@@LOC (LOC) (set LOC))
(declare-fun mk-set@@TRAIN (TRAIN) (set TRAIN))
(declare-fun mk-set@Open@@pfun@@TRAIN@@BLK@Close ((pfun TRAIN BLK)) (set (pfun TRAIN BLK)))
(declare-fun ovl@@TRAIN@@BLK ((pfun TRAIN BLK) (pfun TRAIN BLK)) (pfun TRAIN BLK))
(declare-fun set-diff@@BLK ((set BLK) (set BLK)) (set BLK))
(declare-fun set-diff@@LOC ((set LOC) (set LOC)) (set LOC))
(declare-fun set-diff@@TRAIN ((set TRAIN) (set TRAIN)) (set TRAIN))
(declare-fun set-diff@Open@@pfun@@TRAIN@@BLK@Close ((set (pfun TRAIN BLK)) (set (pfun TRAIN BLK))) (set (pfun TRAIN BLK)))
(declare-fun tfun@@TRAIN@@BLK ((set TRAIN) (set BLK)) (set (pfun TRAIN BLK)))
(declare-fun bunion@@BLK ((set BLK) (set BLK)) (set BLK))
(declare-fun bunion@@LOC ((set LOC) (set LOC)) (set LOC))
(declare-fun bunion@@TRAIN ((set TRAIN) (set TRAIN)) (set TRAIN))
(declare-fun bunion@Open@@pfun@@TRAIN@@BLK@Close ((set (pfun TRAIN BLK)) (set (pfun TRAIN BLK))) (set (pfun TRAIN BLK)))
(assert (forall ( (x BLK)
                  (y BLK) )
                (= (elem@@BLK x
                              (mk-set@@BLK y))
                   (= x
                      y))))

(assert (forall ( (x BLK)
                  (s1 (set BLK))
                  (s2 (set BLK)) )
                (= (elem@@BLK x
                              (set-diff@@BLK s1
                                             s2))
                   (and (elem@@BLK x
                                   s1)
                        (not (elem@@BLK x
                                        s2))))))

(assert (forall ( (x BLK)
                  (s1 (set BLK))
                  (s2 (set BLK)) )
                (= (elem@@BLK x
                              (intersect@@BLK s1
                                              s2))
                   (and (elem@@BLK x
                                   s1)
                        (elem@@BLK x
                                   s2)))))

(assert (forall ( (x BLK)
                  (s1 (set BLK))
                  (s2 (set BLK)) )
                (= (elem@@BLK x
                              (bunion@@BLK s1
                                           s2))
                   (or (elem@@BLK x
                                  s1)
                       (elem@@BLK x
                                  s2)))))

(assert (forall ( (x BLK)
                  (s1 (set BLK))
                  (s2 (set BLK)) )
                (not (elem@@BLK x
                                empty-set@@BLK))))

(assert (forall ( (x LOC)
                  (y LOC) )
                (= (elem@@LOC x
                              (mk-set@@LOC y))
                   (= x
                      y))))

(assert (forall ( (x LOC)
                  (s1 (set LOC))
                  (s2 (set LOC)) )
                (= (elem@@LOC x
                              (set-diff@@LOC s1
                                             s2))
                   (and (elem@@LOC x
                                   s1)
                        (not (elem@@LOC x
                                        s2))))))

(assert (forall ( (x LOC)
                  (s1 (set LOC))
                  (s2 (set LOC)) )
                (= (elem@@LOC x
                              (intersect@@LOC s1
                                              s2))
                   (and (elem@@LOC x
                                   s1)
                        (elem@@LOC x
                                   s2)))))

(assert (forall ( (x LOC)
                  (s1 (set LOC))
                  (s2 (set LOC)) )
                (= (elem@@LOC x
                              (bunion@@LOC s1
                                           s2))
                   (or (elem@@LOC x
                                  s1)
                       (elem@@LOC x
                                  s2)))))

(assert (forall ( (x LOC)
                  (s1 (set LOC))
                  (s2 (set LOC)) )
                (not (elem@@LOC x
                                empty-set@@LOC))))

(assert (forall ( (x TRAIN)
                  (y TRAIN) )
                (= (elem@@TRAIN x
                                (mk-set@@TRAIN y))
                   (= x
                      y))))

(assert (forall ( (x TRAIN)
                  (s1 (set TRAIN))
                  (s2 (set TRAIN)) )
                (= (elem@@TRAIN x
                                (set-diff@@TRAIN s1
                                                 s2))
                   (and (elem@@TRAIN x
                                     s1)
                        (not (elem@@TRAIN x
                                          s2))))))

(assert (forall ( (x TRAIN)
                  (s1 (set TRAIN))
                  (s2 (set TRAIN)) )
                (= (elem@@TRAIN x
                                (intersect@@TRAIN s1
                                                  s2))
                   (and (elem@@TRAIN x
                                     s1)
                        (elem@@TRAIN x
                                     s2)))))

(assert (forall ( (x TRAIN)
                  (s1 (set TRAIN))
                  (s2 (set TRAIN)) )
                (= (elem@@TRAIN x
                                (bunion@@TRAIN s1
                                               s2))
                   (or (elem@@TRAIN x
                                    s1)
                       (elem@@TRAIN x
                                    s2)))))

(assert (forall ( (x TRAIN)
                  (s1 (set TRAIN))
                  (s2 (set TRAIN)) )
                (not (elem@@TRAIN x
                                  empty-set@@TRAIN))))

(assert (forall ( (f1 (pfun TRAIN
                            BLK))
                  (f2 (pfun TRAIN
                            BLK)) )
                (= (bunion@@TRAIN (dom@@TRAIN@@BLK f1)
                                  (dom@@TRAIN@@BLK f2))
                   (dom@@TRAIN@@BLK (ovl@@TRAIN@@BLK f1
                                                     f2)))))

(assert (= (dom@@TRAIN@@BLK empty-fun@@TRAIN@@BLK)
           empty-set@@TRAIN))

(assert (forall ( (x TRAIN)
                  (y BLK) )
                (= (dom@@TRAIN@@BLK (mk-fun@@TRAIN@@BLK x
                                                        y))
                   (mk-set@@TRAIN x))))

(assert (forall ( (f1 (pfun TRAIN
                            BLK))
                  (f2 (pfun TRAIN
                            BLK))
                  (x TRAIN) )
                (=> (elem@@TRAIN x
                                 (dom@@TRAIN@@BLK f2))
                    (= (select (ovl@@TRAIN@@BLK f1
                                                f2)
                               x)
                       (select f2
                               x)))))

(assert (forall ( (f1 (pfun TRAIN
                            BLK))
                  (f2 (pfun TRAIN
                            BLK))
                  (x TRAIN) )
                (=> (elem@@TRAIN x
                                 (set-diff@@TRAIN (dom@@TRAIN@@BLK f1)
                                                  (dom@@TRAIN@@BLK f2)))
                    (= (select (ovl@@TRAIN@@BLK f1
                                                f2)
                               x)
                       (select f1
                               x)))))

(assert (forall ( (f1 (pfun TRAIN
                            BLK))
                  (s1 (set TRAIN)) )
                (= (dom@@TRAIN@@BLK (dom-subt@@TRAIN@@BLK s1
                                                          f1))
                   (set-diff@@TRAIN (dom@@TRAIN@@BLK f1)
                                    s1))))

(assert (forall ( (x TRAIN)
                  (y BLK) )
                (= (select (mk-fun@@TRAIN@@BLK x
                                               y)
                           x)
                   y)))

(assert (forall ( (f1 (pfun TRAIN
                            BLK))
                  (s1 (set TRAIN))
                  (x TRAIN) )
                (=> (elem@@TRAIN x
                                 (intersect@@TRAIN s1
                                                   (dom@@TRAIN@@BLK f1)))
                    (= (select (dom-rest@@TRAIN@@BLK s1
                                                     f1)
                               x)
                       (select f1
                               x)))))

(assert (forall ( (f1 (pfun TRAIN
                            BLK))
                  (s1 (set TRAIN))
                  (x TRAIN) )
                (=> (elem@@TRAIN x
                                 (set-diff@@TRAIN (dom@@TRAIN@@BLK f1)
                                                  s1))
                    (= (select (dom-subt@@TRAIN@@BLK s1
                                                     f1)
                               x)
                       (select f1
                               x)))))

(assert (forall ( (x (pfun TRAIN
                           BLK))
                  (y (pfun TRAIN
                           BLK)) )
                (= (elem@Open@@pfun@@TRAIN@@BLK@Close x
                                                      (mk-set@Open@@pfun@@TRAIN@@BLK@Close y))
                   (= x
                      y))))

(assert (forall ( (x (pfun TRAIN
                           BLK))
                  (s1 (set (pfun TRAIN
                                 BLK)))
                  (s2 (set (pfun TRAIN
                                 BLK))) )
                (= (elem@Open@@pfun@@TRAIN@@BLK@Close x
                                                      (set-diff@Open@@pfun@@TRAIN@@BLK@Close s1
                                                                                             s2))
                   (and (elem@Open@@pfun@@TRAIN@@BLK@Close x
                                                           s1)
                        (not (elem@Open@@pfun@@TRAIN@@BLK@Close x
                                                                s2))))))

(assert (forall ( (x (pfun TRAIN
                           BLK))
                  (s1 (set (pfun TRAIN
                                 BLK)))
                  (s2 (set (pfun TRAIN
                                 BLK))) )
                (= (elem@Open@@pfun@@TRAIN@@BLK@Close x
                                                      (intersect@Open@@pfun@@TRAIN@@BLK@Close s1
                                                                                              s2))
                   (and (elem@Open@@pfun@@TRAIN@@BLK@Close x
                                                           s1)
                        (elem@Open@@pfun@@TRAIN@@BLK@Close x
                                                           s2)))))

(assert (forall ( (x (pfun TRAIN
                           BLK))
                  (s1 (set (pfun TRAIN
                                 BLK)))
                  (s2 (set (pfun TRAIN
                                 BLK))) )
                (= (elem@Open@@pfun@@TRAIN@@BLK@Close x
                                                      (bunion@Open@@pfun@@TRAIN@@BLK@Close s1
                                                                                           s2))
                   (or (elem@Open@@pfun@@TRAIN@@BLK@Close x
                                                          s1)
                       (elem@Open@@pfun@@TRAIN@@BLK@Close x
                                                          s2)))))

(assert (forall ( (x (pfun TRAIN
                           BLK))
                  (s1 (set (pfun TRAIN
                                 BLK)))
                  (s2 (set (pfun TRAIN
                                 BLK))) )
                (not (elem@Open@@pfun@@TRAIN@@BLK@Close x
                                                        empty-set@Open@@pfun@@TRAIN@@BLK@Close))))

(assert (and (not (= ent
                     ext))
             (not (elem@@BLK ent
                             PLF))
             (not (elem@@BLK ext
                             PLF))))

(assert (forall ( (p BLK) )
                (=> true
                    (= (not (= p
                               ext))
                       (elem@@BLK p
                                  (bunion@@BLK (mk-set@@BLK ent)
                                               PLF))))))

(assert (forall ( (p BLK) )
                (=> true
                    (= (not (= p
                               ent))
                       (elem@@BLK p
                                  (bunion@@BLK (mk-set@@BLK ext)
                                               PLF))))))

(assert (forall ( (p BLK) )
                (=> true
                    (= (or (= p
                              ent)
                           (= p
                              ext))
                       (not (elem@@BLK p
                                       PLF))))))

(assert (= BLK
           (bunion@@BLK (bunion@@BLK (mk-set@@BLK ent)
                                     (mk-set@@BLK ext))
                        PLF)))

(assert (not (= (set-diff@@TRAIN (dom@@TRAIN@@BLK loc)
                                 (mk-set@@TRAIN t))
                (dom@@TRAIN@@BLK (dom-subt@@TRAIN@@BLK (mk-set@@TRAIN t)
                                                       loc)))))

(check-sat-using (or-else (then qe smt) (then skip smt) (then (using-params simplify :expand-power true) smt)))

(pop)
(echo "> train0/leave/INV/inv2/step (106,1)")
(push)
(declare-sort BLK 0)
(declare-sort LOC 0)
(declare-sort TRAIN 0)
(define-sort pfun (a b) (Array a b))
(declare-sort set 1)
(declare-const PLF (set BLK))
(declare-const BLK (set BLK))
(declare-const LOC (set LOC))
(declare-const TRAIN (set TRAIN))
(declare-const ent BLK)
(declare-const ext BLK)
(declare-const in (set TRAIN))
(declare-const in@prime (set TRAIN))
(declare-const loc (pfun TRAIN BLK))
(declare-const loc@prime (pfun TRAIN BLK))
(declare-const p BLK)
(declare-const q BLK)
(declare-const t TRAIN)
(declare-const t_0 TRAIN)
(declare-const t_1 TRAIN)
(declare-const t_2 TRAIN)
(declare-const t_3 TRAIN)
(declare-fun apply@@TRAIN@@BLK ((pfun TRAIN BLK) TRAIN) BLK)
(declare-fun dom-rest@@TRAIN@@BLK ((set TRAIN) (pfun TRAIN BLK)) (pfun TRAIN BLK))
(declare-fun dom-subt@@TRAIN@@BLK ((set TRAIN) (pfun TRAIN BLK)) (pfun TRAIN BLK))
(declare-fun dom@@TRAIN@@BLK ((pfun TRAIN BLK)) (set TRAIN))
(declare-fun elem@@BLK (BLK (set BLK)) Bool)
(declare-fun elem@@LOC (LOC (set LOC)) Bool)
(declare-fun elem@@TRAIN (TRAIN (set TRAIN)) Bool)
(declare-fun elem@Open@@pfun@@TRAIN@@BLK@Close ((pfun TRAIN BLK) (set (pfun TRAIN BLK))) Bool)
(declare-fun empty-fun@@TRAIN@@BLK () (pfun TRAIN BLK))
(declare-fun empty-set@@BLK () (set BLK))
(declare-fun empty-set@@LOC () (set LOC))
(declare-fun empty-set@@TRAIN () (set TRAIN))
(declare-fun empty-set@Open@@pfun@@TRAIN@@BLK@Close () (set (pfun TRAIN BLK)))
(declare-fun intersect@@BLK ((set BLK) (set BLK)) (set BLK))
(declare-fun intersect@@LOC ((set LOC) (set LOC)) (set LOC))
(declare-fun intersect@@TRAIN ((set TRAIN) (set TRAIN)) (set TRAIN))
(declare-fun intersect@Open@@pfun@@TRAIN@@BLK@Close ((set (pfun TRAIN BLK)) (set (pfun TRAIN BLK))) (set (pfun TRAIN BLK)))
(declare-fun mk-fun@@TRAIN@@BLK (TRAIN BLK) (pfun TRAIN BLK))
(declare-fun mk-set@@BLK (BLK) (set BLK))
(declare-fun mk-set@@LOC (LOC) (set LOC))
(declare-fun mk-set@@TRAIN (TRAIN) (set TRAIN))
(declare-fun mk-set@Open@@pfun@@TRAIN@@BLK@Close ((pfun TRAIN BLK)) (set (pfun TRAIN BLK)))
(declare-fun ovl@@TRAIN@@BLK ((pfun TRAIN BLK) (pfun TRAIN BLK)) (pfun TRAIN BLK))
(declare-fun set-diff@@BLK ((set BLK) (set BLK)) (set BLK))
(declare-fun set-diff@@LOC ((set LOC) (set LOC)) (set LOC))
(declare-fun set-diff@@TRAIN ((set TRAIN) (set TRAIN)) (set TRAIN))
(declare-fun set-diff@Open@@pfun@@TRAIN@@BLK@Close ((set (pfun TRAIN BLK)) (set (pfun TRAIN BLK))) (set (pfun TRAIN BLK)))
(declare-fun tfun@@TRAIN@@BLK ((set TRAIN) (set BLK)) (set (pfun TRAIN BLK)))
(declare-fun bunion@@BLK ((set BLK) (set BLK)) (set BLK))
(declare-fun bunion@@LOC ((set LOC) (set LOC)) (set LOC))
(declare-fun bunion@@TRAIN ((set TRAIN) (set TRAIN)) (set TRAIN))
(declare-fun bunion@Open@@pfun@@TRAIN@@BLK@Close ((set (pfun TRAIN BLK)) (set (pfun TRAIN BLK))) (set (pfun TRAIN BLK)))
(assert (= loc@prime
           (dom-subt@@TRAIN@@BLK (mk-set@@TRAIN t)
                                 loc)))

(assert (forall ( (x BLK)
                  (y BLK) )
                (= (elem@@BLK x
                              (mk-set@@BLK y))
                   (= x
                      y))))

(assert (forall ( (x BLK)
                  (s1 (set BLK))
                  (s2 (set BLK)) )
                (= (elem@@BLK x
                              (set-diff@@BLK s1
                                             s2))
                   (and (elem@@BLK x
                                   s1)
                        (not (elem@@BLK x
                                        s2))))))

(assert (forall ( (x BLK)
                  (s1 (set BLK))
                  (s2 (set BLK)) )
                (= (elem@@BLK x
                              (intersect@@BLK s1
                                              s2))
                   (and (elem@@BLK x
                                   s1)
                        (elem@@BLK x
                                   s2)))))

(assert (forall ( (x BLK)
                  (s1 (set BLK))
                  (s2 (set BLK)) )
                (= (elem@@BLK x
                              (bunion@@BLK s1
                                           s2))
                   (or (elem@@BLK x
                                  s1)
                       (elem@@BLK x
                                  s2)))))

(assert (forall ( (x BLK)
                  (s1 (set BLK))
                  (s2 (set BLK)) )
                (not (elem@@BLK x
                                empty-set@@BLK))))

(assert (forall ( (x LOC)
                  (y LOC) )
                (= (elem@@LOC x
                              (mk-set@@LOC y))
                   (= x
                      y))))

(assert (forall ( (x LOC)
                  (s1 (set LOC))
                  (s2 (set LOC)) )
                (= (elem@@LOC x
                              (set-diff@@LOC s1
                                             s2))
                   (and (elem@@LOC x
                                   s1)
                        (not (elem@@LOC x
                                        s2))))))

(assert (forall ( (x LOC)
                  (s1 (set LOC))
                  (s2 (set LOC)) )
                (= (elem@@LOC x
                              (intersect@@LOC s1
                                              s2))
                   (and (elem@@LOC x
                                   s1)
                        (elem@@LOC x
                                   s2)))))

(assert (forall ( (x LOC)
                  (s1 (set LOC))
                  (s2 (set LOC)) )
                (= (elem@@LOC x
                              (bunion@@LOC s1
                                           s2))
                   (or (elem@@LOC x
                                  s1)
                       (elem@@LOC x
                                  s2)))))

(assert (forall ( (x LOC)
                  (s1 (set LOC))
                  (s2 (set LOC)) )
                (not (elem@@LOC x
                                empty-set@@LOC))))

(assert (forall ( (x TRAIN)
                  (y TRAIN) )
                (= (elem@@TRAIN x
                                (mk-set@@TRAIN y))
                   (= x
                      y))))

(assert (forall ( (x TRAIN)
                  (s1 (set TRAIN))
                  (s2 (set TRAIN)) )
                (= (elem@@TRAIN x
                                (set-diff@@TRAIN s1
                                                 s2))
                   (and (elem@@TRAIN x
                                     s1)
                        (not (elem@@TRAIN x
                                          s2))))))

(assert (forall ( (x TRAIN)
                  (s1 (set TRAIN))
                  (s2 (set TRAIN)) )
                (= (elem@@TRAIN x
                                (intersect@@TRAIN s1
                                                  s2))
                   (and (elem@@TRAIN x
                                     s1)
                        (elem@@TRAIN x
                                     s2)))))

(assert (forall ( (x TRAIN)
                  (s1 (set TRAIN))
                  (s2 (set TRAIN)) )
                (= (elem@@TRAIN x
                                (bunion@@TRAIN s1
                                               s2))
                   (or (elem@@TRAIN x
                                    s1)
                       (elem@@TRAIN x
                                    s2)))))

(assert (forall ( (x TRAIN)
                  (s1 (set TRAIN))
                  (s2 (set TRAIN)) )
                (not (elem@@TRAIN x
                                  empty-set@@TRAIN))))

(assert (forall ( (f1 (pfun TRAIN
                            BLK))
                  (f2 (pfun TRAIN
                            BLK)) )
                (= (bunion@@TRAIN (dom@@TRAIN@@BLK f1)
                                  (dom@@TRAIN@@BLK f2))
                   (dom@@TRAIN@@BLK (ovl@@TRAIN@@BLK f1
                                                     f2)))))

(assert (= (dom@@TRAIN@@BLK empty-fun@@TRAIN@@BLK)
           empty-set@@TRAIN))

(assert (forall ( (x TRAIN)
                  (y BLK) )
                (= (dom@@TRAIN@@BLK (mk-fun@@TRAIN@@BLK x
                                                        y))
                   (mk-set@@TRAIN x))))

(assert (forall ( (f1 (pfun TRAIN
                            BLK))
                  (f2 (pfun TRAIN
                            BLK))
                  (x TRAIN) )
                (=> (elem@@TRAIN x
                                 (dom@@TRAIN@@BLK f2))
                    (= (select (ovl@@TRAIN@@BLK f1
                                                f2)
                               x)
                       (select f2
                               x)))))

(assert (forall ( (f1 (pfun TRAIN
                            BLK))
                  (f2 (pfun TRAIN
                            BLK))
                  (x TRAIN) )
                (=> (elem@@TRAIN x
                                 (set-diff@@TRAIN (dom@@TRAIN@@BLK f1)
                                                  (dom@@TRAIN@@BLK f2)))
                    (= (select (ovl@@TRAIN@@BLK f1
                                                f2)
                               x)
                       (select f1
                               x)))))

(assert (forall ( (f1 (pfun TRAIN
                            BLK))
                  (s1 (set TRAIN)) )
                (= (dom@@TRAIN@@BLK (dom-subt@@TRAIN@@BLK s1
                                                          f1))
                   (set-diff@@TRAIN (dom@@TRAIN@@BLK f1)
                                    s1))))

(assert (forall ( (x TRAIN)
                  (y BLK) )
                (= (select (mk-fun@@TRAIN@@BLK x
                                               y)
                           x)
                   y)))

(assert (forall ( (f1 (pfun TRAIN
                            BLK))
                  (s1 (set TRAIN))
                  (x TRAIN) )
                (=> (elem@@TRAIN x
                                 (intersect@@TRAIN s1
                                                   (dom@@TRAIN@@BLK f1)))
                    (= (select (dom-rest@@TRAIN@@BLK s1
                                                     f1)
                               x)
                       (select f1
                               x)))))

(assert (forall ( (f1 (pfun TRAIN
                            BLK))
                  (s1 (set TRAIN))
                  (x TRAIN) )
                (=> (elem@@TRAIN x
                                 (set-diff@@TRAIN (dom@@TRAIN@@BLK f1)
                                                  s1))
                    (= (select (dom-subt@@TRAIN@@BLK s1
                                                     f1)
                               x)
                       (select f1
                               x)))))

(assert (forall ( (x (pfun TRAIN
                           BLK))
                  (y (pfun TRAIN
                           BLK)) )
                (= (elem@Open@@pfun@@TRAIN@@BLK@Close x
                                                      (mk-set@Open@@pfun@@TRAIN@@BLK@Close y))
                   (= x
                      y))))

(assert (forall ( (x (pfun TRAIN
                           BLK))
                  (s1 (set (pfun TRAIN
                                 BLK)))
                  (s2 (set (pfun TRAIN
                                 BLK))) )
                (= (elem@Open@@pfun@@TRAIN@@BLK@Close x
                                                      (set-diff@Open@@pfun@@TRAIN@@BLK@Close s1
                                                                                             s2))
                   (and (elem@Open@@pfun@@TRAIN@@BLK@Close x
                                                           s1)
                        (not (elem@Open@@pfun@@TRAIN@@BLK@Close x
                                                                s2))))))

(assert (forall ( (x (pfun TRAIN
                           BLK))
                  (s1 (set (pfun TRAIN
                                 BLK)))
                  (s2 (set (pfun TRAIN
                                 BLK))) )
                (= (elem@Open@@pfun@@TRAIN@@BLK@Close x
                                                      (intersect@Open@@pfun@@TRAIN@@BLK@Close s1
                                                                                              s2))
                   (and (elem@Open@@pfun@@TRAIN@@BLK@Close x
                                                           s1)
                        (elem@Open@@pfun@@TRAIN@@BLK@Close x
                                                           s2)))))

(assert (forall ( (x (pfun TRAIN
                           BLK))
                  (s1 (set (pfun TRAIN
                                 BLK)))
                  (s2 (set (pfun TRAIN
                                 BLK))) )
                (= (elem@Open@@pfun@@TRAIN@@BLK@Close x
                                                      (bunion@Open@@pfun@@TRAIN@@BLK@Close s1
                                                                                           s2))
                   (or (elem@Open@@pfun@@TRAIN@@BLK@Close x
                                                          s1)
                       (elem@Open@@pfun@@TRAIN@@BLK@Close x
                                                          s2)))))

(assert (forall ( (x (pfun TRAIN
                           BLK))
                  (s1 (set (pfun TRAIN
                                 BLK)))
                  (s2 (set (pfun TRAIN
                                 BLK))) )
                (not (elem@Open@@pfun@@TRAIN@@BLK@Close x
                                                        empty-set@Open@@pfun@@TRAIN@@BLK@Close))))

(assert (and (not (= ent
                     ext))
             (not (elem@@BLK ent
                             PLF))
             (not (elem@@BLK ext
                             PLF))))

(assert (forall ( (p BLK) )
                (=> true
                    (= (not (= p
                               ext))
                       (elem@@BLK p
                                  (bunion@@BLK (mk-set@@BLK ent)
                                               PLF))))))

(assert (forall ( (p BLK) )
                (=> true
                    (= (not (= p
                               ent))
                       (elem@@BLK p
                                  (bunion@@BLK (mk-set@@BLK ext)
                                               PLF))))))

(assert (forall ( (p BLK) )
                (=> true
                    (= (or (= p
                              ent)
                           (= p
                              ext))
                       (not (elem@@BLK p
                                       PLF))))))

(assert (= BLK
           (bunion@@BLK (bunion@@BLK (mk-set@@BLK ent)
                                     (mk-set@@BLK ext))
                        PLF)))

(assert (not (= (dom@@TRAIN@@BLK (dom-subt@@TRAIN@@BLK (mk-set@@TRAIN t)
                                                       loc))
                (dom@@TRAIN@@BLK loc@prime))))

(check-sat-using (or-else (then qe smt) (then skip smt) (then (using-params simplify :expand-power true) smt)))

(pop)
(echo "> train0/leave/SCH")
(push)
(declare-sort BLK 0)
(declare-sort LOC 0)
(declare-sort TRAIN 0)
(define-sort pfun (a b) (Array a b))
(declare-sort set 1)
(declare-const PLF (set BLK))
(declare-const BLK (set BLK))
(declare-const LOC (set LOC))
(declare-const TRAIN (set TRAIN))
(declare-const ent BLK)
(declare-const ext BLK)
(declare-const in (set TRAIN))
(declare-const loc (pfun TRAIN BLK))
(declare-const p BLK)
(declare-const q BLK)
(declare-const t TRAIN)
(declare-const t_0 TRAIN)
(declare-const t_1 TRAIN)
(declare-const t_2 TRAIN)
(declare-const t_3 TRAIN)
(declare-fun apply@@TRAIN@@BLK ((pfun TRAIN BLK) TRAIN) BLK)
(declare-fun dom-rest@@TRAIN@@BLK ((set TRAIN) (pfun TRAIN BLK)) (pfun TRAIN BLK))
(declare-fun dom-subt@@TRAIN@@BLK ((set TRAIN) (pfun TRAIN BLK)) (pfun TRAIN BLK))
(declare-fun dom@@TRAIN@@BLK ((pfun TRAIN BLK)) (set TRAIN))
(declare-fun elem@@BLK (BLK (set BLK)) Bool)
(declare-fun elem@@LOC (LOC (set LOC)) Bool)
(declare-fun elem@@TRAIN (TRAIN (set TRAIN)) Bool)
(declare-fun elem@Open@@pfun@@TRAIN@@BLK@Close ((pfun TRAIN BLK) (set (pfun TRAIN BLK))) Bool)
(declare-fun empty-fun@@TRAIN@@BLK () (pfun TRAIN BLK))
(declare-fun empty-set@@BLK () (set BLK))
(declare-fun empty-set@@LOC () (set LOC))
(declare-fun empty-set@@TRAIN () (set TRAIN))
(declare-fun empty-set@Open@@pfun@@TRAIN@@BLK@Close () (set (pfun TRAIN BLK)))
(declare-fun intersect@@BLK ((set BLK) (set BLK)) (set BLK))
(declare-fun intersect@@LOC ((set LOC) (set LOC)) (set LOC))
(declare-fun intersect@@TRAIN ((set TRAIN) (set TRAIN)) (set TRAIN))
(declare-fun intersect@Open@@pfun@@TRAIN@@BLK@Close ((set (pfun TRAIN BLK)) (set (pfun TRAIN BLK))) (set (pfun TRAIN BLK)))
(declare-fun mk-fun@@TRAIN@@BLK (TRAIN BLK) (pfun TRAIN BLK))
(declare-fun mk-set@@BLK (BLK) (set BLK))
(declare-fun mk-set@@LOC (LOC) (set LOC))
(declare-fun mk-set@@TRAIN (TRAIN) (set TRAIN))
(declare-fun mk-set@Open@@pfun@@TRAIN@@BLK@Close ((pfun TRAIN BLK)) (set (pfun TRAIN BLK)))
(declare-fun ovl@@TRAIN@@BLK ((pfun TRAIN BLK) (pfun TRAIN BLK)) (pfun TRAIN BLK))
(declare-fun set-diff@@BLK ((set BLK) (set BLK)) (set BLK))
(declare-fun set-diff@@LOC ((set LOC) (set LOC)) (set LOC))
(declare-fun set-diff@@TRAIN ((set TRAIN) (set TRAIN)) (set TRAIN))
(declare-fun set-diff@Open@@pfun@@TRAIN@@BLK@Close ((set (pfun TRAIN BLK)) (set (pfun TRAIN BLK))) (set (pfun TRAIN BLK)))
(declare-fun tfun@@TRAIN@@BLK ((set TRAIN) (set BLK)) (set (pfun TRAIN BLK)))
(declare-fun bunion@@BLK ((set BLK) (set BLK)) (set BLK))
(declare-fun bunion@@LOC ((set LOC) (set LOC)) (set LOC))
(declare-fun bunion@@TRAIN ((set TRAIN) (set TRAIN)) (set TRAIN))
(declare-fun bunion@Open@@pfun@@TRAIN@@BLK@Close ((set (pfun TRAIN BLK)) (set (pfun TRAIN BLK))) (set (pfun TRAIN BLK)))
(assert (forall ( (x BLK)
                  (y BLK) )
                (= (elem@@BLK x
                              (mk-set@@BLK y))
                   (= x
                      y))))

(assert (forall ( (x BLK)
                  (s1 (set BLK))
                  (s2 (set BLK)) )
                (= (elem@@BLK x
                              (set-diff@@BLK s1
                                             s2))
                   (and (elem@@BLK x
                                   s1)
                        (not (elem@@BLK x
                                        s2))))))

(assert (forall ( (x BLK)
                  (s1 (set BLK))
                  (s2 (set BLK)) )
                (= (elem@@BLK x
                              (intersect@@BLK s1
                                              s2))
                   (and (elem@@BLK x
                                   s1)
                        (elem@@BLK x
                                   s2)))))

(assert (forall ( (x BLK)
                  (s1 (set BLK))
                  (s2 (set BLK)) )
                (= (elem@@BLK x
                              (bunion@@BLK s1
                                           s2))
                   (or (elem@@BLK x
                                  s1)
                       (elem@@BLK x
                                  s2)))))

(assert (forall ( (x BLK)
                  (s1 (set BLK))
                  (s2 (set BLK)) )
                (not (elem@@BLK x
                                empty-set@@BLK))))

(assert (forall ( (x LOC)
                  (y LOC) )
                (= (elem@@LOC x
                              (mk-set@@LOC y))
                   (= x
                      y))))

(assert (forall ( (x LOC)
                  (s1 (set LOC))
                  (s2 (set LOC)) )
                (= (elem@@LOC x
                              (set-diff@@LOC s1
                                             s2))
                   (and (elem@@LOC x
                                   s1)
                        (not (elem@@LOC x
                                        s2))))))

(assert (forall ( (x LOC)
                  (s1 (set LOC))
                  (s2 (set LOC)) )
                (= (elem@@LOC x
                              (intersect@@LOC s1
                                              s2))
                   (and (elem@@LOC x
                                   s1)
                        (elem@@LOC x
                                   s2)))))

(assert (forall ( (x LOC)
                  (s1 (set LOC))
                  (s2 (set LOC)) )
                (= (elem@@LOC x
                              (bunion@@LOC s1
                                           s2))
                   (or (elem@@LOC x
                                  s1)
                       (elem@@LOC x
                                  s2)))))

(assert (forall ( (x LOC)
                  (s1 (set LOC))
                  (s2 (set LOC)) )
                (not (elem@@LOC x
                                empty-set@@LOC))))

(assert (forall ( (x TRAIN)
                  (y TRAIN) )
                (= (elem@@TRAIN x
                                (mk-set@@TRAIN y))
                   (= x
                      y))))

(assert (forall ( (x TRAIN)
                  (s1 (set TRAIN))
                  (s2 (set TRAIN)) )
                (= (elem@@TRAIN x
                                (set-diff@@TRAIN s1
                                                 s2))
                   (and (elem@@TRAIN x
                                     s1)
                        (not (elem@@TRAIN x
                                          s2))))))

(assert (forall ( (x TRAIN)
                  (s1 (set TRAIN))
                  (s2 (set TRAIN)) )
                (= (elem@@TRAIN x
                                (intersect@@TRAIN s1
                                                  s2))
                   (and (elem@@TRAIN x
                                     s1)
                        (elem@@TRAIN x
                                     s2)))))

(assert (forall ( (x TRAIN)
                  (s1 (set TRAIN))
                  (s2 (set TRAIN)) )
                (= (elem@@TRAIN x
                                (bunion@@TRAIN s1
                                               s2))
                   (or (elem@@TRAIN x
                                    s1)
                       (elem@@TRAIN x
                                    s2)))))

(assert (forall ( (x TRAIN)
                  (s1 (set TRAIN))
                  (s2 (set TRAIN)) )
                (not (elem@@TRAIN x
                                  empty-set@@TRAIN))))

(assert (forall ( (f1 (pfun TRAIN
                            BLK))
                  (f2 (pfun TRAIN
                            BLK)) )
                (= (bunion@@TRAIN (dom@@TRAIN@@BLK f1)
                                  (dom@@TRAIN@@BLK f2))
                   (dom@@TRAIN@@BLK (ovl@@TRAIN@@BLK f1
                                                     f2)))))

(assert (= (dom@@TRAIN@@BLK empty-fun@@TRAIN@@BLK)
           empty-set@@TRAIN))

(assert (forall ( (x TRAIN)
                  (y BLK) )
                (= (dom@@TRAIN@@BLK (mk-fun@@TRAIN@@BLK x
                                                        y))
                   (mk-set@@TRAIN x))))

(assert (forall ( (f1 (pfun TRAIN
                            BLK))
                  (f2 (pfun TRAIN
                            BLK))
                  (x TRAIN) )
                (=> (elem@@TRAIN x
                                 (dom@@TRAIN@@BLK f2))
                    (= (select (ovl@@TRAIN@@BLK f1
                                                f2)
                               x)
                       (select f2
                               x)))))

(assert (forall ( (f1 (pfun TRAIN
                            BLK))
                  (f2 (pfun TRAIN
                            BLK))
                  (x TRAIN) )
                (=> (elem@@TRAIN x
                                 (set-diff@@TRAIN (dom@@TRAIN@@BLK f1)
                                                  (dom@@TRAIN@@BLK f2)))
                    (= (select (ovl@@TRAIN@@BLK f1
                                                f2)
                               x)
                       (select f1
                               x)))))

(assert (forall ( (f1 (pfun TRAIN
                            BLK))
                  (s1 (set TRAIN)) )
                (= (dom@@TRAIN@@BLK (dom-subt@@TRAIN@@BLK s1
                                                          f1))
                   (set-diff@@TRAIN (dom@@TRAIN@@BLK f1)
                                    s1))))

(assert (forall ( (x TRAIN)
                  (y BLK) )
                (= (select (mk-fun@@TRAIN@@BLK x
                                               y)
                           x)
                   y)))

(assert (forall ( (f1 (pfun TRAIN
                            BLK))
                  (s1 (set TRAIN))
                  (x TRAIN) )
                (=> (elem@@TRAIN x
                                 (intersect@@TRAIN s1
                                                   (dom@@TRAIN@@BLK f1)))
                    (= (select (dom-rest@@TRAIN@@BLK s1
                                                     f1)
                               x)
                       (select f1
                               x)))))

(assert (forall ( (f1 (pfun TRAIN
                            BLK))
                  (s1 (set TRAIN))
                  (x TRAIN) )
                (=> (elem@@TRAIN x
                                 (set-diff@@TRAIN (dom@@TRAIN@@BLK f1)
                                                  s1))
                    (= (select (dom-subt@@TRAIN@@BLK s1
                                                     f1)
                               x)
                       (select f1
                               x)))))

(assert (forall ( (x (pfun TRAIN
                           BLK))
                  (y (pfun TRAIN
                           BLK)) )
                (= (elem@Open@@pfun@@TRAIN@@BLK@Close x
                                                      (mk-set@Open@@pfun@@TRAIN@@BLK@Close y))
                   (= x
                      y))))

(assert (forall ( (x (pfun TRAIN
                           BLK))
                  (s1 (set (pfun TRAIN
                                 BLK)))
                  (s2 (set (pfun TRAIN
                                 BLK))) )
                (= (elem@Open@@pfun@@TRAIN@@BLK@Close x
                                                      (set-diff@Open@@pfun@@TRAIN@@BLK@Close s1
                                                                                             s2))
                   (and (elem@Open@@pfun@@TRAIN@@BLK@Close x
                                                           s1)
                        (not (elem@Open@@pfun@@TRAIN@@BLK@Close x
                                                                s2))))))

(assert (forall ( (x (pfun TRAIN
                           BLK))
                  (s1 (set (pfun TRAIN
                                 BLK)))
                  (s2 (set (pfun TRAIN
                                 BLK))) )
                (= (elem@Open@@pfun@@TRAIN@@BLK@Close x
                                                      (intersect@Open@@pfun@@TRAIN@@BLK@Close s1
                                                                                              s2))
                   (and (elem@Open@@pfun@@TRAIN@@BLK@Close x
                                                           s1)
                        (elem@Open@@pfun@@TRAIN@@BLK@Close x
                                                           s2)))))

(assert (forall ( (x (pfun TRAIN
                           BLK))
                  (s1 (set (pfun TRAIN
                                 BLK)))
                  (s2 (set (pfun TRAIN
                                 BLK))) )
                (= (elem@Open@@pfun@@TRAIN@@BLK@Close x
                                                      (bunion@Open@@pfun@@TRAIN@@BLK@Close s1
                                                                                           s2))
                   (or (elem@Open@@pfun@@TRAIN@@BLK@Close x
                                                          s1)
                       (elem@Open@@pfun@@TRAIN@@BLK@Close x
                                                          s2)))))

(assert (forall ( (x (pfun TRAIN
                           BLK))
                  (s1 (set (pfun TRAIN
                                 BLK)))
                  (s2 (set (pfun TRAIN
                                 BLK))) )
                (not (elem@Open@@pfun@@TRAIN@@BLK@Close x
                                                        empty-set@Open@@pfun@@TRAIN@@BLK@Close))))

(assert (and (not (= ent
                     ext))
             (not (elem@@BLK ent
                             PLF))
             (not (elem@@BLK ext
                             PLF))))

(assert (forall ( (p BLK) )
                (=> true
                    (= (not (= p
                               ext))
                       (elem@@BLK p
                                  (bunion@@BLK (mk-set@@BLK ent)
                                               PLF))))))

(assert (forall ( (p BLK) )
                (=> true
                    (= (not (= p
                               ent))
                       (elem@@BLK p
                                  (bunion@@BLK (mk-set@@BLK ext)
                                               PLF))))))

(assert (forall ( (p BLK) )
                (=> true
                    (= (or (= p
                              ent)
                           (= p
                              ext))
                       (not (elem@@BLK p
                                       PLF))))))

(assert (= BLK
           (bunion@@BLK (bunion@@BLK (mk-set@@BLK ent)
                                     (mk-set@@BLK ext))
                        PLF)))

(assert (forall ( (t TRAIN) )
                (=> (elem@@TRAIN t
                                 in)
                    (elem@@BLK (select loc
                                       t)
                               BLK))))

(assert (= (dom@@TRAIN@@BLK loc)
           in))

(assert (elem@@TRAIN t
                     in))

(assert (not (and (= (select loc
                             t)
                     ext)
                  (elem@@TRAIN t
                               in))))

(check-sat-using (or-else (then qe smt) (then skip smt) (then (using-params simplify :expand-power true) smt)))

(pop)
(echo "> train0/leave/TR/tr0")
(push)
(declare-sort BLK 0)
(declare-sort LOC 0)
(declare-sort TRAIN 0)
(define-sort pfun (a b) (Array a b))
(declare-sort set 1)
(declare-const PLF (set BLK))
(declare-const BLK (set BLK))
(declare-const LOC (set LOC))
(declare-const TRAIN (set TRAIN))
(declare-const ent BLK)
(declare-const ext BLK)
(declare-const in (set TRAIN))
(declare-const in@prime (set TRAIN))
(declare-const loc (pfun TRAIN BLK))
(declare-const loc@prime (pfun TRAIN BLK))
(declare-const p BLK)
(declare-const q BLK)
(declare-const t TRAIN)
(declare-const t_0 TRAIN)
(declare-const t_1 TRAIN)
(declare-const t_2 TRAIN)
(declare-const t_3 TRAIN)
(declare-fun apply@@TRAIN@@BLK ((pfun TRAIN BLK) TRAIN) BLK)
(declare-fun dom-rest@@TRAIN@@BLK ((set TRAIN) (pfun TRAIN BLK)) (pfun TRAIN BLK))
(declare-fun dom-subt@@TRAIN@@BLK ((set TRAIN) (pfun TRAIN BLK)) (pfun TRAIN BLK))
(declare-fun dom@@TRAIN@@BLK ((pfun TRAIN BLK)) (set TRAIN))
(declare-fun elem@@BLK (BLK (set BLK)) Bool)
(declare-fun elem@@LOC (LOC (set LOC)) Bool)
(declare-fun elem@@TRAIN (TRAIN (set TRAIN)) Bool)
(declare-fun elem@Open@@pfun@@TRAIN@@BLK@Close ((pfun TRAIN BLK) (set (pfun TRAIN BLK))) Bool)
(declare-fun empty-fun@@TRAIN@@BLK () (pfun TRAIN BLK))
(declare-fun empty-set@@BLK () (set BLK))
(declare-fun empty-set@@LOC () (set LOC))
(declare-fun empty-set@@TRAIN () (set TRAIN))
(declare-fun empty-set@Open@@pfun@@TRAIN@@BLK@Close () (set (pfun TRAIN BLK)))
(declare-fun intersect@@BLK ((set BLK) (set BLK)) (set BLK))
(declare-fun intersect@@LOC ((set LOC) (set LOC)) (set LOC))
(declare-fun intersect@@TRAIN ((set TRAIN) (set TRAIN)) (set TRAIN))
(declare-fun intersect@Open@@pfun@@TRAIN@@BLK@Close ((set (pfun TRAIN BLK)) (set (pfun TRAIN BLK))) (set (pfun TRAIN BLK)))
(declare-fun mk-fun@@TRAIN@@BLK (TRAIN BLK) (pfun TRAIN BLK))
(declare-fun mk-set@@BLK (BLK) (set BLK))
(declare-fun mk-set@@LOC (LOC) (set LOC))
(declare-fun mk-set@@TRAIN (TRAIN) (set TRAIN))
(declare-fun mk-set@Open@@pfun@@TRAIN@@BLK@Close ((pfun TRAIN BLK)) (set (pfun TRAIN BLK)))
(declare-fun ovl@@TRAIN@@BLK ((pfun TRAIN BLK) (pfun TRAIN BLK)) (pfun TRAIN BLK))
(declare-fun set-diff@@BLK ((set BLK) (set BLK)) (set BLK))
(declare-fun set-diff@@LOC ((set LOC) (set LOC)) (set LOC))
(declare-fun set-diff@@TRAIN ((set TRAIN) (set TRAIN)) (set TRAIN))
(declare-fun set-diff@Open@@pfun@@TRAIN@@BLK@Close ((set (pfun TRAIN BLK)) (set (pfun TRAIN BLK))) (set (pfun TRAIN BLK)))
(declare-fun tfun@@TRAIN@@BLK ((set TRAIN) (set BLK)) (set (pfun TRAIN BLK)))
(declare-fun bunion@@BLK ((set BLK) (set BLK)) (set BLK))
(declare-fun bunion@@LOC ((set LOC) (set LOC)) (set LOC))
(declare-fun bunion@@TRAIN ((set TRAIN) (set TRAIN)) (set TRAIN))
(declare-fun bunion@Open@@pfun@@TRAIN@@BLK@Close ((set (pfun TRAIN BLK)) (set (pfun TRAIN BLK))) (set (pfun TRAIN BLK)))
(assert (forall ( (x BLK)
                  (y BLK) )
                (= (elem@@BLK x
                              (mk-set@@BLK y))
                   (= x
                      y))))

(assert (forall ( (x BLK)
                  (s1 (set BLK))
                  (s2 (set BLK)) )
                (= (elem@@BLK x
                              (set-diff@@BLK s1
                                             s2))
                   (and (elem@@BLK x
                                   s1)
                        (not (elem@@BLK x
                                        s2))))))

(assert (forall ( (x BLK)
                  (s1 (set BLK))
                  (s2 (set BLK)) )
                (= (elem@@BLK x
                              (intersect@@BLK s1
                                              s2))
                   (and (elem@@BLK x
                                   s1)
                        (elem@@BLK x
                                   s2)))))

(assert (forall ( (x BLK)
                  (s1 (set BLK))
                  (s2 (set BLK)) )
                (= (elem@@BLK x
                              (bunion@@BLK s1
                                           s2))
                   (or (elem@@BLK x
                                  s1)
                       (elem@@BLK x
                                  s2)))))

(assert (forall ( (x BLK)
                  (s1 (set BLK))
                  (s2 (set BLK)) )
                (not (elem@@BLK x
                                empty-set@@BLK))))

(assert (forall ( (x LOC)
                  (y LOC) )
                (= (elem@@LOC x
                              (mk-set@@LOC y))
                   (= x
                      y))))

(assert (forall ( (x LOC)
                  (s1 (set LOC))
                  (s2 (set LOC)) )
                (= (elem@@LOC x
                              (set-diff@@LOC s1
                                             s2))
                   (and (elem@@LOC x
                                   s1)
                        (not (elem@@LOC x
                                        s2))))))

(assert (forall ( (x LOC)
                  (s1 (set LOC))
                  (s2 (set LOC)) )
                (= (elem@@LOC x
                              (intersect@@LOC s1
                                              s2))
                   (and (elem@@LOC x
                                   s1)
                        (elem@@LOC x
                                   s2)))))

(assert (forall ( (x LOC)
                  (s1 (set LOC))
                  (s2 (set LOC)) )
                (= (elem@@LOC x
                              (bunion@@LOC s1
                                           s2))
                   (or (elem@@LOC x
                                  s1)
                       (elem@@LOC x
                                  s2)))))

(assert (forall ( (x LOC)
                  (s1 (set LOC))
                  (s2 (set LOC)) )
                (not (elem@@LOC x
                                empty-set@@LOC))))

(assert (forall ( (x TRAIN)
                  (y TRAIN) )
                (= (elem@@TRAIN x
                                (mk-set@@TRAIN y))
                   (= x
                      y))))

(assert (forall ( (x TRAIN)
                  (s1 (set TRAIN))
                  (s2 (set TRAIN)) )
                (= (elem@@TRAIN x
                                (set-diff@@TRAIN s1
                                                 s2))
                   (and (elem@@TRAIN x
                                     s1)
                        (not (elem@@TRAIN x
                                          s2))))))

(assert (forall ( (x TRAIN)
                  (s1 (set TRAIN))
                  (s2 (set TRAIN)) )
                (= (elem@@TRAIN x
                                (intersect@@TRAIN s1
                                                  s2))
                   (and (elem@@TRAIN x
                                     s1)
                        (elem@@TRAIN x
                                     s2)))))

(assert (forall ( (x TRAIN)
                  (s1 (set TRAIN))
                  (s2 (set TRAIN)) )
                (= (elem@@TRAIN x
                                (bunion@@TRAIN s1
                                               s2))
                   (or (elem@@TRAIN x
                                    s1)
                       (elem@@TRAIN x
                                    s2)))))

(assert (forall ( (x TRAIN)
                  (s1 (set TRAIN))
                  (s2 (set TRAIN)) )
                (not (elem@@TRAIN x
                                  empty-set@@TRAIN))))

(assert (forall ( (f1 (pfun TRAIN
                            BLK))
                  (f2 (pfun TRAIN
                            BLK)) )
                (= (bunion@@TRAIN (dom@@TRAIN@@BLK f1)
                                  (dom@@TRAIN@@BLK f2))
                   (dom@@TRAIN@@BLK (ovl@@TRAIN@@BLK f1
                                                     f2)))))

(assert (= (dom@@TRAIN@@BLK empty-fun@@TRAIN@@BLK)
           empty-set@@TRAIN))

(assert (forall ( (x TRAIN)
                  (y BLK) )
                (= (dom@@TRAIN@@BLK (mk-fun@@TRAIN@@BLK x
                                                        y))
                   (mk-set@@TRAIN x))))

(assert (forall ( (f1 (pfun TRAIN
                            BLK))
                  (f2 (pfun TRAIN
                            BLK))
                  (x TRAIN) )
                (=> (elem@@TRAIN x
                                 (dom@@TRAIN@@BLK f2))
                    (= (select (ovl@@TRAIN@@BLK f1
                                                f2)
                               x)
                       (select f2
                               x)))))

(assert (forall ( (f1 (pfun TRAIN
                            BLK))
                  (f2 (pfun TRAIN
                            BLK))
                  (x TRAIN) )
                (=> (elem@@TRAIN x
                                 (set-diff@@TRAIN (dom@@TRAIN@@BLK f1)
                                                  (dom@@TRAIN@@BLK f2)))
                    (= (select (ovl@@TRAIN@@BLK f1
                                                f2)
                               x)
                       (select f1
                               x)))))

(assert (forall ( (f1 (pfun TRAIN
                            BLK))
                  (s1 (set TRAIN)) )
                (= (dom@@TRAIN@@BLK (dom-subt@@TRAIN@@BLK s1
                                                          f1))
                   (set-diff@@TRAIN (dom@@TRAIN@@BLK f1)
                                    s1))))

(assert (forall ( (x TRAIN)
                  (y BLK) )
                (= (select (mk-fun@@TRAIN@@BLK x
                                               y)
                           x)
                   y)))

(assert (forall ( (f1 (pfun TRAIN
                            BLK))
                  (s1 (set TRAIN))
                  (x TRAIN) )
                (=> (elem@@TRAIN x
                                 (intersect@@TRAIN s1
                                                   (dom@@TRAIN@@BLK f1)))
                    (= (select (dom-rest@@TRAIN@@BLK s1
                                                     f1)
                               x)
                       (select f1
                               x)))))

(assert (forall ( (f1 (pfun TRAIN
                            BLK))
                  (s1 (set TRAIN))
                  (x TRAIN) )
                (=> (elem@@TRAIN x
                                 (set-diff@@TRAIN (dom@@TRAIN@@BLK f1)
                                                  s1))
                    (= (select (dom-subt@@TRAIN@@BLK s1
                                                     f1)
                               x)
                       (select f1
                               x)))))

(assert (forall ( (x (pfun TRAIN
                           BLK))
                  (y (pfun TRAIN
                           BLK)) )
                (= (elem@Open@@pfun@@TRAIN@@BLK@Close x
                                                      (mk-set@Open@@pfun@@TRAIN@@BLK@Close y))
                   (= x
                      y))))

(assert (forall ( (x (pfun TRAIN
                           BLK))
                  (s1 (set (pfun TRAIN
                                 BLK)))
                  (s2 (set (pfun TRAIN
                                 BLK))) )
                (= (elem@Open@@pfun@@TRAIN@@BLK@Close x
                                                      (set-diff@Open@@pfun@@TRAIN@@BLK@Close s1
                                                                                             s2))
                   (and (elem@Open@@pfun@@TRAIN@@BLK@Close x
                                                           s1)
                        (not (elem@Open@@pfun@@TRAIN@@BLK@Close x
                                                                s2))))))

(assert (forall ( (x (pfun TRAIN
                           BLK))
                  (s1 (set (pfun TRAIN
                                 BLK)))
                  (s2 (set (pfun TRAIN
                                 BLK))) )
                (= (elem@Open@@pfun@@TRAIN@@BLK@Close x
                                                      (intersect@Open@@pfun@@TRAIN@@BLK@Close s1
                                                                                              s2))
                   (and (elem@Open@@pfun@@TRAIN@@BLK@Close x
                                                           s1)
                        (elem@Open@@pfun@@TRAIN@@BLK@Close x
                                                           s2)))))

(assert (forall ( (x (pfun TRAIN
                           BLK))
                  (s1 (set (pfun TRAIN
                                 BLK)))
                  (s2 (set (pfun TRAIN
                                 BLK))) )
                (= (elem@Open@@pfun@@TRAIN@@BLK@Close x
                                                      (bunion@Open@@pfun@@TRAIN@@BLK@Close s1
                                                                                           s2))
                   (or (elem@Open@@pfun@@TRAIN@@BLK@Close x
                                                          s1)
                       (elem@Open@@pfun@@TRAIN@@BLK@Close x
                                                          s2)))))

(assert (forall ( (x (pfun TRAIN
                           BLK))
                  (s1 (set (pfun TRAIN
                                 BLK)))
                  (s2 (set (pfun TRAIN
                                 BLK))) )
                (not (elem@Open@@pfun@@TRAIN@@BLK@Close x
                                                        empty-set@Open@@pfun@@TRAIN@@BLK@Close))))

(assert (and (not (= ent
                     ext))
             (not (elem@@BLK ent
                             PLF))
             (not (elem@@BLK ext
                             PLF))))

(assert (forall ( (p BLK) )
                (=> true
                    (= (not (= p
                               ext))
                       (elem@@BLK p
                                  (bunion@@BLK (mk-set@@BLK ent)
                                               PLF))))))

(assert (forall ( (p BLK) )
                (=> true
                    (= (not (= p
                               ent))
                       (elem@@BLK p
                                  (bunion@@BLK (mk-set@@BLK ext)
                                               PLF))))))

(assert (forall ( (p BLK) )
                (=> true
                    (= (or (= p
                              ent)
                           (= p
                              ext))
                       (not (elem@@BLK p
                                       PLF))))))

(assert (= BLK
           (bunion@@BLK (bunion@@BLK (mk-set@@BLK ent)
                                     (mk-set@@BLK ext))
                        PLF)))

(assert (forall ( (t TRAIN) )
                (=> (elem@@TRAIN t
                                 in)
                    (elem@@BLK (select loc
                                       t)
                               BLK))))

(assert (= (dom@@TRAIN@@BLK loc)
           in))

(assert (not (exists ( (t@param TRAIN) )
                     (and (=> (elem@@TRAIN t
                                           in)
                              (elem@@TRAIN t@param
                                           in))
                          (=> (and (elem@@TRAIN t
                                                in)
                                   (elem@@TRAIN t@param
                                                in)
                                   (= (select loc
                                              t@param)
                                      ext)
                                   (elem@@TRAIN t@param
                                                in)
                                   (= in@prime
                                      (set-diff@@TRAIN in
                                                       (mk-set@@TRAIN t@param)))
                                   (= loc@prime
                                      (dom-subt@@TRAIN@@BLK (mk-set@@TRAIN t@param)
                                                            loc)))
                              (not (elem@@TRAIN t
                                                in@prime)))))))

(check-sat-using (or-else (then qe smt) (then skip smt) (then (using-params simplify :expand-power true) smt)))

(pop)
